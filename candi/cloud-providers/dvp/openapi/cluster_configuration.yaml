kind: DVPClusterConfiguration
apiVersions:
  - apiVersion: deckhouse.io/v1
    openAPISpec:
      type: object
      description: |
        Describes the configuration of a cloud cluster in Deckhouse Virtualization Platform (DVP).
        Used by the cloud provider if a cluster's control plane is hosted in the DVP cloud.
        Run the following command to change the configuration in a running cluster:
        ```shell
        kubectl -n d8-system exec -ti deploy/deckhouse -- deckhouse-controller edit provider-cluster-configuration
        ```
      x-doc-search: |
        ProviderClusterConfiguration
      x-examples:
        - apiVersion: deckhouse.io/v1
          kind: DVPClusterConfiguration
          layout: Standard
          sshPublicKey: "<SSH_PUBLIC_KEY>"
          zones:
            - zone-a
            - zone-b
            - zone-c
          region: r1
          masterNodeGroup:
            replicas: 3
            zones:
              - zone-a
              - zone-b
              - zone-c
            instanceClass:
              virtualMachine:
                cpu:
                  cores: 1
                  coreFraction: 100%
                memory:
                  size: 4Gi
                ipAddresses:
                  - 10.66.30.100
                  - 10.66.30.101
                  - 10.66.30.102
                additionalLabels:
                  additional-vm-label: label-value
                additionalAnnotations:
                  additional-vm-annotation: annotation-value
                tolerations:
                  - key: "dedicated.deckhouse.io"
                    operator: "Equal"
                    value: "system"
                nodeSelector:
                  beta.kubernetes.io/os: linux
              rootDisk:
                size: 10Gi
                storageClass: linstor-thin-r1
                image:
                  kind: ClusterVirtualImage
                  name: ubuntu-2204
              etcdDisk:
                size: 10Gi
                storageClass: linstor-thin-r1
          nodeGroups:
            - name: worker
              zones:
                - zone-a
                - zone-b
                - zone-c
              replicas: 1
              instanceClass:
                virtualMachine:
                  cpu:
                    cores: 4
                    coreFraction: 100%
                  memory:
                    size: 8Gi
                rootDisk:
                  size: 10Gi
                  image:
                    kind: ClusterVirtualImage
                    name: ubuntu-2204
          provider:
            kubeconfigDataBase64: ZXhhbXBsZQo=
            namespace: default

      additionalProperties: false
      required:
        [apiVersion, kind, masterNodeGroup, sshPublicKey, layout, provider]
      properties:
        apiVersion:
          type: string
          enum: [deckhouse.io/v1]
        kind:
          type: string
          enum: [DVPClusterConfiguration]
        sshPublicKey:
          type: string
          description: |
            A public key for accessing nodes.
        masterNodeGroup:
          type: object
          description: |
            The definition of the master's NodeGroup.
            > Caution! After changing the parameters of the section, you need to run `dhctl converge` for the changes to take effect.
          additionalProperties: false
          required: [replicas, instanceClass]
          properties:
            replicas:
              description: |
                The number of master nodes to create. It is important to have an odd number of masters to ensure a quorum.
              type: integer
              minimum: 1

            zones:
              type: array
              description: |
                A set of zones in which nodes can be created.
                To use this setting, the `topology.kubernetes.io/zone` label must be set on DVP nodes.
                Read [more](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesioregion) about topological labels.
                > Caution! To set the required label for a DVP node, follow the NodeGroup [documentation](https://deckhouse.io/documentation/v1/modules/040-node-manager/cr.html#nodegroup-v1-spec-nodetemplate-labels).
              items:
                type: string
              uniqueItems: true
            instanceClass:
              type: object
              description: |
                Virtual machine and its disks settings for the created master node.
              additionalProperties: false
              required: [virtualMachine, rootDisk, etcdDisk]
              properties:
                virtualMachine: &instanceClassVirtualMachine
                  type: object
                  description: |
                    Virtual machine settings for the created master node.
                  required: [cpu, memory]
                  properties:
                    cpu:
                      description: |
                        CPU setting for the virtual machine.
                      type: object
                      additionalProperties: false
                      required: [cores]
                      properties:
                        cores:
                          description: |
                            Number of CPU cores for the virtual machine.
                          minimum: 1
                          format: int32
                          type: integer
                        coreFraction:
                          type: string
                          default: "100%"
                          enum: ["5%", "10%", "25%", "50%", "100%"]
                          description: |
                            Guaranteed share of CPU that will be allocated to the virtual machine. Specified as a percentage.
                            Supported values: `5%`, `10%`, `25%`, `50%`, `100%`.
                          example: "100%"
                    memory:
                      type: object
                      description: |
                        Specifies the memory settings for the virtual machine.
                      required:
                        - size
                      properties:
                        size:
                          type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          description: |
                            Amount of memory resources allowed for the virtual machine.
                          example: 4Gi
                    bootloader:
                      type: string
                      enum:
                        - BIOS
                        - EFI
                        - EFIWithSecureBoot
                      default: EFI
                      description: >
                        Defines a bootloader for a virtual machine.

                        * `BIOS`: Use BIOS;
                        * `EFI`: Use Unified Extensible Firmware (EFI/UEFI);
                        * `EFIWithSecureBoot`: Use UEFI/EFI with Secure Boot support.
                    ipAddresses:
                      type: array
                      description: |
                        Static IP addresses to be assigned to the network interfaces of the virtual machines. The number of addresses must match the number of replicas being created â€” each IP address will be assigned to a specific virtual machine replica.
                        For example, if 3 replicas are specified and the IP addresses provided are: ip1, ip2, and ip3, then ip1 will be assigned to the first replica, ip2 to the second, and ip3 to the third.
                        > Caution! These addresses must belong to the address range specified in the virtualization module configuration in the virtualMachineCIDRs parameter.
                      items:
                        type: string
                        pattern: '^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(Auto)$'

                    additionalLabels:
                      type: object
                      x-doc-example: |
                        ```yaml
                        cluster-owner: user
                        ```
                      description: |
                        Additional labels for virtual machine resource.
                      additionalProperties:
                        type: string

                    additionalAnnotations:
                      type: object
                      x-doc-example: |
                        ```yaml
                        cluster-owner: user
                        ```
                      description: |
                        Additional annotations for virtual machine resource.
                      additionalProperties:
                        type: string

                    nodeSelector:
                      additionalProperties:
                        type: string
                      description: |
                        Allows virtual machines to be assigned to specified DVP nodes.
                        [The same](https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes//) as in the pods `spec.nodeSelector` parameter in Kubernetes;
                      type: object

                    priorityClassName:
                      description: |
                        [The same](https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/)  as in the pods `spec.priorityClassName` parameter in Kubernetes;
                      type: string

                    tolerations:
                      type: array
                      description: |
                        Allows you to set tolerations for virtual machines for a DVP node.
                        [The same](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) as in the pods `spec.tolerations` parameter in Kubernetes;
                      items:
                        type: object
                        description: ""
                        properties:
                          effect:
                            type: string
                            description: ""
                          key:
                            type: string
                            description: ""
                          operator:
                            type: string
                            description: ""
                          tolerationSeconds:
                            type: integer
                            description: ""
                            format: int64
                          value:
                            type: string
                            description: ""

                rootDisk: &instanceClassRootDisk
                  type: object
                  description: |
                    Specifies settings for the root disk of the virtual machine.
                  required:
                    - size
                    - image
                  properties:
                    size:
                      type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      description: |
                        Root disk size.
                      example: 10Gi
                    storageClass:
                      type: string
                      description: |
                        The name of the existing StorageClass will be used to create the virtual machine's root disk.
                    image:
                      type: object
                      description: |
                        Image parameters that will be used to create the virtual machine's root disk.
                      required:
                        - kind
                        - name
                      properties:
                        kind:
                          type: string
                          description: |
                            The kind of the image source.
                          enum:
                            - "ClusterVirtualImage"
                            - "VirtualImage"
                        name:
                          type: string
                          description: |
                            The name of the image that will be used to create the root disk.
                            > The installation requires Linux OS images with cloud-init pre-installed.
                etcdDisk:
                  type: object
                  description: |
                    Specifies settings for the ETCD data disk.
                  required:
                    - size
                  properties:
                    size:
                      type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      description: |
                        ETCD disk size.
                      example: 10Gi
                    storageClass:
                      type: string
                      description: |
                        The name of the existing StorageClass will be used to create the ETCD data disk.
                additionalLabels:
                  type: object
                  description: |
                    Additional labels.
                  x-doc-example: |
                    ```yaml
                    project: cms-production
                    severity: critical
                    ```
                  additionalProperties:
                    type: string

        nodeGroups:
          type: array
          description: |
            An array of additional NodeGroups for creating static nodes (e.g., for dedicated front nodes or gateways).
          items:
            type: object
            required: [name, replicas, instanceClass]
            properties:
              name:
                description: |
                  The name of the NodeGroup to use for generating node names.
                type: string
              replicas:
                description: |
                  The number of nodes to create.
                type: integer

              zones:
                type: array
                description: |
                  A set of zones in which nodes can be created.
                  To use this setting, the `topology.kubernetes.io/zone` label must be set on DVP nodes.
                  Read [more](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesioregion) about topological labels.
                  > Caution! To set the required label for a DVP node, follow the NodeGroup [documentation](https://deckhouse.io/documentation/v1/modules/040-node-manager/cr.html#nodegroup-v1-spec-nodetemplate-labels).
                items:
                  type: string
                uniqueItems: true

              nodeTemplate:
                description: |
                  Parameters of Node objects in Kubernetes to add after registering the node.
                properties:
                  labels:
                    type: object
                    description: |
                      A list of labels to attach to cluster resources.
                      The same as the `metadata.labels` standard [field](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#objectmeta-v1-meta).
                      Note that you have to re-create all the machines to add new tags if tags were modified in the running cluster.
                    x-doc-example: |
                      ```yaml
                      labels:
                        environment: production
                        app: warp-drive-ai
                      ```
                    additionalProperties:
                      type: string
                  annotations:
                    type: object
                    description: |
                      The same as the `metadata.annotations` standard [field](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#objectmeta-v1-meta).
                    x-doc-example: |
                      ```yaml
                      annotations:
                        ai.fleet.com/discombobulate: "true"
                      ```
                    additionalProperties:
                      type: string
                  taints:
                    type: array
                    description: |
                      The same as the `.spec.taints` field of the [Node](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#taint-v1-core) object.
                      > **Caution!** Only the `effect`, `key`, `values`  fields are available.
                    x-doc-example: |
                      ```yaml
                      taints:
                      - effect: NoExecute
                        key: ship-class
                        value: frigate
                      ```
                    items:
                      type: object
                      properties:
                        effect:
                          type: string
                          enum: [NoSchedule, PreferNoSchedule, NoExecute]
                        key:
                          type: string
                        value:
                          type: string

              instanceClass:
                required: [virtualMachine, rootDisk]
                type: object
                description: |
                  Virtual machine and Disk settings for the created static node.
                properties:
                  virtualMachine: *instanceClassVirtualMachine
                  rootDisk: *instanceClassRootDisk
        layout:
          type: string
          description: |
            The way resources are located in the cloud.
            Read [more](https://deckhouse.io/documentation/v1/modules/030-cloud-provider-dvp/layouts.html) about possible provider layouts.
          enum: [Standard]

        region:
          type: string
          description: |
            The name of the region.
            To use this setting, the `topology.kubernetes.io/region` label must be set on DVP nodes.
            Read [more](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesioregion) about topological labels.
            > Caution! To set the required label for a DVP node, follow the NodeGroup [documentation](https://deckhouse.io/documentation/v1/modules/040-node-manager/cr.html#nodegroup-v1-spec-nodetemplate-labels).
        zones:
          type: array
          description: |
            A set of zones in which nodes can be created.
            To use this setting, the `topology.kubernetes.io/zone` label must be set on DVP nodes.
            Read [more](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesioregion) about topological labels.
            > Caution! To set the required label for a DVP node, follow the NodeGroup [documentation](https://deckhouse.io/documentation/v1/modules/040-node-manager/cr.html#nodegroup-v1-spec-nodetemplate-labels).
          items:
            type: string
          uniqueItems: true

        provider:
          type: object
          description: |
            Contains settings to connect to the Deckhouse Kubernetes Platform API.
          additionalProperties: false
          properties:
            kubeconfigDataBase64:
              description: |
                Kubeconfig to connect to Deckhouse Kubernetes Platform API base64 encoded.
              type: string
              pattern: "^[A-Za-z0-9+/]+[=]{0,2}$"
            namespace:
              description: |
                Namespace in which DKP cluster resources will be created.
                > Caution! If not explicitly specified, the default namespace for kubeconfig will be used.
              type: string
          required:
            - kubeconfigDataBase64
            - namespace
