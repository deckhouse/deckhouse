bin/werf config render --dev
---
project: deckhouse
configVersion: 1
build:
  imageSpec:
    author: "Deckhouse Kubernetes Platform <contact@deckhouse.io>"
    clearHistory: true
    config:
      clearWerfLabels: true
      removeLabels:
        - /.*/
gitWorktree:
  forceShallowClone: true
cleanup:
  disableGitHistoryBasedPolicy: false
---
---
# revisions settings

# checks redactions list

---
# Base Images
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  # base images artifacts
---
image: BASE_ALPINE
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
---
image: BASE_ALT_DEV
from: registry.deckhouse.io/base_images/dev-alt:p10@sha256:76e6e163fa982f03468166203488b569e6d9fc10855d6a259c662706436cdcad
final: false
---
image: BASE_ALT_P11
from: registry.deckhouse.io/base_images/alt:p11@sha256:b630220d83798057e1c67fe6f712a49e9c3abb377f0bd7183bba0ba541fc4081
final: false
---
image: BASE_GOLANG_23_ALPINE
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
---
image: BASE_GOLANG_23_BOOKWORM
from: registry.deckhouse.io/base_images/golang:1.23.6-bookworm@sha256:ca569d98545ab5a090449da29d637fb3f5a273d3a002554af328be9873777cef
final: false
---
image: BASE_GOLANG_23_BULLSEYE
from: registry.deckhouse.io/base_images/golang:1.23.6-bullseye@sha256:fad5b33791a319ba1c910a03a33575ea34fc8e142695a64be9a1a228e74af11e
final: false
---
image: BASE_JEKYLL
from: registry.deckhouse.io/base_images/jekyll:4.3.4-alpine@sha256:bc24cdaea4fa9ea14068440d53dcab6881018d77526e7b9a0574f6ff03f0945f
final: false
---
image: BASE_NODE_16_ALPINE
from: registry.deckhouse.io/base_images/node:16.13.0-alpine3.14@sha256:5277c7d171e02ee76417bb290ef488aa80e4e64572119eec0cb9fffbcffb8f6a
final: false
---
image: BASE_NODE_20_ALPINE
from: registry.deckhouse.io/base_images/node:20.11.0-alpine3.18@sha256:bd2eb17dcdc3541d4986bebcfc997a24c499358827899b1029af3601d4c4569d
final: false
---
image: BASE_NODE_23_ALPINE
from: registry.deckhouse.io/base_images/node:23.6.1-alpine3.20@sha256:afe80e0dd357fc69595bc54a813dd992248fa3063448e2a1fa77ff47534ff51d
final: false
---
image: BASE_SCRATCH
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
final: false
---
image: BASE_UBUNTU
from: registry.deckhouse.io/base_images/ubuntu:jammy-20221130@sha256:c14c3b1242536729ce5227ff833144977b4e378723858fb73a4cf40ea6daaf6a
final: false
---
image: base/distroless
from: registry.deckhouse.io/base_images@sha256:f2ac3320ce677484d7aef4608f99ddf0055d8907cc3509f8cccc8513f314c31a
final: false
---
image: base/nginx-static
from: registry.deckhouse.io/base_images@sha256:28a844d4ff777dc704d3808bdd1240108315f4d1ed1668e762627b9c4ddc8d66
final: false
---
image: base/python
from: registry.deckhouse.io/base_images@sha256:05fb7868d518fe6c562233e1ee1c9304f6d5142920959e7b2d51acdc49cce0c3
final: false
---
image: builder/alpine
from: registry.deckhouse.io/base_images@sha256:92adb9e8a387c645ba4eeedb08f9a6de0583c5d1d496bf9c9b3a89fe963a6a06
final: false
---
image: builder/alt
from: registry.deckhouse.io/base_images@sha256:622b42515875104dccaa5c6ff411962b6cb973522a388b8fdf3dcb2349be98bc
final: false
---
image: builder/golang-alpine
from: registry.deckhouse.io/base_images@sha256:482aab8cb49614acb14ce9397861b02d05cc222d893d689abd205c9bd2c17b46
final: false
---
image: builder/golang-bookworm
from: registry.deckhouse.io/base_images@sha256:3755a67e7d3f16995b1615694a2aae7a95618a1ff9603b23f347764dfa0242b2
final: false
---
image: builder/golang-bullseye
from: registry.deckhouse.io/base_images@sha256:7f2838a3779bb9759accba1cbea7ea7aa086cc67ec763718004febb47948570c
final: false
---
image: builder/node-alpine
from: registry.deckhouse.io/base_images@sha256:f09f957ee8e960c7afee93d7a30f20116e76660c0408d35109ee9a9fa2a4d5b0
final: false
---
image: builder/scratch
from: registry.deckhouse.io/base_images@sha256:10b5855ae3e20ecc2ba6eb3d7f8365ee2facc98a62c9e4840927ad4074bd2317
final: false
---
image: builder/src
from: registry.deckhouse.io/base_images@sha256:c3a2d14cfe649b836c53fe570ea72555b9981d9dc2ab05377f1c63d9d1cd0378
final: false
---
image: tools/bash
from: registry.deckhouse.io/base_images@sha256:892cd63bafb70b529377833c374009db5e9759c0aa72b165aff4ba52b59a45c6
final: false
---
image: tools/coreutils
from: registry.deckhouse.io/base_images@sha256:72b1d2d7aa251da697ee6251330affca25df5972519948dba5f1831012ee16a3
final: false
---
image: tools/cosign
from: registry.deckhouse.io/base_images@sha256:d62c8deb048d9d02e5ea3b9f1efa9a940625c746f3c568a283c346c844a8acf8
final: false
---
image: tools/grep
from: registry.deckhouse.io/base_images@sha256:48e485161d6cec13d5283d03e69e2d1ff9e1c6146d040dc3bf623d856b62a636
final: false
---
image: tools/jq
from: registry.deckhouse.io/base_images@sha256:71aac8b711bef4dbef462d6309e283812358b9920301ad3de23a5734a18a23f2
final: false
---
image: tools/less
from: registry.deckhouse.io/base_images@sha256:259d88c1a732e7d3fc8d067ea0324684e1fe73a3bbb3eb7e2a9d88212a4ee2a0
final: false
---
image: tools/vim
from: registry.deckhouse.io/base_images@sha256:0764a55e7a2d4a1a332092b315bcabca027e1d16c8897193dd1e816b71055001
final: false
---
image: tools/yq4
from: registry.deckhouse.io/base_images@sha256:35911ea155806ec3b29c5d6eec90184d3d836bb42037f9865fb5949ab7a4cd6c
final: false
---
# version map
  
  # Version Map
  # kubernetes versions list
  
  
  
  
# do not forget change /deckhouse-controller/files/kubectl_wrapper.sh and /deckhouse-controller/files/bashrc
---
# Terraform Versions

# Source repo  settings

# source repo with protected cloud providers
# use example.com as default because we can fail build without env

# Source repo with observability private code

# goproxy  settings
---
# render ssh-static
---
image: ssh-static-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone -b V_9_9_P1 --single-branch --depth=1 https://github.com/openssh/openssh-portable /src
  - rm -rf /src/.git
---
image: ssh-static
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: ssh-static-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache build-base make autoconf automake zlib-dev zlib-static openssl-dev openssl-libs-static
  install:
  - cd /src
  - autoreconf
  - ./configure LDFLAGS="-static $(LDFLAGS)" --prefix=
  - make --jobs=8
  - make DESTDIR=/ssh install
  - make clean
---
image: common-base
fromImage: common/alt-p11
import:
- image: dev-alt-artifact
  add: /
  to: /
  before: setup
  includePaths:
  - usr/lib64/libz.so*
  - usr/lib64/libexpat.so*
  - usr/lib64/libssl.so.*
  - usr/lib64/libcrypto.so.*
  - usr/lib64/libpthread.so.0*
  - usr/bin/openssl
  - etc/pki
  - usr/share/ca-certificates/ca-bundle.crt
  - usr/bin/python3
  - usr/bin/python3.12
  - usr/lib/python3
  - usr/lib64/python3
  - usr/lib64/python3.12
  - usr/lib64/libffi.so*
  - usr/lib64/libb2.so*
  - usr/share/vim
  - etc/vim
  - etc/bash_completion.d
  - etc/bashrc.d/bash_completion.sh
  - usr/share/bash-completion
  - usr/lib/locale/C.utf8
  - usr/bin/vim-console
- image: common/tini-artifact
  add: /tini/tini-static
  to: /usr/bin/tini
  before: setup
- image: common/semver-artifact
  add: /usr/local/bin/semver
  to: /usr/local/bin/semver
  before: setup
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kubectl
  to: /usr/local/bin/kubectl-1.29
  before: setup
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kubectl
  to: /usr/local/bin/kubectl-1.31
  before: setup

- image: common/distroless
  add: /etc/ssl
  to: /etc/ssl
  before: setup

- image: registrypackages/d8-curl-artifact-8-9-1
  add: /d8-curl
  to: /usr/bin/curl
  before: setup

shell:
  beforeInstall:
  - |
    # Install kubectl wrapper
    cat <<"EOD" > /usr/local/bin/kubectl
    #!/bin/bash
    
    # Copyright 2021 Flant JSC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    set -Eeuo pipefail
    
    if [ -s /tmp/kubectl_version ]; then
     kubernetes_version="$(cat /tmp/kubectl_version)"
    else
     # Workaround for running kubectl before global hook global-hooks/discovery/kubernetes_version running
     kubernetes_version="$(/usr/local/bin/kubectl-1.27 version -o json 2>/dev/null | jq -r '.serverVersion.gitVersion | ltrimstr("v")')"
    fi
    
    case "$kubernetes_version" in
      1.27.* | 1.28.* | 1.29.* )
        kubectl_version="1.29"
        ;;
      1.30.* | 1.31.* | 1.32.* )
        kubectl_version="1.31"
        ;;
      *)
        >&2 echo "ERROR: unsupported kubernetes version $kubernetes_version"
        exit 1
        ;;
    esac
    
    exec "/usr/local/bin/kubectl-$kubectl_version" "$@"
    
    EOD
    chmod +x /usr/local/bin/kubectl
    # Shell comfort: inputrc
    cat <<"EOD" > /etc/inputrc
    # /etc/inputrc - global inputrc for libreadline
    # See readline(3readline) and `info rluserman' for more information.
    
    # Be 8 bit clean.
    set input-meta on
    set output-meta on
    
    # some defaults / modifications for the emacs mode
    $if mode=emacs
    
    # allow the use of the Home/End keys
    "\e[1~": beginning-of-line
    "\e[4~": end-of-line
    
    # allow the use of the Delete/Insert keys
    "\e[3~": delete-char
    "\e[2~": quoted-insert
    
    # alternate mappings for "page up" and "page down" to search the history
    "\e[5~": history-search-backward
    "\e[6~": history-search-forward
    
    # mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
    "\e[1;5C": forward-word
    "\e[1;5D": backward-word
    "\e[5C": forward-word
    "\e[5D": backward-word
    "\e\e[C": forward-word
    "\e\e[D": backward-word
    
    $if term=rxvt
    "\e[7~": beginning-of-line
    "\e[8~": end-of-line
    "\eOc": forward-word
    "\eOd": backward-word
    $endif
    
    set completion-ignore-case on
    $endif
    
    EOD
    # Shell comfort: bashrc
    cat <<"EOD" > /etc/bashrc
    PS1='\[\033[01;30m\][deckhouse]\[\033[00m\] \[\033[01;33m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
    
    source /etc/bashrc.d/bash_completion.sh
    
    
    if [ -s /tmp/kubectl_version ]; then
     kubernetes_version="$(cat /tmp/kubectl_version)"
    else
     kubectl_version="1.28"
    fi
    
    case "$kubernetes_version" in
      1.27.* | 1.28.* | 1.29.* )
        kubectl_version="1.29"
        ;;
      1.30.* | 1.31.* | 1.32.* )
        kubectl_version="1.31"
        ;;
    esac
    
    eval "$(kubectl-${kubectl_version} completion bash)"
    eval "$(deckhouse-controller --completion-script-bash | sed -e s/deckhouse/deckhouse-controller/g)"
    
    EOD
    # Shell comfort: add bashrc for root
    rm -f /root/.bashrc
    ln -s /etc/bashrc /root/.bashrc
    # Shell comfort: add bashrc for nobody
    rm -f /.bashrc
    ln -s /etc/bashrc /.bashrc
    # Shell comfort: create /etc/vim
    mkdir -p /etc/vim/
    # Shell comfort: vimrc.local
    cat <<"EOD" > /etc/vim/vimrc.local
    source $VIMRUNTIME/defaults.vim
    let g:skip_defaults_vim = 1
    set noautoindent
    set mouse=c
    
    EOD

imageSpec:
  config:
    env: { "CRYPTOGRAPHY_OPENSSL_NO_LEGACY": "true" }
---
image: base-for-go
fromImage: common/alt-p11-artifact
import:
- image: common/tini-artifact
  add: /tini/tini-static
  to: /usr/bin/tini
  before: setup
- image: common/semver-artifact
  add: /usr/local/bin/semver
  to: /usr/local/bin/semver
  before: setup
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kubectl
  to: /usr/local/bin/kubectl-1.29
  before: setup
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kubectl
  to: /usr/local/bin/kubectl-1.31
  before: setup
shell:
  beforeInstall:
  - apt-get install -y golang make git gcc
  - |
    # Install kubectl wrapper
    cat <<"EOD" > /usr/local/bin/kubectl
    #!/bin/bash
    
    # Copyright 2021 Flant JSC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    set -Eeuo pipefail
    
    if [ -s /tmp/kubectl_version ]; then
     kubernetes_version="$(cat /tmp/kubectl_version)"
    else
     # Workaround for running kubectl before global hook global-hooks/discovery/kubernetes_version running
     kubernetes_version="$(/usr/local/bin/kubectl-1.27 version -o json 2>/dev/null | jq -r '.serverVersion.gitVersion | ltrimstr("v")')"
    fi
    
    case "$kubernetes_version" in
      1.27.* | 1.28.* | 1.29.* )
        kubectl_version="1.29"
        ;;
      1.30.* | 1.31.* | 1.32.* )
        kubectl_version="1.31"
        ;;
      *)
        >&2 echo "ERROR: unsupported kubernetes version $kubernetes_version"
        exit 1
        ;;
    esac
    
    exec "/usr/local/bin/kubectl-$kubectl_version" "$@"
    
    EOD
    chmod +x /usr/local/bin/kubectl
    # Shell comfort: inputrc
    cat <<"EOD" > /etc/inputrc
    # /etc/inputrc - global inputrc for libreadline
    # See readline(3readline) and `info rluserman' for more information.
    
    # Be 8 bit clean.
    set input-meta on
    set output-meta on
    
    # some defaults / modifications for the emacs mode
    $if mode=emacs
    
    # allow the use of the Home/End keys
    "\e[1~": beginning-of-line
    "\e[4~": end-of-line
    
    # allow the use of the Delete/Insert keys
    "\e[3~": delete-char
    "\e[2~": quoted-insert
    
    # alternate mappings for "page up" and "page down" to search the history
    "\e[5~": history-search-backward
    "\e[6~": history-search-forward
    
    # mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
    "\e[1;5C": forward-word
    "\e[1;5D": backward-word
    "\e[5C": forward-word
    "\e[5D": backward-word
    "\e\e[C": forward-word
    "\e\e[D": backward-word
    
    $if term=rxvt
    "\e[7~": beginning-of-line
    "\e[8~": end-of-line
    "\eOc": forward-word
    "\eOd": backward-word
    $endif
    
    set completion-ignore-case on
    $endif
    
    EOD
    # Shell comfort: bashrc
    cat <<"EOD" > /etc/bashrc
    PS1='\[\033[01;30m\][deckhouse]\[\033[00m\] \[\033[01;33m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
    
    source /etc/bashrc.d/bash_completion.sh
    
    
    if [ -s /tmp/kubectl_version ]; then
     kubernetes_version="$(cat /tmp/kubectl_version)"
    else
     kubectl_version="1.28"
    fi
    
    case "$kubernetes_version" in
      1.27.* | 1.28.* | 1.29.* )
        kubectl_version="1.29"
        ;;
      1.30.* | 1.31.* | 1.32.* )
        kubectl_version="1.31"
        ;;
    esac
    
    eval "$(kubectl-${kubectl_version} completion bash)"
    eval "$(deckhouse-controller --completion-script-bash | sed -e s/deckhouse/deckhouse-controller/g)"
    
    EOD
    # Shell comfort: add bashrc for root
    rm -f /root/.bashrc
    ln -s /etc/bashrc /root/.bashrc
    # Shell comfort: add bashrc for nobody
    rm -f /.bashrc
    ln -s /etc/bashrc /.bashrc
    # Shell comfort: create /etc/vim
    mkdir -p /etc/vim/
    # Shell comfort: vimrc.local
    cat <<"EOD" > /etc/vim/vimrc.local
    source $VIMRUNTIME/defaults.vim
    let g:skip_defaults_vim = 1
    set noautoindent
    set mouse=c
    
    EOD
---
image: dhctl-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /dhctl
  to: /src/dhctl
  stageDependencies:
    install:
    - "**/*.go"
    - Makefile
    - go.sum
    - go.mod
- add: /go_lib
  to: /src/go_lib
  stageDependencies:
    install:
      - "**/*.go"
- add: /pkg/log
  to: /src/pkg/log
  stageDependencies:
    install:
      - go.mod
      - go.sum
    setup:
      - "**/*.go"
---
image: dhctl
final: false
fromImage: base-for-go
import:
- image: dhctl-src-artifact
  add: /src
  to: /
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /dhctl
  - GOPROXY=https://proxy.golang.org/ go mod download
  - D8_VERSION=dev DEFAULT_KUBERNETES_VERSION=1.30 make build
---
# render images and artifact from .werf
# WARNING! new images and artifacts should be placed in .werf/werf-YOUR-MAGIC-IMAGES-GROUP.yaml
# common parts of images and/or images should be placed in .werf/defines directory in define templates
# and should include in werf.yaml (see include dhctl_artifact) ar include in .werf/werf-YOUR-MAGIC-IMAGES-GROUP.yaml
#
# we separate defines and images in separated files for logical separation
# why didn't we move all images in defines and include it defines directly in werf.yaml?
#  1. We have different images building between CSE and OSS
#  2. Logical separation
#  3. That separation can find defines used in images in one place and images itself in different place
#     This may be revised in the future


---
image: deckhouse-controller-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /
  to: /deckhouse
  includePaths:
    
    
    - dhctl
    - deckhouse-controller
    - global-hooks/**/*.go
    - modules/**/*.go
    - ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/src/**/*.go
    - ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/src/go.mod
    - ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/src/go.sum
    - go_lib/**/*.go
    - go_lib/**/go.mod
    - go_lib/**/go.sum
    - pkg/**/*.go
    - pkg/**/go.mod
    - pkg/**/go.sum
    - go.mod
    - go.sum
    - tools
    - editions.yaml
  excludePaths:
  
    # Code generated by tools/build.go; DO NOT EDIT.
    
  
    
    - global-hooks/**/*_test.go
    - modules/**/*_test.go
    - modules/*/images
    - dhctl/development
    - deckhouse-controller/development
    - deckhouse-controller/cmd/deckhouse-controller/register-go-hooks.go
  stageDependencies:
    install:
      
      
      - dhctl/go.mod
      - dhctl/go.sum
      - go.mod
      - go.sum
      - dhctl/**/*.go
      - deckhouse-controller/**/*.go
      - deckhouse-controller/go-build.sh
      - global-hooks/**/*.go
      - go_lib/**/*.go
      - go_lib/**/go.mod
      - go_lib/**/go.sum
      - pkg/**/*.go
      - pkg/**/go.mod
      - pkg/**/go.sum
      - modules/**/*.go
      - editions.yaml
# Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/be/modules/040-node-manager/openapi/config-values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/config-values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/doc-ru-config-values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/doc-ru-config-values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/openapi-case-tests.yaml
  to: /deckhouse/modules/040-node-manager/openapi/openapi-case-tests.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/140-user-authz/templates/webhook
  to: /deckhouse/modules/140-user-authz/templates/webhook
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/be/modules/350-node-local-dns
  to: /deckhouse/modules/350-node-local-dns
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se/modules/380-metallb
  to: /deckhouse/modules/380-metallb
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/021-cni-cilium/crds/doc-ru-egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/doc-ru-egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/doc-ru-egressgateways.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/doc-ru-egressgateways.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/egressgateways.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/egressgateways.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/internal
  to: /deckhouse/modules/021-cni-cilium/crds/internal
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/021-cni-cilium/hooks/ee
  to: /deckhouse/modules/021-cni-cilium/hooks/ee
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent
  to: /deckhouse/modules/021-cni-cilium/images/egress-gateway-agent
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-gateway-agent
  to: /deckhouse/modules/021-cni-cilium/templates/egress-gateway-agent
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-gateway-instance
  to: /deckhouse/modules/021-cni-cilium/templates/egress-gateway-instance
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-policy
  to: /deckhouse/modules/021-cni-cilium/templates/egress-policy
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/021-cni-cilium/monitoring/prometheus-rules/egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/monitoring/prometheus-rules/egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/030-cloud-provider-vsphere
  to: /deckhouse/modules/030-cloud-provider-vsphere
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/030-cloud-provider-zvirt
  to: /deckhouse/modules/030-cloud-provider-zvirt
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/040-node-manager/cloud-providers/vsphere
  to: /deckhouse/modules/040-node-manager/cloud-providers/vsphere
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/se-plus/modules/040-node-manager/capi/zvirt
  to: /deckhouse/modules/040-node-manager/capi/zvirt
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/015-admission-policy-engine/templates/trivy-provider
  to: /deckhouse/modules/015-admission-policy-engine/templates/trivy-provider
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/015-admission-policy-engine/templates/ratify
  to: /deckhouse/modules/015-admission-policy-engine/templates/ratify
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/015-admission-policy-engine/hooks/common_test.go
  to: /deckhouse/modules/015-admission-policy-engine/hooks/common_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/015-admission-policy-engine/hooks/update_trivy_provider_config.go
  to: /deckhouse/modules/015-admission-policy-engine/hooks/update_trivy_provider_config.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/015-admission-policy-engine/hooks/update_trivy_provider_config_test.go
  to: /deckhouse/modules/015-admission-policy-engine/hooks/update_trivy_provider_config_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/025-static-routing-manager
  to: /deckhouse/modules/025-static-routing-manager
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/030-cloud-provider-dynamix
  to: /deckhouse/modules/030-cloud-provider-dynamix
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/030-cloud-provider-huaweicloud
  to: /deckhouse/modules/030-cloud-provider-huaweicloud
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/030-cloud-provider-openstack
  to: /deckhouse/modules/030-cloud-provider-openstack
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/030-cloud-provider-vcd
  to: /deckhouse/modules/030-cloud-provider-vcd
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/040-node-manager/cloud-providers/openstack
  to: /deckhouse/modules/040-node-manager/cloud-providers/openstack
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/040-node-manager/capi/dynamix
  to: /deckhouse/modules/040-node-manager/capi/dynamix
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/040-node-manager/capi/huaweicloud
  to: /deckhouse/modules/040-node-manager/capi/huaweicloud
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/040-node-manager/capi/vcd
  to: /deckhouse/modules/040-node-manager/capi/vcd
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/110-istio/templates/alliance
  to: /deckhouse/modules/110-istio/templates/alliance
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/110-istio/templates/control-plane-ee
  to: /deckhouse/modules/110-istio/templates/control-plane-ee
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/110-istio/templates/federation
  to: /deckhouse/modules/110-istio/templates/federation
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/110-istio/templates/multicluster
  to: /deckhouse/modules/110-istio/templates/multicluster
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/110-istio/templates/validations.yaml
  to: /deckhouse/modules/110-istio/templates/validations.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/hooks/ee
  to: /deckhouse/modules/110-istio/hooks/ee
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/110-istio/crds/doc-ru-istiofederation.yaml
  to: /deckhouse/modules/110-istio/crds/doc-ru-istiofederation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/doc-ru-istiomulticluster.yaml
  to: /deckhouse/modules/110-istio/crds/doc-ru-istiomulticluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/istiofederation.yaml
  to: /deckhouse/modules/110-istio/crds/istiofederation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/istiomulticluster.yaml
  to: /deckhouse/modules/110-istio/crds/istiomulticluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/dataplane.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/dataplane.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/federation.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/federation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/multicluster.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/multicluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/150-user-authn/hooks/common_test.go
  to: /deckhouse/modules/150-user-authn/hooks/common_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/150-user-authn/hooks/custom_logo.go
  to: /deckhouse/modules/150-user-authn/hooks/custom_logo.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/150-user-authn/hooks/custom_logo_test.go
  to: /deckhouse/modules/150-user-authn/hooks/custom_logo_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/300-prometheus/hooks/common_test.go
  to: /deckhouse/modules/300-prometheus/hooks/common_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/300-prometheus/hooks/custom_logo.go
  to: /deckhouse/modules/300-prometheus/hooks/custom_logo.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/300-prometheus/hooks/custom_logo_test.go
  to: /deckhouse/modules/300-prometheus/hooks/custom_logo_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/templates/_helper.tpl
  to: /deckhouse/modules/380-metallb/templates/_helper.tpl
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/templates/controller
  to: /deckhouse/modules/380-metallb/templates/controller
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/380-metallb/templates/speaker
  to: /deckhouse/modules/380-metallb/templates/speaker
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/380-metallb/monitoring/grafana-dashboards/kubernetes-cluster/metallb-bgp.json
  to: /deckhouse/modules/380-metallb/monitoring/grafana-dashboards/kubernetes-cluster/metallb-bgp.json
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/monitoring/prometheus-rules/metallb.yaml
  to: /deckhouse/modules/380-metallb/monitoring/prometheus-rules/metallb.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/450-keepalived
  to: /deckhouse/modules/450-keepalived
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/450-network-gateway
  to: /deckhouse/modules/450-network-gateway
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/500-operator-trivy
  to: /deckhouse/modules/500-operator-trivy
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/610-service-with-healthchecks
  to: /deckhouse/modules/610-service-with-healthchecks
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/modules/650-runtime-audit-engine
  to: /deckhouse/modules/650-runtime-audit-engine
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/fe/modules/002-deckhouse/templates/flant-module-source.yaml
  to: /deckhouse/modules/002-deckhouse/templates/flant-module-source.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/040-node-manager/templates/ngc-ca-certificate.yaml
  to: /deckhouse/modules/040-node-manager/templates/ngc-ca-certificate.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/300-prometheus/templates/prometheus/prometheus.yaml
  to: /deckhouse/modules/300-prometheus/templates/prometheus/prometheus.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/300-prometheus/templates/prometheus/longterm/prometheus.yaml
  to: /deckhouse/modules/300-prometheus/templates/prometheus/longterm/prometheus.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/340-monitoring-applications
  to: /deckhouse/modules/340-monitoring-applications
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/fe/modules/500-basic-auth
  to: /deckhouse/modules/500-basic-auth
  excludePaths:
    - images
    - templates
    - charts
    - crds
    - docs
    - monitoring
    - openapi
    - oss.yaml
    - cloud-instance-manager
    - values_matrix_test.yaml
    - values.yaml
    - .helmignore
    - candi
    - Chart.yaml
    - .namespace
    - '**/*_test.go'
    - '**/*.sh'
  stageDependencies:
    install:
        - '**/*.go'
- add: /ee/fe/modules/500-okmeter/hooks/update_agent_image.go
  to: /deckhouse/modules/500-okmeter/hooks/update_agent_image.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/500-okmeter/templates/daemonset.yaml
  to: /deckhouse/modules/500-okmeter/templates/daemonset.yaml
  stageDependencies:
    install:
        - '**/*'

# Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/se-plus/candi/cloud-providers/vsphere
  to: /deckhouse/candi/cloud-providers/vsphere
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/candi/cloud-providers/zvirt
  to: /deckhouse/candi/cloud-providers/zvirt
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/openstack
  to: /deckhouse/candi/cloud-providers/openstack
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/vcd
  to: /deckhouse/candi/cloud-providers/vcd
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/dynamix
  to: /deckhouse/candi/cloud-providers/dynamix
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/huaweicloud
  to: /deckhouse/candi/cloud-providers/huaweicloud
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  to: /deckhouse/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  stageDependencies:
    install:
        - '**/*'

shell:
  install:
  # Migrate internal packages imports
  - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/be/modules|github.com/deckhouse/deckhouse/modules|g' {} +
  - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/se/modules|github.com/deckhouse/deckhouse/modules|g' {} +
  - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/se-plus/modules|github.com/deckhouse/deckhouse/modules|g' {} +
  - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/modules|github.com/deckhouse/deckhouse/modules|g' {} +
  - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/fe/modules|github.com/deckhouse/deckhouse/modules|g' {} +
---
image: deckhouse-controller-artifact
final: false
fromImage: base-for-go
import:
- image: deckhouse-controller-src-artifact
  add: /deckhouse
  to: /deckhouse
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  - mkdir /deckhouse /out

  setup:
  - |
    CI_COMMIT_TAG=""
    if [ -z "$CI_COMMIT_TAG" ]; then
        latest_tag=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/deckhouse/deckhouse.git 'v*.*.*' | tail --lines=1 | cut --delimiter='/' --fields=3)
        IFS='.' read -r -a version_parts <<< "$latest_tag"

        major=${version_parts[0]}
        minor=${version_parts[1]}
        new_minor=$((minor + 1))
        new_patch=0
        prerelease=main

        new_version="${major}.${new_minor}.${new_patch}-${prerelease}+${WERF_COMMIT_HASH::7}"
        export CI_COMMIT_TAG=${new_version}
    fi
  - cd /deckhouse
  # Generate hooks imports for particular edition
  - go generate ./tools/register.go
  # Go modules depend on `register-go-hooks.go` file, hence we cannot split downloading dependencies and building
  # into separate phases.
  - go mod download
  - cd /deckhouse/deckhouse-controller
  - D8_VERSION=${CI_COMMIT_TAG} DEFAULT_KUBERNETES_VERSION=1.30 ./go-build.sh
  - mv deckhouse-controller /out
---


---
image: dev-alt-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
    - apt-get install -y ca-certificates openssl vim-console bash-completion python3 pip python3-module-chardet gettext libexpat libcrypto3 glibc-pthread locale
    - apt-get install -y python3-module-cryptography
    - pip install pyOpenSSL==24.3.0
  install:
    - /binary_replace.sh -i "/usr/bin/envsubst" -o /relocate
---


---
image: install-standalone-builder-content
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
final: false
git:
- add: /
  to: /deckhouse
  includePaths:
  - candi
  # Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/se-plus/candi/cloud-providers/vsphere
  to: /deckhouse/candi/cloud-providers/vsphere
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/candi/cloud-providers/zvirt
  to: /deckhouse/candi/cloud-providers/zvirt
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/openstack
  to: /deckhouse/candi/cloud-providers/openstack
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/vcd
  to: /deckhouse/candi/cloud-providers/vcd
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/dynamix
  to: /deckhouse/candi/cloud-providers/dynamix
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/huaweicloud
  to: /deckhouse/candi/cloud-providers/huaweicloud
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  to: /deckhouse/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  stageDependencies:
    install:
        - '**/*'

import:
- image: dhctl
  add: /dhctl/bin/dhctl
  to: /dhctl
  before: setup
- image: dev-prebuild
  add: /deckhouse
  to: /deckhouse
  includePaths:
  - modules/*/openapi/config-values.yaml
  - global-hooks/openapi/config-values.yaml
  after: setup
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/candi/images_digests.json
  before: setup
- image: version-map-artifact
  add: /version_map_FE.yml
  to: /deckhouse/candi/version_map.yml
  before: setup
- image: ssh-static
  add: /ssh/bin
  to: /bin
  before: setup
  includePaths:
  - ssh
  - ssh-add
  - ssh-agent
  - scp
- image: terraform # from modules/040-terraform-manager/images/terraform-manager-base/werf.inc.yaml
  add: /terraform/terraform
  to: /bin/terraform
  before: setup
- image: terraform-provider-aws # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-aws
  to: /plugins/registry.terraform.io/hashicorp/aws/4.50.0/linux_amd64/terraform-provider-aws
  before: setup
- image: terraform-provider-azure # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-azurerm
  to: /plugins/registry.terraform.io/hashicorp/azurerm/2.36.0/linux_amd64/terraform-provider-azurerm
  before: setup
- image: terraform-provider-gcp # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-gcp
  to: /plugins/registry.terraform.io/hashicorp/google/3.48.0/linux_amd64/terraform-provider-google
  before: setup
- image: terraform-provider-vsphere # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-vsphere
  to: /plugins/registry.terraform.io/hashicorp/vsphere/2.0.2/linux_amd64/terraform-provider-vsphere
  before: setup
- image: terraform-provider-ovirt # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-ovirt
  to: /plugins/registry.terraform.io/terraform-provider-ovirt/ovirt/2.1.5/linux_amd64/terraform-provider-ovirt
  before: setup
- image: terraform-provider-openstack # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-openstack
  to: /plugins/registry.terraform.io/terraform-provider-openstack/openstack/1.54.1/linux_amd64/terraform-provider-openstack
  before: setup
- image: terraform-provider-vcd-artifact # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-vcd-v3.10.0
  to: /plugins/registry.terraform.io/vmware/vcd/3.10.0/linux_amd64/terraform-provider-vcd
  before: setup
- image: terraform-provider-vcd-artifact # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-vcd-v3.14.1
  to: /plugins/registry.terraform.io/vmware/vcd/3.14.1/linux_amd64/terraform-provider-vcd
  before: setup
- image: terraform-provider-decort # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-decort
  to: /plugins/registry.terraform.io/terraform-provider-decort/decort/4.7.3/linux_amd64/terraform-provider-decort
  before: setup
- image: terraform-provider-huaweicloud # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-huaweicloud
  to: /plugins/registry.terraform.io/terraform-provider-huaweicloud/huaweicloud/1.69.0/linux_amd64/terraform-provider-huaweicloud
  before: setup
- image: opentofu # from modules/040-terraform-manager/images/terraform-manager-base/werf.inc.yaml
  add: /opentofu/opentofu
  to: /bin/opentofu
  before: setup
- image: terraform-provider-yandex # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-yandex
  to: /plugins/registry.opentofu.org/yandex-cloud/yandex/0.83.0/linux_amd64/terraform-provider-yandex
  before: setup
---
image: install-standalone-builder
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: install-standalone-builder-content
  add: /
  to: /image
  before: setup
  includePaths:
  - bin
  - deckhouse
  - plugins
  - dhctl
shell:
  setup:
  
  - echo 'dev' > /image/deckhouse/version
  - cd /image
  - tar -czf /dhctl-dev.x86_64.tar.gz *

---
image: dev/install-standalone
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: install-standalone-builder
  add: /dhctl-dev.x86_64.tar.gz
  to: /
  before: setup
---


---
image: dev/install
fromImage: common/alt-p11
git:
- add: /
  to: /deckhouse
  includePaths:
  - candi
# Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/se-plus/candi/cloud-providers/vsphere
  to: /deckhouse/candi/cloud-providers/vsphere
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/candi/cloud-providers/zvirt
  to: /deckhouse/candi/cloud-providers/zvirt
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/openstack
  to: /deckhouse/candi/cloud-providers/openstack
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/vcd
  to: /deckhouse/candi/cloud-providers/vcd
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/dynamix
  to: /deckhouse/candi/cloud-providers/dynamix
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/huaweicloud
  to: /deckhouse/candi/cloud-providers/huaweicloud
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  to: /deckhouse/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  stageDependencies:
    install:
        - '**/*'

import:
- image: dhctl
  add: /dhctl/bin/dhctl
  to: /dhctl
  before: setup
- image: dev-prebuild
  add: /deckhouse
  to: /deckhouse
  includePaths:
  - modules/*/openapi/config-values.yaml
  - global-hooks/openapi/config-values.yaml
  after: setup
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/candi/images_digests.json
  before: setup
- image: version-map-artifact
  add: /version_map_FE.yml
  to: /deckhouse/candi/version_map.yml
  before: setup
- image: ssh-static
  add: /ssh/bin
  to: /bin
  before: setup
  includePaths:
  - ssh
  - ssh-add
  - ssh-agent
  - scp
- image: terraform # from modules/040-terraform-manager/images/terraform-manager-base/werf.inc.yaml
  add: /terraform/terraform
  to: /bin/terraform
  before: setup
- image: terraform-provider-aws # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-aws
  to: /plugins/registry.terraform.io/hashicorp/aws/4.50.0/linux_amd64/terraform-provider-aws
  before: setup
- image: terraform-provider-azure # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-azurerm
  to: /plugins/registry.terraform.io/hashicorp/azurerm/2.36.0/linux_amd64/terraform-provider-azurerm
  before: setup
- image: terraform-provider-gcp # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-gcp
  to: /plugins/registry.terraform.io/hashicorp/google/3.48.0/linux_amd64/terraform-provider-google
  before: setup
- image: terraform-provider-vsphere # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-vsphere
  to: /plugins/registry.terraform.io/hashicorp/vsphere/2.0.2/linux_amd64/terraform-provider-vsphere
  before: setup
- image: terraform-provider-ovirt # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-ovirt
  to: /plugins/registry.terraform.io/terraform-provider-ovirt/ovirt/2.1.5/linux_amd64/terraform-provider-ovirt
  before: setup
- image: terraform-provider-openstack # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-openstack
  to: /plugins/registry.terraform.io/terraform-provider-openstack/openstack/1.54.1/linux_amd64/terraform-provider-openstack
  before: setup
- image: terraform-provider-vcd-artifact # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-vcd-v3.10.0
  to: /plugins/registry.terraform.io/vmware/vcd/3.10.0/linux_amd64/terraform-provider-vcd
  before: setup
- image: terraform-provider-vcd-artifact # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-vcd-v3.14.1
  to: /plugins/registry.terraform.io/vmware/vcd/3.14.1/linux_amd64/terraform-provider-vcd
  before: setup
- image: terraform-provider-decort # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-decort
  to: /plugins/registry.terraform.io/terraform-provider-decort/decort/4.7.3/linux_amd64/terraform-provider-decort
  before: setup
- image: terraform-provider-huaweicloud # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-huaweicloud
  to: /plugins/registry.terraform.io/terraform-provider-huaweicloud/huaweicloud/1.69.0/linux_amd64/terraform-provider-huaweicloud
  before: setup
- image: opentofu # from modules/040-terraform-manager/images/terraform-manager-base/werf.inc.yaml
  add: /opentofu/opentofu
  to: /bin/opentofu
  before: setup
- image: terraform-provider-yandex # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /terraform-provider-yandex
  to: /plugins/registry.opentofu.org/yandex-cloud/yandex/0.83.0/linux_amd64/terraform-provider-yandex
  before: setup

- image: dev-alt-artifact
  add: /relocate
  to: /
  before: setup
- image: dev-alt-artifact
  add: /
  to: /
  before: setup
  includePaths:
  - etc/pki
  - usr/share/ca-certificates/ca-bundle.crt
  - usr/share/vim
  - etc/vim
  - etc/bash_completion.d
  - etc/bashrc.d/bash_completion.sh
  - usr/share/bash-completion
  - usr/bin/vim-console

shell:
  beforeInstall:
  - |
    apt-get update && apt-get install -y locale && apt-get clean
    find /var/lib/apt/ /var/cache/apt/ -type f -delete
  setup:
  - |
    ln -fs /dhctl /usr/bin/dhctl
    cat <<"EOD" > /etc/inputrc
    # /etc/inputrc - global inputrc for libreadline
    # See readline(3readline) and `info rluserman' for more information.
    
    # Be 8 bit clean.
    set input-meta on
    set output-meta on
    
    # some defaults / modifications for the emacs mode
    $if mode=emacs
    
    # allow the use of the Home/End keys
    "\e[1~": beginning-of-line
    "\e[4~": end-of-line
    
    # allow the use of the Delete/Insert keys
    "\e[3~": delete-char
    "\e[2~": quoted-insert
    
    # alternate mappings for "page up" and "page down" to search the history
    "\e[5~": history-search-backward
    "\e[6~": history-search-forward
    
    # mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
    "\e[1;5C": forward-word
    "\e[1;5D": backward-word
    "\e[5C": forward-word
    "\e[5D": backward-word
    "\e\e[C": forward-word
    "\e\e[D": backward-word
    
    $if term=rxvt
    "\e[7~": beginning-of-line
    "\e[8~": end-of-line
    "\eOc": forward-word
    "\eOd": backward-word
    $endif
    
    set completion-ignore-case on
    $endif
    
    EOD

    cat <<"EOD" > /etc/bashrc
    PS1='\[\033[01;30m\][deckhouse]\[\033[00m\] \[\033[01;33m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '

    source /etc/bashrc.d/bash_completion.sh
    EOD

    rm -f /root/.bashrc
    ln -s /etc/bashrc /root/.bashrc
    rm -f  /.bashrc
    ln -s /etc/bashrc /.bashrc

    ln -fs /usr/bin/vim-console /usr/bin/vim
    ln -fs /usr/bin/vim-console /usr/bin/vi

    mkdir -p /etc/vim
    cat <<"EOD" > /etc/vim/vimrc.local
    source $VIMRUNTIME/defaults.vim
    let g:skip_defaults_vim = 1
    set noautoindent
    set mouse=c
    
    EOD

    echo 'eval "$(dhctl --completion-script-bash)"' >> /etc/bashrc
    echo 'dev' > /deckhouse/version

    cat << EOD > /root/.tofurc
    provider_installation {
      filesystem_mirror {
        path    = "/plugins"
        include = ["registry.opentofu.org/*/*"]
      }
    }
    EOD


imageSpec:
  config:
    env: { "EDITOR": "vim" }
    labels: {
      "io.deckhouse.version": "dev",
      "io.deckhouse.edition": "FE",
      "io.deckhouse.kubernetes.versions.supported": "1.28 1.29 1.30 1.31 1.32",
      "io.deckhouse.kubernetes.versions.default": "1.30",
      "io.deckhouse.kubernetes.versions.eol": "1.28",
      "io.deckhouse.kubernetes.versions.preview": "1.32"
    }
    user: "0:0"


---
image: dev-prebuild
fromImage: common-base
git:
- add: /
  to: /deckhouse
  stageDependencies:
    setup:
      - '**/*'
  includePaths:
    
    
    - candi
    - modules
    - global-hooks
    - shell_lib.sh
    - shell_lib
    - deckhouse-controller/entrypoint.sh
    - deckhouse-controller/crds/*.yaml
    - jq_lib
    - helm_lib
    - python_lib
  excludePaths:
  
  - docs
  - modules/*/docs
  - modules/*/README.md
  - modules/*/images
  - modules/*/hooks/**/*.go
  - modules/*/template_tests
  - modules/*/.namespace
  - modules/*/values_matrix_test.yaml
  - modules/*/apis/**/*.go
  - modules/*/requirements/**/*.go
  - modules/*/settings-conversion/**/*.go
  - modules/*/hack/**/*.go
  - global-hooks/**/*.go
  - candi/cloud-providers/*/layouts
  - candi/cloud-providers/*/terraform-modules
  - '**/testdata'

  # Code generated by tools/build.go; DO NOT EDIT.
  

- url: https://github.com/flant/shell-operator
  tag: v1.4.10
  add: /frameworks/shell
  to: /deckhouse/shell-operator/frameworks/shell
# Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/be/modules/040-node-manager/openapi/config-values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/config-values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/doc-ru-config-values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/doc-ru-config-values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/openapi-case-tests.yaml
  to: /deckhouse/modules/040-node-manager/openapi/openapi-case-tests.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/140-user-authz/templates/webhook
  to: /deckhouse/modules/140-user-authz/templates/webhook
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/be/modules/350-node-local-dns
  to: /deckhouse/modules/350-node-local-dns
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se/modules/380-metallb
  to: /deckhouse/modules/380-metallb
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/021-cni-cilium/crds/doc-ru-egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/doc-ru-egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/doc-ru-egressgateways.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/doc-ru-egressgateways.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/egressgateways.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/egressgateways.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/internal
  to: /deckhouse/modules/021-cni-cilium/crds/internal
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent
  to: /deckhouse/modules/021-cni-cilium/images/egress-gateway-agent
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-gateway-agent
  to: /deckhouse/modules/021-cni-cilium/templates/egress-gateway-agent
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-gateway-instance
  to: /deckhouse/modules/021-cni-cilium/templates/egress-gateway-instance
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-policy
  to: /deckhouse/modules/021-cni-cilium/templates/egress-policy
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/021-cni-cilium/monitoring/prometheus-rules/egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/monitoring/prometheus-rules/egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/030-cloud-provider-vsphere
  to: /deckhouse/modules/030-cloud-provider-vsphere
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/030-cloud-provider-zvirt
  to: /deckhouse/modules/030-cloud-provider-zvirt
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/040-node-manager/cloud-providers/vsphere
  to: /deckhouse/modules/040-node-manager/cloud-providers/vsphere
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/se-plus/modules/040-node-manager/capi/zvirt
  to: /deckhouse/modules/040-node-manager/capi/zvirt
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/015-admission-policy-engine/templates/trivy-provider
  to: /deckhouse/modules/015-admission-policy-engine/templates/trivy-provider
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/015-admission-policy-engine/templates/ratify
  to: /deckhouse/modules/015-admission-policy-engine/templates/ratify
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/025-static-routing-manager
  to: /deckhouse/modules/025-static-routing-manager
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/030-cloud-provider-dynamix
  to: /deckhouse/modules/030-cloud-provider-dynamix
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/030-cloud-provider-huaweicloud
  to: /deckhouse/modules/030-cloud-provider-huaweicloud
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/030-cloud-provider-openstack
  to: /deckhouse/modules/030-cloud-provider-openstack
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/030-cloud-provider-vcd
  to: /deckhouse/modules/030-cloud-provider-vcd
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/040-node-manager/cloud-providers/openstack
  to: /deckhouse/modules/040-node-manager/cloud-providers/openstack
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/040-node-manager/capi/dynamix
  to: /deckhouse/modules/040-node-manager/capi/dynamix
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/040-node-manager/capi/huaweicloud
  to: /deckhouse/modules/040-node-manager/capi/huaweicloud
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/040-node-manager/capi/vcd
  to: /deckhouse/modules/040-node-manager/capi/vcd
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/110-istio/templates/alliance
  to: /deckhouse/modules/110-istio/templates/alliance
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/110-istio/templates/control-plane-ee
  to: /deckhouse/modules/110-istio/templates/control-plane-ee
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/110-istio/templates/federation
  to: /deckhouse/modules/110-istio/templates/federation
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/110-istio/templates/multicluster
  to: /deckhouse/modules/110-istio/templates/multicluster
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/110-istio/templates/validations.yaml
  to: /deckhouse/modules/110-istio/templates/validations.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/doc-ru-istiofederation.yaml
  to: /deckhouse/modules/110-istio/crds/doc-ru-istiofederation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/doc-ru-istiomulticluster.yaml
  to: /deckhouse/modules/110-istio/crds/doc-ru-istiomulticluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/istiofederation.yaml
  to: /deckhouse/modules/110-istio/crds/istiofederation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/istiomulticluster.yaml
  to: /deckhouse/modules/110-istio/crds/istiomulticluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/dataplane.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/dataplane.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/federation.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/federation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/multicluster.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/multicluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/templates/_helper.tpl
  to: /deckhouse/modules/380-metallb/templates/_helper.tpl
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/templates/controller
  to: /deckhouse/modules/380-metallb/templates/controller
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/380-metallb/templates/speaker
  to: /deckhouse/modules/380-metallb/templates/speaker
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/380-metallb/monitoring/grafana-dashboards/kubernetes-cluster/metallb-bgp.json
  to: /deckhouse/modules/380-metallb/monitoring/grafana-dashboards/kubernetes-cluster/metallb-bgp.json
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/monitoring/prometheus-rules/metallb.yaml
  to: /deckhouse/modules/380-metallb/monitoring/prometheus-rules/metallb.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/450-keepalived
  to: /deckhouse/modules/450-keepalived
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/450-network-gateway
  to: /deckhouse/modules/450-network-gateway
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/500-operator-trivy
  to: /deckhouse/modules/500-operator-trivy
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/610-service-with-healthchecks
  to: /deckhouse/modules/610-service-with-healthchecks
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/modules/650-runtime-audit-engine
  to: /deckhouse/modules/650-runtime-audit-engine
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/fe/modules/002-deckhouse/templates/flant-module-source.yaml
  to: /deckhouse/modules/002-deckhouse/templates/flant-module-source.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/040-node-manager/templates/ngc-ca-certificate.yaml
  to: /deckhouse/modules/040-node-manager/templates/ngc-ca-certificate.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/300-prometheus/templates/prometheus/prometheus.yaml
  to: /deckhouse/modules/300-prometheus/templates/prometheus/prometheus.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/300-prometheus/templates/prometheus/longterm/prometheus.yaml
  to: /deckhouse/modules/300-prometheus/templates/prometheus/longterm/prometheus.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/340-monitoring-applications
  to: /deckhouse/modules/340-monitoring-applications
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/fe/modules/500-basic-auth
  to: /deckhouse/modules/500-basic-auth
  excludePaths:
    - docs
    - README.md
    - images
    - hooks/**/*.go
    - hooks/*.go
    - hack
    - template_tests
    - .namespace
    - values_matrix_test.yaml
    - .build.yaml
- add: /ee/fe/modules/500-okmeter/templates/daemonset.yaml
  to: /deckhouse/modules/500-okmeter/templates/daemonset.yaml
  stageDependencies:
    install:
        - '**/*'

# Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/se-plus/candi/cloud-providers/vsphere
  to: /deckhouse/candi/cloud-providers/vsphere
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/candi/cloud-providers/zvirt
  to: /deckhouse/candi/cloud-providers/zvirt
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/openstack
  to: /deckhouse/candi/cloud-providers/openstack
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/vcd
  to: /deckhouse/candi/cloud-providers/vcd
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/dynamix
  to: /deckhouse/candi/cloud-providers/dynamix
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/huaweicloud
  to: /deckhouse/candi/cloud-providers/huaweicloud
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  to: /deckhouse/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  stageDependencies:
    install:
        - '**/*'

import:
- image: deckhouse-controller-artifact
  add: /out/deckhouse-controller
  to: /usr/bin/deckhouse-controller
  after: install
- image: deckhouse-controller-artifact
  add: /out/deckhouse-controller
  to: /usr/bin/caps-deckhouse-controller
  after: install
- image: common/jq-artifact
  add: /usr/bin/jq
  to: /usr/bin/jq
  after: setup
- image: version-map-artifact
  add: /version_map_FE.yml
  to: /deckhouse/candi/version_map.yml
  after: setup
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  setup:
  - |
    # Add bundle default
    cat <<"EOD" > /deckhouse/modules/values-default.yaml
    # CE Bundle "Default"
    admissionPolicyEngineEnabled: true
    certManagerEnabled: true
    chronyEnabled: true
    ciliumHubbleEnabled: false
    controlPlaneManagerEnabled: true
    dashboardEnabled: true
    deckhouseEnabled: true
    documentationEnabled: true
    deckhouseToolsEnabled: true
    deschedulerEnabled: true
    extendedMonitoringEnabled: true
    flowSchemaEnabled: true
    ingressNginxEnabled: true
    kubeDnsEnabled: true
    kubeProxyEnabled: true
    localPathProvisionerEnabled: true
    logShipperEnabled: true
    monitoringCustomEnabled: true
    monitoringDeckhouseEnabled: true
    monitoringKubernetesControlPlaneEnabled: true
    monitoringKubernetesEnabled: true
    monitoringPingEnabled: true
    multitenancyManagerEnabled: true
    namespaceConfiguratorEnabled: true
    registryPackagesProxyEnabled: true
    nodeManagerEnabled: true
    operatorPrometheusEnabled: true
    podReloaderEnabled: true
    priorityClassEnabled: true
    prometheusEnabled: true
    prometheusMetricsAdapterEnabled: true
    secretCopierEnabled: true
    snapshotControllerEnabled: true
    terraformManagerEnabled: true
    upmeterEnabled: true
    userAuthnEnabled: true
    userAuthzEnabled: true
    verticalPodAutoscalerEnabled: true
    
    # BE Bundle "Default"
    nodeLocalDnsEnabled: true
    
    # SE Bundle "Default"
    
    # SE+ Bundle "Default"
    
    # EE Bundle "Default"
    
    # FE Bundle "Default"
    flantIntegrationEnabled: true
    monitoringApplicationsEnabled: true
    
    EOD
    # Add bundle managed
    cat <<"EOD" > /deckhouse/modules/values-managed.yaml
    # CE Bundle "Managed"
    admissionPolicyEngineEnabled: true
    certManagerEnabled: true
    dashboardEnabled: true
    deckhouseEnabled: true
    documentationEnabled: true
    deckhouseToolsEnabled: true
    deschedulerEnabled: true
    extendedMonitoringEnabled: true
    flowSchemaEnabled: true
    ingressNginxEnabled: true
    localPathProvisionerEnabled: true
    logShipperEnabled: true
    monitoringCustomEnabled: true
    monitoringDeckhouseEnabled: true
    monitoringKubernetesEnabled: true
    monitoringPingEnabled: true
    multitenancyManagerEnabled: true
    namespaceConfiguratorEnabled: true
    operatorPrometheusEnabled: true
    podReloaderEnabled: true
    prometheusEnabled: true
    prometheusMetricsAdapterEnabled: true
    secretCopierEnabled: true
    snapshotControllerEnabled: true
    upmeterEnabled: true
    userAuthzEnabled: true
    verticalPodAutoscalerEnabled: true
    
    # BE Bundle "Managed"
    
    # SE Bundle "Managed"
    
    # SE+ Bundle "Managed"
    
    # EE Bundle "Managed"
    
    # FE Bundle "Managed"
    flantIntegrationEnabled: true
    monitoringApplicationsEnabled: true
    
    EOD
    # Add bundle minimal
    cat <<"EOD" > /deckhouse/modules/values-minimal.yaml
    # CE Bundle "Minimal"
    deckhouseEnabled: true
    
    # BE Bundle "Minimal"
    
    # SE Bundle "Minimal"
    
    # SE+ Bundle "Minimal"
    
    # EE Bundle "Minimal"
    
    # FE Bundle "Minimal"
    
    EOD
    
    # Add version info
    cat <<"EOD" > /deckhouse/version
    dev
    EOD
    # Add edition info
    cat <<"EOD" > /deckhouse/edition
    FE
    EOD
    # Override deckhouse entrypoint to use tini as supervisor
    cat <<"EOD" > /deckhouse/deckhouse
    #!/bin/bash
    exec tini -- /deckhouse/deckhouse-controller/entrypoint.sh
    EOD
    chmod +x /deckhouse/deckhouse
    # Create symlink to grant entrypoint.sh write permission
    ln -fs /tmp/values.yaml /deckhouse/modules/values.yaml
    # Create deckhouse group
    groupadd -g 64535 deckhouse
    # Create deckhouse user
    useradd -d / -u 64535 -g deckhouse -s /sbin/nologin deckhouse
    # Run deckhouse from dedicated user
    chown deckhouse:deckhouse -R /deckhouse
    # Create symlink to vim-console
    ln -fs /usr/bin/vim-console /usr/bin/vim
    ln -fs /usr/bin/vim-console /usr/bin/vi
  - setcap "cap_sys_chroot=ep cap_sys_admin=ep cap_mknod=ep" /usr/bin/caps-deckhouse-controller


imageSpec:
  config:
    env: { "MODULES_DIR": "/deckhouse/modules", "GLOBAL_HOOKS_DIR": "/deckhouse/global-hooks", "PYTHONPATH": "/deckhouse/python_lib", "LC_ALL": "C" }
---

image: dev
fromImage: dev-prebuild
import:
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/modules/images_digests.json
  after: setup
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/modules/040-node-manager/images_digests.json
  after: setup

imageSpec:
  config:
    env: { "EDITOR": "vim" }
    labels: {
      "io.deckhouse.version": "dev",
      "io.deckhouse.edition": "FE",
      "io.deckhouse.kubernetes.versions.supported": "1.28 1.29 1.30 1.31 1.32",
      "io.deckhouse.kubernetes.versions.default": "1.30",
      "io.deckhouse.kubernetes.versions.eol": "1.28",
      "io.deckhouse.kubernetes.versions.preview": "1.32"
    }
---


---
image: e2e-opentofu-eks
# we use artifact with ubuntu because alpine can not unzip with `unzip` and `tar` command
# current openstack zip-archive with error: "unzip: zip flag 8 (streaming) is not supported"
fromImage: common/alt-p11-artifact
import:
  - image: common/kubernetes-artifact-1-28-15
    add: /src/_output/bin/kubectl
    to: /usr/local/bin/kubectl
    before: setup
  - image: opentofu # from modules/040-terraform-manager/images/terraform-manager-base/werf.inc.yaml
    add: /opentofu/opentofu
    to: /image/bin/opentofu
    before: setup
  - image: terraform-provider-aws # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-aws
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/hashicorp/aws/4.50.0//linux_amd64/terraform-provider-aws
    before: setup
  - image: terraform-provider-azure # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-azurerm
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/hashicorp/azurerm/2.36.0//linux_amd64/terraform-provider-azurerm
    before: setup
  - image: terraform-provider-gcp # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-gcp
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/hashicorp/google/3.48.0//linux_amd64/terraform-provider-google
    before: setup
  - image: terraform-provider-yandex # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-yandex
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/yandex-cloud/yandex/0.83.0//linux_amd64/terraform-provider-yandex
    before: setup
  - image: terraform-provider-vsphere # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-vsphere
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/hashicorp/vsphere/2.0.2//linux_amd64/terraform-provider-vsphere
    before: setup
  - image: terraform-provider-ovirt # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-ovirt
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/terraform-provider-ovirt/ovirt/2.1.5//linux_amd64/terraform-provider-ovirt
    before: setup
  - image: terraform-provider-openstack # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-openstack
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/terraform-provider-openstack/openstack/1.54.1//linux_amd64/terraform-provider-openstack
    before: setup
  - image: terraform-provider-vcd-artifact # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-vcd-v3.10.0
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/vmware/vcd/3.10.0//linux_amd64/terraform-provider-vcd
    before: setup
  - image: terraform-provider-vcd-artifact # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-vcd-v3.14.1
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/vmware/vcd/3.14.1//linux_amd64/terraform-provider-vcd
    before: setup
  - image: terraform-provider-decort # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-decort
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/terraform-provider-decort/decort/4.7.3//linux_amd64/terraform-provider-decort
    before: setup
  - image: terraform-provider-huaweicloud # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
    add: /terraform-provider-huaweicloud
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/terraform-provider-huaweicloud/huaweicloud/1.69.0//linux_amd64/terraform-provider-huaweicloud
    before: setup
  - image: e2e-eks-terraform-plugins
    add: /terraform-provider-random
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/hashicorp/random/3.4.3/linux_amd64/terraform-provider-random_v3.4.3_x5
    before: setup
  - image: e2e-eks-terraform-plugins
    add: /terraform-provider-tls
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/hashicorp/tls/4.0.5/linux_amd64/terraform-provider-tls_v4.0.5_x5
    before: setup
  - image: e2e-eks-terraform-plugins
    add: /terraform-provider-cloudinit
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/hashicorp/cloudinit/2.2.0/linux_amd64/terraform-provider-cloudinit_v2.2.0_x5
    before: setup
  - image: e2e-eks-terraform-plugins
    add: /terraform-provider-kubernetes
    to: /usr/local/share/opentofu/plugins/registry.opentofu.org/hashicorp/kubernetes/2.31.0/linux_amd64/terraform-provider-kubernetes_v2.31.0_x5
    before: setup
shell:
  beforeInstall:
  - apt-get install -y wget unzip git python3 pip jq curl gettext-base
  - pip3 install awscli
  - |
    mkdir /opentofu
    mkdir -p /usr/local/share/opentofu/plugins
    cat << EOD > /root/.tofurc
    provider_installation {
      filesystem_mirror {
        path    = "/usr/local/share/opentofu/plugins"
        include = ["*/*/*"]
      }
    }
    EOD
    touch /opentofu.log
    chmod 755 /opentofu.log
---
image: e2e-eks-terraform-plugins-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 --branch v3.4.3 https://github.com/hashicorp/terraform-provider-random.git /src/provider-random && rm -rf /src/provider-random/.git
  - git clone --depth 1 --branch v4.0.4 https://github.com/hashicorp/terraform-provider-tls.git /src/provider-tls && rm -rf /src/provider-tls/.git
  - git clone --depth 1 --branch v2.2.0 https://github.com/hashicorp/terraform-provider-cloudinit.git /src/provider-cloudinit && rm -rf /src/provider-cloudinit/.git
  - git clone --depth 1 --branch v2.31.0 https://github.com/hashicorp/terraform-provider-kubernetes.git /src/provider-kubernetes && rm -rf /src/provider-kubernetes/.git
---
image: e2e-eks-terraform-plugins
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: e2e-eks-terraform-plugins-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/provider-random
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\""
  - cd /src/provider-tls
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\""
  - cd /src/provider-cloudinit
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\""
  - cd /src/provider-kubernetes
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\""
  - mv /src/provider-random/terraform-provider-random /terraform-provider-random
  - mv /src/provider-tls/terraform-provider-tls /terraform-provider-tls
  - mv /src/provider-cloudinit/terraform-provider-cloudinit /terraform-provider-cloudinit
  - mv /src/provider-kubernetes/terraform-provider-kubernetes /terraform-provider-kubernetes
  - chmod 755 /terraform-provider-*
  - chown 64535:64535 /terraform-provider-*


---
image: golangci-lint-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
shell:
  beforeInstall:
  - apk add --no-cache git openssh-client
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  install:
  # Use v1.60.1 for go1.23 - https://github.com/golangci/golangci-lint/issues/4837
  - export GOPROXY=https://proxy.golang.org/
  - git clone --depth 1 https://github.com/golangci/golangci-lint --branch v1.60.1
  - cd golangci-lint/
  - CGO_ENABLED=0 GOOS=linux go build -ldflags '-s -w -extldflags "-static"' -o /usr/local/bin/golangci-lint cmd/golangci-lint/main.go
  - rm -rf /golangci-lint/.git
---


# modules_images

# Collect images if desired for editions
#
# depending on the rules for skipping modules in the editions.yaml
# file and the used assembly mechanism (werf, docker), we form modules for assembly
  

    # fill in "$_" data for assembly
  

    # fill in "$_" data for assembly
  

    # fill in "$_" data for assembly
  

    # fill in "$_" data for assembly
  

    # fill in "$_" data for assembly
  

    # fill in "$_" data for assembly
      # exclude modules and images from editions
---
---
image: user-authz/webhook
fromImage: common/distroless
import:
  - image: user-authz/webhook-user-authz-webhook-artifact
    add: /src/webhook
    to: /webhook
    before: setup
  - image: user-authz/webhook-user-authz-webhook-artifact
    add: /src/healthcheck
    to: /healthcheck
    before: setup
imageSpec:
  config:
    entrypoint: [ "/webhook" ]
---
image: user-authz/webhook-user-authz-webhook-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /ee/be/modules/140-user-authz/images/webhook/src
    to: /src
    includePaths:
      - '**/*.go'
      - '**/go.mod'
      - '**/go.sum'
    stageDependencies:
      install:
        - '**/*.go'
        - '**/go.mod'
        - '**/go.sum'
---
image: user-authz/webhook-user-authz-webhook-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: user-authz/webhook-user-authz-webhook-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src
    - go build -ldflags '-s -w' -o webhook ./cmd/webhook/main.go
    - go build -ldflags '-s -w' -o healthcheck ./cmd/healthcheck/main.go
    - chown 64535:64535 webhook healthcheck
    - chmod 0700 webhook healthcheck

      # exclude modules and images from editions
---

---
image: node-local-dns/coredns
fromImage: common/coredns
import:
- image: node-local-dns/coredns-binaries-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: node-local-dns/coredns-artifact
  add: /coredns-helper
  to: /coredns-helper
  before: setup
imageSpec:
  config:
    entrypoint: [ "/coredns" ]
---
image: node-local-dns/coredns-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  install:
    - mkdir -p /relocate/sbin
    - |
      for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
        rm -f "/relocate/sbin/${cmd}"
        ln -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
      done
    - |
      for mode in legacy nft; do
        for basecmd in iptables ip6tables; do
          for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
            ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
          done
        done
      done
---
image: node-local-dns/coredns-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/be/modules/350-node-local-dns/images/coredns/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: node-local-dns/coredns-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-local-dns/coredns-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /coredns-helper main.go
  - chmod 0700 /coredns-helper

      # exclude modules and images from editions
---

---
image: node-local-dns/iptables-loop
fromImage: common/distroless
import:
- image: node-local-dns/iptables-loop-binaries-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: node-local-dns/iptables-loop-artifact
  add: /iptables-loop
  to: /iptables-loop
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
imageSpec:
  config:
    entrypoint: [ "/iptables-loop" ]
---
image: node-local-dns/iptables-loop-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  install:
    - mkdir -p /relocate/sbin
    - |
      for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
        rm -f "/relocate/sbin/${cmd}"
        ln -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
      done
    - |
      for mode in legacy nft; do
        for basecmd in iptables ip6tables; do
          for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
            ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
          done
        done
      done
---
image: node-local-dns/iptables-loop-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/be/modules/350-node-local-dns/images/iptables-loop/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: node-local-dns/iptables-loop-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-local-dns/iptables-loop-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /iptables-loop main.go
  - chmod 0700 /iptables-loop

      # exclude modules and images from editions
---
---
image: node-local-dns/stale-dns-connections-cleaner-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/be/modules/350-node-local-dns/images/stale-dns-connections-cleaner
  to: /src
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "**/*.go"
---
image: node-local-dns/stale-dns-connections-cleaner-build-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: node-local-dns/stale-dns-connections-cleaner-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
    - apt-get install -y ca-certificates golang libcap-utils
  install:
  - cd /src
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src
  - go build -ldflags="-s -w" -o stale-dns-connections-cleaner .
  - chmod 0700 /src/stale-dns-connections-cleaner
---
image: node-local-dns/stale-dns-connections-cleaner
fromImage: common/distroless
import:
- image: node-local-dns/stale-dns-connections-cleaner-build-artifact
  add: /src/stale-dns-connections-cleaner
  to: /stale-dns-connections-cleaner
  before: install
  owner: root
  group: root
imageSpec:
  config:
    entrypoint: ["/stale-dns-connections-cleaner"]

      # exclude modules and images from editions
---
---
image: basic-auth/nginx
fromImage: common/nginx-static
imageSpec:
  config:
    entrypoint: ["/opt/nginx-static/sbin/nginx", "-g", "daemon off;"]

      # exclude modules and images from editions
---
---
image: admission-policy-engine/ratify
fromImage: common/distroless
import:
  - image: admission-policy-engine/ratify-artifact
    add: /ratify
    to: /ratify
    before: setup
imageSpec:
  config:
    entrypoint: [ "/ratify" ]
---
image: admission-policy-engine/ratify-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/015-admission-policy-engine/images/ratify/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.3.1 https://github.com/ratify-project/ratify.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: admission-policy-engine/ratify-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: admission-policy-engine/ratify-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /ratify cmd/ratify/main.go
  - chown 64535:64535 /ratify
  - chmod 0700 /ratify

      # exclude modules and images from editions
---
---
image: admission-policy-engine/trivy-provider
fromImage: common/distroless
import:
  - image: admission-policy-engine/trivy-provider-artifact
    add: /trivy_provider
    to: /trivy_provider
    before: setup
imageSpec:
  config:
    entrypoint: [ "/trivy_provider" ]
---
image: admission-policy-engine/trivy-provider-src-artifact
fromImage: operator-trivy/trivy-src-artifact
final: false
git:
- add: /ee/modules/015-admission-policy-engine/images/trivy-provider/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: admission-policy-engine/trivy-provider-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: admission-policy-engine/trivy-provider-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - ln -s ./trivy-db ./original-trivy-db
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /trivy_provider main.go
  - chown 64535:64535 /trivy_provider
  - chmod 0700 /trivy_provider

      # exclude modules and images from editions
---
---
image: static-routing-manager/agent-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /ee/modules/025-static-routing-manager/images/agent
    to: /src
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
    stageDependencies:
      install:
        - go.mod
        - go.sum
      setup:
        - "**/*.go"
shell:
  install:
    - cd /src
---
image: static-routing-manager/agent-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
import:
  - image: static-routing-manager/agent-src-artifact
    add: /src
    to: /src
    before: install
shell:
  install:
  - cd /src
  - go mod download
  setup:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src/cmd
  - go build -ldflags="-s -w" -o agent .
  - chmod +x /src/cmd/agent
---
image: static-routing-manager/agent
fromImage: common/distroless
import:
- image: static-routing-manager/agent-build-artifact
  add: /src/cmd/agent
  to: /agent
  before: install
imageSpec:
  config:
    entrypoint: ["/agent"]

      # exclude modules and images from editions
---
---
image: cloud-provider-dynamix/capd-controller-manager
fromImage: common/distroless
imageSpec:
  config:
    entrypoint: ["/capd-controller-manager"]
import:
- image: cloud-provider-dynamix/capd-controller-manager-artifact
  add: /capd-controller-manager
  to: /capd-controller-manager
  before: setup
---
image: cloud-provider-dynamix/capd-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
fromCacheVersion: "2025-02-14.1"
shell:
  install:
  - export VERSION="v0.4.0"
  - export VERSION_COMMON="v0.4.0"
  - git clone --depth 1 --branch ${VERSION} https://github.com/dynamix/capd-controller-manager.git /src
  - git clone --depth 1 --branch ${VERSION_COMMON} https://github.com/dynamix/dynamix-common.git /src/dynamix-common
  - cd /src
  - rm -rf .git vendor
  - sed -i -e 's# ../../dynamix-common# /src/dynamix-common#g' go.mod
  - cd /src/dynamix-common
  - rm -rf .git vendor
---
image: cloud-provider-dynamix/capd-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
fromCacheVersion: "2025-02-14.2"
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: cloud-provider-dynamix/capd-controller-manager-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o /capd-controller-manager cmd/main.go
  - chown 64535:64535 /capd-controller-manager
  - chmod 0700 /capd-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-dynamix/cloud-controller-manager
fromImage: common/distroless
import:
- image: cloud-provider-dynamix/cloud-controller-manager-artifact
  add: /dynamix-cloud-controller-manager
  to: /dynamix-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/dynamix-cloud-controller-manager"]
---
image: cloud-provider-dynamix/cloud-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - export VERSION="v0.3.0"
  - export VERSION_COMMON="v0.3.0"
  - git clone --depth 1 --branch ${VERSION} https://github.com/dynamix/cloud-controller-manager.git /src
  - git clone --depth 1 --branch ${VERSION_COMMON} https://github.com/dynamix/dynamix-common.git /src/dynamix-common
  - cd /src
  - rm -rf .git vendor
  - sed -i -e 's# ../../dynamix-common# /src/dynamix-common#g' go.mod
  - cd /src/dynamix-common
  - rm -rf .git vendor
---
image: cloud-provider-dynamix/cloud-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: cloud-provider-dynamix/cloud-controller-manager-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/
    - cd /src
    - go mod download
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w " -o /dynamix-cloud-controller-manager cmd/dynamix-cloud-controller-manager/main.go
    - chown 64535:64535 /dynamix-cloud-controller-manager
    - chmod 0755 /dynamix-cloud-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-dynamix/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-dynamix/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-dynamix/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /go_lib/cloud-data
  to: /deckhouse/go_lib/cloud-data
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  stageDependencies:
    install:
    - go.mod
    - go.sum
    - "**/*.go"
- add: /pkg/log
  to: /deckhouse/pkg/log
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  stageDependencies:
    install:
    - go.mod
    - go.sum
    - "**/*.go"
shell:
  install:
  - export VERSION="v0.5.0"
  - export VERSION_COMMON="v0.3.0"
  - git clone --depth 1 --branch ${VERSION} https://github.com/dynamix/cloud-data-discoverer.git /src
  - git clone --depth 1 --branch ${VERSION_COMMON} https://github.com/dynamix/dynamix-common.git /src/dynamix-common
  - mv /deckhouse/go_lib /src
  - mv /deckhouse/pkg /src
  - cd /src
  - rm -rf .git vendor
  - sed -i -e 's# ../dynamix-common# /src/dynamix-common#g' go.mod
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
  - cd /src/dynamix-common
  - rm -rf .git vendor
---
image: cloud-provider-dynamix/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-dynamix/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/
    - go mod download
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
    - chown 64535:64535 /discoverer
    - chmod 0755 /discoverer

      # exclude modules and images from editions
---
---
image: cloud-provider-dynamix/dynamix-csi-driver
fromImage: common/distroless
import:
- image: cloud-provider-dynamix/dynamix-csi-driver-artifact
  add: /dynamix-csi-driver
  to: /dynamix-csi-driver
  before: setup
- image: cloud-provider-dynamix/dynamix-csi-driver-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-dynamix/dynamix-csi-driver-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-dynamix/dynamix-csi-driver-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev/scsi_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/dynamix-csi-driver"]
---
image: cloud-provider-dynamix/dynamix-csi-driver-src-artifact
final: false
fromImage: common/src-artifact
fromCacheVersion: "2025-02-14.1"
shell:
  install:
  - export VERSION="v0.3.0"
  - export VERSION_COMMON="v0.4.0"
  - git clone --depth 1 --branch ${VERSION} https://github.com/dynamix/dynamix-csi-driver.git /src
  - git clone --depth 1 --branch ${VERSION_COMMON} https://github.com/dynamix/dynamix-common.git /src/dynamix-common
  - cd /src
  - rm -rf .git vendor
  - sed -i -e 's# ../../dynamix-common# /src/dynamix-common#g' go.mod
  - cd /src/dynamix-common
  - rm -rf .git vendor
---
image: cloud-provider-dynamix/dynamix-csi-driver-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: cloud-provider-dynamix/dynamix-csi-driver-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X main.version=${VERSION}" -o /dynamix-csi-driver cmd/dynamix-csi-driver/main.go
  - chown 64535:64535 /dynamix-csi-driver
  - chmod 0755 /dynamix-csi-driver
---
---
image: cloud-provider-dynamix/dynamix-csi-driver-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs parted btrfs-progs nvme udev
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /sbin/xfs_repair /usr/sbin/nvme /usr/sbin/parted /usr/sbin/xfs*" -o /relocate


      # exclude modules and images from editions
---
---
image: cloud-provider-huaweicloud/caphc-controller-manager
fromImage: common/distroless
import:
- image: cloud-provider-huaweicloud/caphc-controller-manager-artifact
  add: /caphc-controller-manager
  to: /caphc-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/caphc-controller-manager"]
---
image: cloud-provider-huaweicloud/caphc-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - export COMMON_VERSION="v0.4.0"
  - export VERSION="v0.2.0"
  - git clone --depth 1 --branch ${VERSION} https://github.com/huaweicloud/caphc-controller-manager.git /src
  - git clone --depth 1 --branch ${COMMON_VERSION} https://github.com/huaweicloud/huaweicloud-common.git /src/huaweicloud-common
  - cd /src/huaweicloud-common
  - rm -rf .git
  - cd /src
  - rm -rf .git
  - sed -i -e 's# ../huaweicloud-common# /src/huaweicloud-common#g' go.mod
---
image: cloud-provider-huaweicloud/caphc-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-huaweicloud/caphc-controller-manager-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o /caphc-controller-manager cmd/main.go
  - chown 64535:64535 /caphc-controller-manager
  - chmod 0700 /caphc-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-huaweicloud/cloud-controller-manager
fromImage: common/distroless
import:
- image: cloud-provider-huaweicloud/cloud-controller-manager-artifact
  add: /huaweicloud-cloud-controller-manager
  to: /huaweicloud-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/huaweicloud-cloud-controller-manager"]
---
image: cloud-provider-huaweicloud/cloud-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-huaweicloud/images/cloud-controller-manager/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.26.9 https://github.com/kubernetes-sigs/cloud-provider-huaweicloud.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-huaweicloud/cloud-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-bullseye@sha256:fad5b33791a319ba1c910a03a33575ea34fc8e142695a64be9a1a228e74af11e
import:
  - image: cloud-provider-huaweicloud/cloud-controller-manager-src-artifact
    add: /src
    to: /src
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w " -o /huaweicloud-cloud-controller-manager cmd/cloud-controller-manager/cloud-controller-manager.go
  - chown 64535:64535 /huaweicloud-cloud-controller-manager
  - chmod 0755 /huaweicloud-cloud-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-huaweicloud/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-huaweicloud/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-huaweicloud/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /go_lib/cloud-data
  to: /deckhouse/go_lib/cloud-data
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  stageDependencies:
    install:
    - go.mod
    - go.sum
    - "**/*.go"
- add: /pkg/log
  to: /deckhouse/pkg/log
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  stageDependencies:
    install:
    - go.mod
    - go.sum
    - "**/*.go"
shell:
  install:
  - export VERSION="v0.4.0"
  - export VERSION_COMMON="v0.4.0"
  - git clone --depth 1 --branch ${VERSION} https://github.com/huaweicloud/cloud-data-discoverer.git /src
  - git clone --depth 1 --branch ${VERSION_COMMON} https://github.com/huaweicloud/huaweicloud-common.git /src/huaweicloud-common
  - mv /deckhouse/go_lib /src
  - mv /deckhouse/pkg /src
  - cd /src
  - rm -rf .git vendor
  - sed -i -e 's# ../huaweicloud-common# /src/huaweicloud-common#g' go.mod
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
  - cd /src/huaweicloud-common
  - rm -rf .git vendor
---
image: cloud-provider-huaweicloud/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-huaweicloud/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---
---
image: cloud-provider-huaweicloud/huaweicloud-csi-driver
fromImage: common/distroless
import:
- image: cloud-provider-huaweicloud/huaweicloud-csi-driver-artifact
  add: /evs-csi-plugin
  to: /evs-csi-plugin
  before: setup
- image: cloud-provider-huaweicloud/huaweicloud-csi-driver-artifact
  add: /sfs-csi-plugin
  to: /sfs-csi-plugin
  before: setup
- image: cloud-provider-huaweicloud/huaweicloud-csi-driver-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-huaweicloud/huaweicloud-csi-driver-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-huaweicloud/huaweicloud-csi-driver-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev/scsi_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/evs-csi-plugin"]
---
image: cloud-provider-huaweicloud/huaweicloud-csi-driver-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-huaweicloud/images/huaweicloud-csi-driver/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - export VERSION="evs-0.1.11"
  - git clone --depth 1 --branch ${VERSION} https://github.com/huaweicloud/huaweicloud-csi-driver /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-huaweicloud/huaweicloud-csi-driver-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-huaweicloud/huaweicloud-csi-driver-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - export VERSION="evs-0.1.11"
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X version.Version=${VERSION}" -o /evs-csi-plugin ./cmd/evs-csi-plugin/main.go
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X version.Version=${VERSION}" -o /sfs-csi-plugin ./cmd/sfs-csi-plugin/main.go
---
image: cloud-provider-huaweicloud/huaweicloud-csi-driver-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs parted btrfs-progs nvme udev
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /sbin/xfs_repair /usr/sbin/nvme /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---

---
image: cloud-provider-openstack/cinder-csi-plugin-1-28
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-28
  add: /src/cinder-csi-plugin
  to: /bin/cinder-csi-plugin
  before: setup
- image: cloud-provider-openstack/cinder-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/cinder-csi-plugin"]
---
image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cinder-csi-plugin/patches/v1.28.3
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.28.3 https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.28.3
  - make cinder-csi-plugin
---
image: cloud-provider-openstack/cinder-csi-plugin-1-29
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-29
  add: /src/cinder-csi-plugin
  to: /bin/cinder-csi-plugin
  before: setup
- image: cloud-provider-openstack/cinder-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/cinder-csi-plugin"]
---
image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cinder-csi-plugin/patches/v1.29.1
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.29.1 https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.29.1
  - make cinder-csi-plugin
---
image: cloud-provider-openstack/cinder-csi-plugin-1-30
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-30
  add: /src/cinder-csi-plugin
  to: /bin/cinder-csi-plugin
  before: setup
- image: cloud-provider-openstack/cinder-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/cinder-csi-plugin"]
---
image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-30
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cinder-csi-plugin/patches/v1.30.2
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.30.2 https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.30.2
  - make cinder-csi-plugin
---
image: cloud-provider-openstack/cinder-csi-plugin-1-31
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-31
  add: /src/cinder-csi-plugin
  to: /bin/cinder-csi-plugin
  before: setup
- image: cloud-provider-openstack/cinder-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/cinder-csi-plugin"]
---
image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-31
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cinder-csi-plugin/patches/v1.31.2
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.31.2 https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.31.2
  - make cinder-csi-plugin
---
image: cloud-provider-openstack/cinder-csi-plugin-1-32
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-32
  add: /src/cinder-csi-plugin
  to: /bin/cinder-csi-plugin
  before: setup
- image: cloud-provider-openstack/cinder-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/cinder-csi-plugin"]
---
image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-32
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cinder-csi-plugin/patches/v1.31.2
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.31.2 https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-openstack/cinder-csi-plugin-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cinder-csi-plugin-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.31.2
  - make cinder-csi-plugin
---
image: cloud-provider-openstack/cinder-csi-plugin-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs parted btrfs-progs
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---

---
image: cloud-provider-openstack/cloud-controller-manager-1-28
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cloud-controller-manager-artifact-1-28
  add: /src/openstack-cloud-controller-manager
  to: /bin/openstack-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/openstack-cloud-controller-manager"]
---
image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cloud-controller-manager/patches/v1.28.3
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.28.3  https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-openstack/cloud-controller-manager-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.28.3
  - export GIT_VERSION=v1.28.3
  - make openstack-cloud-controller-manager
  - chown 64535:64535 /src/openstack-cloud-controller-manager
  - chmod 0755 /src/openstack-cloud-controller-manager
---
image: cloud-provider-openstack/cloud-controller-manager-1-29
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cloud-controller-manager-artifact-1-29
  add: /src/openstack-cloud-controller-manager
  to: /bin/openstack-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/openstack-cloud-controller-manager"]
---
image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cloud-controller-manager/patches/v1.29.1
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.29.1  https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-openstack/cloud-controller-manager-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.29.1
  - export GIT_VERSION=v1.29.1
  - make openstack-cloud-controller-manager
  - chown 64535:64535 /src/openstack-cloud-controller-manager
  - chmod 0755 /src/openstack-cloud-controller-manager
---
image: cloud-provider-openstack/cloud-controller-manager-1-30
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cloud-controller-manager-artifact-1-30
  add: /src/openstack-cloud-controller-manager
  to: /bin/openstack-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/openstack-cloud-controller-manager"]
---
image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-30
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cloud-controller-manager/patches/v1.30.2
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.30.2  https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-openstack/cloud-controller-manager-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.30.2
  - export GIT_VERSION=v1.30.2
  - make openstack-cloud-controller-manager
  - chown 64535:64535 /src/openstack-cloud-controller-manager
  - chmod 0755 /src/openstack-cloud-controller-manager
---
image: cloud-provider-openstack/cloud-controller-manager-1-31
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cloud-controller-manager-artifact-1-31
  add: /src/openstack-cloud-controller-manager
  to: /bin/openstack-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/openstack-cloud-controller-manager"]
---
image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-31
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cloud-controller-manager/patches/v1.31.2
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.31.2  https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-openstack/cloud-controller-manager-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.31.2
  - export GIT_VERSION=v1.31.2
  - make openstack-cloud-controller-manager
  - chown 64535:64535 /src/openstack-cloud-controller-manager
  - chmod 0755 /src/openstack-cloud-controller-manager
---
image: cloud-provider-openstack/cloud-controller-manager-1-32
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cloud-controller-manager-artifact-1-32
  add: /src/openstack-cloud-controller-manager
  to: /bin/openstack-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/openstack-cloud-controller-manager"]
---
image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-32
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cloud-controller-manager/patches/v1.31.2
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.31.2  https://github.com/kubernetes/cloud-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-openstack/cloud-controller-manager-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-openstack/cloud-controller-manager-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - export VERSION=v1.31.2
  - export GIT_VERSION=v1.31.2
  - make openstack-cloud-controller-manager
  - chown 64535:64535 /src/openstack-cloud-controller-manager
  - chmod 0755 /src/openstack-cloud-controller-manager
      # exclude modules and images from editions
---
---
image: cloud-provider-openstack/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-openstack/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-openstack/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-openstack/images/cloud-data-discoverer/src
  to:  /src
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /go_lib/cloud-data
  to: /src/go_lib/cloud-data
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /pkg/log
  to: /src/pkg/log
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
shell:
  install:
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
---
image: cloud-provider-openstack/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-openstack/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---

---
image: cloud-provider-vcd/capcd-controller-manager-legacy
fromImage: common/distroless
import:
- image: cloud-provider-vcd/capcd-controller-manager-legacy-artifact
  add: /cluster-api-provider-cloud-director
  to: /cluster-api-provider-cloud-director
  before: setup
imageSpec:
  config:
    entrypoint: ["/cluster-api-provider-cloud-director"]
---
image: cloud-provider-vcd/capcd-controller-manager-legacy-src-artifact
final: false
fromImage: common/src-artifact
import:
- image: cloud-provider-vcd/cloud-controller-manager-legacy-src-artifact
  add: /src
  to: /src/ccm
  after: install
git:
- add: /ee/modules/030-cloud-provider-vcd/images/capcd-controller-manager-legacy/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.2.0 https://github.com/vmware/cluster-api-provider-cloud-director /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - echo "replace github.com/vmware/cloud-provider-for-cloud-director => /src/ccm" >> go.mod
  - rm -rf .git vendor
---
image: cloud-provider-vcd/capcd-controller-manager-legacy-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vcd/capcd-controller-manager-legacy-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X github.com/vmware/cluster-api-provider-cloud-director/release.Version=v1.2.0" -o /cluster-api-provider-cloud-director
  - chown 64535:64535 /cluster-api-provider-cloud-director
  - chmod 0755 /cluster-api-provider-cloud-director

      # exclude modules and images from editions
---

---
image: cloud-provider-vcd/capcd-controller-manager
fromImage: common/distroless
import:
- image: cloud-provider-vcd/capcd-controller-manager-artifact
  add: /cluster-api-provider-cloud-director
  to: /cluster-api-provider-cloud-director
  before: setup
imageSpec:
  config:
    entrypoint: ["/cluster-api-provider-cloud-director"]
---
image: cloud-provider-vcd/capcd-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
import:
- image: cloud-provider-vcd/cloud-controller-manager-src-artifact
  add: /src
  to: /src/ccm
  after: install
git:
- add: /ee/modules/030-cloud-provider-vcd/images/capcd-controller-manager/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.3.2 https://github.com/vmware/cluster-api-provider-cloud-director /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - echo "replace github.com/vmware/cloud-provider-for-cloud-director => /src/ccm" >> go.mod
  - rm -rf .git vendor
---
image: cloud-provider-vcd/capcd-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vcd/capcd-controller-manager-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X github.com/vmware/cluster-api-provider-cloud-director/release.Version=v1.3.2" -o /cluster-api-provider-cloud-director
  - chown 64535:64535 /cluster-api-provider-cloud-director
  - chmod 0755 /cluster-api-provider-cloud-director

      # exclude modules and images from editions
---

---
image: cloud-provider-vcd/cloud-controller-manager-legacy
fromImage: common/distroless
import:
- image: cloud-provider-vcd/cloud-controller-manager-legacy-artifact
  add: /src/bin/cloud-provider-for-cloud-director
  to: /cloud-provider-for-cloud-director
  before: setup
imageSpec:
  config:
    entrypoint: ["/cloud-provider-for-cloud-director"]
---
image: cloud-provider-vcd/cloud-controller-manager-legacy-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-vcd/images/cloud-controller-manager-legacy/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 1.5.0 https://github.com/vmware/cloud-provider-for-cloud-director.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-vcd/cloud-controller-manager-legacy-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-vcd/cloud-controller-manager-legacy-src-artifact
    add: /src
    to: /src
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/vmware/cloud-provider-for-cloud-director/release.Version=1.5.0" -o bin/cloud-provider-for-cloud-director cmd/ccm/main.go
  - chown 64535:64535 bin/cloud-provider-for-cloud-director
  - chmod 0755 bin/cloud-provider-for-cloud-director

      # exclude modules and images from editions
---

---
image: cloud-provider-vcd/cloud-controller-manager
fromImage: common/distroless
import:
- image: cloud-provider-vcd/cloud-controller-manager-artifact
  add: /src/bin/cloud-provider-for-cloud-director
  to: /cloud-provider-for-cloud-director
  before: setup
imageSpec:
  config:
    entrypoint: ["/cloud-provider-for-cloud-director"]
---
image: cloud-provider-vcd/cloud-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-vcd/images/cloud-controller-manager/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 1.6.1 https://github.com/vmware/cloud-provider-for-cloud-director.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-vcd/cloud-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-vcd/cloud-controller-manager-src-artifact
    add: /src
    to: /src
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/vmware/cloud-provider-for-cloud-director/release.Version=1.6.1" -o bin/cloud-provider-for-cloud-director cmd/ccm/main.go
  - chown 64535:64535 bin/cloud-provider-for-cloud-director
  - chmod 0755 bin/cloud-provider-for-cloud-director

      # exclude modules and images from editions
---
---
image: cloud-provider-vcd/cloud-data-discoverer-legacy
fromImage: common/distroless
import:
- image: cloud-provider-vcd/cloud-data-discoverer-legacy-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-vcd/cloud-data-discoverer-legacy-src-artifact
final: false
fromImage: common/src-artifact
git:
  - add: /ee/modules/030-cloud-provider-vcd/images/cloud-data-discoverer/src
    to: /src
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
      - go.mod
      - go.sum
    stageDependencies:
      install:
        - "**/*.go"
  - add: /ee/modules/030-cloud-provider-vcd/images/cloud-data-discoverer-legacy/src/go.mod
    to: /src/go.mod
    stageDependencies:
      install:
        - go.mod
  - add: /ee/modules/030-cloud-provider-vcd/images/cloud-data-discoverer-legacy/src/go.sum
    to: /src/go.sum
    stageDependencies:
      install:
        - go.sum
  - add: /go_lib/cloud-data
    to: /src/go_lib/cloud-data
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
    stageDependencies:
      install:
        - go.mod
        - go.sum
        - "**/*.go"
  - add: /pkg/log
    to: /src/pkg/log
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
    stageDependencies:
      install:
        - go.mod
        - go.sum
        - "**/*.go"
shell:
  install:
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
---
image: cloud-provider-vcd/cloud-data-discoverer-legacy-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-vcd/cloud-data-discoverer-legacy-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---
---
image: cloud-provider-vcd/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-vcd/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-vcd/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
  - add: /ee/modules/030-cloud-provider-vcd/images/cloud-data-discoverer/src
    to:  /src
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
    stageDependencies:
      install:
        - go.mod
        - go.sum
        - "**/*.go"
  - add: /go_lib/cloud-data
    to: /src/go_lib/cloud-data
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
    stageDependencies:
      install:
        - go.mod
        - go.sum
        - "**/*.go"
  - add: /pkg/log
    to: /src/pkg/log
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
    stageDependencies:
      install:
        - go.mod
        - go.sum
        - "**/*.go"
shell:
  install:
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
---
image: cloud-provider-vcd/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-vcd/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---

---
image: cloud-provider-vcd/vcd-csi-plugin-legacy
fromImage: common/distroless
import:
- image: cloud-provider-vcd/vcd-csi-plugin-legacy-artifact
  add: /src/bin/cloud-director-named-disk-csi-driver
  to: /cloud-director-named-disk-csi-driver
  before: setup
- image: cloud-provider-vcd/vcd-csi-plugin-legacy-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-vcd/vcd-csi-plugin-legacy-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-vcd/vcd-csi-plugin-legacy-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev/scsi_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/cloud-director-named-disk-csi-driver"]
---
image: cloud-provider-vcd/vcd-csi-plugin-legacy-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-vcd/images/vcd-csi-plugin-legacy/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 1.4.1 https://github.com/vmware/cloud-director-named-disk-csi-driver.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-vcd/vcd-csi-plugin-legacy-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vcd/vcd-csi-plugin-legacy-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/vmware/cloud-director-named-disk-csi-driver/version.Version=1.4.1" -o bin/cloud-director-named-disk-csi-driver cmd/csi/main.go
  - chown 64535:64535 bin/cloud-director-named-disk-csi-driver
  - chmod 0755 bin/cloud-director-named-disk-csi-driver
---
image: cloud-provider-vcd/vcd-csi-plugin-legacy-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs btrfs-progs nfs-utils parted nvme udev
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /sbin/xfs_repair /usr/sbin/nvme /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---

---
image: cloud-provider-vcd/vcd-csi-plugin
fromImage: common/distroless
import:
- image: cloud-provider-vcd/vcd-csi-plugin-artifact
  add: /src/bin/cloud-director-named-disk-csi-driver
  to: /cloud-director-named-disk-csi-driver
  before: setup
- image: cloud-provider-vcd/vcd-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-vcd/vcd-csi-plugin-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-vcd/vcd-csi-plugin-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev/scsi_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/cloud-director-named-disk-csi-driver"]
---
image: cloud-provider-vcd/vcd-csi-plugin-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/030-cloud-provider-vcd/images/vcd-csi-plugin/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 1.6.0 https://github.com/vmware/cloud-director-named-disk-csi-driver.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-vcd/vcd-csi-plugin-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vcd/vcd-csi-plugin-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/vmware/cloud-director-named-disk-csi-driver/version.Version=1.6.0" -o bin/cloud-director-named-disk-csi-driver cmd/csi/main.go
  - chown 64535:64535 bin/cloud-director-named-disk-csi-driver
  - chmod 0755 bin/cloud-director-named-disk-csi-driver
---
image: cloud-provider-vcd/vcd-csi-plugin-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs btrfs-progs nfs-utils parted nvme udev
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /sbin/xfs_repair /usr/sbin/nvme /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---
image: terraform-manager/terraform-manager-dynamix
fromImage: terraform-manager/base-terraform-manager
git:
  - add: /ee/candi/cloud-providers/dynamix
    to: /deckhouse/candi/cloud-providers/dynamix
import:
  - image: terraform-provider-decort
    add: /terraform-provider-decort
    to: /plugins/registry.terraform.io/terraform-provider-decort/decort/4.7.3/linux_amd64/terraform-provider-decort
    before: setup
---
image: terraform-manager/terraform-manager-dynamix-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/040-terraform-manager/images/terraform-manager-dynamix/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 4.7.3 https://github.com/BASIS/terraform-provider-decort.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: terraform-provider-decort
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
import:
- image: terraform-manager/terraform-manager-dynamix-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/
    - cd /src
    - go mod download
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\" -X main.version=4.7.3 -X main.commit=00000000" -o terraform-provider-decort ./cmd/decort/
    - mv /src/terraform-provider-decort /terraform-provider-decort
    - chmod -R 755 /terraform-provider-decort
    - chown 64535:64535 /terraform-provider-decort



      # exclude modules and images from editions
---
image: terraform-manager/terraform-manager-huaweicloud
fromImage: terraform-manager/base-terraform-manager
git:
  - add: /ee/candi/cloud-providers/huaweicloud
    to: /deckhouse/candi/cloud-providers/huaweicloud
import:
  - image: terraform-provider-huaweicloud
    add: /terraform-provider-huaweicloud
    to: /plugins/registry.terraform.io/terraform-provider-huaweicloud/huaweicloud/1.69.0/linux_amd64/terraform-provider-huaweicloud
    before: setup
---
image: terraform-manager/terraform-manager-huaweicloud-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/040-terraform-manager/images/terraform-manager-huaweicloud/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.69.0 https://github.com/huaweicloud/terraform-provider-huaweicloud.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: terraform-provider-huaweicloud
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: terraform-manager/terraform-manager-huaweicloud-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\" -X main.version=1.69.0 -X main.commit=00000000" -o terraform-provider-huaweicloud ./
  - mv /src/terraform-provider-huaweicloud /terraform-provider-huaweicloud
  - chmod -R 755 /terraform-provider-huaweicloud
  - chown 64535:64535 /terraform-provider-huaweicloud

      # exclude modules and images from editions
---
image: terraform-manager/terraform-manager-openstack
fromImage: terraform-manager/base-terraform-manager
git:
- add: /ee/candi/cloud-providers/openstack
  to: /deckhouse/candi/cloud-providers/openstack
import:
- image: terraform-provider-openstack
  add: /terraform-provider-openstack
  to: /plugins/registry.terraform.io/terraform-provider-openstack/openstack/1.54.1/linux_amd64/terraform-provider-openstack
  before: setup
---
image: terraform-manager/terraform-manager-openstack-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/040-terraform-manager/images/terraform-manager-openstack/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.54.1 https://github.com/terraform-provider-openstack/terraform-provider-openstack.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: terraform-provider-openstack
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: terraform-manager/terraform-manager-openstack-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - make fmt
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 make build LDFLAGS="-s -w -extldflags \"-static\" -X github.com/terraform-provider-openstack/terraform-provider-openstack/version.ProviderVersion=1.54.1"
  - mv /go/bin/terraform-provider-openstack /terraform-provider-openstack
  - chmod -R 755 /terraform-provider-openstack
  - chown 64535:64535 /terraform-provider-openstack

      # exclude modules and images from editions
---
---
image: terraform-manager/terraform-manager-vcd
fromImage: terraform-manager/base-terraform-manager
git:
- add: /ee/candi/cloud-providers/vcd
  to: /deckhouse/candi/cloud-providers/vcd
import:
- image: terraform-provider-vcd-artifact
  add: /terraform-provider-vcd-v3.10.0
  to: /plugins/registry.terraform.io/vmware/vcd/3.10.0/linux_amd64/terraform-provider-vcd
  before: setup
- image: terraform-provider-vcd-artifact
  add: /terraform-provider-vcd-v3.14.1
  to: /plugins/registry.terraform.io/vmware/vcd/3.14.1/linux_amd64/terraform-provider-vcd
  before: setup
---
image: terraform-manager/terraform-manager-vcd-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/modules/040-terraform-manager/images/terraform-manager-vcd/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v3.10.0 https://github.com/vmware/terraform-provider-vcd.git /src/v3.10.0
  - cd /src/v3.10.0
  - git apply /patches/v3.10.0/*.patch --verbose
  - rm -rf .git
  - git clone --depth 1 --branch v3.14.1 https://github.com/vmware/terraform-provider-vcd.git /src/v3.14.1
  - cd /src/v3.14.1
  - git apply /patches/v3.14.1/*.patch --verbose
  - rm -rf .git
---
image: terraform-provider-vcd-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: terraform-manager/terraform-manager-vcd-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/v3.10.0
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\" -X 'github.com/vmware/terraform-provider-vcd/v3/vcd.BuildVersion=3.10.0'" -o /terraform-provider-vcd-v3.10.0  .
  - chmod -R 755 /terraform-provider-vcd-v3.10.0
  - chown 64535:64535 /terraform-provider-vcd-v3.10.0
  - cd /src/v3.14.1
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\" -X 'github.com/vmware/terraform-provider-vcd/v3/vcd.BuildVersion=3.14.1'" -o /terraform-provider-vcd-v3.14.1  .
  - chmod -R 755 /terraform-provider-vcd-v3.14.1
  - chown 64535:64535 /terraform-provider-vcd-v3.14.1

      # exclude modules and images from editions
---
---
image: istio/api-proxy
fromImage: common/distroless
import:
- image: istio/api-proxy-build-artifact
  add: /src/api-proxy
  to: /api-proxy
  after: setup
imageSpec:
  config:
    entrypoint: ["/api-proxy"]
---
image: istio/api-proxy-build-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: istio/api-proxy-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - cd /src
  - go mod download
  setup:
  - cd /src
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - go build -ldflags="-s -w" -o /src/api-proxy main.go models.go proxy.go
  - chmod 0500 /src/api-proxy
---
image: istio/api-proxy-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/110-istio/images/api-proxy/src
  to: /src
  stageDependencies:
    install:
    - "**/*"
shell:
  install:
  - cd /src

      # exclude modules and images from editions
---
---
image: istio/metadata-exporter
fromImage: common/alt-p11
import:
- image: istio/metadata-exporter-build-artifact
  add: /src/metadata-exporter
  to: /metadata-exporter
  after: setup
- image: registrypackages/d8-curl-artifact-8-9-1
  add: /d8-curl
  to: /usr/bin/curl
  before: setup
imageSpec:
  config:
    entrypoint: ["/metadata-exporter"]
---
image: istio/metadata-exporter-build-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
fromCacheVersion: "2025-02-05.2"
final: false
import:
- image: istio/metadata-exporter-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - cd /src
  - go mod download
  setup:
  - cd /src
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - go build -ldflags="-s -w" -o /src/metadata-exporter main.go exporter.go models.go
  - chmod 0500 /src/metadata-exporter
---
image: istio/metadata-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/110-istio/images/metadata-exporter/src
  to: /src
  stageDependencies:
    install:
    - "**/*"
shell:
  install:
  - cd /src

      # exclude modules and images from editions
---
---
image: metallb/metallb-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/380-metallb/images/metallb/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone -b v0.14.8 https://github.com/metallb/metallb.git .
  - git apply /patches/*.patch --verbose
  - rm -rf e2etest
  - rm -rf /src/.git
---
image: metallb/metallb-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: metallb/metallb-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GO_VERSION=${GOLANG_VERSION}
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd controller
  - go build -ldflags="-s -w" -o /controller
  - chown 64535:64535 /controller
  - chmod 0700 /controller
  - cd ../speaker
  - go build -ldflags="-s -w" -o /speaker
  - chown 64535:64535 /speaker
  - chmod 0755 /speaker
---
image: metallb/metallb-controller
fromImage: common/distroless
import:
- image: metallb/metallb-artifact
  add: /controller
  to: /controller
  before: setup
imageSpec:
  config:
    entrypoint: ["/controller"]
---
image: metallb/metallb-speaker
fromImage: common/distroless
import:
- image: metallb/metallb-artifact
  add: /speaker
  to: /speaker
  before: setup
imageSpec:
  config:
    entrypoint: ["/speaker"]

      # exclude modules and images from editions
---
---
image: keepalived/keepalived-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 -b v2.2.7 https://github.com/acassen/keepalived.git /src
  - rm -rf /src/.git
---
image: keepalived/build-keepalived
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: keepalived/keepalived-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make autoconf automake build-base linux-headers openssl-dev openssl-libs-static pcre-dev pcre2-dev net-snmp-dev
  install:
  - cd /src
  - ./autogen.sh
  - CFLAGS='-static -s' LDFLAGS=-static ./configure --disable-dynamic-linking --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --localstatedir=/var --mandir=/usr/share/man --enable-bfd --enable-snmp --enable-snmp-rfc --enable-nftables --enable-regex --enable-json --enable-vrrp # --enable-libnl-dynamic
  - make
  - DESTDIR=/opt/keepalived-static make install
  - chown -R 64535:64535 /opt/keepalived-static
  - chmod 0700 /opt/keepalived-static/usr/sbin/keepalived
  - chmod 0700 /opt/keepalived-static/usr/bin/genhash
  - mkdir /empty
  - chmod 755 /empty
---
image: keepalived/keepalived
fromImage: common/distroless
git:
- add: /ee/modules/450-keepalived/images/keepalived/prepare-config.py
  to: /prepare-config.py
import:
- image: keepalived/build-keepalived
  add: /opt/keepalived-static/usr/sbin/keepalived
  to: /usr/sbin/keepalived
  before: install
- image: keepalived/build-keepalived
  add: /opt/keepalived-static/usr/bin/genhash
  to: /usr/bin/genhash
  before: install
- image: keepalived/build-keepalived
  add: /empty
  to: /run
  before: install
- image: common/python-static
  add: /opt/python-static/bin
  to: /usr/bin
  before: install
  includePaths:
  - python3*
  - python3
- image: common/python-static
  add: /opt/python-static/lib
  to: /usr/lib
  before: install
  includePaths:
  - python3*

      # exclude modules and images from editions
---

---
image: network-gateway/dnsmasq-binaries-artifact
fromImage: common/relocate-artifact
final: false
git:
- add: /ee/modules/450-network-gateway/images/dnsmasq/requirements.txt
  to: /requirements.txt
  stageDependencies:
    install:
    - '**/*'
import:
- image: common/python-static
  add: /opt/python-static
  to: /opt/python-static
  before: install
shell:
  beforeInstall:
  - apt-get install -y git dnsmasq libsqlite3
  install:
  - git clone --depth 1 https://github.com/python-modules/wheels /wheels
  - /opt/python-static/bin/pip3 install -f file:///wheels --no-index -r requirements.txt
  - rm -rf /wheels
  - /binary_replace.sh -i "/usr/lib64/libsqlite3.so* /usr/sbin/dnsmasq /lib64/libnss_*" -o /relocate
---
image: network-gateway/dnsmasq
fromImage: common/distroless
git:
  - add: /ee/modules/450-network-gateway/images/dnsmasq/prepare-config.py
    to: /prepare-config.py
import:
  - image: network-gateway/dnsmasq-binaries-artifact
    add: /relocate
    to: /
    before: install
  - image: network-gateway/dnsmasq-binaries-artifact
    add: /etc/dnsmasq.conf
    before: install
  - image: network-gateway/dnsmasq-binaries-artifact
    add: /etc/dnsmasq.conf.d
    before: install
  - image: common/python-static
    add: /opt/python-static/bin
    to: /usr/bin
    before: install
    includePaths:
    - python3*
    - python3
  - image: common/python-static
    add: /opt/python-static/lib
    to: /usr/lib
    before: install
    includePaths:
    - python3*

      # exclude modules and images from editions
---

---
image: network-gateway/snat-binaries-artifact
final: false
fromImage: common/relocate-artifact
import:
- image: common/python-static
  add: /opt/python-static
  to: /opt/python-static
  before: install
shell:
  install:
  - /binary_replace.sh -i "/bin/grep /bin/sed /bin/sh" -o /relocate
  - mkdir -p /relocate/sbin
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
      ln -f -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
    done
    # broken symlinks are not imported from the artifact
    touch /sbin/iptables-wrapper
  - |
    for mode in legacy nft; do
      for basecmd in iptables ip6tables; do
        for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
          ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
        done
      done
    done
---
image: network-gateway/snat
fromImage: common/distroless
git:
- add: /ee/modules/450-network-gateway/images/snat/iptables-loop.py
  to: /iptables-loop.py
import:
- image: network-gateway/snat-binaries-artifact
  add: /relocate
  to: /
  before: setup
- image: network-gateway/snat-binaries-artifact
  add: /opt/python-static/bin
  to: /usr/bin
  before: install
  includePaths:
  - python3*
  - python3
- image: network-gateway/snat-binaries-artifact
  add: /opt/python-static/lib
  to: /usr/lib
  before: install
  includePaths:
  - python3*
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup

      # exclude modules and images from editions
---
---
image: operator-trivy/node-collector
fromImage: common/alt-p11
import:
  - image: operator-trivy/node-collector-artifact
    add: /node-collector
    to: /usr/local/bin/node-collector
    before: setup
  - image: operator-trivy/node-collector-binaries-artifact
    add: /usr/bin
    to: /usr/bin
    before: setup
    includePaths:
    - 'ps'
    - 'pgrep'
  - image: operator-trivy/node-collector-binaries-artifact
    add: /usr/lib64
    to: /usr/lib64
    before: setup
    includePaths:
    - 'libproc2.so.0*'
imageSpec:
  config:
    entrypoint: [ "/usr/local/bin/node-collector" ]
---
image: operator-trivy/node-collector-binaries-artifact
fromImage: common/alt-p11-artifact
final: false
shell:
  setup:
  - apt-get update
  - apt-get install procps -y
---
image: operator-trivy/node-collector-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/500-operator-trivy/images/node-collector/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.3.1 https://github.com/aquasecurity/k8s-node-collector.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: operator-trivy/node-collector-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: operator-trivy/node-collector-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /node-collector cmd/node-collector/main.go
  - chown root:root /node-collector
  - chmod 0700 /node-collector

      # exclude modules and images from editions
---
---
image: operator-trivy/operator
fromImage: common/distroless
import:
  - image: operator-trivy/operator-artifact
    add: /operator-trivy
    to: /operator-trivy
    before: setup
  - image: operator-trivy/operator-src-artifact
    add: /src/local
    to: /local
    before: setup
imageSpec:
  config:
    entrypoint: [ "/operator-trivy" ]
---
image: operator-trivy/operator-src-artifact
fromImage: operator-trivy/trivy-src-artifact
final: false
git:
- add: /ee/modules/500-operator-trivy/images/operator/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
- add: /ee/modules/500-operator-trivy/images/operator/bundle.tar.gz
  to: /bundle.tar.gz
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.22.0 https://github.com/aquasecurity/trivy-operator.git /src/trivy-operator
  - rm -rf /src/trivy-operator/.git
  - mv /src/trivy-operator/* /src
  - rm -rf /src/trivy-operator
  - cd /src
  - git apply /patches/*.patch --verbose
  - mkdir ./local && tar zxvf /bundle.tar.gz -C ./local
---
image: operator-trivy/operator-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: operator-trivy/operator-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - ln -s ./trivy-db ./original-trivy-db
  - go mod download -x
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /operator-trivy ./cmd/trivy-operator/main.go
  - chown 64535:64535 /operator-trivy
  - chmod 0700 /operator-trivy

      # exclude modules and images from editions
---
---
image: operator-trivy/report-updater
fromImage: common/distroless
import:
  - image: operator-trivy/report-updater-artifact
    add: /report-updater
    to: /report-updater
    before: setup
imageSpec:
  config:
    entrypoint: [ "/report-updater" ]
---
image: operator-trivy/report-updater-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/500-operator-trivy/images/report-updater/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: operator-trivy/report-updater-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: operator-trivy/report-updater-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /report-updater main.go
  - chown 64535:64535 /report-updater
  - chmod 0700 /report-updater

      # exclude modules and images from editions
---
# Trivy version

---
image: operator-trivy/trivy
fromImage: common/distroless
import:
- image: operator-trivy/trivy-artifact
  add: /trivy
  to: /usr/local/bin/trivy
  before: setup
imageSpec:
  config:
    entrypoint: [ "/usr/local/bin/trivy" ]
---
image: operator-trivy/trivy-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone --depth 1 --branch v0.55.2 https://github.com/aquasecurity/trivy-db.git /src/trivy-db
  - git clone --depth 1 --branch v0.55.2 git@https://github.com:deckhouse/trivy-db.git /src/trivy-db-patch
  - git clone --depth 1 --branch v0.55.2 https://github.com/aquasecurity/trivy.git /src/trivy
  - git clone --depth 1 --branch v0.55.2 git@https://github.com:deckhouse/trivy.git /src/trivy-patch
  - cd /src/trivy-db && git apply --verbose --whitespace=fix /src/trivy-db-patch/patches/v0.55.2/*.patch
  - cd /src/trivy && git apply --verbose --whitespace=fix /src/trivy-patch/patches/v0.55.2/*.patch
  - rm -rf /src/trivy/docs /src/trivy/integration
  - find /src/trivy -type d -name testdata | xargs rm -rf
  - rm -rf /src/trivy/.git /src/trivy-db/.git
---
image: operator-trivy/trivy-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: operator-trivy/trivy-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/trivy
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /trivy ./cmd/trivy/main.go
  - chown 64535:64535 /trivy
  - chmod 0700 /trivy

      # exclude modules and images from editions
---
---
image: service-with-healthchecks/agent
fromImage: common/distroless
import:
  - image: service-with-healthchecks/service-with-healthchecks-build-artifact
    add: /agent
    to: /agent
    before: install
imageSpec:
  config:
    entrypoint: ["/agent"]

      # exclude modules and images from editions
---
---
image: service-with-healthchecks/service-with-healthchecks-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /ee/modules/610-service-with-healthchecks/images/artifact
    to: /src
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
    stageDependencies:
      install:
        - go.mod
        - go.sum
      setup:
        - "**/*.go"
shell:
  install:
    - cd /src
---
image: service-with-healthchecks/service-with-healthchecks-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
import:
  - image: service-with-healthchecks/service-with-healthchecks-src-artifact
    add: /src
    to: /src
    before: install
shell:
  install:
  
  # Replace alpine repos with our proxy
  - apk update
  # git needs for patch
  - apk --no-cache add git
  - cd /src
  - go mod download
  - go mod vendor
  beforeSetup:
  - cd /src
  - git apply  /src/patches/*.patch --verbose
  setup:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src/cmd/agent
  - go build -mod=vendor -ldflags="-s -w" -o /agent .
  - chown 64535:64535 /agent
  - chmod +x /agent
  - cd /src/cmd/controller
  - go build -mod=vendor -ldflags="-s -w" -o /controller .
  - chown 64535:64535 /controller
  - chmod +x /controller
  - rm -rf /src/vendor

      # exclude modules and images from editions
---
---
image: service-with-healthchecks/controller
fromImage: common/distroless
import:
  - image: service-with-healthchecks/service-with-healthchecks-build-artifact
    add: /controller
    to: /controller
    before: install
imageSpec:
  config:
    entrypoint: ["/controller"]

      # exclude modules and images from editions
---

---
image: runtime-audit-engine/falco
fromImage: common/alt-p11
import:
- image: runtime-audit-engine/falco-artifact
  add: /falco-package
  to: /
  includePaths:
  - usr/bin/
  - usr/share/
  - etc/
  before: install
- image: runtime-audit-engine/falco-falcoctl-artifact
  add: /src/falcoctl
  to: /usr/bin/falcoctl
  before: install
shell:
  beforeInstall:
  - rm -df /lib/modules
  - ln -s $HOST_ROOT/lib/modules /lib/modules
  install:
  - "sed -i 's/time_format_iso_8601: false/time_format_iso_8601: true/' /etc/falco/falco.yaml"
imageSpec:
  config:
    cmd: ["/usr/bin/falco"]
---
image: runtime-audit-engine/falco-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/650-runtime-audit-engine/images/falco/patches/falcoctl
  to: /patches/falcoctl
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
shell:
  install:
  - git clone --branch 0.39.2 --depth 1 https://github.com/falcosecurity/falco.git /src/falco
  - git clone --branch plugins/kafka/v0.1.3 --depth 1 https://github.com/falcosecurity/plugins.git /src/plugins
  - git clone --branch v0.10.1 --depth 1 https://github.com/falcosecurity/falcoctl.git /src/falcoctl
  - cd /src/plugins
  - rm -rf shared plugins/cloudtrail plugins/dummy* plugins/gcpaudit plugins/github plugins/k8saudit-* plugins/kafka plugins/okta build docs
  - cd /src/falcoctl
  - git apply /patches/falcoctl/*.patch --verbose
  - git rev-parse HEAD > RELEASE
  - git rev-parse HEAD > COMMIT
  - rm -rf /src/falco/.git
  - rm -rf /src/plugins/.git
  - rm -rf /src/falcoctl/.git
---
image: runtime-audit-engine/falco-falcoctl-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: runtime-audit-engine/falco-src-artifact
  add: /src/falcoctl
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - go mod download
  - RELEASE="$(cat RELEASE)" COMMIT="$(cat COMMIT)" make falcoctl
  - chown 64535:64535 falcoctl
  - chmod 0755 falcoctl
---
image: runtime-audit-engine/falco-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: runtime-audit-engine/falco-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- fromPath: ~/go-pkg-cache
  to: /root/go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
- from: tmp_dir
  to: /src/falco/build
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y git openssl-devel wget clang cmake libelf-devel libbpf-devel bpftool perl-IPC-Cmd gcc12 gcc12-c++ build-essential golang
  - git config --global url."https://github.com".insteadOf https://github.com
  - rm -f /usr/bin/clang
  - ln -s /usr/bin/clang-18 /usr/bin/clang
  - rm -f /usr/bin/x86_64-alt-linux-gcc /usr/bin/x86_64-alt-linux-g++
  - ln -s x86_64-alt-linux-gcc-12 /usr/bin/x86_64-alt-linux-gcc
  - ln -s x86_64-alt-linux-g++-12 /usr/bin/x86_64-alt-linux-g++
  - find /var/lib/apt/ /var/cache/apt/ -type f -delete
  install:
  - cd /src/falco
  - mkdir -p /src/falco/build
  - cd /src/falco/build
  - cmake -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_DRIVER=OFF -DCPACK_GENERATOR=TGZ -DBUILD_BPF=OFF -DBUILD_FALCO_MODERN_BPF=ON -DBUILD_WARNINGS_AS_ERRORS=OFF -DFALCO_VERSION=0.39.2 -DUSE_BUNDLED_DEPS=ON /src/falco
  - make package -j4
  - mkdir -p /falco-package
  - tar -zxvf falco-*-x86_64.tar.gz --strip-components 1 -C /falco-package
  # cleanup to reduce artifact size
  - make clean
  - cd /src/plugins/plugins/json
  - make
  - cp libjson.so /falco-package/usr/share/falco/plugins
  - make clean
  - cd /src/plugins/plugins/k8saudit
  - make
  - cp libk8saudit.so /falco-package/usr/share/falco/plugins
  - make clean
  - cd /src/plugins/plugins/k8smeta
  - make
  - cp libk8smeta.so /falco-package/usr/share/falco/plugins
  - make clean

      # exclude modules and images from editions
---
# Based on https://github.com/falcosecurity/falcosidekick/blob/41d530807f1a0294c0276e4cb42af68c8b26a659/Dockerfile
---
image: runtime-audit-engine/falcosidekick
fromImage: common/distroless
import:
- image: runtime-audit-engine/falcosidekick-artifact
  add: /src/falcosidekick
  to: /falcosidekick
  before: setup
---
image: runtime-audit-engine/falcosidekick-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/650-runtime-audit-engine/images/falcosidekick/patches
  to: /patches
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
shell:
  setup:
  - git clone -c advice.detachedHead=false --branch 2.30.0 --depth 1 https://github.com/falcosecurity/falcosidekick.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - git describe --tags --always --dirty > GIT_VERSION
  - git rev-parse HEAD > GIT_HASH
  - git log -1 --pretty=%ct > SOURCE_DATE_EPOCH
  - rm -rf /src/.git
---
image: runtime-audit-engine/falcosidekick-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: runtime-audit-engine/falcosidekick-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache openssh-client make bash
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - DIFF="" GIT_VERSION="$(cat GIT_VERSION)" GIT_HASH="$(cat GIT_HASH)" SOURCE_DATE_EPOCH="$(cat SOURCE_DATE_EPOCH)" make falcosidekick
  - chown -R 64535:64535 falcosidekick
  - chmod 0755 falcosidekick

      # exclude modules and images from editions
---
---
image: runtime-audit-engine/k8s-metacollector
fromImage: common/distroless
import:
- image: runtime-audit-engine/k8s-metacollector-artifact
  add: /src/manager
  to: /manager
  before: setup
---
image: runtime-audit-engine/k8s-metacollector-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/modules/650-runtime-audit-engine/images/k8s-metacollector/patches
  to: /patches
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v0.1.1 https://github.com/falcosecurity/k8s-metacollector.git .
  - git apply /patches/*.patch --verbose
  - git describe --tags --always --dirty > GIT_VERSION
  - git rev-parse HEAD > GIT_HASH
  - rm -rf .git
---
image: runtime-audit-engine/k8s-metacollector-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: runtime-audit-engine/k8s-metacollector-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - RELEASE="$(cat GIT_VERSION)" COMMIT="$(cat GIT_HASH)" make build
  - chown 64535:64535 manager
  - chmod 0755 manager

      # exclude modules and images from editions
---
---
image: runtime-audit-engine/rules-loader
fromImage: common/shell-operator
import:
- image: runtime-audit-engine/rules-loader-binary-artifact
  add: /opt/python-static/bin
  to: /usr/bin
  before: install
  includePaths:
  - python3*
  - python3
- image: runtime-audit-engine/rules-loader-binary-artifact
  add: /opt/python-static/lib
  to: /usr/lib
  before: install
  includePaths:
  - python3*
- image: runtime-audit-engine/falco-artifact
  add: /falco-package
  to: /
  includePaths:
  - usr/bin/
  - usr/share/
  before: install
- image: runtime-audit-engine/falco-falcoctl-artifact
  add: /src/falcoctl
  to: /usr/bin/falcoctl
  before: install
git:
- add: /ee/modules/650-runtime-audit-engine/images/rules-loader/hooks
  to: /hooks
  stageDependencies:
    install:
    - '**/*'
imageSpec:
  config:
    env: { "SHELL_OPERATOR_HOOKS_DIR": "/hooks", "LOG_TYPE": "json", "PYTHONPATH": "/hooks" }
    entrypoint: ["tini", "--", "/shell-operator"]
    cmd: ["start"]
---
image: runtime-audit-engine/rules-loader-binary-artifact
fromImage: common/alt-p11-artifact
final: false
git:
- add: /ee/modules/650-runtime-audit-engine/images/rules-loader/requirements.txt
  to: /requirements.txt
  stageDependencies:
    install:
    - '**/*'
import:
- image: common/python-static
  add: /opt/python-static
  to: /opt/python-static
  before: install
shell:
  beforeInstall:
  - apt-get install -y git
  install:
  - export SOURCE_REPO=https://github.com
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  - git clone --depth 1 https://github.com/python-modules/wheels /wheels
  - /opt/python-static/bin/pip3 install -f file:///wheels --no-index -r requirements.txt
  - rm -rf /wheels

      # exclude modules and images from editions
---
image: cni-cilium/egress-gateway-agent
fromImage: common/distroless
import:
  - image: cni-cilium/egress-gateway-agent-artifact
    add: /egress-gateway-agent
    to: /egress-gateway-agent
    before: setup
imageSpec:
  config:
    entrypoint: ["/egress-gateway-agent"]
---
image: cni-cilium/egress-gateway-agent-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/src
  to:  /src
  # Forces a rebuild when source files are modified.
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
---
image: cni-cilium/egress-gateway-agent-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cni-cilium/egress-gateway-agent-src-artifact
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/
    - go mod download
  setup:
    - cd /src
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /egress-gateway-agent cmd/main.go
    - chown 64535:64535 /egress-gateway-agent
    - chmod 0755 /egress-gateway-agent

      # exclude modules and images from editions
---

---
image: cloud-provider-vsphere/cloud-controller-manager-1-28
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-28
  add: /vsphere-cloud-controller-manager
  to: /bin/vsphere-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-cloud-controller-manager"]
---
image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-28
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/cloud-controller-manager/patches/1.28
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.28.1 https://github.com/kubernetes/cloud-provider-vsphere.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - export VERSION=v1.28.1
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X version.Version=${VERSION}" -o /vsphere-cloud-controller-manager ./cmd/vsphere-cloud-controller-manager/main.go
  - chown 64535:64535 /vsphere-cloud-controller-manager
  - chmod 0755 /vsphere-cloud-controller-manager
---
image: cloud-provider-vsphere/cloud-controller-manager-1-29
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-29
  add: /vsphere-cloud-controller-manager
  to: /bin/vsphere-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-cloud-controller-manager"]
---
image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-29
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/cloud-controller-manager/patches/1.29
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.29.2 https://github.com/kubernetes/cloud-provider-vsphere.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - export VERSION=v1.29.2
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X version.Version=${VERSION}" -o /vsphere-cloud-controller-manager ./cmd/vsphere-cloud-controller-manager/main.go
  - chown 64535:64535 /vsphere-cloud-controller-manager
  - chmod 0755 /vsphere-cloud-controller-manager
---
image: cloud-provider-vsphere/cloud-controller-manager-1-30
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-30
  add: /vsphere-cloud-controller-manager
  to: /bin/vsphere-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-cloud-controller-manager"]
---
image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-30
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/cloud-controller-manager/patches/1.30
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.30.2 https://github.com/kubernetes/cloud-provider-vsphere.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - export VERSION=v1.30.2
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X version.Version=${VERSION}" -o /vsphere-cloud-controller-manager ./cmd/vsphere-cloud-controller-manager/main.go
  - chown 64535:64535 /vsphere-cloud-controller-manager
  - chmod 0755 /vsphere-cloud-controller-manager
---
image: cloud-provider-vsphere/cloud-controller-manager-1-31
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-31
  add: /vsphere-cloud-controller-manager
  to: /bin/vsphere-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-cloud-controller-manager"]
---
image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-31
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/cloud-controller-manager/patches/1.31
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.31.1 https://github.com/kubernetes/cloud-provider-vsphere.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - export VERSION=v1.31.1
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X version.Version=${VERSION}" -o /vsphere-cloud-controller-manager ./cmd/vsphere-cloud-controller-manager/main.go
  - chown 64535:64535 /vsphere-cloud-controller-manager
  - chmod 0755 /vsphere-cloud-controller-manager
---
image: cloud-provider-vsphere/cloud-controller-manager-1-32
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-32
  add: /vsphere-cloud-controller-manager
  to: /bin/vsphere-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-cloud-controller-manager"]
---
image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-32
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/cloud-controller-manager/patches/1.32
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.32.2 https://github.com/kubernetes/cloud-provider-vsphere.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: cloud-provider-vsphere/cloud-controller-manager-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/cloud-controller-manager-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - export VERSION=v1.32.2
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X version.Version=${VERSION}" -o /vsphere-cloud-controller-manager ./cmd/vsphere-cloud-controller-manager/main.go
  - chown 64535:64535 /vsphere-cloud-controller-manager
  - chmod 0755 /vsphere-cloud-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-vsphere/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-vsphere/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/cloud-data-discoverer/src
  to:  /src
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /go_lib/cloud-data
  to: /src/go_lib/cloud-data
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /pkg/log
  to: /src/pkg/log
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
shell:
  install:
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
---
image: cloud-provider-vsphere/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-vsphere/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---
---
image: cloud-provider-vsphere/vsphere-csi-plugin-legacy
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-legacy-csi-artifact
  add: /src/vsphere-csi
  to: /bin/vsphere-csi
  before: setup
- image: cloud-provider-vsphere/vsphere-csi-plugin-legacy-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-csi"]
---
image: cloud-provider-vsphere/vsphere-csi-plugin-legacy-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/vsphere-csi-plugin-legacy/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone https://github.com/flant/vsphere-csi-driver.git /src
  - git clone --depth 1 --branch v0.2.1 https://github.com/flant/cloud-provider-vsphere.git /src/ccm
  - cd /src
  - git checkout 6189afc2522d83a96d3857110c61478710110347
  - git apply /patches/csi/*.patch --verbose
  - rm -rf .git vendor
  - cd /src/ccm
  - git apply /patches/ccm/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-vsphere/vsphere-csi-plugin-legacy-csi-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-legacy-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod edit -replace=k8s.io/cloud-provider-vsphere=/src/ccm
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o vsphere-csi cmd/vsphere-csi/main.go
---
image: cloud-provider-vsphere/vsphere-csi-plugin-legacy-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs btrfs-progs nfs-utils parted nvme udev
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /usr/sbin/parted /usr/sbin/xfs* /sbin/mount.nfs* /sbin/umount.nfs*" -o /relocate

      # exclude modules and images from editions
---

---
image: cloud-provider-vsphere/vsphere-csi-plugin-1-28
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-28
  add: /src/vsphere-csi
  to: /bin/vsphere-csi
  before: setup
- image: cloud-provider-vsphere/vsphere-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-csi"]
---
image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-28
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/vsphere-csi-plugin/patches/1.28
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git /src
  - git clone --depth 1 --branch v0.2.0 https://github.com/gofsutil.git /src/gofsutil
  - cd /src
  - git apply /patches/*.patch --verbose
  - sed -i -e 's# ../gofsutil# /src/gofsutil#g' go.mod
  - rm -rf .git
---
image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src/gofsutil
  - go mod init deckhouse/3p/gofsutil
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o vsphere-csi cmd/vsphere-csi/main.go
---
image: cloud-provider-vsphere/vsphere-csi-plugin-1-29
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-29
  add: /src/vsphere-csi
  to: /bin/vsphere-csi
  before: setup
- image: cloud-provider-vsphere/vsphere-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-csi"]
---
image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-29
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/vsphere-csi-plugin/patches/1.29
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git /src
  - git clone --depth 1 --branch v0.2.0 https://github.com/gofsutil.git /src/gofsutil
  - cd /src
  - git apply /patches/*.patch --verbose
  - sed -i -e 's# ../gofsutil# /src/gofsutil#g' go.mod
  - rm -rf .git
---
image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src/gofsutil
  - go mod init deckhouse/3p/gofsutil
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o vsphere-csi cmd/vsphere-csi/main.go
---
image: cloud-provider-vsphere/vsphere-csi-plugin-1-30
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-30
  add: /src/vsphere-csi
  to: /bin/vsphere-csi
  before: setup
- image: cloud-provider-vsphere/vsphere-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-csi"]
---
image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-30
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/vsphere-csi-plugin/patches/1.30
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git /src
  - git clone --depth 1 --branch v0.2.0 https://github.com/gofsutil.git /src/gofsutil
  - cd /src
  - git apply /patches/*.patch --verbose
  - sed -i -e 's# ../gofsutil# /src/gofsutil#g' go.mod
  - rm -rf .git
---
image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src/gofsutil
  - go mod init deckhouse/3p/gofsutil
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o vsphere-csi cmd/vsphere-csi/main.go
---
image: cloud-provider-vsphere/vsphere-csi-plugin-1-31
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-31
  add: /src/vsphere-csi
  to: /bin/vsphere-csi
  before: setup
- image: cloud-provider-vsphere/vsphere-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-csi"]
---
image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-31
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/vsphere-csi-plugin/patches/1.31
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git /src
  - git clone --depth 1 --branch v0.2.0 https://github.com/gofsutil.git /src/gofsutil
  - cd /src
  - git apply /patches/*.patch --verbose
  - sed -i -e 's# ../gofsutil# /src/gofsutil#g' go.mod
  - rm -rf .git
---
image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src/gofsutil
  - go mod init deckhouse/3p/gofsutil
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o vsphere-csi cmd/vsphere-csi/main.go
---
image: cloud-provider-vsphere/vsphere-csi-plugin-1-32
fromImage: common/distroless
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-32
  add: /src/vsphere-csi
  to: /bin/vsphere-csi
  before: setup
- image: cloud-provider-vsphere/vsphere-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-csi"]
---
image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-32
fromImage: common/src-artifact
final: false
git:
- add: /ee/se-plus/modules/030-cloud-provider-vsphere/images/vsphere-csi-plugin/patches/1.32
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git /src
  - git clone --depth 1 --branch v0.2.0 https://github.com/gofsutil.git /src/gofsutil
  - cd /src
  - git apply /patches/*.patch --verbose
  - sed -i -e 's# ../gofsutil# /src/gofsutil#g' go.mod
  - rm -rf .git
---
image: cloud-provider-vsphere/vsphere-csi-plugin-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-vsphere/vsphere-csi-plugin-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src/gofsutil
  - go mod init deckhouse/3p/gofsutil
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o vsphere-csi cmd/vsphere-csi/main.go
---
image: cloud-provider-vsphere/vsphere-csi-plugin-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs btrfs-progs nfs-utils parted nvme udev
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /usr/sbin/parted /usr/sbin/xfs* /sbin/mount.nfs* /sbin/umount.nfs*" -o /relocate

      # exclude modules and images from editions
---
---
image: cloud-provider-zvirt/capz-controller-manager
fromImage: common/distroless
imageSpec:
  config:
    entrypoint: ["/capz-controller-manager"]
import:
- image: cloud-provider-zvirt/capz-controller-manager-artifact
  add: /capz-controller-manager
  to: /capz-controller-manager
  before: setup
---
image: cloud-provider-zvirt/capz-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/se-plus/modules/030-cloud-provider-zvirt/images/capz-controller-manager/src
  to:  /src
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
shell:
  install:
  - git clone --depth 1 --branch v0.0.1-flant https://github.com/ovirt/go-ovirt /src/go-ovirt
  - cd /src
  - echo "replace github.com/ovirt/go-ovirt => /src/go-ovirt" >> go.mod
---
image: cloud-provider-zvirt/capz-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-zvirt/capz-controller-manager-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o /capz-controller-manager cmd/main.go
  - chown 64535:64535 /capz-controller-manager
  - chmod 0700 /capz-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-zvirt/cloud-controller-manager
fromImage: common/distroless
import:
  - image: cloud-provider-zvirt/cloud-controller-manager-artifact
    add: /zvirt-cloud-controller-manager
    to: /zvirt-cloud-controller-manager
    before: setup
imageSpec:
  config:
    entrypoint: ["/zvirt-cloud-controller-manager"]
---
image: cloud-provider-zvirt/cloud-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
git:
  - add: /ee/se-plus/modules/030-cloud-provider-zvirt/images/cloud-controller-manager/src
    to:  /src
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
    stageDependencies:
      install:
        - go.mod
        - go.sum
        - "**/*.go"
shell:
  install:
    - git clone --depth 1 --branch v0.0.1-flant https://github.com/ovirt/go-ovirt /src/go-ovirt
    - cd /src
    - echo "replace github.com/ovirt/go-ovirt => /src/go-ovirt" >> go.mod
---
image: cloud-provider-zvirt/cloud-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-zvirt/cloud-controller-manager-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/
    - go mod download
  setup:
    - cd /src
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w " -o /zvirt-cloud-controller-manager cmd/zvirt-cloud-controller-manager/main.go
    - chown 64535:64535 /zvirt-cloud-controller-manager
    - chmod 0755 /zvirt-cloud-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-zvirt/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-zvirt/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-zvirt/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/se-plus/modules/030-cloud-provider-zvirt/images/cloud-data-discoverer/src
  to:  /src
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /go_lib/cloud-data
  to: /src/go_lib/cloud-data
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /pkg/log
  to: /src/pkg/log
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
shell:
  install:
  - git clone --depth 1 --branch v0.0.1-flant https://github.com/ovirt/go-ovirt /src/go-ovirt
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
  - printf "\nreplace github.com/ovirt/go-ovirt => /src/go-ovirt\n" >> go.mod
---
image: cloud-provider-zvirt/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-zvirt/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---

---
image: cloud-provider-zvirt/zvirt-csi-driver
fromImage: common/distroless
import:
- image: cloud-provider-zvirt/zvirt-csi-driver-artifact
  add: /ovirt-csi-driver
  to: /ovirt-csi-driver
  before: setup
- image: cloud-provider-zvirt/zvirt-csi-driver-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-zvirt/zvirt-csi-driver-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-zvirt/zvirt-csi-driver-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev/scsi_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/ovirt-csi-driver"]
---
image: cloud-provider-zvirt/zvirt-csi-driver-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/se-plus/modules/030-cloud-provider-zvirt/images/zvirt-csi-driver/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch release-4.19 https://github.com/openshift/ovirt-csi-driver.git /src
  - git clone --depth 1 --branch v0.0.1-flant https://github.com/ovirt/go-ovirt /src/go-ovirt
  - cd /src
  - git apply /patches/*.patch --verbose
  - echo "replace github.com/ovirt/go-ovirt => /src/go-ovirt" >> go.mod
  - rm -rf vendor .git
---
image: cloud-provider-zvirt/zvirt-csi-driver-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-zvirt/zvirt-csi-driver-src-artifact
    add: /src
    to: /src
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w -X version.Version=release-4.19" -o /ovirt-csi-driver ./cmd/ovirt-csi-driver/ovirt-csi-driver.go
---
image: cloud-provider-zvirt/zvirt-csi-driver-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
    - apt-get update -y
    - apt-get install -y e2fsprogs xfsprogs btrfs-progs nfs-utils parted nvme udev
  install:
    - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /sbin/xfs_repair /usr/sbin/nvme /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---
---
image: terraform-manager/terraform-manager-vsphere
fromImage: terraform-manager/base-terraform-manager
git:
- add: /ee/se-plus/candi/cloud-providers/vsphere
  to: /deckhouse/candi/cloud-providers/vsphere
import:
- image: terraform-provider-vsphere
  add: /terraform-provider-vsphere
  to: /plugins/registry.terraform.io/hashicorp/vsphere/2.0.2/linux_amd64/terraform-provider-vsphere
  before: setup
---
image: terraform-manager/terraform-manager-vsphere-src-artifact
final: false
fromImage: common/src-artifact
fromCacheVersion: "2025-02-05.03"
shell:
  install:
  - git clone --depth 1 --branch v2.0.2-flant.2 https://github.com/deckhouse/3p-terraform-provider-vsphere.git /src
  - cd /src
  - rm -rf vendor
  - rm -rf .git
---
image: terraform-provider-vsphere
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
import:
- image: terraform-manager/terraform-manager-vsphere-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/
    - cd /src
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -extldflags \"-static\" -X github.com/hashicorp/terraform-provider-vsphere/version.ProviderVersion=2.0.2" -o /terraform-provider-vsphere
    - chmod -R 755 /terraform-provider-vsphere
    - chown 64535:64535 /terraform-provider-vsphere

      # exclude modules and images from editions
---
image: terraform-manager/terraform-manager-zvirt
fromImage: terraform-manager/base-terraform-manager
git:
  - add: /ee/se-plus/candi/cloud-providers/zvirt
    to: /deckhouse/candi/cloud-providers/zvirt
import:
  - image: terraform-provider-ovirt
    add: /terraform-provider-ovirt
    to: /plugins/registry.terraform.io/terraform-provider-ovirt/ovirt/2.1.5/linux_amd64/terraform-provider-ovirt
    before: setup
---
image: terraform-manager/terraform-manager-zvirt-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /ee/se-plus/modules/040-terraform-manager/images/terraform-manager-zvirt/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v2.1.5 https://github.com/oVirt/terraform-provider-ovirt.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: terraform-provider-ovirt
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: terraform-manager/terraform-manager-zvirt-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 make build LDFLAGS="-s -w -extldflags \"-static\" -X main.version=2.1.5 -X main.commit=00000000"
  - mv /src/terraform-provider-ovirt /terraform-provider-ovirt
  - chmod -R 755 /terraform-provider-ovirt
  - chown 64535:64535 /terraform-provider-ovirt

      # exclude modules and images from editions
---
---
image: metallb/l2lb-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /ee/se/modules/380-metallb/images/l2lb/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone -b v0.14.8 https://github.com/metallb/metallb.git .
  - git apply /patches/*.patch --verbose
  - rm -rf e2etest
  - rm -rf /src/.git
---
image: metallb/l2lb-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: metallb/l2lb-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GO_VERSION=${GOLANG_VERSION}
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd controller
  - go build -ldflags="-s -w" -o /controller
  - chown 64535:64535 /controller
  - chmod 0700 /controller
  - cd ../speaker
  - go build -ldflags="-s -w" -o /speaker
  - chown 64535:64535 /speaker
  - chmod 0755 /speaker
---
image: metallb/l2lb-controller
fromImage: common/distroless
import:
- image: metallb/l2lb-artifact
  add: /controller
  to: /controller
  before: setup
imageSpec:
  config:
    entrypoint: ["/controller"]
---
image: metallb/l2lb-speaker
fromImage: common/distroless
import:
- image: metallb/l2lb-artifact
  add: /speaker
  to: /speaker
  before: setup
imageSpec:
  config:
    entrypoint: ["/speaker"]

      # exclude modules and images from editions
---

---
image: common/alt-p11-artifact
from: registry.deckhouse.io/base_images/alt:p11@sha256:b630220d83798057e1c67fe6f712a49e9c3abb377f0bd7183bba0ba541fc4081
final: false
shell:
  beforeInstall:
  
  - sed -i "s|http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/x86_64 classic|http://ftp.altlinux.org/pub/distributions/archive/p11/date/2025/02/09/ x86_64 classic|g" /etc/apt/sources.list.d/alt.list
  - sed -i "s|http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/x86_64-i586 classic|http://ftp.altlinux.org/pub/distributions/archive/p11/date/2025/02/09/ x86_64-i586 classic|g" /etc/apt/sources.list.d/alt.list
  - sed -i "s|http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/noarch classic|http://ftp.altlinux.org/pub/distributions/archive/p11/date/2025/02/09/ noarch classic|g" /etc/apt/sources.list.d/alt.list
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  
  - apt-get dist-upgrade -y
  - find /var/cache/apt/ -type f -delete
  - rm -rf /var/log/*log /var/log/apt/* /var/lib/dpkg/*-old /var/cache/debconf/*-old
  # ssh auth to 3p repos
  - echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
---
image: common/alt-p11
from: registry.deckhouse.io/base_images/alt:p11@sha256:b630220d83798057e1c67fe6f712a49e9c3abb377f0bd7183bba0ba541fc4081
final: false
shell:
  beforeInstall:
  
  - sed -i "s|http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/x86_64 classic|http://ftp.altlinux.org/pub/distributions/archive/p11/date/2025/02/09/ x86_64 classic|g" /etc/apt/sources.list.d/alt.list
  - sed -i "s|http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/x86_64-i586 classic|http://ftp.altlinux.org/pub/distributions/archive/p11/date/2025/02/09/ x86_64-i586 classic|g" /etc/apt/sources.list.d/alt.list
  - sed -i "s|http://ftp.altlinux.org/pub/distributions/ALTLinux p11/branch/noarch classic|http://ftp.altlinux.org/pub/distributions/archive/p11/date/2025/02/09/ noarch classic|g" /etc/apt/sources.list.d/alt.list
  - cp /etc/apt/sources.list.d/alt.list /etc/apt/sources.list.d/alt.list.orig
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  
  - apt-get dist-upgrade -y
  - find /var/cache/apt/ -type f -delete
  - rm -rf /var/log/*log /var/log/apt/* /var/lib/dpkg/*-old /var/cache/debconf/*-old
  # return original repos
  - mv /etc/apt/sources.list.d/alt.list.orig /etc/apt/sources.list.d/alt.list
imageSpec:
  config:
    user: "64535:64535"

      # exclude modules and images from editions
---
---
image: common/check-kernel-version
fromImage: common/distroless
import:
- image: common/check-kernel-version-artifact
  add: /src/check-kernel-version
  to: /check-kernel-version
  before: setup
imageSpec:
  config:
    entrypoint: [ "/check-kernel-version" ]
---
image: common/check-kernel-version-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/check-kernel-version/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: common/check-kernel-version-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/check-kernel-version-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" -o check-kernel-version check-kernel-version.go
  - chown 64535:64535 check-kernel-version
  - chmod 0700 check-kernel-version

      # exclude modules and images from editions
---
---
image: common/coredns-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/coredns/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
    - git clone --depth 1 -b v1.12.0 https://github.com/coredns/coredns.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf /src/.git
---
image: common/coredns-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: common/coredns-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src
    - go build -ldflags='-extldflags "-static" -s -w -X github.com/coredns/coredns/coremain.GitCommit=v1.12.0' -o /coredns
    - chown 64535:64535 /coredns
    - chmod 0700 /coredns
---
image: common/coredns
fromImage: common/distroless
import:
  - image: common/coredns-artifact
    add: /coredns
    to: /coredns
    before: setup
imageSpec:
  config:
    entrypoint: ["/coredns"]

      # exclude modules and images from editions
---
---
image: common/crane
fromImage: builder/scratch
final: false
import:
- image: common/crane-artifact
  add: /crane
  to: /crane
  before: install
---
image: common/crane-artifact
fromImage: builder/golang-alpine
final: false
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache git openssh-client
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  - git clone --depth 1 --branch  v0.20.3 https://github.com/google/go-containerregistry.git /go-containerregistry
  - cd go-containerregistry/cmd/crane
  - export GOPROXY=https://proxy.golang.org/
  - CGO_ENABLED=0 GOOS=linux go build  -ldflags '-s -w -X github.com/google/go-containerregistry/cmd/crane/cmd.Version=v0.20.3' -o /crane
  - rm -rf /go-containerregistry

      # exclude modules and images from editions
---
# Based on https://github.com/kubernetes-csi/external-attacher/blob/master/Dockerfile
---
image: common/csi-external-attacher-1-28
fromImage: common/distroless
import:
- image: common/csi-external-attacher-artifact-1-28
  add: /csi-attacher
  to: /csi-attacher
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-attacher"]
---
image: common/csi-external-attacher-src-artifact-1-28
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-attacher/patches/v4.4.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v4.4.0 https://github.com/kubernetes-csi/external-attacher.git .
  - git apply /patches/*.patch --verbose
  - rm -r vendor
  - rm -rf .git
---
image: common/csi-external-attacher-artifact-1-28
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-attacher-src-artifact-1-28
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-attacher /csi-attacher
  - chown 64535:64535 /csi-attacher
  - chmod 0755 /csi-attacher
---
image: common/csi-external-attacher-1-29
fromImage: common/distroless
import:
- image: common/csi-external-attacher-artifact-1-29
  add: /csi-attacher
  to: /csi-attacher
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-attacher"]
---
image: common/csi-external-attacher-src-artifact-1-29
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-attacher/patches/v4.5.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v4.5.0 https://github.com/kubernetes-csi/external-attacher.git .
  - git apply /patches/*.patch --verbose
  - rm -r vendor
  - rm -rf .git
---
image: common/csi-external-attacher-artifact-1-29
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-attacher-src-artifact-1-29
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-attacher /csi-attacher
  - chown 64535:64535 /csi-attacher
  - chmod 0755 /csi-attacher
---
image: common/csi-external-attacher-1-30
fromImage: common/distroless
import:
- image: common/csi-external-attacher-artifact-1-30
  add: /csi-attacher
  to: /csi-attacher
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-attacher"]
---
image: common/csi-external-attacher-src-artifact-1-30
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-attacher/patches/v4.6.1
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v4.6.1 https://github.com/kubernetes-csi/external-attacher.git .
  - git apply /patches/*.patch --verbose
  - rm -r vendor
  - rm -rf .git
---
image: common/csi-external-attacher-artifact-1-30
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-attacher-src-artifact-1-30
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-attacher /csi-attacher
  - chown 64535:64535 /csi-attacher
  - chmod 0755 /csi-attacher
---
image: common/csi-external-attacher-1-31
fromImage: common/distroless
import:
- image: common/csi-external-attacher-artifact-1-31
  add: /csi-attacher
  to: /csi-attacher
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-attacher"]
---
image: common/csi-external-attacher-src-artifact-1-31
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-attacher/patches/v4.7.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v4.7.0 https://github.com/kubernetes-csi/external-attacher.git .
  - git apply /patches/*.patch --verbose
  - rm -r vendor
  - rm -rf .git
---
image: common/csi-external-attacher-artifact-1-31
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-attacher-src-artifact-1-31
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-attacher /csi-attacher
  - chown 64535:64535 /csi-attacher
  - chmod 0755 /csi-attacher
---
image: common/csi-external-attacher-1-32
fromImage: common/distroless
import:
- image: common/csi-external-attacher-artifact-1-32
  add: /csi-attacher
  to: /csi-attacher
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-attacher"]
---
image: common/csi-external-attacher-src-artifact-1-32
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v4.8.0 https://github.com/kubernetes-csi/external-attacher.git .
  - rm -r vendor
  - rm -rf .git
---
image: common/csi-external-attacher-artifact-1-32
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-attacher-src-artifact-1-32
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-attacher /csi-attacher
  - chown 64535:64535 /csi-attacher
  - chmod 0755 /csi-attacher

      # exclude modules and images from editions
---
# Based on https://github.com/kubernetes-csi/external-provisioner/blob/master/Dockerfile
---
image: common/csi-external-provisioner-1-28
fromImage: common/distroless
import:
- image: common/csi-external-provisioner-artifact-1-28
  add: /csi-provisioner
  to: /csi-provisioner
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-provisioner"]
---
image: common/csi-external-provisioner-src-artifact-1-28
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v5.2.0 https://github.com/kubernetes-csi/external-provisioner.git .
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-provisioner-artifact-1-28
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-provisioner-src-artifact-1-28
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-provisioner /csi-provisioner
  - chown 64535:64535 /csi-provisioner
  - chmod 0755 /csi-provisioner
---
image: common/csi-external-provisioner-1-29
fromImage: common/distroless
import:
- image: common/csi-external-provisioner-artifact-1-29
  add: /csi-provisioner
  to: /csi-provisioner
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-provisioner"]
---
image: common/csi-external-provisioner-src-artifact-1-29
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v5.2.0 https://github.com/kubernetes-csi/external-provisioner.git .
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-provisioner-artifact-1-29
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-provisioner-src-artifact-1-29
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-provisioner /csi-provisioner
  - chown 64535:64535 /csi-provisioner
  - chmod 0755 /csi-provisioner
---
image: common/csi-external-provisioner-1-30
fromImage: common/distroless
import:
- image: common/csi-external-provisioner-artifact-1-30
  add: /csi-provisioner
  to: /csi-provisioner
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-provisioner"]
---
image: common/csi-external-provisioner-src-artifact-1-30
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v5.2.0 https://github.com/kubernetes-csi/external-provisioner.git .
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-provisioner-artifact-1-30
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-provisioner-src-artifact-1-30
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-provisioner /csi-provisioner
  - chown 64535:64535 /csi-provisioner
  - chmod 0755 /csi-provisioner
---
image: common/csi-external-provisioner-1-31
fromImage: common/distroless
import:
- image: common/csi-external-provisioner-artifact-1-31
  add: /csi-provisioner
  to: /csi-provisioner
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-provisioner"]
---
image: common/csi-external-provisioner-src-artifact-1-31
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v5.2.0 https://github.com/kubernetes-csi/external-provisioner.git .
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-provisioner-artifact-1-31
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-provisioner-src-artifact-1-31
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-provisioner /csi-provisioner
  - chown 64535:64535 /csi-provisioner
  - chmod 0755 /csi-provisioner
---
image: common/csi-external-provisioner-1-32
fromImage: common/distroless
import:
- image: common/csi-external-provisioner-artifact-1-32
  add: /csi-provisioner
  to: /csi-provisioner
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-provisioner"]
---
image: common/csi-external-provisioner-src-artifact-1-32
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v5.2.0 https://github.com/kubernetes-csi/external-provisioner.git .
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-provisioner-artifact-1-32
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-provisioner-src-artifact-1-32
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-provisioner /csi-provisioner
  - chown 64535:64535 /csi-provisioner
  - chmod 0755 /csi-provisioner

      # exclude modules and images from editions
---
# Based on https://github.com/kubernetes-csi/external-resizer/blob/master/Dockerfile
---
image: common/csi-external-resizer-1-28
fromImage: common/distroless
import:
- image: common/csi-external-resizer-artifact-1-28
  add: /csi-resizer
  to: /csi-resizer
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-resizer"]
---
image: common/csi-external-resizer-src-artifact-1-28
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-resizer/patches/v1.9.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v1.9.0 https://github.com/kubernetes-csi/external-resizer.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-resizer-artifact-1-28
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-resizer-src-artifact-1-28
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-resizer /csi-resizer
  - chown 64535:64535 /csi-resizer
  - chmod 0755 /csi-resizer
---
image: common/csi-external-resizer-1-29
fromImage: common/distroless
import:
- image: common/csi-external-resizer-artifact-1-29
  add: /csi-resizer
  to: /csi-resizer
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-resizer"]
---
image: common/csi-external-resizer-src-artifact-1-29
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-resizer/patches/v1.9.3
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v1.9.3 https://github.com/kubernetes-csi/external-resizer.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-resizer-artifact-1-29
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-resizer-src-artifact-1-29
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-resizer /csi-resizer
  - chown 64535:64535 /csi-resizer
  - chmod 0755 /csi-resizer
---
image: common/csi-external-resizer-1-30
fromImage: common/distroless
import:
- image: common/csi-external-resizer-artifact-1-30
  add: /csi-resizer
  to: /csi-resizer
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-resizer"]
---
image: common/csi-external-resizer-src-artifact-1-30
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-resizer/patches/v1.11.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v1.11.0 https://github.com/kubernetes-csi/external-resizer.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-resizer-artifact-1-30
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-resizer-src-artifact-1-30
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-resizer /csi-resizer
  - chown 64535:64535 /csi-resizer
  - chmod 0755 /csi-resizer
---
image: common/csi-external-resizer-1-31
fromImage: common/distroless
import:
- image: common/csi-external-resizer-artifact-1-31
  add: /csi-resizer
  to: /csi-resizer
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-resizer"]
---
image: common/csi-external-resizer-src-artifact-1-31
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-resizer/patches/v1.12.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v1.12.0 https://github.com/kubernetes-csi/external-resizer.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-resizer-artifact-1-31
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-resizer-src-artifact-1-31
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-resizer /csi-resizer
  - chown 64535:64535 /csi-resizer
  - chmod 0755 /csi-resizer
---
image: common/csi-external-resizer-1-32
fromImage: common/distroless
import:
- image: common/csi-external-resizer-artifact-1-32
  add: /csi-resizer
  to: /csi-resizer
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-resizer"]
---
image: common/csi-external-resizer-src-artifact-1-32
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v1.13.0 https://github.com/kubernetes-csi/external-resizer.git .
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-resizer-artifact-1-32
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-resizer-src-artifact-1-32
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/csi-resizer /csi-resizer
  - chown 64535:64535 /csi-resizer
  - chmod 0755 /csi-resizer

      # exclude modules and images from editions
---
# Based on https://github.com/kubernetes-csi/external-snapshotter/blob/master/cmd/csi-snapshotter/Dockerfile
---
image: common/csi-external-snapshotter-1-28
fromImage: common/distroless
import:
- image: common/csi-external-snapshotter-artifact-1-28
  add: /csi-snapshotter
  to: /csi-snapshotter
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-snapshotter"]
---
image: common/csi-external-snapshotter-src-artifact-1-28
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-snapshotter/patches/v8.1.1
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v8.1.1 https://github.com/kubernetes-csi/external-snapshotter.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-snapshotter-artifact-1-28
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-snapshotter-src-artifact-1-28
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/snapshot-controller bin/csi-snapshotter bin/snapshot-validation-webhook /
  - chown 64535:64535 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
  - chmod 0755 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
---
image: common/csi-external-snapshotter-1-29
fromImage: common/distroless
import:
- image: common/csi-external-snapshotter-artifact-1-29
  add: /csi-snapshotter
  to: /csi-snapshotter
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-snapshotter"]
---
image: common/csi-external-snapshotter-src-artifact-1-29
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-snapshotter/patches/v8.1.1
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v8.1.1 https://github.com/kubernetes-csi/external-snapshotter.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-snapshotter-artifact-1-29
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-snapshotter-src-artifact-1-29
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/snapshot-controller bin/csi-snapshotter bin/snapshot-validation-webhook /
  - chown 64535:64535 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
  - chmod 0755 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
---
image: common/csi-external-snapshotter-1-30
fromImage: common/distroless
import:
- image: common/csi-external-snapshotter-artifact-1-30
  add: /csi-snapshotter
  to: /csi-snapshotter
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-snapshotter"]
---
image: common/csi-external-snapshotter-src-artifact-1-30
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-snapshotter/patches/v8.1.1
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v8.1.1 https://github.com/kubernetes-csi/external-snapshotter.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-snapshotter-artifact-1-30
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-snapshotter-src-artifact-1-30
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/snapshot-controller bin/csi-snapshotter bin/snapshot-validation-webhook /
  - chown 64535:64535 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
  - chmod 0755 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
---
image: common/csi-external-snapshotter-1-31
fromImage: common/distroless
import:
- image: common/csi-external-snapshotter-artifact-1-31
  add: /csi-snapshotter
  to: /csi-snapshotter
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-snapshotter"]
---
image: common/csi-external-snapshotter-src-artifact-1-31
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-snapshotter/patches/v8.1.1
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v8.1.1 https://github.com/kubernetes-csi/external-snapshotter.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-snapshotter-artifact-1-31
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-snapshotter-src-artifact-1-31
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/snapshot-controller bin/csi-snapshotter bin/snapshot-validation-webhook /
  - chown 64535:64535 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
  - chmod 0755 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
---
image: common/csi-external-snapshotter-1-32
fromImage: common/distroless
import:
- image: common/csi-external-snapshotter-artifact-1-32
  add: /csi-snapshotter
  to: /csi-snapshotter
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-snapshotter"]
---
image: common/csi-external-snapshotter-src-artifact-1-32
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-external-snapshotter/patches/v8.1.1
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v8.1.1 https://github.com/kubernetes-csi/external-snapshotter.git .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-external-snapshotter-artifact-1-32
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-external-snapshotter-src-artifact-1-32
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/snapshot-controller bin/csi-snapshotter bin/snapshot-validation-webhook /
  - chown 64535:64535 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook
  - chmod 0755 /snapshot-controller /csi-snapshotter /snapshot-validation-webhook

      # exclude modules and images from editions
---
# Based on https://github.com/kubernetes-csi/livenessprobe/blob/master/Dockerfile
---
image: common/csi-livenessprobe-1-28
fromImage: common/distroless
import:
- image: common/csi-livenessprobe-artifact-1-28
  add: /livenessprobe
  to: /livenessprobe
  before: setup
imageSpec:
  config:
    entrypoint: ["/livenessprobe"]
---
image: common/csi-livenessprobe-src-artifact-1-28
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-livenessprobe/patches/v2.15.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.15.0 https://github.com/kubernetes-csi/livenessprobe.git .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-livenessprobe-artifact-1-28
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-livenessprobe-src-artifact-1-28
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/livenessprobe /livenessprobe
  - chown 64535:64535 /livenessprobe
  - chmod 0755 /livenessprobe
---
image: common/csi-livenessprobe-1-29
fromImage: common/distroless
import:
- image: common/csi-livenessprobe-artifact-1-29
  add: /livenessprobe
  to: /livenessprobe
  before: setup
imageSpec:
  config:
    entrypoint: ["/livenessprobe"]
---
image: common/csi-livenessprobe-src-artifact-1-29
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-livenessprobe/patches/v2.15.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.15.0 https://github.com/kubernetes-csi/livenessprobe.git .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-livenessprobe-artifact-1-29
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-livenessprobe-src-artifact-1-29
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/livenessprobe /livenessprobe
  - chown 64535:64535 /livenessprobe
  - chmod 0755 /livenessprobe
---
image: common/csi-livenessprobe-1-30
fromImage: common/distroless
import:
- image: common/csi-livenessprobe-artifact-1-30
  add: /livenessprobe
  to: /livenessprobe
  before: setup
imageSpec:
  config:
    entrypoint: ["/livenessprobe"]
---
image: common/csi-livenessprobe-src-artifact-1-30
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-livenessprobe/patches/v2.15.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.15.0 https://github.com/kubernetes-csi/livenessprobe.git .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-livenessprobe-artifact-1-30
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-livenessprobe-src-artifact-1-30
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/livenessprobe /livenessprobe
  - chown 64535:64535 /livenessprobe
  - chmod 0755 /livenessprobe
---
image: common/csi-livenessprobe-1-31
fromImage: common/distroless
import:
- image: common/csi-livenessprobe-artifact-1-31
  add: /livenessprobe
  to: /livenessprobe
  before: setup
imageSpec:
  config:
    entrypoint: ["/livenessprobe"]
---
image: common/csi-livenessprobe-src-artifact-1-31
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-livenessprobe/patches/v2.15.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.15.0 https://github.com/kubernetes-csi/livenessprobe.git .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-livenessprobe-artifact-1-31
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-livenessprobe-src-artifact-1-31
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/livenessprobe /livenessprobe
  - chown 64535:64535 /livenessprobe
  - chmod 0755 /livenessprobe
---
image: common/csi-livenessprobe-1-32
fromImage: common/distroless
import:
- image: common/csi-livenessprobe-artifact-1-32
  add: /livenessprobe
  to: /livenessprobe
  before: setup
imageSpec:
  config:
    entrypoint: ["/livenessprobe"]
---
image: common/csi-livenessprobe-src-artifact-1-32
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-livenessprobe/patches/v2.15.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.15.0 https://github.com/kubernetes-csi/livenessprobe.git .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-livenessprobe-artifact-1-32
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-livenessprobe-src-artifact-1-32
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - make build
  - cp bin/livenessprobe /livenessprobe
  - chown 64535:64535 /livenessprobe
  - chmod 0755 /livenessprobe

      # exclude modules and images from editions
---
# Based on https://github.com/kubernetes-csi/node-driver-registrar/blob/master/Dockerfile
---
image: common/csi-node-driver-registrar-1-28
fromImage: common/distroless
import:
- image: common/csi-node-driver-registrar-artifact-1-28
  add: /csi-node-driver-registrar
  to: /csi-node-driver-registrar
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-node-driver-registrar"]
---
image: common/csi-node-driver-registrar-src-artifact-1-28
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-node-driver-registrar/patches/v2.13.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.13.0 https://github.com/kubernetes-csi/node-driver-registrar.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-node-driver-registrar-artifact-1-28
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-node-driver-registrar-src-artifact-1-28
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - go mod vendor
  - make build
  - cp bin/csi-node-driver-registrar /csi-node-driver-registrar
  - chown 64535:64535 /csi-node-driver-registrar
  - chmod 0755 /csi-node-driver-registrar
---
image: common/csi-node-driver-registrar-1-29
fromImage: common/distroless
import:
- image: common/csi-node-driver-registrar-artifact-1-29
  add: /csi-node-driver-registrar
  to: /csi-node-driver-registrar
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-node-driver-registrar"]
---
image: common/csi-node-driver-registrar-src-artifact-1-29
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-node-driver-registrar/patches/v2.13.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.13.0 https://github.com/kubernetes-csi/node-driver-registrar.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-node-driver-registrar-artifact-1-29
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-node-driver-registrar-src-artifact-1-29
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - go mod vendor
  - make build
  - cp bin/csi-node-driver-registrar /csi-node-driver-registrar
  - chown 64535:64535 /csi-node-driver-registrar
  - chmod 0755 /csi-node-driver-registrar
---
image: common/csi-node-driver-registrar-1-30
fromImage: common/distroless
import:
- image: common/csi-node-driver-registrar-artifact-1-30
  add: /csi-node-driver-registrar
  to: /csi-node-driver-registrar
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-node-driver-registrar"]
---
image: common/csi-node-driver-registrar-src-artifact-1-30
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-node-driver-registrar/patches/v2.13.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.13.0 https://github.com/kubernetes-csi/node-driver-registrar.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-node-driver-registrar-artifact-1-30
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-node-driver-registrar-src-artifact-1-30
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - go mod vendor
  - make build
  - cp bin/csi-node-driver-registrar /csi-node-driver-registrar
  - chown 64535:64535 /csi-node-driver-registrar
  - chmod 0755 /csi-node-driver-registrar
---
image: common/csi-node-driver-registrar-1-31
fromImage: common/distroless
import:
- image: common/csi-node-driver-registrar-artifact-1-31
  add: /csi-node-driver-registrar
  to: /csi-node-driver-registrar
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-node-driver-registrar"]
---
image: common/csi-node-driver-registrar-src-artifact-1-31
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-node-driver-registrar/patches/v2.13.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.13.0 https://github.com/kubernetes-csi/node-driver-registrar.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-node-driver-registrar-artifact-1-31
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-node-driver-registrar-src-artifact-1-31
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - go mod vendor
  - make build
  - cp bin/csi-node-driver-registrar /csi-node-driver-registrar
  - chown 64535:64535 /csi-node-driver-registrar
  - chmod 0755 /csi-node-driver-registrar
---
image: common/csi-node-driver-registrar-1-32
fromImage: common/distroless
import:
- image: common/csi-node-driver-registrar-artifact-1-32
  add: /csi-node-driver-registrar
  to: /csi-node-driver-registrar
  before: setup
imageSpec:
  config:
    entrypoint: ["/csi-node-driver-registrar"]
---
image: common/csi-node-driver-registrar-src-artifact-1-32
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-node-driver-registrar/patches/v2.13.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.13.0 https://github.com/kubernetes-csi/node-driver-registrar.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: common/csi-node-driver-registrar-artifact-1-32
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-node-driver-registrar-src-artifact-1-32
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download
  - go mod vendor
  - make build
  - cp bin/csi-node-driver-registrar /csi-node-driver-registrar
  - chown 64535:64535 /csi-node-driver-registrar
  - chmod 0755 /csi-node-driver-registrar

      # exclude modules and images from editions
---

---
image: common/csi-vsphere-syncer-1-28
fromImage: common/distroless
import:
- image: common/csi-vsphere-syncer-artifact-1-28
  add: /src/vsphere-syncer
  to: /bin/vsphere-syncer
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-syncer"]
---
image: common/csi-vsphere-syncer-src-artifact-1-28
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-vsphere-syncer/patches/v3.0.3
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-vsphere-syncer-artifact-1-28
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-vsphere-syncer-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -ldflags="-w -s -extldflags=static -X sigs.k8s.io/vsphere-csi-driver/v3/pkg/syncer.Version=1.28" -o vsphere-syncer ./cmd/syncer
---
image: common/csi-vsphere-syncer-1-29
fromImage: common/distroless
import:
- image: common/csi-vsphere-syncer-artifact-1-29
  add: /src/vsphere-syncer
  to: /bin/vsphere-syncer
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-syncer"]
---
image: common/csi-vsphere-syncer-src-artifact-1-29
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-vsphere-syncer/patches/v3.0.3
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-vsphere-syncer-artifact-1-29
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-vsphere-syncer-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -ldflags="-w -s -extldflags=static -X sigs.k8s.io/vsphere-csi-driver/v3/pkg/syncer.Version=1.29" -o vsphere-syncer ./cmd/syncer
---
image: common/csi-vsphere-syncer-1-30
fromImage: common/distroless
import:
- image: common/csi-vsphere-syncer-artifact-1-30
  add: /src/vsphere-syncer
  to: /bin/vsphere-syncer
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-syncer"]
---
image: common/csi-vsphere-syncer-src-artifact-1-30
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-vsphere-syncer/patches/v3.0.3
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-vsphere-syncer-artifact-1-30
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-vsphere-syncer-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -ldflags="-w -s -extldflags=static -X sigs.k8s.io/vsphere-csi-driver/v3/pkg/syncer.Version=1.30" -o vsphere-syncer ./cmd/syncer
---
image: common/csi-vsphere-syncer-1-31
fromImage: common/distroless
import:
- image: common/csi-vsphere-syncer-artifact-1-31
  add: /src/vsphere-syncer
  to: /bin/vsphere-syncer
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-syncer"]
---
image: common/csi-vsphere-syncer-src-artifact-1-31
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-vsphere-syncer/patches/v3.0.3
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-vsphere-syncer-artifact-1-31
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-vsphere-syncer-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -ldflags="-w -s -extldflags=static -X sigs.k8s.io/vsphere-csi-driver/v3/pkg/syncer.Version=1.31" -o vsphere-syncer ./cmd/syncer
---
image: common/csi-vsphere-syncer-1-32
fromImage: common/distroless
import:
- image: common/csi-vsphere-syncer-artifact-1-32
  add: /src/vsphere-syncer
  to: /bin/vsphere-syncer
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/vsphere-syncer"]
---
image: common/csi-vsphere-syncer-src-artifact-1-32
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/csi-vsphere-syncer/patches/v3.0.3
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v3.0.3 https://github.com/kubernetes-sigs/vsphere-csi-driver.git  .
  - git apply /patches/*.patch --verbose
  - rm -rf vendor
  - rm -rf .git
---
image: common/csi-vsphere-syncer-artifact-1-32
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/csi-vsphere-syncer-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -ldflags="-w -s -extldflags=static -X sigs.k8s.io/vsphere-csi-driver/v3/pkg/syncer.Version=1.32" -o vsphere-syncer ./cmd/syncer

      # exclude modules and images from editions
---
---
image: common/distroless
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
  - image: common/distroless-artifact
    add: /relocate
    to: /
    before: setup
imageSpec:
  config:
    user: "64535:64535"
---
image: common/distroless-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache ca-certificates tzdata
  install:
  - mkdir -p /relocate/bin /relocate/sbin /relocate/etc /relocate/etc/ssl /relocate/usr/bin /relocate/usr/sbin /relocate/usr/share
  - cp -pr /tmp /relocate
  - cp -pr /etc/passwd /etc/group /etc/hostname /etc/hosts /etc/shadow /etc/protocols /etc/services /etc/nsswitch.conf /relocate/etc
  - cp -pr /usr/share/ca-certificates /relocate/usr/share
  - cp -pr /usr/share/zoneinfo /relocate/usr/share
  - cp -pr etc/ssl/cert.pem /relocate/etc/ssl
  - cp -pr /etc/ssl/certs /relocate/etc/ssl
  - echo "deckhouse:x:64535:64535:deckhouse:/:/sbin/nologin" >> /relocate/etc/passwd
  - echo "deckhouse:x:64535:" >> /relocate/etc/group
  - echo "deckhouse:!::0:::::" >> /relocate/etc/shadow

      # exclude modules and images from editions
---

---
image: common/init
fromImage: common/distroless
import:
- image: common/init-artifact
  add: /relocate
  to: /
  before: setup
---
image: common/init-artifact
fromImage: common/relocate-artifact
final: false
shell:
  beforeInstall:
  - apt-get update
  - apt-get install -y netcat
  - rm -rf /var/lib/apt/lists/* /var/cache/apt/* && mkdir -p /var/lib/apt/lists/partial /var/cache/apt/archives/partial
  install:
  - /binary_replace.sh -i "/bin/sh /bin/chown /bin/chmod /bin/ls /bin/cp /bin/rm /bin/mkdir /bin/nc /bin/sleep /bin/true" -o /relocate


      # exclude modules and images from editions
---
---
image: common/iptables-wrapper
fromImage: common/distroless
import:
- image: common/iptables-wrapper-artifact
  add: /src/iptables-wrapper
  to: /iptables-wrapper
  before: setup
---
image: common/iptables-wrapper-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone https://github.com/kubernetes-sigs/iptables-wrappers.git /src
  - cd /src
  - git reset --hard 680003b3c6e93b471a59ecc9ae87a8f9054b82f3
  - rm -r .git
---
image: common/iptables-wrapper-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/iptables-wrapper-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o iptables-wrapper main.go
  - chown 64535:64535 iptables-wrapper
  - chmod 0755 iptables-wrapper

      # exclude modules and images from editions
---
---
image: common/jq-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 https://github.com/jqlang/jq --branch "jq-1.7.1" . && rm -rf /src/.git
  - rm -r docs
  - mkdir -p docs/content/manual
  - touch docs/content/manual/manual.yml
---
image: common/jq-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: common/jq-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache oniguruma-dev automake autoconf libtool build-base git
  install:
  - cd /src
  - autoreconf -fi
  - |
    ./configure \
      --prefix=/usr \
      --sysconfdir=/etc \
      --mandir=/usr/share/man \
      --localstatedir=/var \
      --disable-docs
  - make LDFLAGS=-all-static
  - make prefix=/usr install

      # exclude modules and images from editions
---
---
image: common/kube-rbac-proxy
fromImage: common/distroless
import:
- image: common/kube-rbac-proxy-artifact
  add: /kube-rbac-proxy
  to: /kube-rbac-proxy
  before: setup
imageSpec:
  config:
    entrypoint: ["/kube-rbac-proxy", "--tls-cipher-suites", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"]
    expose: ["8080"]
---
image: common/kube-rbac-proxy-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/kube-rbac-proxy/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.11.0 https://github.com/brancz/kube-rbac-proxy.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -r .git
---
image: common/kube-rbac-proxy-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/kube-rbac-proxy-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - make build
  - cp /src/_output/kube-rbac-proxy-linux-$(go env GOARCH) /kube-rbac-proxy
  - chown 64535:64535 /kube-rbac-proxy
  - chmod 0755 /kube-rbac-proxy

      # exclude modules and images from editions
---

---
image: common/kubernetes-src-artifact-1-28-15
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/kubernetes/patches/1.28
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.28.15 https://github.com/kubernetes/kubernetes.git /src
  - cd /src
  - |
    cat <<EOF > .kube-version
    KUBE_GIT_VERSION='v1.28.15'
    KUBE_GIT_MAJOR='1'
    KUBE_GIT_MINOR='28'
    KUBE_GIT_COMMIT='0000000000000000000000000000000000000000'
    KUBE_GIT_TREE_STATE='archive'
    EOF
  - git apply /patches/*.patch --verbose
  - rm -r .git vendor
---
image: common/kubernetes-artifact-1-28-15
fromImage: builder/golang-alpine
final: false
import:
- image: common/kubernetes-src-artifact-1-28-15
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
- from: tmp_dir
  to: /src/_output/local/go
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash rsync
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ GOWORK=off
  - cd /src
  - export KUBE_GIT_VERSION_FILE=.kube-version
  - go mod vendor
  - make all WHAT=cmd/kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl kubeadm GOLDFLAGS="-s -w -extldflags \"-static\"" KUBE_STATIC_OVERRIDES="kubelet"
  - rm -rf vendor
---
image: common/kubernetes-src-artifact-1-29-15
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/kubernetes/patches/1.29
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.29.15 https://github.com/kubernetes/kubernetes.git /src
  - cd /src
  - |
    cat <<EOF > .kube-version
    KUBE_GIT_VERSION='v1.29.15'
    KUBE_GIT_MAJOR='1'
    KUBE_GIT_MINOR='29'
    KUBE_GIT_COMMIT='0000000000000000000000000000000000000000'
    KUBE_GIT_TREE_STATE='archive'
    EOF
  - git apply /patches/*.patch --verbose
  - rm -r .git vendor
---
image: common/kubernetes-artifact-1-29-15
fromImage: builder/golang-alpine
final: false
import:
- image: common/kubernetes-src-artifact-1-29-15
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
- from: tmp_dir
  to: /src/_output/local/go
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash rsync
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ GOWORK=off
  - cd /src
  - export KUBE_GIT_VERSION_FILE=.kube-version
  - go mod vendor
  - make all WHAT=cmd/kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl kubeadm GOLDFLAGS="-s -w -extldflags \"-static\"" KUBE_STATIC_OVERRIDES="kubelet"
  - rm -rf vendor
---
image: common/kubernetes-src-artifact-1-30-12
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/kubernetes/patches/1.30
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.30.12 https://github.com/kubernetes/kubernetes.git /src
  - cd /src
  - |
    cat <<EOF > .kube-version
    KUBE_GIT_VERSION='v1.30.12'
    KUBE_GIT_MAJOR='1'
    KUBE_GIT_MINOR='30'
    KUBE_GIT_COMMIT='0000000000000000000000000000000000000000'
    KUBE_GIT_TREE_STATE='archive'
    EOF
  - git apply /patches/*.patch --verbose
  - rm -r .git vendor
---
image: common/kubernetes-artifact-1-30-12
fromImage: builder/golang-alpine
final: false
import:
- image: common/kubernetes-src-artifact-1-30-12
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
- from: tmp_dir
  to: /src/_output/local/go
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash rsync
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ GOWORK=off
  - cd /src
  - export KUBE_GIT_VERSION_FILE=.kube-version
  - go mod vendor
  - make all WHAT=cmd/kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl kubeadm GOLDFLAGS="-s -w -extldflags \"-static\"" KUBE_STATIC_OVERRIDES="kubelet"
  - rm -rf vendor
---
image: common/kubernetes-src-artifact-1-31-8
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/kubernetes/patches/1.31
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.31.8 https://github.com/kubernetes/kubernetes.git /src
  - cd /src
  - |
    cat <<EOF > .kube-version
    KUBE_GIT_VERSION='v1.31.8'
    KUBE_GIT_MAJOR='1'
    KUBE_GIT_MINOR='31'
    KUBE_GIT_COMMIT='0000000000000000000000000000000000000000'
    KUBE_GIT_TREE_STATE='archive'
    EOF
  - git apply /patches/*.patch --verbose
  - rm -r .git vendor
---
image: common/kubernetes-artifact-1-31-8
fromImage: builder/golang-alpine
final: false
import:
- image: common/kubernetes-src-artifact-1-31-8
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
- from: tmp_dir
  to: /src/_output/local/go
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash rsync
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ GOWORK=off
  - cd /src
  - export KUBE_GIT_VERSION_FILE=.kube-version
  - go mod vendor
  - make all WHAT=cmd/kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl kubeadm GOLDFLAGS="-s -w -extldflags \"-static\"" KUBE_STATIC_OVERRIDES="kubelet"
  - rm -rf vendor
---
image: common/kubernetes-src-artifact-1-32-4
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/kubernetes/patches/1.32
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.32.4 https://github.com/kubernetes/kubernetes.git /src
  - cd /src
  - |
    cat <<EOF > .kube-version
    KUBE_GIT_VERSION='v1.32.4'
    KUBE_GIT_MAJOR='1'
    KUBE_GIT_MINOR='32'
    KUBE_GIT_COMMIT='0000000000000000000000000000000000000000'
    KUBE_GIT_TREE_STATE='archive'
    EOF
  - git apply /patches/*.patch --verbose
  - rm -r .git vendor
---
image: common/kubernetes-artifact-1-32-4
fromImage: builder/golang-alpine
final: false
import:
- image: common/kubernetes-src-artifact-1-32-4
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
- from: tmp_dir
  to: /src/_output/local/go
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash rsync
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ GOWORK=off
  - cd /src
  - export KUBE_GIT_VERSION_FILE=.kube-version
  - go mod vendor
  - make all WHAT=cmd/kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl kubeadm GOLDFLAGS="-s -w -extldflags \"-static\"" KUBE_STATIC_OVERRIDES="kubelet"
  - rm -rf vendor

      # exclude modules and images from editions
---

---
image: common/nginx-static-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone -b release-1.27.3 --single-branch --depth=1 https://github.com/nginx/nginx.git /src/nginx
  - git clone -b openssl-3.3.2 --single-branch --depth=1 https://github.com/openssl/openssl.git /src/openssl
  - rm -r /src/nginx/.git /src/openssl/.git
---
image: common/build-nginx-static-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: common/nginx-static-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add pcre-dev zlib-dev zlib-static perl linux-headers build-base
  install:
  - cd /src/nginx
  - ./auto/configure --prefix=/opt/nginx-static --with-cc-opt="-static -static-libgcc" --with-ld-opt="-static" --with-stream --with-cpu-opt=generic --with-pcre --with-mail --with-ipv6 --with-poll_module --with-select_module --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_stub_status_module --with-mail --with-mail_ssl_module --with-openssl=/src/openssl
  - make -j1
  - make -j1 install
  - chown -R 64535:64535 /opt/nginx-static
  - chmod 0700 /opt/nginx-static/sbin/nginx
---
image: common/nginx-static
fromImage: common/distroless
import:
- image: common/build-nginx-static-artifact
  add: /opt/nginx-static
  to: /opt/nginx-static
  before: setup

      # exclude modules and images from editions
---
---
image: common/pause
fromImage: common/distroless
import:
- image: common/pause-artifact
  add: /pause-linux-amd64
  to: /pause
  before: setup
imageSpec:
  config:
    entrypoint: ["/pause"]
---
image: common/pause-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/pause/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: common/pause-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: common/pause-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache build-base
  install:
  - cd /src
  - gcc -Os -Wall -Werror -static -o /pause-linux-amd64 pause.c
  - strip /pause-linux-amd64

      # exclude modules and images from editions
---

---
image: common/python-static-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/python-static/src/Setup.local
  to: /Setup.local
  stageDependencies:
    install:
    - '**/*'
- add: /modules/000-common/images/python-static/patches
  to: /patches
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
import:
- image: common/python-static-whl
  add: /src
  to: /src/Lib/ensurepip/_bundled
  before: setup
shell:
  install:
  - git clone -b v3.11.11 --single-branch --depth=1 https://github.com/python/cpython.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -r .git
  - mv /Setup.local Modules/Setup.local
  - rm ./Lib/ensurepip/_bundled/setuptools-65.5.0-py3-none-any.whl
---
image: common/python-static-whl
fromImage: common/alt-p11-artifact
final: false
shell:
  beforeInstall:
  - apt-get install -y pip
  install:
  
  - mkdir -p /src
  - pip download setuptools==75.1.0 -d /src
---
image: common/python-static-artifact
from: registry.deckhouse.io/base_images/ubuntu:jammy-20221130@sha256:c14c3b1242536729ce5227ff833144977b4e378723858fb73a4cf40ea6daaf6a
final: false
import:
- image: common/python-static-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
    # Replace ubuntu repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  # one year
  - apt-get -o Acquire::Check-Valid-Until=false -o Acquire::Check-Date=false -o Acquire::Max-FutureTime=31536000 update
  - apt-get install -y build-essential gdb lcov pkg-config libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev lzma lzma-dev tk-dev uuid-dev zlib1g-dev libmpdec-dev
  install:
  - cd /src
  - ./configure LDFLAGS="-static" --disable-shared --prefix=/opt/python-static --enable-optimizations --with-ensurepip=install
  - make LDFLAGS="-static" LINKFORSHARED=" " -j ${BUILD_THREADS}
  - make install -j 4
  - chown -R 64535:64535 /opt/python-static
  - chmod 0700 /opt/python-static/bin/python3
  - chmod 0700 /opt/python-static/bin/pip3
---
image: common/python-static
fromImage: common/distroless
final: false
import:
- image: common/python-static-artifact
  add: /opt/python-static
  to: /opt/python-static
  excludePaths:
  - include
  - share
  - lib/*.a
  - lib/**/*.a
  - lib/**/*.c
  - lib/**/test
  - lib/**/*.exe
  before: setup

      # exclude modules and images from editions
---
---
image: common/redis-static-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone --branch 7.4.0 --depth 1 https://github.com/redis/redis.git /src
  - rm -r /src/utils
  - rm -r /src/.git
---
image: common/redis-static-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: common/redis-static-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache build-base gcc make
  install:
  - cd /src
  # disable Redis protected mode [1] as it is unnecessary in context of Docker
  # (ports are not automatically exposed when running inside Docker, but rather explicitly by specifying -p / -P)
  # [1]: https://github.com/redis/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da
  - grep -E '^ *createBoolConfig[(]"protected-mode",.*, *1 *,.*[)],$' src/config.c
  - sed -ri 's!^( *createBoolConfig[(]"protected-mode",.*, *)1( *,.*[)],)$!\10\2!' src/config.c
  - grep -E '^ *createBoolConfig[(]"protected-mode",.*, *0 *,.*[)],$' src/config.c
  - make CFLAGS="-static" LDFLAGS="-static"
  - chown 64535:64535 /src/src/redis-server
  - chmod 0700 /src/src/redis-server
---
image: common/redis-static
fromImage: common/distroless
import:
- image: common/redis-static-artifact
  add: /src/src/redis-server
  to: /redis-server
  before: setup
imageSpec:
  config:
    entrypoint: ["/redis-server"]

      # exclude modules and images from editions
---
---
# base artifact to do relocate
image: common/relocate-artifact
fromImage: common/alt-p11-artifact
final: false
git:
- add: /modules/000-common/images/relocate/binary_replace.sh
  to: /binary_replace.sh
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - apt-get install -y glibc-utils

      # exclude modules and images from editions
---
---
image: common/semver-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone --depth 1 https://github.com/fsaintjacques/semver-tool --branch 2.1.0 /src && rm -rf /src/.git
---
image: common/semver-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: common/semver-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - make install

      # exclude modules and images from editions
---

---
image: common/shell-operator
fromImage: common/alt-p11
import:
- image: common/shell-operator-artifact
  add: /shell-operator/shell-operator
  to: /shell-operator
  before: setup
- image: common/shell-operator-artifact
  add: /shell-operator/shell_lib.sh
  to: /shell_lib.sh
  before: setup
- image: common/shell-operator-artifact
  add: /shell-operator/frameworks
  to: /frameworks
  before: setup
- image: common/shell-operator-artifact
  add: /src/jq/jq
  to: /usr/local/bin/jq
  before: setup
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin/kubectl
  to: /usr/local/bin/kubectl
  before: setup
- image: common/tini-artifact
  add: /tini/tini-static
  to: /sbin/tini
  before: setup
imageSpec:
  config:
    entrypoint: ["tini", "--", "/shell-operator"]
shell:
  setup:
  - find /var/lib/apt/ /var/cache/apt/ -type f -delete
---
image: common/shell-operator-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone --branch v1.5.3 --depth 1 https://github.com/flant/shell-operator.git /src/shell-operator
  - rm -r /src/shell-operator/.git
  - git clone --depth 1 https://github.com/jqlang/jq --branch "jq-1.7.1" /src/jq
  - cd /src/jq
  - |
    cat > .gitmodules <<"EOF"
    [submodule "modules/oniguruma"]
        path = modules/oniguruma
        url = https://github.com/flant/oniguruma.git
    EOF
  - git submodule update --init
  - rm -r docs
  - rm -r /src/jq/.git
  - rm -r /src/jq/modules/oniguruma/.git
  - mkdir -p docs/content/manual
  - touch docs/content/manual/manual.yml
---
image: common/shell-operator-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
import:
- image: common/shell-operator-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache automake autoconf libtool build-base git
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=1 GOOS=linux
  - cd /src/jq
  - autoreconf -fi
  - ./configure CFLAGS=-fPIC --disable-maintainer-mode --enable-all-static --disable-shared --disable-docs --disable-tls --disable-valgrind --with-oniguruma=builtin --prefix=/libjq
  - make -j4
  - make install-libLTLIBRARIES install-includeHEADERS
  - cp -f modules/oniguruma/src/.libs/libonig.* /libjq/lib
  - mkdir -p /jq
  - cp jq /jq
  - chown -R 64535:64535 /jq
  - chmod 700 /jq/jq
  - cd /src/shell-operator
  - go mod download -x
  - CGO_CFLAGS="-I/libjq/include" CGO_LDFLAGS="-L/libjq/lib" go build -ldflags="-linkmode external -extldflags '-static' -s -w -X 'github.com/flant/shell-operator/pkg/app.Version=v1.5.3'" -tags use_libjq -o shell-operator ./cmd/shell-operator
  - mkdir -p /shell-operator
  - cp -r shell_lib.sh frameworks shell-operator /shell-operator
  - chown -R 64535:64535 /shell-operator
  - chmod 700 /shell-operator/shell-operator

      # exclude modules and images from editions
---
---
image: common/src-artifact
fromImage: common/alt-p11-artifact
final: false
shell:
  beforeInstall:
  - apt-get install -y git
  - rm -rf /var/lib/apt/lists/* /var/cache/apt/* && mkdir -p /var/lib/apt/lists/partial /var/cache/apt/archives/partial
  - mkdir -p /src

      # exclude modules and images from editions
---
---
image: common/task-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v3.41.0 https://github.com/go-task/task .
  - rm -rf .git website
---
image: common/task-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: common/task-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - go test ./... -v
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /task cmd/task/task.go
  - chown 64535:64535 /task
  - chmod 0755 /task

      # exclude modules and images from editions
---
---
image: common/tini-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/tini/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
    - cd /src
    - git clone --depth 1 https://github.com/krallin/tini --branch v0.19.0 .
    - git apply /patches/*.patch --verbose
    - rm -rf /src/.git
---
image: common/tini-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: common/tini-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache build-base cmake
  install:
  - cd /src
  - export CFLAGS="-DPR_SET_CHILD_SUBREAPER=36 -DPR_GET_CHILD_SUBREAPER=37"
  - cmake . && make
  - mkdir -p /tini
  - cp tini-static /tini

      # exclude modules and images from editions
---

---
image: common/vxlan-offloading-fixer-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/000-common/images/vxlan-offloading-fixer/src
  to: /src/vxlan-offloading-fixer
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone -b libmnl-1.0.5 --depth 1 https://github.com/netfilter/libmnl ./libmnl
  - rm -r libmnl/.git
  - git clone -b v6.11 --depth 1 https://github.com/ethtool/ethtool.git ./ethtool
  - rm -r ethtool/.git
---
image: common/vxlan-offloading-fixer-ethtool-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: common/vxlan-offloading-fixer-src-artifact
  add: /src
  to: /src
  before: install
  includePaths:
  - libmnl
  - ethtool
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache autoconf automake make libtool g++ linux-headers pkgconfig
  setup:
  - export PKG_CONFIG_PATH=/opt/deckhouse/bin/.libs/pkgconfig
  - cd /src/libmnl
  - ./autogen.sh
  - ./configure --enable-static --libdir=/opt/deckhouse/bin/.libs
  - make && make install
  - cd /src/ethtool
  - ./autogen.sh
  - ./configure LDFLAGS=-static --libdir=/opt/deckhouse/bin/.libs
  - make
  - ls -la
  - strip ./ethtool
  - chown 64535:64535 ./ethtool
  - chmod 0755 ./ethtool
  - cp ./ethtool /ethtool
---
image: common/vxlan-offloading-fixer-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: common/vxlan-offloading-fixer-src-artifact
  add: /src/vxlan-offloading-fixer
  to: /src
  before: install
shell:
  install:
  - export "CGO_ENABLED=0"
  - export "GOOS=linux"
  - export "GOARCH=amd64"
  - cd /src
  - go build -o /tmp/vxlan-offloading-fixer main.go
  - chown 64535:64535 /tmp/vxlan-offloading-fixer
  - chmod 0755 /tmp/vxlan-offloading-fixer
---
image: common/vxlan-offloading-fixer
fromImage: common/distroless
import:
- image: common/vxlan-offloading-fixer-ethtool-artifact
  add: /ethtool
  to: /ethtool
  before: setup
- image: common/vxlan-offloading-fixer-artifact
  add: /tmp/vxlan-offloading-fixer
  to: /vxlan-offloading-fixer
  before: setup
- image: common/pause
  add: /pause
  to: /pause
  before: install
imageSpec:
  config:
    entrypoint: ["/vxlan-offloading-fixer"]

      # exclude modules and images from editions
---
---
image: common/yq4-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v4.45.1 https://github.com/mikefarah/yq .
  - rm -rf .git
---
image: common/yq4-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: common/yq4-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - CGO_ENABLED=0 GOOS=linux go build -ldflags '-s -w -extldflags "-static"' -o /usr/local/bin/yq

      # exclude modules and images from editions
---
---
image: deckhouse/webhook-handler
fromImage: common/shell-operator
import:
  - image: common/yq4-artifact
    add: /usr/local/bin/yq
    to: /usr/local/bin/yq
    before: install
  - image: common/semver-artifact
    add: /usr/local/bin/semver
    to: /usr/local/bin/semver
    before: setup
  - image: prometheus/prometheus
    add: /bin/promtool
    to: /usr/local/bin/promtool
    before: setup
  - image: deckhouse/webhook-handler-binaries-artifact
    add: /usr/bin
    to: /usr/bin
    before: setup
    includePaths:
    - python3
    - python3.12
  - image: deckhouse/webhook-handler-binaries-artifact
    add: /usr/lib/python3
    to: /usr/lib/python3
    before: setup
  - image: deckhouse/webhook-handler-binaries-artifact
    add: /usr/lib64/python3
    to: /usr/lib64/python3
    before: setup
  - image: deckhouse/webhook-handler-binaries-artifact
    add: /usr/lib64/python3.12
    to: /usr/lib64/python3.12
    before: setup
  - image: deckhouse/webhook-handler-label-converter-artifact
    add: /label-converter
    to: /usr/local/bin/label-converter
    before: setup
git:
- add: /
  to: /available_hooks
  includePaths:
  - 'modules/*/webhooks/'
  - 'ee/modules/*/webhooks/'
  - 'ee/se/modules/*/webhooks'
# - 'ee/fe/modules/*/webhooks/'
  excludePaths:
    - '**/*_test.py'
  stageDependencies:
    install:
      - '**/*'
- add: /modules/002-deckhouse/images/webhook-handler/entrypoint.sh
  to: /entrypoint.sh
  stageDependencies:
    install:
      - '**/*'
- add: /shell_lib/semver.sh
  to: /frameworks/shell/semver.sh
  stageDependencies:
    install:
      - '**/*'
- add: /python_lib
  to: /frameworks/python
  stageDependencies:
    install:
      - '**/*'
imageSpec:
  config:
    env: {"PYTHONPATH": "/frameworks/python"}
    entrypoint: ["/entrypoint.sh"]
---
image: deckhouse/webhook-handler-label-converter-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/002-deckhouse/images/webhook-handler/label-converter
  to: /src
  includePaths:
  - '**/*.go'
  - '**/go.mod'
  - '**/go.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - '**/go.mod'
    - '**/go.sum'
---
image: deckhouse/webhook-handler-label-converter-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: deckhouse/webhook-handler-label-converter-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/
    - cd /src
    - CGO_ENABLED=0 GOOS=linux go build -ldflags '-s -w -extldflags "-static"' -o /label-converter label_converter.go
    - chown 64535:64535 /label-converter
    - chmod 755 /label-converter
---
image: deckhouse/webhook-handler-binaries-artifact
final: false
fromImage: common/alt-p11-artifact
git:
- add: /modules/002-deckhouse/images/webhook-handler/requirements.txt
  to: /requirements.txt
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
    - apt-get update
    - apt-get install -y python3 python3-module-pip-run
    - pip3 install -r /requirements.txt

      # exclude modules and images from editions
---

---
image: registrypackages/amazon-ec2-utils-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/amazon-ec2-utils/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone -b v2.2.0 --depth 1 https://github.com/amazonlinux/amazon-ec2-utils.git /src/amazon-ec2-utils
  - rm -rf /src/amazon-ec2-utils/.git
  - cp /src/amazon-ec2-utils/ebsnvme-id /ebsnvme-id
---
image: registrypackages/amazon-ec2-utils-2-2-0
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/amazon-ec2-utils-src-artifact
  add: /src/amazon-ec2-utils/ebsnvme-id
  to: /ebsnvme-id
  before: setup
- image: registrypackages/amazon-ec2-utils-src-artifact
  add: /src/scripts
  to: /
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "growpart": "2.2.0" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]

      # exclude modules and images from editions
---

---
image: registrypackages/containerd-1-7-27
fromImage: builder/scratch
import:
- image: registrypackages/containerd-artifact-1-7-27
  add: /
  to: /
  includePaths:
  - containerd
  - containerd-shim-runc-v2
  - ctr
  - runc
  - install
  - uninstall
  - containerd.service
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "containerd": "1.7.27", "runc": "1.2.5" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/containerd-src-artifact-1-7-27
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/containerd/scripts
  to: /src/scripts
  stageDependencies:
    install:
      - '**/*'
- add: /modules/007-registrypackages/images/containerd/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth=1 --branch v1.7.27 https://github.com/containerd/containerd.git /src/containerd
  - git clone --depth=1 --branch v1.2.5 https://github.com/opencontainers/runc /src/runc
  - cd /src/containerd
  - git describe --match 'v[0-9]*' --dirty='.m' --always > VERSION
  - git rev-parse HEAD > REVISION
  - git apply /patches/containerd/*.patch --verbose
  - cd /src/runc
  - git describe --dirty --long --always > COMMIT
  - rm -rf /src/containerd/.git
  - rm -rf /src/runc/.git
---
image: registrypackages/containerd-artifact-1-7-27
fromImage: builder/golang-bullseye
final: false
import:
- image: registrypackages/containerd-src-artifact-1-7-27
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # 5 years 157680000
  - |
      echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
      echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
      echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
  # Replace debian repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update
  - apt-get update && apt-get install libseccomp-dev -y
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/containerd
  - git config --global user.email "builder@deckhouse.io"
  - go mod download
  - go mod vendor
  - make STATIC=1 VERSION="$(cat VERSION)" REVISION="$(cat REVISION)" all
  - mv bin/* /
  - cd /src/runc
  - go mod download
  - go mod vendor
  - git config --global user.email "builder@deckhouse.io"
  - make COMMIT="$(cat COMMIT)" static
  - mv runc /runc
  - mv /src/scripts/* /

      # exclude modules and images from editions
---

---
image: registrypackages/crictl-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/crictl/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/crictl/patches/1.28.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.28.0 https://github.com/kubernetes-sigs/cri-tools.git /src/cri-tools
  - cd /src/cri-tools
  - git apply /patches/*.patch --verbose
  - rm -rf hack/tools .git vendor
---
image: registrypackages/crictl-1-28
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/crictl-artifact-1-28
  add: /
  to: /
  includePaths:
  - crictl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "crictl": "1.28" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/crictl-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/crictl-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- from: tmp_dir
  to: /src/cri-tools/build
- from: tmp_dir
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  setup:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/cri-tools
  - go mod vendor
  - export VERSION=1.28.0
  - make install crictl
  - mv /usr/local/bin/crictl /crictl
  - mv /src/scripts/* /
  - chmod +x /crictl /install /uninstall
  - rm -rf vendor
---
image: registrypackages/crictl-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/crictl/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/crictl/patches/1.29.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.29.0 https://github.com/kubernetes-sigs/cri-tools.git /src/cri-tools
  - cd /src/cri-tools
  - git apply /patches/*.patch --verbose
  - rm -rf hack/tools .git vendor
---
image: registrypackages/crictl-1-29
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/crictl-artifact-1-29
  add: /
  to: /
  includePaths:
  - crictl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "crictl": "1.29" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/crictl-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/crictl-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- from: tmp_dir
  to: /src/cri-tools/build
- from: tmp_dir
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  setup:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/cri-tools
  - go mod vendor
  - export VERSION=1.29.0
  - make install crictl
  - mv /usr/local/bin/crictl /crictl
  - mv /src/scripts/* /
  - chmod +x /crictl /install /uninstall
  - rm -rf vendor
---
image: registrypackages/crictl-src-artifact-1-30
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/crictl/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/crictl/patches/1.30.1
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.30.1 https://github.com/kubernetes-sigs/cri-tools.git /src/cri-tools
  - cd /src/cri-tools
  - git apply /patches/*.patch --verbose
  - rm -rf hack/tools .git vendor
---
image: registrypackages/crictl-1-30
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/crictl-artifact-1-30
  add: /
  to: /
  includePaths:
  - crictl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "crictl": "1.30" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/crictl-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/crictl-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- from: tmp_dir
  to: /src/cri-tools/build
- from: tmp_dir
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  setup:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/cri-tools
  - go mod vendor
  - export VERSION=1.30.1
  - make install crictl
  - mv /usr/local/bin/crictl /crictl
  - mv /src/scripts/* /
  - chmod +x /crictl /install /uninstall
  - rm -rf vendor
---
image: registrypackages/crictl-src-artifact-1-31
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/crictl/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/crictl/patches/1.31.1
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.31.1 https://github.com/kubernetes-sigs/cri-tools.git /src/cri-tools
  - cd /src/cri-tools
  - git apply /patches/*.patch --verbose
  - rm -rf hack/tools .git vendor
---
image: registrypackages/crictl-1-31
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/crictl-artifact-1-31
  add: /
  to: /
  includePaths:
  - crictl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "crictl": "1.31" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/crictl-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/crictl-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- from: tmp_dir
  to: /src/cri-tools/build
- from: tmp_dir
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  setup:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/cri-tools
  - go mod vendor
  - export VERSION=1.31.1
  - make install crictl
  - mv /usr/local/bin/crictl /crictl
  - mv /src/scripts/* /
  - chmod +x /crictl /install /uninstall
  - rm -rf vendor
---
image: registrypackages/crictl-src-artifact-1-32
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/crictl/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/crictl/patches/1.32.0
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.32.0 https://github.com/kubernetes-sigs/cri-tools.git /src/cri-tools
  - cd /src/cri-tools
  - git apply /patches/*.patch --verbose
  - rm -rf hack/tools .git vendor
---
image: registrypackages/crictl-1-32
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/crictl-artifact-1-32
  add: /
  to: /
  includePaths:
  - crictl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "crictl": "1.32" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/crictl-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/crictl-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- from: tmp_dir
  to: /src/cri-tools/build
- from: tmp_dir
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  setup:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src/cri-tools
  - go mod vendor
  - export VERSION=1.32.0
  - make install crictl
  - mv /usr/local/bin/crictl /crictl
  - mv /src/scripts/* /
  - chmod +x /crictl /install /uninstall
  - rm -rf vendor

      # exclude modules and images from editions
---

---
image: registrypackages/d8-ca-updater-20-02-25
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/d8-ca-updater-artifact-20-02-25
  add: /
  to: /
  includePaths:
  - certs/
  - d8-ca-updater
  - ca-bundle.crt
  - install
  - uninstall
  before: install
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "d8-ca-updater": "20.02.25" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/d8-ca-updater-artifact-20-02-25
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-bookworm@sha256:ca569d98545ab5a090449da29d637fb3f5a273d3a002554af328be9873777cef
git:
- add: /modules/007-registrypackages/images/d8-ca-updater/scripts
  to: /
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/d8-ca-updater/ca-certificates
  to: /ca-certificates
  stageDependencies:
    install:
    - '**/*'
shell:
  beforeInstall:
  
  # 5 years 157680000
  - |
      echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
      echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
      echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
  # Replace debian repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update
  - apt-get install -y python3-cryptography
  install:
  - mv /mk-ca-bundle.pl /ca-certificates/mozilla
  - cd /ca-certificates/mozilla
  - perl mk-ca-bundle.pl -n
  - mv ca-bundle.crt /ca-bundle.crt
  - python3 certdata2pem.py
  - mkdir /certs
  - mv *.crt /certs/
  - chmod +x /d8-ca-updater /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/d8-curl-src-artifact-8-9-1
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/d8-curl/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch curl-8_9_1 https://github.com/curl/curl.git /src/curl
  - rm -rf /src/curl/.git
---
image: registrypackages/d8-curl-8-9-1
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/d8-curl-artifact-8-9-1
  add: /
  to: /
  includePaths:
  - d8-curl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "curl": "8.9.1" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/d8-curl-artifact-8-9-1
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: registrypackages/d8-curl-src-artifact-8-9-1
  add: /src
  to: /src
  before: setup
git:
  - add: /modules/007-registrypackages/images/d8-curl/scripts
    to: /
    stageDependencies:
      setup:
      - '**/*'
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make autoconf automake clang libtool gettext-dev binutils g++ openssl openssl-dev libssh2-dev libgcrypt ssl_client libssh2-static libcrypto3 openssl-libs-static zlib-static libgcc clang-libs gettext-libs
  setup:
  - export CC=clang
  - cd /src/curl
  - autoreconf -fi
  - LDFLAGS="-static" PKG_CONFIG="pkg-config --static" ./configure --disable-shared --enable-static --disable-ldap --enable-ipv6 --enable-unix-sockets --with-ssl --with-libssh2
  - make -j4 V=1 LDFLAGS="-static -all-static"
  - strip src/curl
  - mv src/curl /d8-curl
  - mv /src/scripts/* /
  - chmod +x /d8-curl /install /uninstall

      # exclude modules and images from editions
---
---
image: registrypackages/d8-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/d8/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.11.3 https://github.com/deckhouse/deckhouse-cli.git /src/deckhouse-cli
#  - rm -rf /src/deckhouse-cli/.git # https://github.com/deckhouse/deckhouse-cli/blob/main/Taskfile.yml#L9
---
image: registrypackages/d8
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/d8-artifact
  add: /
  to: /
  includePaths:
  - d8
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "d8": "v0.11.3" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/d8-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-bullseye@sha256:fad5b33791a319ba1c910a03a33575ea34fc8e142695a64be9a1a228e74af11e
import:
- image: registrypackages/d8-src-artifact
  add: /src
  to: /src
  before: install
- image: common/task-artifact
  add: /task
  to: /usr/local/bin/task
  before: install
git:
  - add: /modules/007-registrypackages/images/d8/scripts
    to: /
    stageDependencies:
      setup:
      - '**/*'
shell:
  beforeInstall:
  
  # 5 years 157680000
  - |
      echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
      echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
      echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
  # Replace debian repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update
  - apt-get update && apt-get install libbtrfs-dev -y
  install:
  - export GOPROXY=https://proxy.golang.org/

  - export PRIVATE_REPO=https://github.com
  - GOPRIVATE="flant.internal"
  - git config --global url."ssh://git@${PRIVATE_REPO}/".insteadOf "https://flant.internal/"
  - git config --global --add safe.directory '*'
  - mkdir -p ~/.ssh
  - touch ~/.ssh/known_hosts
  - ssh-keyscan -H ${PRIVATE_REPO} >> ~/.ssh/known_hosts

  - cd /src/deckhouse-cli
  - task build:dist:linux:amd64
  - mv ./dist/v0.11.3/linux-amd64/bin/d8 /d8
  - mv /src/scripts/* /
  - chmod +x /d8 /install /uninstall
  - rm ~/.gitconfig # Prevent PRIVATE_REPO_TOKEN from leaking into the image layer

      # exclude modules and images from editions
---

---
image: registrypackages/docker-registry-src-artifact-2-8-3
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/docker-registry/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 1.13.0 https://github.com/cesanta/docker_auth.git /src/docker_auth
  - git clone --depth 1 --branch v2.8.3 https://github.com/distribution/distribution.git /src/distribution
  - rm -rf /src/docker_auth/.git
---
image: registrypackages/docker-registry-2-8-3
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/docker-registry-artifact-2-8-3
  add: /
  to: /
  includePaths:
  - registry
  - auth_server
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "docker": "2.8.3", "cesanta_auth": "1.13.0" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/docker-registry-artifact-2-8-3
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/docker-registry-src-artifact-2-8-3
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make git
  setup:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=auto
  - cd /src/docker_auth/auth_server
  - make build
  - mv ./auth_server /auth_server
  - mkdir -p /go/src/github.com/docker/
  - mv /src/distribution /go/src/github.com/docker/
  - cd /go/src/github.com/docker/distribution
  - make
  - mv bin/registry /
  - mv /src/scripts/* /
  - chmod +x /auth_server /registry /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/e2fsprogs-src-artifact-1-47-2
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/e2fsprogs/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone -b v1.47.2 --depth 1 https://github.com/ext2/e2fsprogs.git /src/e2fsprogs
  - rm -rf /src/e2fsprogs/.git
---
image: registrypackages/e2fsprogs-1-47-2
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/e2fsprogs-artifact-1-47-2
  add: /src/scripts
  to: /
  includePaths:
  - install
  - uninstall
  before: setup
- image: registrypackages/e2fsprogs-artifact-1-47-2
  add: /relocate/sbin
  to: /
  includePaths:
  - mke2fs
  - fsck
  - resize2fs
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "mke2fs": "1.47.2", "fsck": "1.47.2", "resize2fs": "1.47.2" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/e2fsprogs-artifact-1-47-2
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: registrypackages/e2fsprogs-src-artifact-1-47-2
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make gettext-dev autoconf automake libtool flex bison clang binutils g++ linux-headers
  setup:
  - mkdir /relocate
  - cd /src/e2fsprogs
  - CFLAGS='-static' LDFLAGS="-static" ./configure
  - make
  - make DESTDIR=/relocate install
  - make clean

      # exclude modules and images from editions
---

---
image: registrypackages/ec2-describe-tags-src-artifact-v0-0-1-flant-3
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/ec2-describe-tags/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone -b v0.0.1-flant.3 --depth 1 https://github.com/flant/go-ec2-describe-tags.git /src/go-ec2-describe-tags
  - rm -rf /src/go-ec2-describe-tags/.git
---
image: registrypackages/ec2-describe-tags-v0-0-1-flant-3
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/ec2-describe-tags-artifact-v0-0-1-flant-3
  add: /
  to: /
  includePaths:
  - ec2_describe_tags
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "ec2-describe-tags": "v0.0.1-flant.3" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/ec2-describe-tags-artifact-v0-0-1-flant-3
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/ec2-describe-tags-src-artifact-v0-0-1-flant-3
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  setup:
    - cd /src/go-ec2-describe-tags
    - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /ec2_describe_tags
    - mv /src/scripts/* /

      # exclude modules and images from editions
---

---
image: registrypackages/ecr-credential-provider-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/ecr-credential-provider/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/ecr-credential-provider/patches/1.28
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth=1 --branch v1.28.11 https://github.com/kubernetes/cloud-provider-aws.git
  - cd cloud-provider-aws
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: registrypackages/ecr-credential-provider-1-28
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/ecr-credential-provider-artifact-1-28
  add: /
  to: /
  includePaths:
  - ecr-credential-provider
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "ecr-credential-provider": "1.28" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/ecr-credential-provider-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/ecr-credential-provider-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
    - export GOPROXY=https://proxy.golang.org/
    - export CGO_ENABLED=0
    - export GOOS=linux
    - export GOARCH=amd64
    - cd /src/cloud-provider-aws
    - export VERSION=v1.28.11
    - make ecr-credential-provider
    - mv /src/scripts/* /
    - chown 64535:64535 ecr-credential-provider /install /uninstall
    - chmod 0755 ecr-credential-provider /install /uninstall
    - mv ecr-credential-provider /ecr-credential-provider
---
image: registrypackages/ecr-credential-provider-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/ecr-credential-provider/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/ecr-credential-provider/patches/1.29
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth=1 --branch v1.29.8 https://github.com/kubernetes/cloud-provider-aws.git
  - cd cloud-provider-aws
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: registrypackages/ecr-credential-provider-1-29
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/ecr-credential-provider-artifact-1-29
  add: /
  to: /
  includePaths:
  - ecr-credential-provider
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "ecr-credential-provider": "1.29" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/ecr-credential-provider-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/ecr-credential-provider-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
    - export GOPROXY=https://proxy.golang.org/
    - export CGO_ENABLED=0
    - export GOOS=linux
    - export GOARCH=amd64
    - cd /src/cloud-provider-aws
    - export VERSION=v1.29.8
    - make ecr-credential-provider
    - mv /src/scripts/* /
    - chown 64535:64535 ecr-credential-provider /install /uninstall
    - chmod 0755 ecr-credential-provider /install /uninstall
    - mv ecr-credential-provider /ecr-credential-provider
---
image: registrypackages/ecr-credential-provider-src-artifact-1-30
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/ecr-credential-provider/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/ecr-credential-provider/patches/1.30
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth=1 --branch v1.30.7 https://github.com/kubernetes/cloud-provider-aws.git
  - cd cloud-provider-aws
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: registrypackages/ecr-credential-provider-1-30
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/ecr-credential-provider-artifact-1-30
  add: /
  to: /
  includePaths:
  - ecr-credential-provider
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "ecr-credential-provider": "1.30" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/ecr-credential-provider-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/ecr-credential-provider-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
    - export GOPROXY=https://proxy.golang.org/
    - export CGO_ENABLED=0
    - export GOOS=linux
    - export GOARCH=amd64
    - cd /src/cloud-provider-aws
    - export VERSION=v1.30.7
    - make ecr-credential-provider
    - mv /src/scripts/* /
    - chown 64535:64535 ecr-credential-provider /install /uninstall
    - chmod 0755 ecr-credential-provider /install /uninstall
    - mv ecr-credential-provider /ecr-credential-provider
---
image: registrypackages/ecr-credential-provider-src-artifact-1-31
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/ecr-credential-provider/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/ecr-credential-provider/patches/1.31
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth=1 --branch v1.31.0 https://github.com/kubernetes/cloud-provider-aws.git
  - cd cloud-provider-aws
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: registrypackages/ecr-credential-provider-1-31
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/ecr-credential-provider-artifact-1-31
  add: /
  to: /
  includePaths:
  - ecr-credential-provider
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "ecr-credential-provider": "1.31" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/ecr-credential-provider-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/ecr-credential-provider-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
    - export GOPROXY=https://proxy.golang.org/
    - export CGO_ENABLED=0
    - export GOOS=linux
    - export GOARCH=amd64
    - cd /src/cloud-provider-aws
    - export VERSION=v1.31.0
    - make ecr-credential-provider
    - mv /src/scripts/* /
    - chown 64535:64535 ecr-credential-provider /install /uninstall
    - chmod 0755 ecr-credential-provider /install /uninstall
    - mv ecr-credential-provider /ecr-credential-provider
---
image: registrypackages/ecr-credential-provider-src-artifact-1-32
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/ecr-credential-provider/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
- add: /modules/007-registrypackages/images/ecr-credential-provider/patches/1.32
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth=1 --branch v1.32.0 https://github.com/kubernetes/cloud-provider-aws.git
  - cd cloud-provider-aws
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: registrypackages/ecr-credential-provider-1-32
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/ecr-credential-provider-artifact-1-32
  add: /
  to: /
  includePaths:
  - ecr-credential-provider
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "ecr-credential-provider": "1.32" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/ecr-credential-provider-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/ecr-credential-provider-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
    - export GOPROXY=https://proxy.golang.org/
    - export CGO_ENABLED=0
    - export GOOS=linux
    - export GOARCH=amd64
    - cd /src/cloud-provider-aws
    - export VERSION=v1.32.0
    - make ecr-credential-provider
    - mv /src/scripts/* /
    - chown 64535:64535 ecr-credential-provider /install /uninstall
    - chmod 0755 ecr-credential-provider /install /uninstall
    - mv ecr-credential-provider /ecr-credential-provider

      # exclude modules and images from editions
---

---
image: registrypackages/growpart-src-artifact-0-33
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/growpart/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone -b v2.40.1 --depth 1 https://github.com/util-linux/util-linux.git  /src/util-linux
  - rm -rf /src/util-linux/.git
  - git clone -b 0.33 --depth 1 https://github.com/canonical/cloud-utils.git /src/cloud-utils
  - rm -rf /src/cloud-utils/.git
---
image: registrypackages/growpart-0-33
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/growpart-artifact-0-33
  add: /
  to: /
  includePaths:
  - growpart
  - install
  - uninstall
  before: setup
- image: registrypackages/growpart-artifact-fdisk-0-33
  add: /
  to: /
  includePaths:
  - fdisk
  - sfdisk
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "growpart": "0.33" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/growpart-artifact-fdisk-0-33
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/growpart-src-artifact-0-33
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make gettext-dev autoconf automake libtool flex bison clang binutils g++ linux-headers
  setup:
  - cd /src/util-linux
  - export LDFLAGS="-Wl,-z,now -Wl,-z,relro -static -s"
  - export CFLAGS="-fPIC -pie -fstack-protector-all -O2 -D_FORTIFY_SOURCE=2 -static -s"
  - ./autogen.sh && ./configure --enable-static --enable-static-programs=fdisk,sfdisk --disable-pylibmount --without-python --disable-liblastlog2
  - make fdisk.static sfdisk.static && strip ./fdisk.static && strip ./sfdisk.static
  - mv ./fdisk.static /fdisk && mv ./sfdisk.static /sfdisk
  - chmod +x /fdisk /sfdisk
---
image: registrypackages/growpart-artifact-0-33
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: registrypackages/growpart-src-artifact-0-33
  add: /src
  to: /src
  before: install
shell:
  setup:
  - mv /src/cloud-utils/bin/growpart /growpart
  - mv /src/scripts/* /
  - chmod +x /growpart /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/iptables-src-artifact-1-8-9
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/iptables/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone -b libmnl-1.0.5 --depth 1 https://github.com/netfilter/libmnl /src/libmnl
  - rm -rf /src/libmnl/.git
  - git clone -b libnftnl-1.2.6 --depth 1  https://github.com/netfilter/libnftnl /src/libnftnl
  - rm -rf /src/libnftnl/.git
  - git clone -b v1.8.9 --depth 1  https://github.com/netfilter/iptables /src/iptables
  - rm -rf /src/iptables/.git
---
image: registrypackages/iptables-1-8-9
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "iptables": "1.8.9" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/iptables-artifact-1-8-9
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: registrypackages/iptables-src-artifact-1-8-9
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make gettext-dev autoconf automake libtool clang g++ linux-headers bash pkgconf bzip2-dev libnl3 libc-dev libnl3-dev coreutils libuv utmps-libs glib-dev libmnl-static nghttp2-libs musl libbz2 gdbm pcre gcc perl-error zlib-dev libstdc++ ncurses-libs zlib file-dev linux-headers mpdecimal
  setup:
  - export PKG_CONFIG_PATH=/opt/deckhouse/bin/.libs/pkgconfig
  - cd /src/libmnl
  - ./autogen.sh
  - ./configure --enable-static --libdir=/opt/deckhouse/bin/.libs
  - make && make install
  - cd /src/libnftnl
  - ./autogen.sh
  - ./configure --enable-static --libdir=/opt/deckhouse/bin/.libs
  - make && make install
  - cd /src/iptables
  - ./autogen.sh
  - ./configure --enable-static --disable-shared --libdir=/opt/deckhouse/bin/.libs
  - make LDFLAGS='-all-static'
  - strip ./iptables/xtables-legacy-multi && strip ./iptables/xtables-nft-multi
  - mv ./iptables/xtables-legacy-multi /xtables-legacy-multi && mv ./iptables/xtables-nft-multi /xtables-nft-multi
  - mv /src/scripts/* /
  - chmod +x /xtables-legacy-multi /xtables-nft-multi /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/jq-1-7-1
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/jq-artifact-1-7-1
  add: /
  to: /
  includePaths:
  - install
  - uninstall
  - jq
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "jq": "1.7.1" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/jq-artifact-1-7-1
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
git:
- add: /modules/007-registrypackages/images/jq/scripts
  to: /
  includePaths:
  - install
  - uninstall
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/jq-artifact
  add: /usr/bin/jq
  to: /jq
  before: setup
shell:
  setup:
  - chmod +x /jq /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/kubeadm-1-28-15
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubeadm-artifact-1-28-15
  add: /
  to: /
  includePaths:
  - kubeadm
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubeadm": "1.28.15" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubeadm-artifact-1-28-15
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubeadm/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin/kubeadm
  to: /kubeadm
  before: setup
---
image: registrypackages/kubeadm-1-29-15
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubeadm-artifact-1-29-15
  add: /
  to: /
  includePaths:
  - kubeadm
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubeadm": "1.29.15" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubeadm-artifact-1-29-15
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubeadm/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kubeadm
  to: /kubeadm
  before: setup
---
image: registrypackages/kubeadm-1-30-12
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubeadm-artifact-1-30-12
  add: /
  to: /
  includePaths:
  - kubeadm
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubeadm": "1.30.12" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubeadm-artifact-1-30-12
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubeadm/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-30-12
  add: /src/_output/bin/kubeadm
  to: /kubeadm
  before: setup
---
image: registrypackages/kubeadm-1-31-8
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubeadm-artifact-1-31-8
  add: /
  to: /
  includePaths:
  - kubeadm
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubeadm": "1.31.8" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubeadm-artifact-1-31-8
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubeadm/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kubeadm
  to: /kubeadm
  before: setup
---
image: registrypackages/kubeadm-1-32-4
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubeadm-artifact-1-32-4
  add: /
  to: /
  includePaths:
  - kubeadm
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubeadm": "1.32.4" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubeadm-artifact-1-32-4
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubeadm/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-32-4
  add: /src/_output/bin/kubeadm
  to: /kubeadm
  before: setup

      # exclude modules and images from editions
---

---
image: registrypackages/kubectl-1-28-15
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubectl-artifact-1-28-15
  add: /
  to: /
  includePaths:
  - kubectl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubectl": "1.28.15" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubectl-artifact-1-28-15
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubectl/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin/kubectl
  to: /kubectl
  before: setup
---
image: registrypackages/kubectl-1-29-15
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubectl-artifact-1-29-15
  add: /
  to: /
  includePaths:
  - kubectl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubectl": "1.29.15" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubectl-artifact-1-29-15
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubectl/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kubectl
  to: /kubectl
  before: setup
---
image: registrypackages/kubectl-1-30-12
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubectl-artifact-1-30-12
  add: /
  to: /
  includePaths:
  - kubectl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubectl": "1.30.12" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubectl-artifact-1-30-12
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubectl/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-30-12
  add: /src/_output/bin/kubectl
  to: /kubectl
  before: setup
---
image: registrypackages/kubectl-1-31-8
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubectl-artifact-1-31-8
  add: /
  to: /
  includePaths:
  - kubectl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubectl": "1.31.8" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubectl-artifact-1-31-8
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubectl/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kubectl
  to: /kubectl
  before: setup
---
image: registrypackages/kubectl-1-32-4
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubectl-artifact-1-32-4
  add: /
  to: /
  includePaths:
  - kubectl
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: { "distro": "all", "version": "all", "kubectl": "1.32.4" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubectl-artifact-1-32-4
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubectl/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-32-4
  add: /src/_output/bin/kubectl
  to: /kubectl
  before: setup

      # exclude modules and images from editions
---

---
image: registrypackages/kubelet-1-28-15
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubelet-artifact-1-28-15
  add: /
  to: /
  includePaths:
  - kubelet
  - kubelet.service
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "kubelet": "1.28.15" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubelet-artifact-1-28-15
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubelet/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin/kubelet
  to: /kubelet
  before: setup
---
image: registrypackages/kubelet-1-29-15
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubelet-artifact-1-29-15
  add: /
  to: /
  includePaths:
  - kubelet
  - kubelet.service
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "kubelet": "1.29.15" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubelet-artifact-1-29-15
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubelet/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kubelet
  to: /kubelet
  before: setup
---
image: registrypackages/kubelet-1-30-12
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubelet-artifact-1-30-12
  add: /
  to: /
  includePaths:
  - kubelet
  - kubelet.service
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "kubelet": "1.30.12" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubelet-artifact-1-30-12
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubelet/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-30-12
  add: /src/_output/bin/kubelet
  to: /kubelet
  before: setup
---
image: registrypackages/kubelet-1-31-8
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubelet-artifact-1-31-8
  add: /
  to: /
  includePaths:
  - kubelet
  - kubelet.service
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "kubelet": "1.31.8" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubelet-artifact-1-31-8
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubelet/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kubelet
  to: /kubelet
  before: setup
---
image: registrypackages/kubelet-1-32-4
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubelet-artifact-1-32-4
  add: /
  to: /
  includePaths:
  - kubelet
  - kubelet.service
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "kubelet": "1.32.4" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubelet-artifact-1-32-4
final: false
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
git:
- add: /modules/007-registrypackages/images/kubelet/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/kubernetes-artifact-1-32-4
  add: /src/_output/bin/kubelet
  to: /kubelet
  before: setup

      # exclude modules and images from editions
---

---
image: registrypackages/kubernetes-api-proxy
fromImage: builder/scratch
import:
- image: registrypackages/kubernetes-api-proxy-artifact
  add: /
  to: /
  includePaths:
  - kubernetes-api-proxy.tar
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "kubernetes-api-proxy": "08.04.25" }
---
image: registrypackages/kubernetes-api-proxy-artifact
fromImage: builder/golang-alpine
final: false
git:
- add: /modules/007-registrypackages/images/kubernetes-api-proxy/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/crane
  add: /crane
  to: /crane
  before: setup
dependencies:
- image: control-plane-manager/kubernetes-api-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: IMAGE_DIGEST
  - type: ImageRepo
    targetEnv: IMAGE_REPO
mount:
- fromPath: ~/.docker
  to: /root/.docker
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  setup:
  - /crane pull $IMAGE_REPO@$IMAGE_DIGEST /kubernetes-api-proxy.tar

      # exclude modules and images from editions
---
# The cni-flannel version corresponds to the flanneld version.
# https://github.com/deckhouse/deckhouse/blob/main/modules/035-cni-flannel/images/flanneld/werf.inc.yaml
# https://github.com/flannel-io/flannel/blob/v0.26.2/chart/kube-flannel/values.yaml#L18
---
image: registrypackages/kubernetes-cni-src-artifact-1-6-2
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/kubernetes-cni/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
- add: //modules/007-registrypackages/images/kubernetes-cni/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.6.2 https://github.com/containernetworking/plugins.git /src/plugins
  - cd /src/plugins
  - git apply /patches/plugins/*.patch --verbose
  - rm -rf .git
  - git clone --depth 1 --branch v1.6.0-flannel1 https://github.com/flannel-io/cni-plugin.git /src/cni-plugin
  - cd /src/cni-plugin
  - git apply /patches/cni-plugins/*.patch --verbose
  - rm -rf .git
---
image: registrypackages/kubernetes-cni-1-6-2
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/kubernetes-cni-artifact-1-6-2
  add: /
  to: /
  includePaths:
  - bandwidth
  - bridge
  - dhcp
  - dummy
  - firewall
  - host-device
  - host-local
  - ipvlan
  - loopback
  - macvlan
  - portmap
  - ptp
  - sbr
  - static
  - tap
  - tuning
  - vlan
  - vrf
  - flannel
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "kubernetes-cni": "1.6.2", "flannel": "1.6.0-flannel1" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/kubernetes-cni-artifact-1-6-2
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: registrypackages/kubernetes-cni-src-artifact-1-6-2
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  setup:
    - export GOPROXY=https://proxy.golang.org/
    - cd /src/plugins
    - go mod vendor
    - CGO_ENABLED=0 ./build_linux.sh -ldflags '-extldflags -static -X github.com/containernetworking/plugins/pkg/utils/buildversion.BuildVersion=1.6.2'
    - cp -f bin/* /
    - cd /src/cni-plugin
    - export VERSION=v1.6.0-flannel1
    - make build_linux
    - mv /src/scripts/* /
    - cp -f /src/cni-plugin/dist/flannel-amd64 /flannel

      # exclude modules and images from editions
---

---
image: registrypackages/lsblk-2-40-2
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/lsblk-artifact-2-40-2
  add: /
  to: /
  includePaths:
  - lsblk
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "lsblk": "2.40.2" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/lsblk-src-artifact-2-40-2
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/lsblk/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone -b v2.40.2 --depth 1 https://github.com/util-linux/util-linux.git  /src/util-linux
  - rm -rf /src/util-linux/.git
---
image: registrypackages/lsblk-artifact-2-40-2
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: registrypackages/lsblk-src-artifact-2-40-2
  add: /src
  to: /src
  before: setup
shell:
  install:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make automake gettext-dev autoconf libtool flex bison clang binutils g++ linux-headers
  setup:
  - cd /src/util-linux
  - export LDFLAGS="-Wl,-z,now -Wl,-z,relro -static -s"
  - export CFLAGS="-fPIC -pie -fstack-protector-all -O2 -D_FORTIFY_SOURCE=2 -static -s"
  - ./autogen.sh
  - ./configure --enable-static --enable-static-programs=lsblk --disable-pylibmount --without-python --disable-liblastlog2
  - make LDFLAGS="--static" lsblk && strip ./lsblk
  - ldd ./lsblk || true
  - mv ./lsblk /lsblk
  - mv /src/scripts/* /
  - chmod +x /lsblk /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/netcat-src-artifact-1-10-48-1
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/netcat/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch applied/1.10-48.1 https://github.com/netcat /src/netcat
  - rm -rf /src/netcat/.git
---
image: registrypackages/netcat-1-10-48-1
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/netcat-artifact-1-10-48-1
  add: /
  to: /
  includePaths:
  - nc
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "nc": "1.10-48.1" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/netcat-artifact-1-10-48-1
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: registrypackages/netcat-src-artifact-1-10-48-1
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make g++
  setup:
    - cd /src/netcat
    - make linux LDFLAGS='-static' DFLAGS='-DDEBIAN_VERSION=\"Flant\"'
    - strip ./nc
    - mv ./nc /nc
    - mv /src/scripts/* /
    - chmod +x /nc /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/nvme-cli-2-11
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/nvme-cli-artifact-2-11
  add: /relocate
  to: /
  includePaths:
  - nvme
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "nvme-cli": "2.11" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/nvme-cli-src-artifact-2-11
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/nvme-cli/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  - git clone -b v2.11 --depth 1 https://github.com/linux-nvme/nvme-cli.git /src/nvme-cli
  - git clone -b v1.11.1 --depth 1 https://github.com/linux-nvme/libnvme.git /src/nvme-cli/subprojects/libnvme
  - rm -rf /src/nvme-cli/.git /src/nvme-cli/subprojects/libnvme/.git
---
image: registrypackages/nvme-cli-artifact-2-11
final: false
from: registry.deckhouse.io/base_images/alt:p11@sha256:b630220d83798057e1c67fe6f712a49e9c3abb377f0bd7183bba0ba541fc4081
import:
- image: registrypackages/nvme-cli-src-artifact-2-11
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y build-essential meson glibc-devel-static
  - find /var/lib/apt/lists/ /var/cache/apt/ -type f -delete
  install:
  - cd /src/nvme-cli
  - |
    meson .build --buildtype=release --default-library=static -Dc_link_args="-static" --wrap-mode=forcefallback \
      -Dlibnvme:tests=false -Dlibnvme:keyutils=disabled -Djson-c=disabled -Dlibnvme:json-c=disabled \
      -Dlibnvme:openssl=disabled -Dlibnvme:python=disabled -Ddocs=false
  - ninja -C .build
  - mkdir /relocate
  - cp .build/nvme /relocate
  - cp /src/scripts/* /relocate

      # exclude modules and images from editions
---

---
image: registrypackages/pause
fromImage: builder/scratch
import:
- image: registrypackages/pause-artifact
  add: /
  to: /
  includePaths:
  - pause.tar
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "pause": "08.04.25" }
---
image: registrypackages/pause-artifact
fromImage: builder/golang-alpine
final: false
git:
- add: /modules/007-registrypackages/images/pause/scripts
  to: /
  stageDependencies:
    setup:
    - '**/*'
import:
- image: common/crane
  add: /crane
  to: /crane
  before: setup
dependencies:
- image: common/pause
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: PAUSE_IMAGE_DIGEST
  - type: ImageRepo
    targetEnv: PAUSE_IMAGE_REPO
mount:
- fromPath: ~/.docker
  to: /root/.docker
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  setup:
  - /crane pull $PAUSE_IMAGE_REPO@$PAUSE_IMAGE_DIGEST /pause.tar

      # exclude modules and images from editions
---

---
image: registrypackages/socat-src-artifact-1-7-3-4
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/socat/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch tag-1.7.3.4  https://github.com/socat.git /src/socat
  - rm -rf /src/socat/.git
---
image: registrypackages/socat-1-7-3-4
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/socat-artifact-1-7-3-4
  add: /
  to: /
  includePaths:
  - socat
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "socat": "1.7.3.4" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/socat-artifact-1-7-3-4
final: false
fromImage: common/alt-p11-artifact
import:
- image: registrypackages/socat-src-artifact-1-7-3-4
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get update && apt-get install yodl make autoconf automake glibc-devel-static build-essential -y
  setup:
    - cd /src/socat
    - autoconf
    - CC='/usr/bin/gcc -static' CFLAGS="-fPIC" CPPFLAGS="-I/build -DNETDB_INTERNAL=-1" ./configure
    - make
    - strip ./socat
    - mv ./socat /socat
    - mv /src/scripts/* /
    - chmod +x /socat  /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/toml-merge-src-artifact-0-1
final: false
fromImage: common/src-artifact
git:
- add: /modules/007-registrypackages/images/toml-merge/scripts
  to: /src/scripts
  stageDependencies:
    setup:
    - '**/*'
- add: /modules/007-registrypackages/images/toml-merge/src
  to: /src/toml
  stageDependencies:
    setup:
    - '**/*'
---
image: registrypackages/toml-merge-0-1
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/toml-merge-artifact-0-1
  add: /
  to: /
  includePaths:
  - toml-merge
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "toml-merge": "0.1" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/toml-merge-artifact-0-1
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registrypackages/toml-merge-src-artifact-0-1
  add: /src
  to: /src
  before: install
shell:
  setup:
  - cd /src/toml && GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o /toml-merge toml-merge.go
  - mv /src/scripts/* /

      # exclude modules and images from editions
---

---
image: registrypackages/virt-what-src-artifact-1-25
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/virt-what/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.25  https://github.com/virt-what.git /src/virt-what
  - rm -rf /src/virt-what/.git
---
image: registrypackages/virt-what-1-25
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/virt-what-artifact-1-25
  add: /
  to: /
  includePaths:
  - virt-what
  - virt-what-cpuid-helper
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "virt-what": "1.25" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/virt-what-artifact-1-25
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: registrypackages/virt-what-src-artifact-1-25
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make autoconf pkgconf automake build-base
  setup:
  - cd /src/virt-what
  - autoreconf -fi
  - autoconf
  - LDFLAGS="-static" ./configure
  - make
  - strip ./virt-what-cpuid-helper
  - mv ./virt-what /virt-what && mv ./virt-what-cpuid-helper /virt-what-cpuid-helper
  - mv /src/scripts/* /
  - chmod +x /virt-what-cpuid-helper /virt-what  /install /uninstall

      # exclude modules and images from editions
---

---
image: registrypackages/xfsprogs-src-artifact-6-7-0
final: false
fromImage: common/src-artifact
git:
- add: //modules/007-registrypackages/images/xfsprogs/scripts
  to: /src/scripts
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v6.7.0 https://github.com/xfs/xfsprogs-dev.git /src/xfsprogs-dev
  - rm -rf /src/xfsprogs-dev/.git
---
image: registrypackages/xfsprogs-6-7-0
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: registrypackages/xfsprogs-artifact-6-7-0
  add: /
  to: /
  includePaths:
  - mkfs.xfs
  - xfs_*
  - install
  - uninstall
  before: setup
imageSpec:
  config:
    labels: {"distro": "all", "version": "all", "xfsprogs": "6.7.0" }
    clearUser: true
    clearWorkingDir: true
    clearCmd: true
    clearEntrypoint: true
    removeEnv: ["/.*/"]
---
image: registrypackages/xfsprogs-artifact-6-7-0
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-bookworm@sha256:ca569d98545ab5a090449da29d637fb3f5a273d3a002554af328be9873777cef
import:
- image: registrypackages/xfsprogs-src-artifact-6-7-0
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # 5 years 157680000
  - |
      echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
      echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
      echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
  # Replace debian repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update
  - apt-get update && apt-get install -y make libinih-dev libblkid-dev gettext liburcu-dev libtool libicu-dev pkg-config
  setup:
  - cd /src/xfsprogs-dev
  - libtoolize -c -i -f
  - cp -f include/install-sh .
  - aclocal -I m4 &&	autoconf
  - LDFLAGS="-static" ./configure --enable-shared=no  --disable-scrub
  - make LLDFLAGS=-all-static
  - strip mkfs/mkfs.xfs &&
    strip repair/xfs_repair &&
    strip quota/xfs_quota &&
    strip growfs/xfs_growfs &&
    strip mdrestore/xfs_mdrestore &&
    strip spaceman/xfs_spaceman
  - mv mkfs/mkfs.xfs /mkfs.xfs &&
    mv repair/xfs_repair /xfs_repair &&
    mv quota/xfs_quota /xfs_quota &&
    mv growfs/xfs_growfs /xfs_growfs &&
    mv mdrestore/xfs_mdrestore /xfs_mdrestore &&
    mv spaceman/xfs_spaceman /xfs_spaceman &&
    mv spaceman/xfs_info.sh /xfs_info &&
    mv /src/scripts/* /
  - chmod +x /mkfs.xfs /xfs_repair /xfs_quota /xfs_growfs /xfs_mdrestore /xfs_spaceman /xfs_info /install /uninstall

      # exclude modules and images from editions
---
---
image: admission-policy-engine/constraint-exporter
fromImage: common/distroless
import:
  - image: admission-policy-engine/constraint-exporter-artifact
    add: /constraint_exporter
    to: /constraint_exporter
    before: setup
imageSpec:
  config:
    entrypoint: [ "/constraint_exporter" ]
---
image: admission-policy-engine/constraint-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/015-admission-policy-engine/images/constraint-exporter/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: admission-policy-engine/constraint-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: admission-policy-engine/constraint-exporter-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /constraint_exporter .
  - chown 64535:64535 /constraint_exporter
  - chmod 0700 /constraint_exporter

      # exclude modules and images from editions
---
---
image: admission-policy-engine/gatekeeper
fromImage: common/distroless
import:
  - image: admission-policy-engine/gatekeeper-artifact
    add: /gatekeeper
    to: /bin/gatekeeper
    before: setup
imageSpec:
  config:
    entrypoint: [ "/bin/gatekeeper" ]
---
image: admission-policy-engine/gatekeeper-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/015-admission-policy-engine/images/gatekeeper/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v3.18.1 https://github.com/open-policy-agent/gatekeeper.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf website
  - rm -rf .git
---
image: admission-policy-engine/gatekeeper-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: admission-policy-engine/gatekeeper-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod vendor
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -mod vendor -ldflags="-s -w" -o /gatekeeper .
  - chown 64535:64535 /gatekeeper
  - chmod 0700 /gatekeeper

      # exclude modules and images from editions
---

---
# #####################################################################
# Final image of cilium-agent (used in helm-templates)
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/Dockerfile
# and https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/install-runtime-deps.sh
# and https://github.com/cilium/cilium/blob/v1.14.14/images/cilium/Dockerfile (release stage)
---
# #####################################################################
# List of binary files used by agent
# from base install script
## ln -snf /usr/share/zoneinfo/Etc/UTC /etc/localtime

# shell-scripts dependencies


# kmod and dependencies

# iproute2 and dependencies



# ipset and dependencies

# clang dependencies

# bash-completion


# groups

# for prepull

# for cilium-cli sysdump

# for debug

#####################################################################

# from llvm-artifact

# from bpftool-artifact

# from cilium-envoy-artifact

# from cni-plugins-artifact

# from gops-artifact

# from hubble-artifact

# from cilium-artifact



# from common/pause

# from /jq

# for check and cleaning unnecessary iptables

# iptables and dependencies


# #####################################################################
# Binaries artifact for distroless agent (based on Ubuntu)
---
image: cni-cilium/agent-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/021-cni-cilium/images/agent
  to: /src
  includePaths:
  - binary_replace.sh
  - check-n-cleaning-iptables.sh
  stageDependencies:
    install:
    - '**/*.sh'
shell:
  install:
  - cd /src
---
image: cni-cilium/agent-binaries-artifact
fromImage: cni-cilium/base-cilium-dev
final: false
import:
- image: cni-cilium/agent-src-artifact
  add: /src/check-n-cleaning-iptables.sh
  to: /check-n-cleaning-iptables.sh
  before: install
- image: cni-cilium/agent-src-artifact
  add: /src/binary_replace.sh
  to: /binary_replace.sh
  before: install
- image: cni-cilium/llvm-artifact
  add: /usr/local/bin/
  to: /usr/local/bin
  before: install
  includePaths:
  - clang
  - llc
- image: cni-cilium/bpftool-artifact
  add: /usr/local/bin/bpftool
  to: /usr/local/bin/bpftool
  before: install
- image: cni-cilium/cni-plugins-artifact
  add: /out/linux/amd64/bin/loopback
  to: /cni/loopback
  before: install
- image: cni-cilium/gops-artifact
  add: /out/linux/amd64/bin/gops
  to: /bin/gops
  before: install
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: install
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /usr/sbin/iptables-wrapper
  before: install
- image: cni-cilium/cilium-artifact
  add: /tmp/install
  to: /
  before: install
  includePaths:
  - cni-uninstall.sh
  - init-container.sh
  - install-plugin.sh
  - LICENSE.all
  - etc/bash_completion.d/cilium
  - opt/cni/bin/cilium-cni
  - usr/bin/cilium*
  - var/lib/cilium/bpf
- image: cni-cilium/cilium-envoy-artifact
  add: /tmp/install/usr
  to: /usr
  before: install
  includePaths:
  - bin/cilium-envoy
  - bin/cilium-envoy-starter
  - lib/libcilium.so
- image: cni-cilium/hubble-artifact
  add: /hubble
  to: /usr/bin/hubble
  before: install
- image: cni-cilium/hubble-artifact
  add: /bash_completion
  to: /etc/bash_completion.d/hubble
  before: install
- image: common/pause
  add: /pause
  to: /pause
  before: install
- image: common/jq-artifact
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: install
- image: common/distroless
  add: /etc/group
  to: /from_common_distroless/group
  before: setup
shell:
  install:
  - chown root:root /usr/sbin/iptables-wrapper
  - chmod 755 /usr/sbin/iptables-wrapper
  #
  - chmod +x /check-n-cleaning-iptables.sh
  beforeSetup:
  # common relocate
  - chmod +x /binary_replace.sh
  - mkdir -p /relocate
  # copy base binaries and deps from ALT
  - ln -snf /usr/share/zoneinfo/Etc/UTC /etc/localtime
  - /binary_replace.sh -i "/etc/localtime /bin/bash /bin/sh /bin/echo /usr/bin/printf /bin/sed /bin/awk /usr/bin/nsenter /bin/mount /bin/mkdir /bin/basename /bin/cat /bin/head /bin/cut /usr/bin/od /bin/grep /bin/cp /bin/mv /bin/rm /bin/ln /bin/wc /bin/find /bin/kmod /bin/lsmod /sbin/depmod /sbin/insmod /sbin/lsmod /sbin/modinfo /sbin/modprobe /sbin/rmmod /sbin/dcb /sbin/devlink /sbin/ip /sbin/rdma /sbin/rtmon /sbin/tc /sbin/vdpa /usr/sbin/bridge /usr/sbin/genl /usr/sbin/lnstat /usr/sbin/nstat /usr/sbin/rtacct /usr/sbin/ss /usr/sbin/tipc /usr/sbin/ctstat /usr/sbin/rtstat /sbin/ipset /usr/lib64/libstdc++.so.6 /etc/bashrc.d/bash_completion.sh /usr/share/bash-completion/bash_completion /usr/bin/groups /bin/true /bin/tar /usr/bin/timeout /usr/bin/stat /bin/tail /bin/sleep /bin/ls /usr/bin/curl /usr/bin/ldd /usr/bin/strace /usr/bin/env" -o /relocate
  # copy self built binaries and deps
  - /binary_replace.sh -i " /usr/local/bin/clang /usr/local/bin/llc /usr/local/bin/bpftool /usr/bin/cilium-envoy /usr/lib/libcilium.so /cni/loopback /bin/gops /usr/bin/hubble /etc/bash_completion.d/hubble /cni-uninstall.sh /init-container.sh /install-plugin.sh /LICENSE.all /etc/bash_completion.d/cilium /opt/cni/bin/cilium-cni /usr/bin/cilium* /pause /usr/bin/jq /check-n-cleaning-iptables.sh /sbin/xtables* /usr/sbin/iptables-wrapper" -o /relocate
  # additional relocate for iptables
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
      rm -f "/relocate/sbin/${cmd}"
      ln -f -s /usr/sbin/iptables-wrapper "/relocate/sbin/${cmd}"
    done
    # broken symlinks are not imported from the artifact
    touch /usr/sbin/iptables-wrapper
  - |
    for mode in legacy nft; do
      for basecmd in iptables ip6tables; do
        for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
          ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
        done
      done
    done
  - |
    for basecmd in ebtables arptables; do
      for cmd in ${basecmd}-nft ${basecmd}-nft-save ${basecmd}-nft-restore; do
        ln -sf /sbin/xtables-nft-multi "/relocate/sbin/${cmd}"
      done
    done
  # additional relocate from cilium
  - mkdir -p /relocate/var/lib/cilium
  - cp -a /var/lib/cilium/bpf /relocate/var/lib/cilium
  - echo ". /etc/bashrc.d/bash_completion.sh" >> /root/.bashrc
  - mkdir -p /relocate/root && cp -a /root/.bashrc /relocate/root
  # additional relocate for fix locale
  - mkdir -p /relocate/usr/lib/locale
  - cp -a /usr/lib/locale/C.utf8 /relocate/usr/lib/locale
  setup:
  # prepare final fs
  - mkdir -p /relocate/usr/sbin
  - if [ -d "/relocate/sbin" ]; then cp -a /relocate/sbin/* /relocate/usr/sbin/ && rm -rf /relocate/sbin; fi
  - ln -f -s usr/sbin "/relocate/sbin"
  - mkdir -p /relocate/usr/bin
  - if [ -d "/relocate/bin" ]; then cp -a /relocate/bin/* /relocate/usr/bin/ && rm -rf /relocate/bin; fi
  - ln -f -s usr/bin "/relocate/bin"
  - mkdir -p /relocate/usr/lib
  - if [ -d "/relocate/lib" ]; then cp -a /relocate/lib/* /relocate/usr/lib/ && rm -rf /relocate/lib; fi
  - ln -f -s usr/lib "/relocate/lib"
  - mkdir -p /relocate/usr/lib32
  - if [ -d "/relocate/lib32" ]; then cp -a /relocate/lib32/* /relocate/usr/lib32/ && rm -rf /relocate/lib32; fi
  - ln -f -s usr/lib32 "/relocate/lib32"
  - mkdir -p /relocate/usr/lib64
  - if [ -d "/relocate/lib64" ]; then cp -a /relocate/lib64/* /relocate/usr/lib64/ && rm -rf /relocate/lib64; fi
  - ln -f -s usr/lib64 "/relocate/lib64"
  - mkdir -p /relocate/usr/libx32
  - if [ -d "/relocate/libx32" ]; then cp -a /relocate/libx32/* /relocate/usr/libx32/ && rm -rf /relocate/libx32; fi
  - ln -f -s usr/libx32 "/relocate/libx32"
  - mkdir -p /relocate/var /relocate/run /relocate/run/lock
  - ln -f -s /run "/relocate/var/run"
  - ln -f -s /run/lock "/relocate/var/lock"
  #
  - mkdir -p /relocate/home/cilium
  - mkdir -p /relocate/etc
  - cp -a /from_common_distroless/group /relocate/etc/group
  - echo "cilium:x:1000:" >> /relocate/etc/group
---
# #####################################################################
# New Main Agent Image (Distroless)
---
image: cni-cilium/agent-distroless
fromImage: common/distroless
import:
- image: cni-cilium/agent-binaries-artifact
  add: /relocate
  to: /
  before: install
imageSpec:
  config:
    env: { "HUBBLE_SERVER": "unix:///var/run/cilium/hubble.sock", "INITSYSTEM": "SYSTEMD", "HUBBLE_COMPAT": "legacy-json-output", "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "LANG": "C.UTF-8", "LANGUAGE": "C.UTF-8", "LC_ALL": "C.UTF-8" }
    workingDir: "/home/cilium"
    cmd: ["/usr/bin/cilium"]

      # exclude modules and images from editions
---
# src of image BASE_ALT_DEV_CILIUM in candi/image_versions.yml
#

---
# #####################################################################
# BASE_DEV image for build binaries of all cilium components (based on Ubuntu)
# based on original images: runtime, builder, compilers, cilium-envoy, iptables
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/Dockerfile
# and https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/install-runtime-deps.sh
# and https://github.com/cilium/cilium/blob/v1.14.14/images/builder/Dockerfile
# and https://github.com/cilium/image-tools/blob/063fa0d879d9560b85b6134c48ece08e672fa057/images/compilers/Dockerfile
# and https://github.com/cilium/image-tools/blob/063fa0d879d9560b85b6134c48ece08e672fa057/images/compilers/install-deps.sh
# and https://github.com/cilium/image-tools/blob/063fa0d879d9560b85b6134c48ece08e672fa057/images/compilers/install-bazel.sh
# and https://github.com/cilium/cilium/blob/v1.14.5/images/cilium/Dockerfile#L9
# and https://github.com/cilium/proxy/blob/ad82c7c56e88989992fd25d8d67747de865c823b/Dockerfile.builder
# and https://github.com/cilium/image-tools/blob/3e6b0f588d788ac0e69f4d126cfb3c55b1513948/images/iptables/Dockerfile
#
# Original IMAGE_TAG of compilers (taken from builds of BPFTOOL and LLVM) is 5569a29cea6b3ad50aeb03102aaf3dc03841197c
# Corresponding commit is 063fa0d879d9560b85b6134c48ece08e672fa057 (https://github.com/cilium/image-tools/tree/063fa0d879d9560b85b6134c48ece08e672fa057)
# Original IMAGE_TAG of cilium-envoy is v1.26.6-ad82c7c56e88989992fd25d8d67747de865c823b
# Corresponding commit is ad82c7c56e88989992fd25d8d67747de865c823b
# Original IMAGE_TAG of cilium/iptables is 67f517af50e18f64cd12625021f1c39246bb4f92
# Corresponding commit is 3e6b0f588d788ac0e69f4d126cfb3c55b1513948 (https://github.com/cilium/image-tools/tree/3e6b0f588d788ac0e69f4d126cfb3c55b1513948)
# #####################################################################
---
image: cni-cilium/golang-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
---
image: cni-cilium/base-cilium-dev
fromImage: common/alt-p11-artifact
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: cni-cilium/golang-artifact
  add: /usr/local/go
  to: /usr/local/go
  before: install
shell:
  beforeInstall:
  - export DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC
  - ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone
  - apt-get update -y
  # apt install
  - |
    apt-get install -y \
    apt-https curl jq tzdata \
    ca-certificates bash-completion iproute2 arpd ipset kmod \
    iptables iptables-ipv6 iptables-nft \
    coreutils binutils git zip unzip wget mount patch patchelf \
    make automake autoconf cmake ccache bison flex ninja-build pkg-config \
    gcc gcc-c++ libstdc++-devel libstdc++-devel-static \
    glibc glibc-devel glibc-devel-static \
    python python3 python3-module-pip python3-module-virtualenv \
    build-essential libtool \
    libnetfilter_conntrack libnetfilter_conntrack-devel libnfnetlink-devel \
    libmnl-devel libnftnl-devel elfutils-devel zlib-devel
  # for debug
  - apt-get install -y strace vim-console
  # apt clean
  - apt-get autoclean && apt-get clean
  # download-only
  - |
    apt-get update && apt-get install -y -d \
    sudo \
    libcap-devel libpcap-devel \
    clang17.0 clang17.0-tools lldb17.0 lld17.0 llvm17.0-devel \
    libcxxabi-devel
  install:
  # Install Go
  - export GOROOT=/usr/local/go GOPATH=/go
  - export PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - go version
  # Install protoc and plugins
  - curl --fail --show-error --silent --location "https://github.com/protocolbuffers/protobuf/releases/download/v22.3/protoc-22.3-linux-x86_64.zip" --output /tmp/protoc.zip
  - unzip /tmp/protoc.zip -x readme.txt -d /usr/local && rm /tmp/protoc.zip
  - chmod o+rx /usr/local/bin/protoc && chmod o+rX -R /usr/local/include/google/
  # 8ba23be9613c672d40ae261d2a1335d639bdd59b == tag: cmd/protoc-gen-go-grpc/v1.3.0
  - git clone --depth 1 --branch cmd/protoc-gen-go-grpc/v1.3.0 https://github.com/grpc/grpc-go.git /src/grpc-go
  - git clone --depth 1 --branch v1.30.0 https://github.com/protocolbuffers/protobuf-go.git /src/protobuf-go
  - git clone --depth 1 --branch v1.1.0 https://github.com/mitchellh/protoc-gen-go-json.git /src/protoc-gen-go-json
  - git clone --depth 1 --branch v1.5.1 https://github.com/pseudomuto/protoc-gen-doc.git /src/protoc-gen-doc
  - cd /src/grpc-go/cmd/protoc-gen-go-grpc && go install
  - cd /src/protobuf-go/cmd/protoc-gen-go && go install
  - cd /src/protoc-gen-go-json && go install
  - cd /src/protoc-gen-doc/cmd/protoc-gen-doc && go install
  - cd /src
  - rm -rf /src/grpc-go
  - rm -rf /src/protobuf-go
  - rm -rf /src/protoc-gen-go-json
  - rm -rf /src/protoc-gen-doc
  # Install multiversion bazel
  - bazel_versions=(3.7.0 3.7.1 3.7.2 6.3.2)
  # install bazel wrapper script in the path, it automatically recognises `.bazelversion` and `USE_BAZEL_VERSIONS`, if neither are set it picks latest
  - curl --fail --show-error --silent --location "https://raw.githubusercontent.com/bazelbuild/bazel/refs/tags/${bazel_versions[-1]}/scripts/packages/bazel.sh" --output /usr/local/bin/bazel
  - chmod +x /usr/local/bin/bazel
  - |
    for bazel_version in ${bazel_versions[@]} ; do
      # instead of using installer script, download binaries directly, as installer script doesn't append version suffix,
      # so for multiple versions to be usable files will need to moved around, which would be more tedious
      long_binary_name="bazel-${bazel_version}-linux-x86_64"
      curl --fail --show-error --silent --location https://github.com/bazelbuild/bazel/releases/download/${bazel_version}/${long_binary_name} --output "/usr/local/bin/${long_binary_name}"
      chmod +x "/usr/local/bin/${long_binary_name}"
      USE_BAZEL_VERSION="${bazel_version}" bazel version # to extract all binaries properly
    done
imageSpec:
  config:
    env: { "GOROOT": "/usr/local/go", "GOPATH": "/go", "PATH": "${PATH}:${GOROOT}/bin:${GOPATH}/bin", "GOOS": "linux", "GOARCH": "amd64" }

      # exclude modules and images from editions
---

---
# #####################################################################
# Build BPFTOOL binaries (based on base-cilium-dev)
# Original IMAGE_TAG of BPFTOOL is d3093f6aeefef8270306011109be623a7e80ad1b
# Corresponding commit 3f125f524cdf74e20c1ac73855042a9254747855 (https://github.com/cilium/image-tools/tree/3f125f524cdf74e20c1ac73855042a9254747855)
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/Dockerfile#L9
# and https://github.com/cilium/image-tools/blob/3f125f524cdf74e20c1ac73855042a9254747855/images/bpftool/Dockerfile
# and https://github.com/cilium/image-tools/blob/3f125f524cdf74e20c1ac73855042a9254747855/images/bpftool/checkout-linux.sh
# and https://github.com/cilium/image-tools/blob/3f125f524cdf74e20c1ac73855042a9254747855/images/bpftool/build-bpftool-native.sh
# and https://github.com/cilium/image-tools/blob/063fa0d879d9560b85b6134c48ece08e672fa057/images/compilers/install-deps.sh
#
# Corresponding IMAGE_TAG of compilers is 5569a29cea6b3ad50aeb03102aaf3dc03841197c
# Corresponding commit is 063fa0d879d9560b85b6134c48ece08e672fa057 (https://github.com/cilium/image-tools/tree/063fa0d879d9560b85b6134c48ece08e672fa057)
# #####################################################################
---
image: cni-cilium/bin-bpftool-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone https://github.com/bpf/bpf-next.git /src/linux
  - cd /src/linux
  - git checkout 93270357daa949e4bed375b40d0a100ce04f3399
  - rm -rf /src/linux/.git
---
image: cni-cilium/bpftool-artifact
fromImage: cni-cilium/base-cilium-dev
final: false
import:
- image: cni-cilium/bin-bpftool-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  - update-alternatives --install /usr/bin/python python /usr/bin/python2 1
  - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 2
  install:
  - cd /src/linux/tools/bpf/bpftool
  - make -j "$(getconf _NPROCESSORS_ONLN)"
  - strip bpftool
  - cp -a bpftool /usr/local/bin

      # exclude modules and images from editions
---

---
# #####################################################################
# Build cilium-envoy binaries
# Original IMAGE_TAG of cilium-envoy is v1.29.7-39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51
# Corresponding commit is 39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/cilium/Dockerfile#L9
# and https://github.com/cilium/proxy/blob/39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51/Dockerfile.builder
# and https://github.com/cilium/proxy/blob/39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51/Dockerfile
# and https://github.com/cilium/proxy/blob/39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51/.github/workflows/build-envoy-images-release.yaml
# #####################################################################
---
image: cni-cilium/bin-cilium-envoy-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/021-cni-cilium/images/bin-cilium-envoy/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone https://github.com/cilium/proxy.git /src/proxy
  - cd /src/proxy
  - git checkout 39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51
  - git apply --verbose /patches/*.patch
  - rm -rf /src/proxy/.git
---
image: cni-cilium/bin-cilium-envoy-basel-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - mkdir -p /tmp/bazel-cache
  - git clone --depth 1 --branch v1.29.7-39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51-alt-v1 https://github.com/cilium/proxy-build-cache.git /tmp/bazel-cache && rm -rf /tmp/bazel-cache/.git
  - chown -R 1337:1337 /tmp/bazel-cache
  - mkdir -p /tmp/bazel-deps
  - git clone --depth 1 --branch v1.29.7-39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51-alt-v1 https://github.com/cilium/proxy-build-deps.git /tmp/bazel-deps && rm -rf /tmp/bazel-deps/.git
  - chown -R 1337:1337 /tmp/bazel-deps
---
image: cni-cilium/cilium-envoy-artifact
fromImage: cni-cilium/base-cilium-dev
final: false
import:
- image: cni-cilium/bin-cilium-envoy-src-artifact
  add: /src
  to: /src
  before: install
- image: cni-cilium/bin-cilium-envoy-basel-artifact
  add: /tmp/bazel-cache
  to: /tmp/bazel-cache
  before: install
- image: cni-cilium/bin-cilium-envoy-basel-artifact
  add: /tmp/bazel-deps
  to: /tmp/bazel-deps
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  - |
    apt-get install -y \
    sudo \
    libcap-devel \
    clang17.0 clang17.0-tools lldb17.0 lld17.0 llvm17.0-devel \
    libcxxabi-devel
  - ln -f -s llvm-17.0 "/usr/lib/llvm-17"
  - update-alternatives --install /usr/bin/python python /usr/bin/python3 1
  - apt-get autoclean && apt-get clean
  install:
  - mkdir -p /cilium && mv /src/proxy /cilium/
  - sed -i "s/# root ALL=(ALL:ALL) ALL/root ALL=(ALL:ALL) ALL/" /etc/sudoers
  - echo 'Defaults env_keep += "GOPROXY GOPATH GOROOT GOOS GOARCH GO_VERSION CGO_ENABLED"' >> /etc/sudoers
  - echo 'Defaults env_keep += "TARGETARCH ARCH BAZEL_VERSION USE_BAZEL_VERSION BAZEL_OUTPUT_BASE"' >> /etc/sudoers
  - echo 'Defaults env_keep += "BAZEL_BUILD_OPTS PKG_BUILD V DEBUG DESTDIR"' >> /etc/sudoers
  - groupadd -f -g 1337 cilium && useradd -m -g cilium -u 1337 cilium
  - chmod -R a+w /tmp
  - chown -R 1337:1337 /cilium/proxy
  setup:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /cilium/proxy
  - go mod vendor && go mod verify
  - sudo -u cilium PATH=${PATH} make -C proxylib all
  - sudo -u cilium PATH=${PATH} mkdir -p /tmp/install/usr/lib
  - mv proxylib/libcilium.so /tmp/install/usr/lib/libcilium.so
  #
  - export TARGETARCH=amd64 ARCH="x86_64"
  - export BAZEL_VERSION="6.3.2" USE_BAZEL_VERSION="6.3.2"
  - export BAZEL_BUILD_OPTS="--disk_cache=/tmp/bazel-cache --nofetch"
  - export PKG_BUILD=1 V=$V DEBUG=$DEBUG DESTDIR=/tmp/install
  #
  - cd /cilium/proxy
  - sudo -u cilium echo "39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51" >SOURCE_VERSION
  - sudo -u cilium sed -i "s,https://github.com,https://github.com," WORKSPACE
  - sudo -u cilium sed -i 's/$(SUDO) apt info clang-17 || $(call add_clang_apt_source,$(shell lsb_release -cs))/rpm -q clang17.0/' Makefile
  - sudo -u cilium sed -i "/\$(SUDO) apt install -y clang-17 llvm-17-dev lld-17 clang-format-17/d" Makefile
  - sudo -u cilium sed -i '\#"/usr/include"#a \        "/usr/lib/llvm-17.0/lib64/clang/17/include",' bazel/toolchains/BUILD
  #
  #- sudo -u cilium PATH=${PATH} bazel fetch //:cilium-envoy-starter //:cilium-envoy
  #
  - export BAZEL_OUTPUT_BASE=$(sudo -u cilium PATH=${PATH} bazel info output_base)
  - sudo -u cilium PATH=${PATH} mkdir -p ${BAZEL_OUTPUT_BASE}/external
  - sudo -u cilium PATH=${PATH} tar -zxf /tmp/bazel-deps/external.tar.gz -C ${BAZEL_OUTPUT_BASE}/external
  - rm -rf /tmp/bazel-deps
  #
  - sudo -u cilium PATH=${PATH} make bazel-bin/cilium-envoy-starter bazel-bin/cilium-envoy
  - sudo -u cilium PATH=${PATH} ./bazel/get_workspace_status
  - sudo -u cilium PATH=${PATH} make install
  - rm -rf /cilium/proxy/vendor

      # exclude modules and images from editions
---

---
# #####################################################################
# Build cilium-agent binaries
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/cilium/Dockerfile (builder stage)
---
image: cni-cilium/bin-cilium-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/021-cni-cilium/images/bin-cilium/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.14.14 https://github.com/cilium/cilium.git /src/cilium
  - cd /src/cilium
  - git apply --verbose /patches/*.patch
  - rm -rf Documentation
  - rm -rf /src/cilium/.git
---
image: cni-cilium/cilium-artifact
fromImage: cni-cilium/base-cilium-dev
final: false
import:
- image: cni-cilium/bin-cilium-src-artifact
  add: /src
  to: /src
  before: install
- image: cni-cilium/llvm-artifact
  add: /usr/local/bin/
  to: /usr/local/bin
  before: install
  includePaths:
  - clang
  - llc
  - llvm-objcopy
- image: cni-cilium/bpftool-artifact
  add: /usr/local/bin/bpftool
  to: /usr/local/bin/bpftool
  before: install
- image: cni-cilium/cni-plugins-artifact
  add: /out/linux/amd64/bin/loopback
  to: /cni/loopback
  before: install
- image: cni-cilium/gops-artifact
  add: /out/linux/amd64/bin/gops
  to: /bin/gops
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOROOT=/usr/local/go GOPATH=/go
  # When launching this container via CI, an unexpected path is inserted into the PATH variable.
  # Because of this, the code is built with errors. We haven't figured out why this is happening yet.
  # As a workaround, we explicitly specified PATH.
  - export PATH=${GOROOT}/bin:${GOPATH}/bin:/root/bin:/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src/cilium
  - go mod vendor && go mod verify
  - make PKG_BUILD=1 SKIP_DOCS=true DESTDIR=/tmp/install build-container install-container-binary
  - make PKG_BUILD=1 SKIP_DOCS=true DESTDIR=/tmp/install install-bash-completion licenses-all
  - mv LICENSE.all /tmp/install/LICENSE.all
  - cp -t /tmp/install images/cilium/init-container.sh plugins/cilium-cni/install-plugin.sh plugins/cilium-cni/cni-uninstall.sh
  - rm -rf /src/cilium/vendor
---

      # exclude modules and images from editions
---

---
# #####################################################################
# Build cni binaries
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/Dockerfile (gops-cni-builder stage)
# and https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/download-cni.sh
# #####################################################################
---
image: cni-cilium/bin-cni-plugins-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/021-cni-cilium/images/bin-cni-plugins/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.5.0 https://github.com/containernetworking/plugins.git /src/plugins
  - cd /src/plugins
  - git apply --verbose /patches/*.patch
  - rm -rf /src/plugins/.git
---
image: cni-cilium/cni-plugins-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cni-cilium/bin-cni-plugins-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils tar
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src/plugins
  - go mod vendor && go mod verify
  - ./build_linux.sh -ldflags '-extldflags -static -X github.com/containernetworking/plugins/pkg/utils/buildversion.BuildVersion=1.5.0'
  - mkdir -p /out/linux/amd64/bin
  - cp -f /src/plugins/bin/* /out/linux/amd64/bin
  - strip /out/linux/amd64/bin/*
  - rm -rf /src/plugins/vendor
---

      # exclude modules and images from editions
---

---
# #####################################################################
# Build gops binaries
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/Dockerfile (gops-cni-builder stage)
# and https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/build-gops.sh
# #####################################################################
---
image: cni-cilium/bin-gops-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone --depth 1 --branch v0.3.28 https://github.com/google/gops.git /src/gops && rm -rf /src/gops/.git
  - cd /src/gops
---
image: cni-cilium/gops-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cni-cilium/bin-gops-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src/gops
  - mkdir -p "/out/linux/amd64/bin"
  - go build -ldflags "-s -w" -o "/out/linux/amd64/bin/gops" github.com/google/gops
  - strip /out/linux/amd64/bin/gops
---

      # exclude modules and images from editions
---

---
# #####################################################################
# Build hubble-cli binaries
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/cilium/Dockerfile (hubble stage)
# and https://github.com/cilium/cilium/blob/v1.14.14/images/cilium/download-hubble.sh
# and https://github.com/cilium/hubble/blob/v1.16.0/Dockerfile
# #####################################################################
---
image: cni-cilium/bin-hubble-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/021-cni-cilium/images/bin-hubble/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.16.0 https://github.com/cilium/hubble.git /src/hubble
  - cd /src/hubble
  - git apply --verbose /patches/*.patch
  - rm -rf /src/hubble/.git
---
image: cni-cilium/hubble-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cni-cilium/bin-hubble-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make git bash binutils
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src/hubble
  - go mod vendor && go mod verify
  - make clean && make hubble
  - cp /src/hubble/hubble /hubble
  - strip /hubble
  - /hubble completion bash > /bash_completion
  - rm -rf src/hubble/vendor
---

      # exclude modules and images from editions
---

---
# #####################################################################
# Build LLVM binaries (based on base-cilium-dev)
# Original IMAGE_TAG of LLVM is a8c542efc076b62ba683e7699c0013adb6955f0f
# Corresponding commit bbb3754bd090484cc1da8ea88a3b6e3cf67a7a28 (https://github.com/cilium/image-tools/tree/bbb3754bd090484cc1da8ea88a3b6e3cf67a7a28)
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/runtime/Dockerfile#L8
# and https://github.com/cilium/image-tools/blob/bbb3754bd090484cc1da8ea88a3b6e3cf67a7a28/images/llvm/Dockerfile
# and https://github.com/cilium/image-tools/blob/bbb3754bd090484cc1da8ea88a3b6e3cf67a7a28/images/llvm/checkout-llvm.sh
# and https://github.com/cilium/image-tools/blob/bbb3754bd090484cc1da8ea88a3b6e3cf67a7a28/images/llvm/build-llvm-native.sh
# and https://github.com/cilium/image-tools/blob/063fa0d879d9560b85b6134c48ece08e672fa057/images/compilers/install-deps.sh
# #####################################################################
---
image: cni-cilium/bin-llvm-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone --branch "llvmorg-10.0.0" https://github.com/llvm/llvm-project.git /src/llvm
  - cd /src/llvm
  - git config --global user.email "builder@deckhouse.io"
  - git cherry-pick 29bc5dd19407c4d7cad1c059dea26ee216ddc7ca
  - git cherry-pick 13f6c81c5d9a7a34a684363bcaad8eb7c65356fd
  - git cherry-pick ea72b0319d7b0f0c2fcf41d121afa5d031b319d5
  # CSE
  - rm -rf clang-tools-extra/clangd/clients/clangd-vscode
  - rm -rf /src/llvm/.git
---
image: cni-cilium/bin-llvm-ccache-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - mkdir -p /tmp/ccache-dir
  - git clone --depth 1 --branch llvmorg-10.0.0-alt-p11-gcc13-v2-120225 https://github.com/llvm/llvm-build-cache.git /tmp/ccache-dir && rm -rf /tmp/ccache-dir/.git
---
image: cni-cilium/llvm-artifact
fromImage: cni-cilium/base-cilium-dev
final: false
import:
- image: cni-cilium/bin-llvm-src-artifact
  add: /src
  to: /src
  before: install
- image: cni-cilium/bin-llvm-ccache-artifact
  add: /tmp/ccache-dir
  to: /tmp/ccache-dir
  before: install
shell:
  install:
  - update-alternatives --install /usr/bin/python python /usr/bin/python2 1
  - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 2
  setup:
  - sed -i '/\#include <string>/a \#include <cstdint>' /src/llvm/llvm/include/llvm/Support/Signals.h
  - export CCACHE_DIR="/tmp/ccache-dir"
  - mkdir -p /src/llvm/llvm/build-native
  - cd /src/llvm/llvm/build-native
  - ccache --zero-stats || true
  - ccache --show-stats -v || true
  - |
    cmake .. -G "Ninja" \
      -DCMAKE_VERBOSE_MAKEFILE="ON" \
      -DLLVM_TARGETS_TO_BUILD="BPF" \
      -DLLVM_ENABLE_PROJECTS="clang" \
      -DBUILD_SHARED_LIBS="OFF" \
      -DCMAKE_BUILD_TYPE="Release" \
      -DLLVM_BUILD_RUNTIME="OFF" \
      -DCMAKE_INSTALL_PREFIX="/usr/local" \
      -DLLVM_CCACHE_BUILD="ON" \
      -DLLVM_CCACHE_DIR="/tmp/ccache-dir" \
      -DLLVM_CCACHE_MAXSIZE="0"
  - ccache --show-stats -v || true
  - ninja clang llc llvm-objcopy
  - ccache --show-stats -v || true
  - strip bin/clang
  - strip bin/llc
  - strip bin/llvm-objcopy
  # - mkdir -p /out/linux/amd64/bin
  # - cp bin/clang bin/llc bin/llvm-objcopy /out/linux/amd64/bin
  - cp bin/clang bin/llc bin/llvm-objcopy /usr/local/bin

      # exclude modules and images from editions
---
---
image: cni-cilium/check-kernel-version
fromImage: common/distroless
import:
- image: common/check-kernel-version
  add: /check-kernel-version
  to: /check-kernel-version
  before: setup
- image: cni-cilium/check-kernel-version-relocate-artifact
  add: /relocate/bin/true
  to: /bin/true
  before: setup
- image: common/pause
  add: /pause
  to: /pause
  before: install
imageSpec:
  config:
    entrypoint: [ "/check-kernel-version" ]
---
---
image: cni-cilium/check-kernel-version-relocate-artifact
fromImage: common/relocate-artifact
final: false
shell:
 setup:
   - /binary_replace.sh -i "/bin/true" -o /relocate

      # exclude modules and images from editions
---
---
image: cni-cilium/kube-rbac-proxy
fromImage: common/distroless
import:
- image: common/kube-rbac-proxy
  add: /kube-rbac-proxy
  to: /kube-rbac-proxy
  before: setup
- image: cni-cilium/kube-rbac-proxy-relocate-artifact
  add: /relocate/bin/true
  to: /bin/true
  before: setup
- image: common/pause
  add: /pause
  to: /pause
  before: install
imageSpec:
  config:
    entrypoint: ["/kube-rbac-proxy", "--tls-cipher-suites", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"]
    expose: ["8080"]
---
---
image: cni-cilium/kube-rbac-proxy-relocate-artifact
fromImage: common/relocate-artifact
final: false
shell:
 setup:
   - /binary_replace.sh -i "/bin/true" -o /relocate

      # exclude modules and images from editions
---

# #####################################################################
# Based on https://github.com/cilium/cilium/blob/v1.14.14/images/operator/Dockerfile
# #####################################################################
---
image: cni-cilium/operator-build-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cni-cilium/bin-cilium-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make git bash
  install:
  - export GO_VERSION=${GOLANG_VERSION}
  - export GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64
  - cd /src/cilium
  - go mod vendor && go mod verify
  - make DESTDIR=/out/linux/amd64 build-container-operator install-container-binary-operator
  - chown 64535:64535 /out/linux/amd64/usr/bin/cilium-operator
  - chmod 0700 /out/linux/amd64/usr/bin/cilium-operator
  - rm -rf /src/cilium/vendor
---
image: cni-cilium/operator
fromImage: common/distroless
import:
- image: cni-cilium/operator-build-artifact
  add: /out/linux/amd64/usr/bin/cilium-operator
  to: /usr/bin/cilium-operator
  before: install
imageSpec:
  config:
    entrypoint: ["/usr/bin/cilium-operator"]

      # exclude modules and images from editions
---
---
image: cni-cilium/safe-agent-updater-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/021-cni-cilium/images/safe-agent-updater/src
  to: /src
  # Forces a rebuild when source files are modified.
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
---
image: cni-cilium/safe-agent-updater-build-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cni-cilium/safe-agent-updater-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - go mod download
  setup:
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - cd /src
  - go build -ldflags="-s -w" -o safe-agent-updater .
  - chown 64535:64535 /src/safe-agent-updater
  - chmod 0700 /src/safe-agent-updater
---
image: cni-cilium/safe-agent-updater
fromImage: common/distroless
import:
- image: cni-cilium/safe-agent-updater-build-artifact
  add: /src/safe-agent-updater
  to: /safe-agent-updater
  before: install
imageSpec:
  config:
    entrypoint: ["/safe-agent-updater"]

      # exclude modules and images from editions
---

---
image: cloud-provider-aws/cloud-controller-manager-1-28
fromImage: common/distroless
import:
- image: cloud-provider-aws/cloud-controller-manager-artifact-1-28
  add: /src/aws-cloud-controller-manager
  to: /usr/local/bin/aws-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/aws-cloud-controller-manager"]
---
image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-aws/images/cloud-controller-manager/patches/1.28
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v1.28.11 https://github.com/kubernetes/cloud-provider-aws.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git vendor
---
image: cloud-provider-aws/cloud-controller-manager-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-28
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-w -s -X k8s.io/component-base/version.gitVersion=v1.28.11 -X main.gitVersion=v1.28.11" -o=aws-cloud-controller-manager cmd/aws-cloud-controller-manager/main.go
  - chown 64535:64535 /src/aws-cloud-controller-manager
  - chmod 0755 /src/aws-cloud-controller-manager
---
image: cloud-provider-aws/cloud-controller-manager-1-29
fromImage: common/distroless
import:
- image: cloud-provider-aws/cloud-controller-manager-artifact-1-29
  add: /src/aws-cloud-controller-manager
  to: /usr/local/bin/aws-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/aws-cloud-controller-manager"]
---
image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-aws/images/cloud-controller-manager/patches/1.29
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v1.29.8 https://github.com/kubernetes/cloud-provider-aws.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git vendor
---
image: cloud-provider-aws/cloud-controller-manager-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-29
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-w -s -X k8s.io/component-base/version.gitVersion=v1.29.8 -X main.gitVersion=v1.29.8" -o=aws-cloud-controller-manager cmd/aws-cloud-controller-manager/main.go
  - chown 64535:64535 /src/aws-cloud-controller-manager
  - chmod 0755 /src/aws-cloud-controller-manager
---
image: cloud-provider-aws/cloud-controller-manager-1-30
fromImage: common/distroless
import:
- image: cloud-provider-aws/cloud-controller-manager-artifact-1-30
  add: /src/aws-cloud-controller-manager
  to: /usr/local/bin/aws-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/aws-cloud-controller-manager"]
---
image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-30
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-aws/images/cloud-controller-manager/patches/1.30
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v1.30.7 https://github.com/kubernetes/cloud-provider-aws.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git vendor
---
image: cloud-provider-aws/cloud-controller-manager-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-30
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-w -s -X k8s.io/component-base/version.gitVersion=v1.30.7 -X main.gitVersion=v1.30.7" -o=aws-cloud-controller-manager cmd/aws-cloud-controller-manager/main.go
  - chown 64535:64535 /src/aws-cloud-controller-manager
  - chmod 0755 /src/aws-cloud-controller-manager
---
image: cloud-provider-aws/cloud-controller-manager-1-31
fromImage: common/distroless
import:
- image: cloud-provider-aws/cloud-controller-manager-artifact-1-31
  add: /src/aws-cloud-controller-manager
  to: /usr/local/bin/aws-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/aws-cloud-controller-manager"]
---
image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-31
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-aws/images/cloud-controller-manager/patches/1.31
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v1.31.0 https://github.com/kubernetes/cloud-provider-aws.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git vendor
---
image: cloud-provider-aws/cloud-controller-manager-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-31
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-w -s -X k8s.io/component-base/version.gitVersion=v1.31.0 -X main.gitVersion=v1.31.0" -o=aws-cloud-controller-manager cmd/aws-cloud-controller-manager/main.go
  - chown 64535:64535 /src/aws-cloud-controller-manager
  - chmod 0755 /src/aws-cloud-controller-manager
---
image: cloud-provider-aws/cloud-controller-manager-1-32
fromImage: common/distroless
import:
- image: cloud-provider-aws/cloud-controller-manager-artifact-1-32
  add: /src/aws-cloud-controller-manager
  to: /usr/local/bin/aws-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/aws-cloud-controller-manager"]
---
image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-32
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-aws/images/cloud-controller-manager/patches/1.32
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v1.32.0 https://github.com/kubernetes/cloud-provider-aws.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git vendor
---
image: cloud-provider-aws/cloud-controller-manager-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/cloud-controller-manager-src-artifact-1-32
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -ldflags="-w -s -X k8s.io/component-base/version.gitVersion=v1.32.0 -X main.gitVersion=v1.32.0" -o=aws-cloud-controller-manager cmd/aws-cloud-controller-manager/main.go
  - chown 64535:64535 /src/aws-cloud-controller-manager
  - chmod 0755 /src/aws-cloud-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-aws/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-aws/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-aws/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-aws/images/cloud-data-discoverer/src
  to:  /src
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /go_lib/cloud-data
  to: /src/go_lib/cloud-data
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /pkg/log
  to: /src/pkg/log
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
shell:
  install:
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
---
image: cloud-provider-aws/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-aws/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---

---
image: cloud-provider-aws/ebs-csi-plugin-1-28
fromImage: common/distroless
import:
- image: cloud-provider-aws/ebs-csi-plugin-artifact-1-28
  add: /aws-ebs-csi-driver
  to: /bin/aws-ebs-csi-driver
  before: setup
- image: cloud-provider-aws/ebs-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/aws-ebs-csi-driver"]
---
image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-aws/images/ebs-csi-plugin/patches/v1.34.0
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v1.34.0 https://github.com/kubernetes-sigs/aws-ebs-csi-driver.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git vendor
---
image: cloud-provider-aws/ebs-csi-plugin-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-28
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod edit -go=1.23.4
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/driver.driverVersion=v1.34.0 -X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/cloud.driverVersion=v1.34.0 -s -w" -o /aws-ebs-csi-driver ./cmd/main.go
  - chown 64535:64535 /aws-ebs-csi-driver
  - chmod 0755 /aws-ebs-csi-driver
---
image: cloud-provider-aws/ebs-csi-plugin-1-29
fromImage: common/distroless
import:
- image: cloud-provider-aws/ebs-csi-plugin-artifact-1-29
  add: /aws-ebs-csi-driver
  to: /bin/aws-ebs-csi-driver
  before: setup
- image: cloud-provider-aws/ebs-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/aws-ebs-csi-driver"]
---
image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-aws/images/ebs-csi-plugin/patches/v1.34.0
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v1.34.0 https://github.com/kubernetes-sigs/aws-ebs-csi-driver.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git vendor
---
image: cloud-provider-aws/ebs-csi-plugin-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-29
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod edit -go=1.23.4
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/driver.driverVersion=v1.34.0 -X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/cloud.driverVersion=v1.34.0 -s -w" -o /aws-ebs-csi-driver ./cmd/main.go
  - chown 64535:64535 /aws-ebs-csi-driver
  - chmod 0755 /aws-ebs-csi-driver
---
image: cloud-provider-aws/ebs-csi-plugin-1-30
fromImage: common/distroless
import:
- image: cloud-provider-aws/ebs-csi-plugin-artifact-1-30
  add: /aws-ebs-csi-driver
  to: /bin/aws-ebs-csi-driver
  before: setup
- image: cloud-provider-aws/ebs-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/aws-ebs-csi-driver"]
---
image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-30
final: false
fromImage: common/src-artifact
shell:
  install:
    - git clone --depth 1 --branch v1.40.0 https://github.com/kubernetes-sigs/aws-ebs-csi-driver.git /src
    - cd /src
    - rm -rf .git vendor
---
image: cloud-provider-aws/ebs-csi-plugin-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-30
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod edit -go=1.23.4
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/driver.driverVersion=v1.40.0 -X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/cloud.driverVersion=v1.40.0 -s -w" -o /aws-ebs-csi-driver ./cmd/main.go
  - chown 64535:64535 /aws-ebs-csi-driver
  - chmod 0755 /aws-ebs-csi-driver
---
image: cloud-provider-aws/ebs-csi-plugin-1-31
fromImage: common/distroless
import:
- image: cloud-provider-aws/ebs-csi-plugin-artifact-1-31
  add: /aws-ebs-csi-driver
  to: /bin/aws-ebs-csi-driver
  before: setup
- image: cloud-provider-aws/ebs-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/aws-ebs-csi-driver"]
---
image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-31
final: false
fromImage: common/src-artifact
shell:
  install:
    - git clone --depth 1 --branch v1.40.0 https://github.com/kubernetes-sigs/aws-ebs-csi-driver.git /src
    - cd /src
    - rm -rf .git vendor
---
image: cloud-provider-aws/ebs-csi-plugin-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-31
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod edit -go=1.23.4
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/driver.driverVersion=v1.40.0 -X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/cloud.driverVersion=v1.40.0 -s -w" -o /aws-ebs-csi-driver ./cmd/main.go
  - chown 64535:64535 /aws-ebs-csi-driver
  - chmod 0755 /aws-ebs-csi-driver
---
image: cloud-provider-aws/ebs-csi-plugin-1-32
fromImage: common/distroless
import:
- image: cloud-provider-aws/ebs-csi-plugin-artifact-1-32
  add: /aws-ebs-csi-driver
  to: /bin/aws-ebs-csi-driver
  before: setup
- image: cloud-provider-aws/ebs-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/aws-ebs-csi-driver"]
---
image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-32
final: false
fromImage: common/src-artifact
shell:
  install:
    - git clone --depth 1 --branch v1.40.0 https://github.com/kubernetes-sigs/aws-ebs-csi-driver.git /src
    - cd /src
    - rm -rf .git vendor
---
image: cloud-provider-aws/ebs-csi-plugin-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-aws/ebs-csi-plugin-src-artifact-1-32
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod edit -go=1.23.4
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/driver.driverVersion=v1.40.0 -X github.com/kubernetes-sigs/aws-ebs-csi-driver/pkg/cloud.driverVersion=v1.40.0 -s -w" -o /aws-ebs-csi-driver ./cmd/main.go
  - chown 64535:64535 /aws-ebs-csi-driver
  - chmod 0755 /aws-ebs-csi-driver
---
image: cloud-provider-aws/ebs-csi-plugin-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
    - apt-get update -y
    - apt-get install -y e2fsprogs xfsprogs parted
  install:
    - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---
---
image: cloud-provider-aws/node-termination-handler
fromImage: common/distroless
import:
  - image: cloud-provider-aws/node-termination-handler-artifact
    add: /node-termination-handler
    to: /node-termination-handler
    before: setup
imageSpec:
  config:
    entrypoint: ["/node-termination-handler"]
---
image: cloud-provider-aws/node-termination-handler-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 --branch v1.24.0 https://github.com/aws/aws-node-termination-handler.git /src
  - cd /src
  - rm -rf .git vendor
---
image: cloud-provider-aws/node-termination-handler-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
import:
- image: cloud-provider-aws/node-termination-handler-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /node-termination-handler ./cmd/node-termination-handler.go
  - chown 64535:64535 /node-termination-handler
  - chmod 0755 /node-termination-handler

      # exclude modules and images from editions
---

---
image: cloud-provider-azure/azuredisk-csi-1-28
fromImage: common/distroless
import:
- image: cloud-provider-azure/azuredisk-csi-artifact-1-28
  add: /src/_output/amd64/azurediskplugin
  to: /azurediskplugin
  before: setup
- image: cloud-provider-azure/azuredisk-csi-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/azurediskplugin"]
---
image: cloud-provider-azure/azuredisk-csi-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-azure/images/azuredisk-csi/patches/v1.28.11
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.28.11 https://github.com/kubernetes-sigs/azuredisk-csi-driver.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-azure/azuredisk-csi-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/azuredisk-csi-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-extldflags "-static"' -tags azurediskv2 -o _output/amd64/azurediskplugin ./pkg/azurediskplugin
---
image: cloud-provider-azure/azuredisk-csi-1-29
fromImage: common/distroless
import:
- image: cloud-provider-azure/azuredisk-csi-artifact-1-29
  add: /src/_output/amd64/azurediskplugin
  to: /azurediskplugin
  before: setup
- image: cloud-provider-azure/azuredisk-csi-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/azurediskplugin"]
---
image: cloud-provider-azure/azuredisk-csi-src-artifact-1-29
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 --branch v1.29.12 https://github.com/kubernetes-sigs/azuredisk-csi-driver.git /src
  - cd /src
  - rm -rf .git vendor
---
image: cloud-provider-azure/azuredisk-csi-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/azuredisk-csi-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-extldflags "-static"' -tags azurediskv2 -o _output/amd64/azurediskplugin ./pkg/azurediskplugin
---
image: cloud-provider-azure/azuredisk-csi-1-30
fromImage: common/distroless
import:
- image: cloud-provider-azure/azuredisk-csi-artifact-1-30
  add: /src/_output/amd64/azurediskplugin
  to: /azurediskplugin
  before: setup
- image: cloud-provider-azure/azuredisk-csi-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/azurediskplugin"]
---
image: cloud-provider-azure/azuredisk-csi-src-artifact-1-30
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 --branch v1.30.7 https://github.com/kubernetes-sigs/azuredisk-csi-driver.git /src
  - cd /src
  - rm -rf .git vendor
---
image: cloud-provider-azure/azuredisk-csi-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/azuredisk-csi-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-extldflags "-static"' -tags azurediskv2 -o _output/amd64/azurediskplugin ./pkg/azurediskplugin
---
image: cloud-provider-azure/azuredisk-csi-1-31
fromImage: common/distroless
import:
- image: cloud-provider-azure/azuredisk-csi-artifact-1-31
  add: /src/_output/amd64/azurediskplugin
  to: /azurediskplugin
  before: setup
- image: cloud-provider-azure/azuredisk-csi-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/azurediskplugin"]
---
image: cloud-provider-azure/azuredisk-csi-src-artifact-1-31
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 --branch v1.31.2 https://github.com/kubernetes-sigs/azuredisk-csi-driver.git /src
  - cd /src
  - rm -rf .git vendor
---
image: cloud-provider-azure/azuredisk-csi-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/azuredisk-csi-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-extldflags "-static"' -tags azurediskv2 -o _output/amd64/azurediskplugin ./pkg/azurediskplugin
---
image: cloud-provider-azure/azuredisk-csi-1-32
fromImage: common/distroless
import:
- image: cloud-provider-azure/azuredisk-csi-artifact-1-32
  add: /src/_output/amd64/azurediskplugin
  to: /azurediskplugin
  before: setup
- image: cloud-provider-azure/azuredisk-csi-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/azurediskplugin"]
---
image: cloud-provider-azure/azuredisk-csi-src-artifact-1-32
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 --branch v1.31.2 https://github.com/kubernetes-sigs/azuredisk-csi-driver.git /src
  - cd /src
  - rm -rf .git vendor
---
image: cloud-provider-azure/azuredisk-csi-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/azuredisk-csi-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-extldflags "-static"' -tags azurediskv2 -o _output/amd64/azurediskplugin ./pkg/azurediskplugin
---
image: cloud-provider-azure/azuredisk-csi-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs parted btrfs-progs
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---
# https://github.com/kubernetes-sigs/cloud-provider-azure/releases
---
image: cloud-provider-azure/cloud-controller-manager-1-28
fromImage: common/distroless
import:
- image: cloud-provider-azure/cloud-controller-manager-artifact-1-28
  add: /src/bin/azure-cloud-controller-manager
  to: /usr/local/bin/azure-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/azure-cloud-controller-manager"]
---
image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-azure/images/cloud-controller-manager/patches/1.28
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.28.13  https://github.com/kubernetes-sigs/cloud-provider-azure.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-azure/cloud-controller-manager-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - go build -a -o bin/azure-cloud-controller-manager ./cmd/cloud-controller-manager
  - chown 64535:64535 /src/bin/azure-cloud-controller-manager
  - chmod 0755 /src/bin/azure-cloud-controller-manager
---
image: cloud-provider-azure/cloud-controller-manager-1-29
fromImage: common/distroless
import:
- image: cloud-provider-azure/cloud-controller-manager-artifact-1-29
  add: /src/bin/azure-cloud-controller-manager
  to: /usr/local/bin/azure-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/azure-cloud-controller-manager"]
---
image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-azure/images/cloud-controller-manager/patches/1.29
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.29.11  https://github.com/kubernetes-sigs/cloud-provider-azure.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-azure/cloud-controller-manager-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - go build -a -o bin/azure-cloud-controller-manager ./cmd/cloud-controller-manager
  - chown 64535:64535 /src/bin/azure-cloud-controller-manager
  - chmod 0755 /src/bin/azure-cloud-controller-manager
---
image: cloud-provider-azure/cloud-controller-manager-1-30
fromImage: common/distroless
import:
- image: cloud-provider-azure/cloud-controller-manager-artifact-1-30
  add: /src/bin/azure-cloud-controller-manager
  to: /usr/local/bin/azure-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/azure-cloud-controller-manager"]
---
image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-30
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-azure/images/cloud-controller-manager/patches/1.30
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.30.7  https://github.com/kubernetes-sigs/cloud-provider-azure.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-azure/cloud-controller-manager-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - go build -a -o bin/azure-cloud-controller-manager ./cmd/cloud-controller-manager
  - chown 64535:64535 /src/bin/azure-cloud-controller-manager
  - chmod 0755 /src/bin/azure-cloud-controller-manager
---
image: cloud-provider-azure/cloud-controller-manager-1-31
fromImage: common/distroless
import:
- image: cloud-provider-azure/cloud-controller-manager-artifact-1-31
  add: /src/bin/azure-cloud-controller-manager
  to: /usr/local/bin/azure-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/azure-cloud-controller-manager"]
---
image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-31
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-azure/images/cloud-controller-manager/patches/1.31
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.31.1  https://github.com/kubernetes-sigs/cloud-provider-azure.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-azure/cloud-controller-manager-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - go build -a -o bin/azure-cloud-controller-manager ./cmd/cloud-controller-manager
  - chown 64535:64535 /src/bin/azure-cloud-controller-manager
  - chmod 0755 /src/bin/azure-cloud-controller-manager
---
image: cloud-provider-azure/cloud-controller-manager-1-32
fromImage: common/distroless
import:
- image: cloud-provider-azure/cloud-controller-manager-artifact-1-32
  add: /src/bin/azure-cloud-controller-manager
  to: /usr/local/bin/azure-cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/azure-cloud-controller-manager"]
---
image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-32
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-azure/images/cloud-controller-manager/patches/1.32
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.32.0  https://github.com/kubernetes-sigs/cloud-provider-azure.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf vendor .git
---
image: cloud-provider-azure/cloud-controller-manager-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-azure/cloud-controller-manager-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - go build -a -o bin/azure-cloud-controller-manager ./cmd/cloud-controller-manager
  - chown 64535:64535 /src/bin/azure-cloud-controller-manager
  - chmod 0755 /src/bin/azure-cloud-controller-manager
      # exclude modules and images from editions
---
---
image: cloud-provider-azure/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-azure/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-azure/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-azure/images/cloud-data-discoverer/src
  to:  /src
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /go_lib/cloud-data
  to: /src/go_lib/cloud-data
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /pkg/log
  to: /src/pkg/log
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
shell:
  install:
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
---
image: cloud-provider-azure/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-azure/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---

---
image: cloud-provider-gcp/cloud-controller-manager-1-28
fromImage: common/distroless
import:
- image: cloud-provider-gcp/cloud-controller-manager-artifact-1-28
  add: /src/gcp-cloud-controller-manager
  to: /usr/local/bin/cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/cloud-controller-manager"]
---
image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/cloud-controller-manager/patches/ccm-v28.10.0
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch ccm/v28.10.0 https://github.com/kubernetes/cloud-provider-gcp.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/cloud-controller-manager-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o gcp-cloud-controller-manager cmd/cloud-controller-manager/main.go cmd/cloud-controller-manager/nodeipamcontroller.go cmd/cloud-controller-manager/gkenetworkparamsetcontroller.go
  - chown 64535:64535 /src/gcp-cloud-controller-manager
  - chmod 0755 /src/gcp-cloud-controller-manager
---
image: cloud-provider-gcp/cloud-controller-manager-1-29
fromImage: common/distroless
import:
- image: cloud-provider-gcp/cloud-controller-manager-artifact-1-29
  add: /src/gcp-cloud-controller-manager
  to: /usr/local/bin/cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/cloud-controller-manager"]
---
image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/cloud-controller-manager/patches/ccm-v29.5.1
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch ccm/v29.5.1 https://github.com/kubernetes/cloud-provider-gcp.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/cloud-controller-manager-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o gcp-cloud-controller-manager cmd/cloud-controller-manager/main.go cmd/cloud-controller-manager/nodeipamcontroller.go cmd/cloud-controller-manager/gkenetworkparamsetcontroller.go
  - chown 64535:64535 /src/gcp-cloud-controller-manager
  - chmod 0755 /src/gcp-cloud-controller-manager
---
image: cloud-provider-gcp/cloud-controller-manager-1-30
fromImage: common/distroless
import:
- image: cloud-provider-gcp/cloud-controller-manager-artifact-1-30
  add: /src/gcp-cloud-controller-manager
  to: /usr/local/bin/cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/cloud-controller-manager"]
---
image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-30
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/cloud-controller-manager/patches/ccm-v30.1.4
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch ccm/v30.1.4 https://github.com/kubernetes/cloud-provider-gcp.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/cloud-controller-manager-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o gcp-cloud-controller-manager cmd/cloud-controller-manager/main.go cmd/cloud-controller-manager/nodeipamcontroller.go cmd/cloud-controller-manager/gkenetworkparamsetcontroller.go
  - chown 64535:64535 /src/gcp-cloud-controller-manager
  - chmod 0755 /src/gcp-cloud-controller-manager
---
image: cloud-provider-gcp/cloud-controller-manager-1-31
fromImage: common/distroless
import:
- image: cloud-provider-gcp/cloud-controller-manager-artifact-1-31
  add: /src/gcp-cloud-controller-manager
  to: /usr/local/bin/cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/cloud-controller-manager"]
---
image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-31
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/cloud-controller-manager/patches/ccm-v30.1.4
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch ccm/v30.1.4 https://github.com/kubernetes/cloud-provider-gcp.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/cloud-controller-manager-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o gcp-cloud-controller-manager cmd/cloud-controller-manager/main.go cmd/cloud-controller-manager/nodeipamcontroller.go cmd/cloud-controller-manager/gkenetworkparamsetcontroller.go
  - chown 64535:64535 /src/gcp-cloud-controller-manager
  - chmod 0755 /src/gcp-cloud-controller-manager
---
image: cloud-provider-gcp/cloud-controller-manager-1-32
fromImage: common/distroless
import:
- image: cloud-provider-gcp/cloud-controller-manager-artifact-1-32
  add: /src/gcp-cloud-controller-manager
  to: /usr/local/bin/cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/cloud-controller-manager"]
---
image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-32
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/cloud-controller-manager/patches/ccm-v30.1.4
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch ccm/v30.1.4 https://github.com/kubernetes/cloud-provider-gcp.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/cloud-controller-manager-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/cloud-controller-manager-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o gcp-cloud-controller-manager cmd/cloud-controller-manager/main.go cmd/cloud-controller-manager/nodeipamcontroller.go cmd/cloud-controller-manager/gkenetworkparamsetcontroller.go
  - chown 64535:64535 /src/gcp-cloud-controller-manager
  - chmod 0755 /src/gcp-cloud-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-gcp/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-gcp/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-gcp/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-gcp/images/cloud-data-discoverer/src
  to:  /src
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /go_lib/cloud-data
  to: /src/go_lib/cloud-data
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /pkg/log
  to: /src/pkg/log
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
shell:
  install:
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
---
image: cloud-provider-gcp/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-gcp/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---

---
image: cloud-provider-gcp/pd-csi-plugin-1-28
fromImage: common/distroless
import:
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-28
  add: /src/bin/gce-pd-csi-driver
  to: /gce-pd-csi-driver
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev_containerized/scsi_id
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-28
  add: /src/deploy/kubernetes/udev/google_nvme_id
  to: /lib/udev_containerized/google_nvme_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/gce-pd-csi-driver"]
---
image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-28
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/pd-csi-plugin/patches/v1.12.13
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.12.13 https://github.com/kubernetes-sigs/gcp-compute-persistent-disk-csi-driver.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/pd-csi-plugin-artifact-1-28
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-28
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - mkdir -p bin
  - CGO_ENABLED=0 go build -ldflags "-extldflags=static -X main.version=v1.12.13" -o bin/gce-pd-csi-driver ./cmd/gce-pd-csi-driver/
---
image: cloud-provider-gcp/pd-csi-plugin-1-29
fromImage: common/distroless
import:
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-29
  add: /src/bin/gce-pd-csi-driver
  to: /gce-pd-csi-driver
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev_containerized/scsi_id
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-29
  add: /src/deploy/kubernetes/udev/google_nvme_id
  to: /lib/udev_containerized/google_nvme_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/gce-pd-csi-driver"]
---
image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-29
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/pd-csi-plugin/patches/v1.12.13
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.12.13 https://github.com/kubernetes-sigs/gcp-compute-persistent-disk-csi-driver.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/pd-csi-plugin-artifact-1-29
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-29
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - mkdir -p bin
  - CGO_ENABLED=0 go build -ldflags "-extldflags=static -X main.version=v1.12.13" -o bin/gce-pd-csi-driver ./cmd/gce-pd-csi-driver/
---
image: cloud-provider-gcp/pd-csi-plugin-1-30
fromImage: common/distroless
import:
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-30
  add: /src/bin/gce-pd-csi-driver
  to: /gce-pd-csi-driver
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev_containerized/scsi_id
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-30
  add: /src/deploy/kubernetes/udev/google_nvme_id
  to: /lib/udev_containerized/google_nvme_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/gce-pd-csi-driver"]
---
image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-30
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/pd-csi-plugin/patches/v1.15.4
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.15.4 https://github.com/kubernetes-sigs/gcp-compute-persistent-disk-csi-driver.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/pd-csi-plugin-artifact-1-30
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-30
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - mkdir -p bin
  - CGO_ENABLED=0 go build -ldflags "-extldflags=static -X main.version=v1.15.4" -o bin/gce-pd-csi-driver ./cmd/gce-pd-csi-driver/
---
image: cloud-provider-gcp/pd-csi-plugin-1-31
fromImage: common/distroless
import:
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-31
  add: /src/bin/gce-pd-csi-driver
  to: /gce-pd-csi-driver
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev_containerized/scsi_id
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-31
  add: /src/deploy/kubernetes/udev/google_nvme_id
  to: /lib/udev_containerized/google_nvme_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/gce-pd-csi-driver"]
---
image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-31
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/pd-csi-plugin/patches/v1.15.4
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.15.4 https://github.com/kubernetes-sigs/gcp-compute-persistent-disk-csi-driver.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/pd-csi-plugin-artifact-1-31
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-31
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - mkdir -p bin
  - CGO_ENABLED=0 go build -ldflags "-extldflags=static -X main.version=v1.15.4" -o bin/gce-pd-csi-driver ./cmd/gce-pd-csi-driver/
---
image: cloud-provider-gcp/pd-csi-plugin-1-32
fromImage: common/distroless
import:
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-32
  add: /src/bin/gce-pd-csi-driver
  to: /gce-pd-csi-driver
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib64
  to: /lib64
  before: install
  includePaths:
  - 'libresolv*'
- image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
  add: /lib/udev/scsi_id
  to: /lib/udev_containerized/scsi_id
  before: setup
- image: cloud-provider-gcp/pd-csi-plugin-artifact-1-32
  add: /src/deploy/kubernetes/udev/google_nvme_id
  to: /lib/udev_containerized/google_nvme_id
  before: setup
imageSpec:
  config:
    entrypoint: ["/gce-pd-csi-driver"]
---
image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-32
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-gcp/images/pd-csi-plugin/patches/v1.15.4
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.15.4 https://github.com/kubernetes-sigs/gcp-compute-persistent-disk-csi-driver.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: cloud-provider-gcp/pd-csi-plugin-artifact-1-32
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: cloud-provider-gcp/pd-csi-plugin-src-artifact-1-32
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - mkdir -p bin
  - CGO_ENABLED=0 go build -ldflags "-extldflags=static -X main.version=v1.15.4" -o bin/gce-pd-csi-driver ./cmd/gce-pd-csi-driver/
---
image: cloud-provider-gcp/pd-csi-plugin-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y e2fsprogs xfsprogs parted btrfs-progs nvme udev
  install:
  - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/btrfs* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fsfreeze /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /sbin/xfs_repair /usr/sbin/nvme /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---

---
image: cloud-provider-yandex/cloud-controller-manager
fromImage: common/distroless
import:
- image: cloud-provider-yandex/cloud-controller-manager-artifact
  add: /src/yandex-cloud-controller-manager
  to: /usr/local/bin/cloud-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/cloud-controller-manager"]
---
image: cloud-provider-yandex/cloud-controller-manager-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
    - git clone --depth 1 --branch v0.32.0 https://github.com/deckhouse/yandex-cloud-controller-manager.git /src
    - cd /src
    - rm -rf .git
---
image: cloud-provider-yandex/cloud-controller-manager-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-yandex/cloud-controller-manager-src-artifact
    add: /src
    to: /src
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/
    - go mod download
  setup:
    - cd /src
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o yandex-cloud-controller-manager cmd/yandex-cloud-controller-manager/main.go
    - chown 64535:64535 /src/yandex-cloud-controller-manager
    - chmod 0755 /src/yandex-cloud-controller-manager

      # exclude modules and images from editions
---
---
image: cloud-provider-yandex/cloud-data-discoverer
fromImage: common/distroless
import:
- image: cloud-provider-yandex/cloud-data-discoverer-artifact
  add: /discoverer
  to: /discoverer
  before: setup
imageSpec:
  config:
    entrypoint: ["/discoverer"]
---
image: cloud-provider-yandex/cloud-data-discoverer-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/030-cloud-provider-yandex/images/cloud-data-discoverer/src
  to:  /src
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /go_lib/cloud-data
  to: /src/go_lib/cloud-data
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
- add: /pkg/log
  to: /src/pkg/log
  excludePaths:
    - "**/*.md"
    - "**/*.yaml"
  stageDependencies:
    install:
      - go.mod
      - go.sum
      - "**/*.go"
shell:
  install:
  - cd /src
  - sed -i -e 's# /deckhouse/go_lib/cloud-data# /src/go_lib/cloud-data#g' go.mod
  - sed -i -e 's# /deckhouse/pkg/log# /src/pkg/log#g' go.mod
---
image: cloud-provider-yandex/cloud-data-discoverer-artifact
final: false
fromImage: builder/golang-alpine
import:
- image: cloud-provider-yandex/cloud-data-discoverer-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /discoverer
  - chown 64535:64535 /discoverer
  - chmod 0755 /discoverer

      # exclude modules and images from editions
---
---
image: cloud-provider-yandex/cloud-metrics-exporter
fromImage: common/distroless
import:
- image: cloud-provider-yandex/cloud-metrics-exporter-artifact
  add: /src/exporter
  to: /exporter
  after: setup
imageSpec:
  config:
    entrypoint: [ "/exporter"]
---
image: cloud-provider-yandex/cloud-metrics-exporter-src-artifact
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-yandex/images/cloud-metrics-exporter
    to: /src
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
      - hack
    stageDependencies:
      install:
        - go.mod
        - go.sum
        - "**/*.go"
        - "*.go"
shell:
  install:
    - cd /src
---
image: cloud-provider-yandex/cloud-metrics-exporter-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-yandex/cloud-metrics-exporter-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o exporter .
  - chown 64535:64535 /src/exporter
  - chmod 0755 /src/exporter

      # exclude modules and images from editions
---
---
image: cloud-provider-yandex/cloud-migrator
fromImage: common/distroless
import:
- image: cloud-provider-yandex/cloud-migrator-artifact
  add: /migrator
  to: /migrator
  before: setup
imageSpec:
  config:
    entrypoint: ["/migrator"]
---
image: cloud-provider-yandex/cloud-migrator-src-artifact
final: false
fromImage: common/src-artifact
git:
  - add: /modules/030-cloud-provider-yandex/images/cloud-migrator/src
    to: /src
    excludePaths:
      - "**/*.md"
      - "**/*.yaml"
      - hack
    stageDependencies:
      install:
        - go.mod
        - go.sum
        - "**/*.go"
        - "*.go"
shell:
  install:
    - cd /src
---
image: cloud-provider-yandex/cloud-migrator-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-yandex/cloud-migrator-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  setup:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /migrator
  - chown 64535:64535 /migrator
  - chmod 0755 /migrator

      # exclude modules and images from editions
---

---
image: cloud-provider-yandex/yandex-csi-plugin
fromImage: common/distroless
import:
- image: cloud-provider-yandex/yandex-csi-plugin-artifact
  add: /go/bin/yandex-csi-driver
  to: /bin/yandex-csi-driver
  before: setup
- image: cloud-provider-yandex/yandex-csi-plugin-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/yandex-csi-driver"]
---
image: cloud-provider-yandex/yandex-csi-plugin-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
    - git clone --depth 1 --branch v0.14.0 https://github.com/deckhouse/yandex-csi-driver.git /go/src/app
    - cd /go/src/app
    - rm -rf .git
---
image: cloud-provider-yandex/yandex-csi-plugin-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
  - image: cloud-provider-yandex/yandex-csi-plugin-src-artifact
    add: /go/src/app
    to: /go/src/app
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /go/src/app
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
    - cd /go/src/app
    - |
      CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a \
      -ldflags '-X github.com/deckhouse/yandex-csi-driver/driver.version=v0.14.0' \
      -o /go/bin/yandex-csi-driver \
      github.com/deckhouse/yandex-csi-driver/cmd/yandex-csi-driver
    - chown 64535:64535 /go/bin/yandex-csi-driver
    - chmod 0755 /go/bin/yandex-csi-driver
---
image: cloud-provider-yandex/yandex-csi-plugin-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
    - apt-get update -y
    - apt-get install -y e2fsprogs xfsprogs parted
  install:
    - /binary_replace.sh -i "/bin/chmod /bin/mount /bin/mkdir /bin/rmdir /bin/umount /bin/findmnt /bin/lsblk /sbin/badblocks /sbin/blockdev /sbin/blk* /sbin/dumpe2fs /sbin/e2* /sbin/findfs /sbin/fsck* /sbin/fstrim /sbin/mke2fs /sbin/mkfs* /sbin/resize2fs /usr/sbin/parted /usr/sbin/xfs*" -o /relocate

      # exclude modules and images from editions
---

---
image: ceph-csi/cephcsi-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/031-ceph-csi/images/cephcsi/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --branch v3.7.2 --depth 1 https://github.com/ceph/ceph-csi.git .
  - git apply /patches/*.patch --verbose
  - git describe --tags --dirty > GIT_COMMIT
  - rm -rf .git vendor
---
image: ceph-csi/cephcsi-binaries-artifact
final: false
fromImage: common/relocate-artifact
import:
- image: ceph-csi/cephcsi-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /root/go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
  - apt-get install -y golang make gcc build-essential librbd-devel librados-devel ceph-common ceph-fuse rbd-nbd e2fsprogs xfsprogs
  - find /var/lib/apt/ /var/cache/apt/ -type f -delete
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/
    - export CGO_ENABLED=1
    - export GIT_COMMIT=$(cat GIT_COMMIT)
    - go mod vendor
    - make cephcsi
    - mv _output/cephcsi /cephcsi
    - /binary_replace.sh -i "/cephcsi /sbin/mount.ceph /usr/bin/ceph-fuse /bin/mount /bin/umount /sbin/fsck /sbin/modprobe /bin/kmod /usr/bin/rbd /usr/bin/rbd-nbd /sbin/blkid /sbin/mkfs /sbin/mkfs.ext4 /sbin/mkfs.xfs /sbin/blockdev /sbin/dumpe2fs /usr/sbin/xfs_io /usr/sbin/xfs_growfs /sbin/resize2fs" -o /relocate
    - rm -rf .git vendor
---
image: ceph-csi/cephcsi
fromImage: common/distroless
import:
  - image: ceph-csi/cephcsi-binaries-artifact
    add: /relocate
    to: /
    before: setup
imageSpec:
  config:
    entrypoint: ["/cephcsi"]

      # exclude modules and images from editions
---
---
image: local-path-provisioner/helper-artifact-dir-manager
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: local-path-provisioner/helper-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o /manager main.go
  - chmod 0777 /manager
---
image: local-path-provisioner/helper
fromImage: common/distroless
import:
 - image: local-path-provisioner/helper-artifact-dir-manager
   add: /manager
   to: /manager
   after: install
---
image: local-path-provisioner/helper-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/031-local-path-provisioner/images/helper/src
  to: /src
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - 'go.mod'
    - 'go.sum'
shell:
  install:
  - cd /src

      # exclude modules and images from editions
---

---
image: local-path-provisioner/local-path-provisioner
fromImage: common/distroless
import:
  - image: local-path-provisioner/local-path-provisioner-artifact
    add: /local-path-provisioner
    to: /usr/bin/local-path-provisioner
    after: install
imageSpec:
  config:
    entrypoint: ["/usr/bin/local-path-provisioner"]
---
image: local-path-provisioner/local-path-provisioner-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/031-local-path-provisioner/images/local-path-provisioner/patches
  to: /patches
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
shell:
  install:
  - git clone --depth 1 --branch v0.0.31 https://github.com/rancher/local-path-provisioner.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git vendor
---
image: local-path-provisioner/local-path-provisioner-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: local-path-provisioner/local-path-provisioner-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.VERSION=0.0.31 -extldflags -static -s -w" -o /local-path-provisioner
  - chown -R 64535:64535 /local-path-provisioner
  - chmod 0700 /local-path-provisioner

      # exclude modules and images from editions
---

---
image: cni-flannel/flanneld-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  install:
  - mkdir -p /relocate/sbin
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
      ln -f -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
    done
    # broken symlinks are not imported from the artifact
    touch /sbin/iptables-wrapper
  - |
    for mode in legacy nft; do
      for basecmd in iptables ip6tables; do
        for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
          ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
        done
      done
    done
---
image: cni-flannel/flanneld-entrypoint-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cni-flannel/flanneld-src-artifact
  add: /src/entrypoint
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src
  - go build -ldflags="-s -w" -o /entrypoint main.go
---
image: cni-flannel/flanneld-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cni-flannel/flanneld-src-artifact
  add: /src/flannel
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache linux-headers build-base
  install:
  - export GO_VERSION=${GOLANG_VERSION}
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - make dist/flanneld
---
image: cni-flannel/flanneld-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/035-cni-flannel/images/flanneld/entrypoint
  to: /src/entrypoint
  stageDependencies:
    install:
    - '**/*'
- add: /modules/035-cni-flannel/images/flanneld/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - mkdir -p /src/flannel
  - cd /src/flannel
  - git clone --depth 1 --branch v0.26.2 https://github.com/flannel-io/flannel.git . && rm -rf /src/flannel/.git
  - git apply /patches/*.patch --verbose
---
image: cni-flannel/flanneld
fromImage: common/distroless
import:
- image: cni-flannel/flanneld-binaries-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: cni-flannel/flanneld-artifact
  add: /src/dist/flanneld
  to: /opt/bin/flanneld
  before: setup
- image: cni-flannel/flanneld-entrypoint-artifact
  add: /entrypoint
  to: /entrypoint
  before: setup
imageSpec:
  config:
    entrypoint: ["/entrypoint"]

      # exclude modules and images from editions
---

---
image: cni-simple-bridge/simple-bridge
fromImage: common/distroless
import:
- image: cni-simple-bridge/simple-bridge-binaries-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: common/python-static
  add: /opt/python-static/bin
  to: /usr/bin
  before: setup
  includePaths:
  - python3*
  - python3
  owner: root
  group: root
- image: common/python-static
  add: /opt/python-static/lib
  to: /usr/lib
  before: setup
  includePaths:
  - python3*
  owner: root
  group: root
- image: registrypackages/d8-curl-artifact-8-9-1
  add: /d8-curl
  to: /usr/bin/curl
  before: setup
- image: common/jq-artifact
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: setup
imageSpec:
  config:
    entrypoint: ["/sbin/iptables-wrapper"]
---

---
image: cni-simple-bridge/simple-bridge-binaries-artifact
final: false
fromImage: common/relocate-artifact
git:
- add: /modules/035-cni-simple-bridge/images/simple-bridge/rootfs
  to: /relocate
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - /binary_replace.sh -i "/bin/awk /bin/cat /bin/rm /bin/echo /usr/bin/tee /bin/sleep /bin/hostname /bin/bash /bin/grep /sbin/ip /usr/sbin/bridge" -o /relocate
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
      rm -f "/relocate/sbin/${cmd}"
      ln -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
    done

      # exclude modules and images from editions
---
---
image: kube-proxy/init-container-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: //modules/036-kube-proxy/images/init-container/src
    to: /src
    stageDependencies:
      install:
        - '**/*'
---
image: kube-proxy/init-container-artifact
fromImage: builder/golang-alpine
final: false
import:
  - image: kube-proxy/init-container-src-artifact
    add: /src
    to: /src
    before: install
shell:
  install:
    - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src
    - go build -ldflags="-s -w" -o entrypoint main.go
---
image: kube-proxy/init-container
fromImage: common/distroless
import:
  - image: kube-proxy/init-container-artifact
    add: /src/entrypoint
    to: /entrypoint
    before: setup
imageSpec:
  config:
    entrypoint: ["/entrypoint"]

      # exclude modules and images from editions
---

---
image: kube-proxy/kube-proxy-artifact
fromImage: common/relocate-artifact
final: false
shell:
  beforeInstall:
    - apt-get install conntrack-tools -y
  install:
    - /binary_replace.sh -i "/usr/sbin/conntrack /usr/lib64/libnetfilter_conntrack.so*" -o /relocate
    - mkdir -p /relocate/sbin
    - |
      for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
        ln -f -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
      done
      # broken symlinks are not imported from the artifact
      touch /sbin/iptables-wrapper
    - |
      for mode in legacy nft; do
        for basecmd in iptables ip6tables; do
          for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
            ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
          done
        done
      done
---
image: kube-proxy/kube-proxy-1-28
fromImage: common/distroless
import:
- image: kube-proxy/kube-proxy-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin/kube-proxy
  to: /usr/local/bin/kube-proxy
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-proxy"]
---
image: kube-proxy/kube-proxy-1-29
fromImage: common/distroless
import:
- image: kube-proxy/kube-proxy-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kube-proxy
  to: /usr/local/bin/kube-proxy
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-proxy"]
---
image: kube-proxy/kube-proxy-1-30
fromImage: common/distroless
import:
- image: kube-proxy/kube-proxy-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: common/kubernetes-artifact-1-30-12
  add: /src/_output/bin/kube-proxy
  to: /usr/local/bin/kube-proxy
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-proxy"]
---
image: kube-proxy/kube-proxy-1-31
fromImage: common/distroless
import:
- image: kube-proxy/kube-proxy-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kube-proxy
  to: /usr/local/bin/kube-proxy
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-proxy"]
---
image: kube-proxy/kube-proxy-1-32
fromImage: common/distroless
import:
- image: kube-proxy/kube-proxy-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: common/kubernetes-artifact-1-32-4
  add: /src/_output/bin/kube-proxy
  to: /usr/local/bin/kube-proxy
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-proxy"]

      # exclude modules and images from editions
---
---
image: registry-packages-proxy/registry-packages-proxy
fromImage: common/distroless
import:
- image: registry-packages-proxy/registry-packages-proxy-artifact
  add: /registry-packages-proxy
  before: setup
imageSpec:
  config:
    entrypoint: ["/registry-packages-proxy"]
---
image: registry-packages-proxy/registry-packages-proxy-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/039-registry-packages-proxy/images/registry-packages-proxy/src
  to: /src
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - 'go.mod'
    - 'go.sum'
- add: /go_lib/registry-packages-proxy
  to: /go_lib/registry-packages-proxy
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - 'go.mod'
    - 'go.sum'
---
image: registry-packages-proxy/registry-packages-proxy-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: registry-packages-proxy/registry-packages-proxy-src-artifact
  add: /src
  to: /src
  before: install
- image: registry-packages-proxy/registry-packages-proxy-src-artifact
  add: /go_lib/registry-packages-proxy
  to: /go_lib/registry-packages-proxy
  before: install
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - go mod download
  setup:
  - cd /src
  - go test ./... -v
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o /registry-packages-proxy cmd/registry-packages-proxy/*.go
  - chown 64535:64535 /registry-packages-proxy
  - chmod 0755 /registry-packages-proxy
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg

      # exclude modules and images from editions
---

---
image: control-plane-manager/control-plane-manager-1-28
fromImage: common/distroless
import:
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin
  to: /
  includePaths:
  - kubeadm
  before: install
- image: control-plane-manager/control-plane-manager-artifact
  add: /src/controller
  to: /controller
  before: install
imageSpec:
  config:
    entrypoint: ["/controller"]
---
image: control-plane-manager/control-plane-manager-1-29
fromImage: common/distroless
import:
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin
  to: /
  includePaths:
  - kubeadm
  before: install
- image: control-plane-manager/control-plane-manager-artifact
  add: /src/controller
  to: /controller
  before: install
imageSpec:
  config:
    entrypoint: ["/controller"]
---
image: control-plane-manager/control-plane-manager-1-30
fromImage: common/distroless
import:
- image: common/kubernetes-artifact-1-30-12
  add: /src/_output/bin
  to: /
  includePaths:
  - kubeadm
  before: install
- image: control-plane-manager/control-plane-manager-artifact
  add: /src/controller
  to: /controller
  before: install
imageSpec:
  config:
    entrypoint: ["/controller"]
---
image: control-plane-manager/control-plane-manager-1-31
fromImage: common/distroless
import:
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin
  to: /
  includePaths:
  - kubeadm
  before: install
- image: control-plane-manager/control-plane-manager-artifact
  add: /src/controller
  to: /controller
  before: install
imageSpec:
  config:
    entrypoint: ["/controller"]
---
image: control-plane-manager/control-plane-manager-1-32
fromImage: common/distroless
import:
- image: common/kubernetes-artifact-1-32-4
  add: /src/_output/bin
  to: /
  includePaths:
  - kubeadm
  before: install
- image: control-plane-manager/control-plane-manager-artifact
  add: /src/controller
  to: /controller
  before: install
imageSpec:
  config:
    entrypoint: ["/controller"]
---
image: control-plane-manager/control-plane-manager-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: control-plane-manager/control-plane-manager-src-artifact
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o controller controller.go node.go util.go pki.go kubeconfig.go converge.go config.go handlers.go etcd.go
---
image: control-plane-manager/control-plane-manager-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-control-plane-manager/images/control-plane-manager/controller
  to: /src
  stageDependencies:
    install:
    - '**/*'

      # exclude modules and images from editions
---

---
image: control-plane-manager/etcd-backup
fromImage: common/distroless
git:
- add: //modules/040-control-plane-manager/images/etcd-backup/entrypoint.sh
  to: /entrypoint.sh
  stageDependencies:
    setup:
    - '**/*'
import:
- image: control-plane-manager/etcd-artifact
  add: /etcdctl
  to: /bin/etcdctl
  before: setup
- image: control-plane-manager/etcd-backup-artifact
  add: /usr/lib/locale/C.utf8
  before: setup
- image: control-plane-manager/etcd-backup-artifact
  add: /relocate
  to: /
  before: setup
imageSpec:
  config:
    entrypoint: ["/entrypoint.sh"]
---
image: control-plane-manager/etcd-backup-artifact
fromImage: common/relocate-artifact
final: false
shell:
  install:
  - /binary_replace.sh -i "/bin/sh /bin/mv /bin/df /bin/du /bin/tail /bin/awk /bin/tar /bin/gzip /bin/chmod" -o /relocate

      # exclude modules and images from editions
---
---
image: control-plane-manager/etcd-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: //modules/040-control-plane-manager/images/etcd/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone -b v3.5.17 --depth 1 https://github.com/etcd-io/etcd.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf tools
  - rm -rf .git
---
image: control-plane-manager/etcd
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: control-plane-manager/etcd-artifact
  add: /
  to: /usr/bin
  includePaths:
  - etcd
  - etcdctl
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/etcd"]
---
image: control-plane-manager/etcd-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: control-plane-manager/etcd-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
    - cd /src/
    - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
    - go mod download
    - cd server && go build -ldflags="-s -w" -o /etcd . && cd ..
    - cd etcdctl && go build -ldflags="-s -w" -o /etcdctl . && cd ..

      # exclude modules and images from editions
---
---
image: control-plane-manager/kube-apiserver-healthcheck
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: control-plane-manager/kube-apiserver-healthcheck-artifact
  add: /src/kube-apiserver-healthcheck
  to: /usr/local/bin/kube-apiserver-healthcheck
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/kube-apiserver-healthcheck"]
---
image: control-plane-manager/kube-apiserver-healthcheck-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: control-plane-manager/kube-apiserver-healthcheck-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o kube-apiserver-healthcheck main.go
  - chown 64535:64535 kube-apiserver-healthcheck
  - chmod 0700 kube-apiserver-healthcheck
---
image: control-plane-manager/kube-apiserver-healthcheck-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-control-plane-manager/images/kube-apiserver-healthcheck/
  to: /src
  includePaths:
  - go.mod
  - go.sum
  - main.go

      # exclude modules and images from editions
---

---
image: control-plane-manager/kube-apiserver-1-28
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin/kube-apiserver
  to: /usr/bin/kube-apiserver
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-apiserver"]
---
image: control-plane-manager/kube-apiserver-1-29
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kube-apiserver
  to: /usr/bin/kube-apiserver
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-apiserver"]
---
image: control-plane-manager/kube-apiserver-1-30
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-30-12
  add: /src/_output/bin/kube-apiserver
  to: /usr/bin/kube-apiserver
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-apiserver"]
---
image: control-plane-manager/kube-apiserver-1-31
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kube-apiserver
  to: /usr/bin/kube-apiserver
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-apiserver"]
---
image: control-plane-manager/kube-apiserver-1-32
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-32-4
  add: /src/_output/bin/kube-apiserver
  to: /usr/bin/kube-apiserver
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-apiserver"]

      # exclude modules and images from editions
---

---
image: control-plane-manager/kube-controller-manager-1-28
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin/kube-controller-manager
  to: /usr/bin/kube-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-controller-manager"]
---
image: control-plane-manager/kube-controller-manager-1-29
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kube-controller-manager
  to: /usr/bin/kube-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-controller-manager"]
---
image: control-plane-manager/kube-controller-manager-1-30
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-30-12
  add: /src/_output/bin/kube-controller-manager
  to: /usr/bin/kube-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-controller-manager"]
---
image: control-plane-manager/kube-controller-manager-1-31
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kube-controller-manager
  to: /usr/bin/kube-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-controller-manager"]
---
image: control-plane-manager/kube-controller-manager-1-32
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-32-4
  add: /src/_output/bin/kube-controller-manager
  to: /usr/bin/kube-controller-manager
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-controller-manager"]

      # exclude modules and images from editions
---

---
image: control-plane-manager/kube-scheduler-1-28
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-28-15
  add: /src/_output/bin/kube-scheduler
  to: /usr/bin/kube-scheduler
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-scheduler"]
---
image: control-plane-manager/kube-scheduler-1-29
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-29-15
  add: /src/_output/bin/kube-scheduler
  to: /usr/bin/kube-scheduler
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-scheduler"]
---
image: control-plane-manager/kube-scheduler-1-30
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-30-12
  add: /src/_output/bin/kube-scheduler
  to: /usr/bin/kube-scheduler
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-scheduler"]
---
image: control-plane-manager/kube-scheduler-1-31
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-31-8
  add: /src/_output/bin/kube-scheduler
  to: /usr/bin/kube-scheduler
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-scheduler"]
---
image: control-plane-manager/kube-scheduler-1-32
fromImage: common/distroless
import:
- image: common/pause
  add: /pause
  to: /pause
  before: setup
- image: common/kubernetes-artifact-1-32-4
  add: /src/_output/bin/kube-scheduler
  to: /usr/bin/kube-scheduler
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/kube-scheduler"]

      # exclude modules and images from editions
---
---
image: control-plane-manager/kubernetes-api-proxy
fromImage: common/nginx-static
import:
- image: control-plane-manager/kubernetes-api-proxy-artifact
  add: /src/kubernetes-api-proxy-reloader
  to: /kubernetes-api-proxy-reloader
  before: install
imageSpec:
  config:
    entrypoint: ["/opt/nginx-static/sbin/nginx", "-g", "daemon off;"]
---
image: control-plane-manager/kubernetes-api-proxy-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: control-plane-manager/kubernetes-api-proxy-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o kubernetes-api-proxy-reloader cmd/main.go
    - chown 64535:64535 kubernetes-api-proxy-reloader
    - chmod 0700 kubernetes-api-proxy-reloader
---
image: control-plane-manager/kubernetes-api-proxy-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/040-control-plane-manager/images/kubernetes-api-proxy/reloader
    to: /src
    stageDependencies:
      install:
        - '**/*'

      # exclude modules and images from editions
---
---
image: node-manager/bashible-apiserver-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/bashible-apiserver/src
  to: /src
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  - hack
  stageDependencies:
    install:
    - go.mod
    - go.sum
    - "**/*.go"
---
image: node-manager/bashible-apiserver-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/bashible-apiserver-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download -x
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o bashible-apiserver .
  - chown 64535:64535 bashible-apiserver
  - chmod 0700 bashible-apiserver
---
image: node-manager/bashible-apiserver
fromImage: common/distroless
import:
- image: node-manager/bashible-apiserver-artifact
  add: /src/bashible-apiserver
  to: /bashible-apiserver
  before: setup
git:
# Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/se-plus/candi/cloud-providers/vsphere
  to: /deckhouse/candi/cloud-providers/vsphere
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/candi/cloud-providers/zvirt
  to: /deckhouse/candi/cloud-providers/zvirt
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/openstack
  to: /deckhouse/candi/cloud-providers/openstack
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/vcd
  to: /deckhouse/candi/cloud-providers/vcd
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/dynamix
  to: /deckhouse/candi/cloud-providers/dynamix
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/huaweicloud
  to: /deckhouse/candi/cloud-providers/huaweicloud
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  to: /deckhouse/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  stageDependencies:
    install:
        - '**/*'

- add: /candi/bashible
  to: /deckhouse/candi/bashible
  stageDependencies:
    beforeSetup:
    - "*"
  includePaths:
  - bundles
  - common-steps
  - bootstrap
  - bashible.sh.tpl

  excludePaths:
  - "**/cluster-bootstrap"
- add: /candi/cloud-providers
  to: /deckhouse/candi/cloud-providers
  stageDependencies:
    beforeSetup:
    - "*"
  includePaths:
  - "*/bashible"
imageSpec:
  config:
    entrypoint: ["/bashible-apiserver", "--tls-cipher-suites", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"]

      # exclude modules and images from editions
---

---
image: node-manager/capi-controller-manager
fromImage: common/distroless
import:
- image: node-manager/capi-controller-manager-artifact
  add: /capi-controller-manager
  to: /capi-controller-manager
  before: setup
---
image: node-manager/capi-controller-manager-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/capi-controller-manager/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.7.5 https://github.com/kubernetes-sigs/cluster-api.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git hack test
---
image: node-manager/capi-controller-manager-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/capi-controller-manager-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash git
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - export CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go build -trimpath -ldflags "-s -w -extldflags \"-static\"" -o bin/manager sigs.k8s.io/cluster-api
  - mv /src/bin/manager /capi-controller-manager
  - chown 64535:64535 /capi-controller-manager
  - chmod 0700 /capi-controller-manager

      # exclude modules and images from editions
---
---
image: node-manager/caps-controller-manager
fromImage: common/distroless
imageSpec:
  config:
    entrypoint: ["/caps-controller-manager"]
import:
- image: node-manager/caps-controller-manager-artifact
  add: /caps-controller-manager
  to: /caps-controller-manager
  before: setup
- image: ssh-static
  add: /ssh/bin
  to: /bin
  before: setup
  includePaths:
    - ssh
---
image: node-manager/caps-controller-manager-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/caps-controller-manager/src
  to: /src
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  - hack
  stageDependencies:
    install:
    - go.mod
    - go.sum
    - "**/*.go"
---
image: node-manager/caps-controller-manager-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/caps-controller-manager-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download -x
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o /caps-controller-manager cmd/main.go
  - chown 64535:64535 /caps-controller-manager
  - chmod 0700 /caps-controller-manager

      # exclude modules and images from editions
---

---
image: node-manager/cluster-autoscaler-1-28-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/cluster-autoscaler/patches/1.28
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - mkdir -p /tmp/autoscaler
  - cd /tmp/autoscaler
  - git clone --depth 1 --branch v1.28.3 https://github.com/gardener/autoscaler.git .
  - git apply /patches/*.patch --verbose
  - mv ./cluster-autoscaler/* /src
  - rm -rf /tmp/autoscaler /src/vendor
---
image: node-manager/cluster-autoscaler-artifact-1-28
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/cluster-autoscaler-1-28-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - go mod download
  - go build -ldflags="-s -w" -o cluster-autoscaler
  - echo "1.28.3-flant" > VERSION
---
image: node-manager/cluster-autoscaler-1-28
fromImage: common/distroless
import:
- image: node-manager/cluster-autoscaler-artifact-1-28
  add: /src
  to: /
  includePaths:
  - cluster-autoscaler
  - VERSION
  before: setup
imageSpec:
  config:
    env: { "container": "docker" }
    entrypoint: ["/cluster-autoscaler"]
---
image: node-manager/cluster-autoscaler-1-29-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/cluster-autoscaler/patches/1.29
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - mkdir -p /tmp/autoscaler
  - cd /tmp/autoscaler
  - git clone --depth 1 --branch v1.29.1 https://github.com/gardener/autoscaler.git .
  - git apply /patches/*.patch --verbose
  - mv ./cluster-autoscaler/* /src
  - rm -rf /tmp/autoscaler /src/vendor
---
image: node-manager/cluster-autoscaler-artifact-1-29
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/cluster-autoscaler-1-29-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - go mod download
  - go build -ldflags="-s -w" -o cluster-autoscaler
  - echo "1.29.1-flant" > VERSION
---
image: node-manager/cluster-autoscaler-1-29
fromImage: common/distroless
import:
- image: node-manager/cluster-autoscaler-artifact-1-29
  add: /src
  to: /
  includePaths:
  - cluster-autoscaler
  - VERSION
  before: setup
imageSpec:
  config:
    env: { "container": "docker" }
    entrypoint: ["/cluster-autoscaler"]
---
image: node-manager/cluster-autoscaler-1-30-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/cluster-autoscaler/patches/1.30
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - mkdir -p /tmp/autoscaler
  - cd /tmp/autoscaler
  - git clone --depth 1 --branch v1.30.0 https://github.com/gardener/autoscaler.git .
  - git apply /patches/*.patch --verbose
  - mv ./cluster-autoscaler/* /src
  - rm -rf /tmp/autoscaler /src/vendor
---
image: node-manager/cluster-autoscaler-artifact-1-30
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/cluster-autoscaler-1-30-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - go mod download
  - go build -ldflags="-s -w" -o cluster-autoscaler
  - echo "1.30.0-flant" > VERSION
---
image: node-manager/cluster-autoscaler-1-30
fromImage: common/distroless
import:
- image: node-manager/cluster-autoscaler-artifact-1-30
  add: /src
  to: /
  includePaths:
  - cluster-autoscaler
  - VERSION
  before: setup
imageSpec:
  config:
    env: { "container": "docker" }
    entrypoint: ["/cluster-autoscaler"]
---
image: node-manager/cluster-autoscaler-1-31-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/cluster-autoscaler/patches/1.31
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - mkdir -p /tmp/autoscaler
  - cd /tmp/autoscaler
  - git clone --depth 1 --branch v1.30.0 https://github.com/gardener/autoscaler.git .
  - git apply /patches/*.patch --verbose
  - mv ./cluster-autoscaler/* /src
  - rm -rf /tmp/autoscaler /src/vendor
---
image: node-manager/cluster-autoscaler-artifact-1-31
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/cluster-autoscaler-1-31-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - go mod download
  - go build -ldflags="-s -w" -o cluster-autoscaler
  - echo "1.30.0-flant" > VERSION
---
image: node-manager/cluster-autoscaler-1-31
fromImage: common/distroless
import:
- image: node-manager/cluster-autoscaler-artifact-1-31
  add: /src
  to: /
  includePaths:
  - cluster-autoscaler
  - VERSION
  before: setup
imageSpec:
  config:
    env: { "container": "docker" }
    entrypoint: ["/cluster-autoscaler"]
---
image: node-manager/cluster-autoscaler-1-32-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/cluster-autoscaler/patches/1.32
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - mkdir -p /tmp/autoscaler
  - cd /tmp/autoscaler
  - git clone --depth 1 --branch v1.30.0 https://github.com/gardener/autoscaler.git .
  - git apply /patches/*.patch --verbose
  - mv ./cluster-autoscaler/* /src
  - rm -rf /tmp/autoscaler /src/vendor
---
image: node-manager/cluster-autoscaler-artifact-1-32
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/cluster-autoscaler-1-32-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - go mod download
  - go build -ldflags="-s -w" -o cluster-autoscaler
  - echo "1.30.0-flant" > VERSION
---
image: node-manager/cluster-autoscaler-1-32
fromImage: common/distroless
import:
- image: node-manager/cluster-autoscaler-artifact-1-32
  add: /src
  to: /
  includePaths:
  - cluster-autoscaler
  - VERSION
  before: setup
imageSpec:
  config:
    env: { "container": "docker" }
    entrypoint: ["/cluster-autoscaler"]

      # exclude modules and images from editions
---
---
image: node-manager/early-oom-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/early-oom/src
  to: /src
---
image: node-manager/early-oom-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/early-oom-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o psi-monitor psi-monitor.go
  - chown 64535:64535 psi-monitor
  - chmod 0700 psi-monitor
---
image: node-manager/early-oom
fromImage: common/distroless
import:
- image: node-manager/early-oom-artifact
  add: /src/psi-monitor
  to: /psi-monitor
  before: setup
imageSpec:
  config:
    entrypoint: ["/psi-monitor"]

      # exclude modules and images from editions
---
---
image: node-manager/fencing-agent-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/040-node-manager/images/fencing-agent/src
  to: /src
---
image: node-manager/fencing-agent-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/fencing-agent-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ go mod download -x
  setup:
  - cd /src
  - CGO_ENABLED=0 GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o fencing-agent ./cmd/main.go
  - chown 64535:64535 /src/fencing-agent
  - chmod 0700 /src/fencing-agent
---
image: node-manager/fencing-agent
fromImage: common/distroless
import:
- image: node-manager/fencing-agent-artifact
  add: /src/fencing-agent
  to: /fencing-agent
  before: setup
imageSpec:
  config:
    entrypoint: ["/fencing-agent"]

      # exclude modules and images from editions
---
image: node-manager/machine-controller-manager
fromImage: common/distroless
fromCacheVersion: "2025.04.29.4"
imageSpec:
  config:
    env: { "WORKDIR": "/" }
    entrypoint: ["/machine-controller-manager"]
import:
- image: node-manager/machine-controller-manager-artifact
  add: /src/machine-controller-manager
  to: /machine-controller-manager
  before: setup
---
image: node-manager/machine-controller-manager-src-artifact
fromCacheVersion: "2025.04.29.1"
fromImage: common/src-artifact
final: false
shell:
  install:
  - git clone --depth 1 --branch v0.36.0-flant.22 https://github.com/deckhouse/mcm.git /src
  - rm -rf /src/.git
---
image: node-manager/machine-controller-manager-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: node-manager/machine-controller-manager-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go build -o machine-controller-manager cmd/machine-controller-manager/controller_manager.go
  - chown 64535:64535 machine-controller-manager
  - chmod 0700 machine-controller-manager

      # exclude modules and images from editions
---
---
image: terraform-manager/base-terraform-manager
final: false
fromImage: common/distroless
imageSpec:
  config:
    env: { "PATH": "/root:/" }
    entrypoint: ["/dhctl"]
import:
- image: dhctl # from main werf.yaml
  add: /dhctl/bin/dhctl
  to: /dhctl
  before: setup
- image: terraform
  add: /terraform/terraform
  to: /root/terraform
  before: setup
git:
- add: /
  to: /deckhouse
  includePaths:
    - "candi/openapi"
    - "candi/terraform_versions.yml"
---
image: terraform-manager/base-terraform-manager-opentofu
final: false
fromImage: common/distroless
imageSpec:
  config:
    env: { "PATH": "/root:/" }
    entrypoint: ["/dhctl"]
import:
- image: dhctl # from main werf.yaml
  add: /dhctl/bin/dhctl
  to: /dhctl
  before: setup
- image: opentofu
  add: /opentofu/opentofu
  to: /root/opentofu
  before: setup
- image: opentofu
  add: /opentofu/opentofu
  to: /root/terraform
  before: setup
git:
- add: /
  to: /deckhouse
  includePaths:
    - "candi/openapi"
    - "candi/terraform_versions.yml"
---
image: terraform-manager/base-terraform-manager-terraform-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/040-terraform-manager/images/base-terraform-manager/patches/terraform
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.14.8 https://github.com/hashicorp/terraform.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: terraform-manager/base-terraform-manager-opentofu-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 --branch v1.9.0 https://github.com/opentofu/opentofu.git /src
  - cd /src
  - rm -rf .git
---
# use artifact for one place import for base and install images
image: terraform
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: terraform-manager/base-terraform-manager-terraform-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  - apk add --no-cache openssh-client
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\"" -o /terraform/terraform .
  - chmod 755 /terraform/terraform
---
# use artifact for one place import for base and install images
image: opentofu
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: terraform-manager/base-terraform-manager-opentofu-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  - apk add --no-cache openssh-client
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\" -X github.com/opentofu/opentofu/version.dev=no" -o /opentofu/opentofu ./cmd/tofu
  - chmod 755 /opentofu/opentofu

      # exclude modules and images from editions
---
image: terraform-manager/terraform-manager-aws
fromImage: terraform-manager/base-terraform-manager
git:
- add: /candi/cloud-providers/aws
  to: /deckhouse/candi/cloud-providers/aws
import:
- image: terraform-provider-aws
  add: /terraform-provider-aws
  to: /plugins/registry.terraform.io/hashicorp/aws/4.50.0/linux_amd64/terraform-provider-aws
  before: setup
---
image: terraform-manager/terraform-manager-aws-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/040-terraform-manager/images/terraform-manager-aws/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v4.50.0 https://github.com/hashicorp/terraform-provider-aws.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: terraform-provider-aws
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: terraform-manager/terraform-manager-aws-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  - apk add --no-cache make bash
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 make build LDFLAGS="-s -w -extldflags \"-static\" -X github.com/hashicorp/terraform-provider-aws/version.ProviderVersion=4.50.0"
  - mv /go/bin/terraform-provider-aws /terraform-provider-aws
  - chmod -R 755 /terraform-provider-aws
  - chown 64535:64535 /terraform-provider-aws

      # exclude modules and images from editions
---
image: terraform-manager/terraform-manager-azure
fromImage: terraform-manager/base-terraform-manager
git:
- add: /candi/cloud-providers/azure
  to: /deckhouse/candi/cloud-providers/azure
import:
- image: terraform-provider-azure
  add: /terraform-provider-azurerm
  to: /plugins/registry.terraform.io/hashicorp/azurerm/2.36.0/linux_amd64/terraform-provider-azurerm
  before: setup
---
image: terraform-manager/terraform-manager-azure-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/040-terraform-manager/images/terraform-manager-azure/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v2.36.0 https://github.com/hashicorp/terraform-provider-azurerm.git /src
  - cd /src
  - rm -rf vendor/
  - rm -rf examples/
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: terraform-provider-azure
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: terraform-manager/terraform-manager-azure-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make git openssh-client
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags \"-static\"" -o /terraform-provider-azurerm .
    - chmod -R 755 /terraform-provider-azurerm
    - chown 64535:64535 /terraform-provider-azurerm

      # exclude modules and images from editions
---
---
image: terraform-manager/terraform-manager-gcp
fromImage: terraform-manager/base-terraform-manager
git:
- add: /candi/cloud-providers/gcp
  to: /deckhouse/candi/cloud-providers/gcp
import:
- image: terraform-provider-gcp
  add: /terraform-provider-gcp
  to: /plugins/registry.terraform.io/hashicorp/google/3.48.0/linux_amd64/terraform-provider-google
  before: setup
---
image: terraform-manager/terraform-manager-gcp-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/040-terraform-manager/images/terraform-manager-gcp/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v3.48.0 https://github.com/hashicorp/terraform-provider-google.git .
  - git apply /patches/*.patch --verbose
  - rm -rf .git google/test-fixtures/appengine/hello-world-flask
---
image: terraform-provider-gcp
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
import:
- image: terraform-manager/terraform-manager-gcp-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - go mod download
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o terraform-provider-gcp -ldflags="-s -w -extldflags \"-static\" -X github.com/hashicorp/terraform-provider-google/version.ProviderVersion=3.48.0"
  - mv terraform-provider-gcp /terraform-provider-gcp
  - chmod -R 755 /terraform-provider-gcp
  - chown 64535:64535 /terraform-provider-gcp

      # exclude modules and images from editions
---
image: terraform-manager/terraform-manager-yandex
fromImage: terraform-manager/base-terraform-manager-opentofu
git:
- add: /candi/cloud-providers/yandex
  to: /deckhouse/candi/cloud-providers/yandex
import:
- image: terraform-provider-yandex
  add: /terraform-provider-yandex
  to: /plugins/registry.opentofu.org/yandex-cloud/yandex/0.83.0/linux_amd64/terraform-provider-yandex
  before: setup
---
image: terraform-manager/terraform-manager-yandex-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/040-terraform-manager/images/terraform-manager-yandex/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.83.0 https://github.com/yandex-cloud/terraform-provider-yandex.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: terraform-provider-yandex
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: terraform-manager/terraform-manager-yandex-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - export GOPROXY=https://proxy.golang.org/
  - cd /src
  - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 make build LDFLAGS="-s -w -extldflags \"-static\" -X github.com/yandex-cloud/terraform-provider-yandex/version.ProviderVersion=0.83.0"
  - mv /go/bin/terraform-provider-yandex /terraform-provider-yandex
  - chmod -R 755 /terraform-provider-yandex
  - chown 64535:64535 /terraform-provider-yandex

      # exclude modules and images from editions
---
---
image: kube-dns/sts-pods-hosts-appender-init-container-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/042-kube-dns/images/sts-pods-hosts-appender-init-container/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: kube-dns/sts-pods-hosts-appender-init-container-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: kube-dns/sts-pods-hosts-appender-init-container-src-artifact
    add: /src
    to: /src
    before: install
shell:
  install:
    - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd src/
    - go build -ldflags="-s -w" -o render-etc-hosts-with-cluster-domain-aliases main.go
---
image: kube-dns/sts-pods-hosts-appender-init-container
fromImage: common/distroless
import:
  - image: kube-dns/sts-pods-hosts-appender-init-container-artifact
    add: /src/render-etc-hosts-with-cluster-domain-aliases
    to: /render-etc-hosts-with-cluster-domain-aliases
    before: setup
imageSpec:
  config:
    entrypoint: ["/render-etc-hosts-with-cluster-domain-aliases"]

      # exclude modules and images from editions
---
---
image: kube-dns/sts-pods-hosts-appender-webhook-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: //modules/042-kube-dns/images/sts-pods-hosts-appender-webhook/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: kube-dns/sts-pods-hosts-appender-webhook-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: kube-dns/sts-pods-hosts-appender-webhook-src-artifact
    add: /src
    to: /src
    before: install
shell:
  install:
    - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd src/
    - go build -ldflags="-s -w" -o sts-pods-hosts-appender-webhook main.go
---
image: kube-dns/sts-pods-hosts-appender-webhook
fromImage: common/distroless
import:
  - image: kube-dns/sts-pods-hosts-appender-webhook-artifact
    add: /src/sts-pods-hosts-appender-webhook
    to: /sts-pods-hosts-appender-webhook
    before: setup
imageSpec:
  config:
    entrypoint: ["/sts-pods-hosts-appender-webhook"]

      # exclude modules and images from editions
---

---
image: snapshot-controller/snapshot-controller
fromImage: common/distroless
import:
- image: common/csi-external-snapshotter-artifact-1-32
  add: /snapshot-controller
  to: /snapshot-controller
  before: setup
imageSpec:
  config:
    entrypoint: ["/snapshot-controller"]

      # exclude modules and images from editions
---

---
image: snapshot-controller/snapshot-validation-webhook
fromImage: common/distroless
import:
  - image: common/csi-external-snapshotter-artifact-1-32
    add: /snapshot-validation-webhook
    to: /snapshot-validation-webhook
    before: setup
imageSpec:
  config:
    entrypoint: ["/snapshot-validation-webhook"]

      # exclude modules and images from editions
---

---
image: network-policy-engine/kube-router-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  - apt-get install -y ipset conntrack-tools
  install:
  - /binary_replace.sh -i "/usr/lib64/libnetfilter_conntrack.so* /sbin/ipset /sbin/ip /usr/sbin/conntrack" -o /relocate
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore ip6tables-nft ip6tables-nft-restore ip6tables-nft-save iptables-nft iptables-nft-restore iptables-nft-save; do
      ln -f -s /iptables-wrapper "/relocate/sbin/${cmd}"
    done
    # broken symlinks are not imported from the artifact
    touch /iptables-wrapper
---
image: network-policy-engine/kube-router-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - git clone --depth 1 --branch v2.0.1 https://github.com/cloudnativelabs/kube-router.git /src
  - cd /src
  - git describe --tags --dirty > GIT_COMMIT
  - rm -rf .git
---
image: network-policy-engine/kube-router-artifact
final: false
import:
- image: network-policy-engine/kube-router-src-artifact
  add: /src
  to: /src
  before: install
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
shell:
  install:
  - cd /src
  - GIT_COMMIT=$(cat GIT_COMMIT)
  - BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)
  - export GOPROXY=https://proxy.golang.org/
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-X github.com/cloudnativelabs/kube-router/v2/pkg/version.Version=${GIT_COMMIT} -X github.com/cloudnativelabs/kube-router/v2/pkg/version.BuildDate=${BUILD_DATE}" -o kube-router cmd/kube-router/kube-router.go
---
image: network-policy-engine/kube-router
fromImage: common/distroless
import:
- image: network-policy-engine/kube-router-artifact
  add: /src/kube-router
  to: /opt/bin/kube-router
  before: setup
- image: network-policy-engine/kube-router-binaries-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /iptables-wrapper
  before: setup
imageSpec:
  config:
    entrypoint: ["/opt/bin/kube-router"]

      # exclude modules and images from editions
---

image: cert-manager/cert-manager-acme-solver
fromImage: common/distroless
import:
- image: cert-manager/cert-manager-controller-artifact-1-17-1
  add: /acmesolver-linux-amd64
  to: /bin/acmesolver
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/acmesolver"]

      # exclude modules and images from editions
---

image: cert-manager/cert-manager-cainjector
fromImage: common/distroless
import:
- image: cert-manager/cert-manager-controller-artifact-1-17-1
  add: /cainjector-linux-amd64
  to: /bin/cainjector
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/cainjector"]

      # exclude modules and images from editions
---

image: cert-manager/cert-manager-controller
fromImage: common/distroless
import:
- image: cert-manager/cert-manager-controller-artifact-1-17-1
  add: /controller-linux-amd64
  to: /bin/cert-manager-controller
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/cert-manager-controller"]
---
image: cert-manager/cert-manager-controller-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/101-cert-manager/images/cert-manager-controller/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone -b "v1.17.1" --single-branch --depth=1 https://github.com/jetstack/cert-manager.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - git describe --tags --always --match='v*' --abbrev=14 --dirty > VERSION
  - git describe --tags --always --match='v*' --abbrev=0 | grep -q '-' && echo true || echo false > IS_PRERELEASE
  - git rev-parse HEAD > GITCOMMIT
  - git show -s --format=%ct HEAD > GITEPOCH
  - rm -rf /src/.git
---
image: cert-manager/cert-manager-controller-artifact-1-17-1
from: registry.deckhouse.io/base_images/golang:1.23.6-bullseye@sha256:fad5b33791a319ba1c910a03a33575ea34fc8e142695a64be9a1a228e74af11e
final: false
import:
- image: cert-manager/cert-manager-controller-src-artifact
  add: /src
  to: /src
  before: install
- image: common/jq-artifact
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # 5 years 157680000
  - |
      echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
      echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
      echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
  # Replace debian repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update
  - apt-get install -y rsync
  install:
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src
  - export RELEASE_VERSION="v1.17.1-flant"
  - make VERSION="$(cat VERSION)" IS_PRERELEASE="$(cat IS_PRERELEASE)" GITCOMMIT="$(cat GITCOMMIT)" GITEPOCH="$(cat GITEPOCH)" CTR=jq _bin/server/controller-linux-amd64 _bin/server/acmesolver-linux-amd64 _bin/server/webhook-linux-amd64 _bin/server/cainjector-linux-amd64
  - cp _bin/server/controller-linux-amd64 _bin/server/acmesolver-linux-amd64 _bin/server/webhook-linux-amd64 _bin/server/cainjector-linux-amd64 /
  - chown 64535:64535 /controller-linux-amd64 /acmesolver-linux-amd64 /webhook-linux-amd64 /cainjector-linux-amd64
  - chmod 700 /controller-linux-amd64 /acmesolver-linux-amd64 /webhook-linux-amd64 /cainjector-linux-amd64

      # exclude modules and images from editions
---

image: cert-manager/cert-manager-webhook
fromImage: common/distroless
import:
- image: cert-manager/cert-manager-controller-artifact-1-17-1
  add: /webhook-linux-amd64
  to: /bin/webhook
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/webhook"]

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/istio/istio/blob/1.19.7/cni/deployments/kubernetes/Dockerfile.install-cni
image: istio/cni-v1x19x7
fromImage: common/distroless
import:
- image: istio/cni-v1x19x7-build-artifact
  add: /src/istio/out/istio-cni
  to: /opt/cni/bin/istio-cni
  owner: 1337
  group: 1337
  after: setup
- image: istio/cni-v1x19x7-build-artifact
  add: /src/istio/out/install-cni
  to: /usr/local/bin/install-cni
  owner: 1337
  group: 1337
  after: setup
imageSpec:
  config:
    env: {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/cni/bin"}
    workingDir: "/opt/cni/bin"
    user: "1337:1337"
    entrypoint: ["/usr/local/bin/install-cni"]
---
image: istio/cni-v1x19x7-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio
  to: /src/istio
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - cd /src/istio/
  - echo 1.19.7 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/cni/cmd/install-cni/
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/cni/cmd/istio-cni/
  - strip /src/istio/out/install-cni
  - strip /src/istio/out/istio-cni
  - chmod 0700 /src/istio/out/install-cni /src/istio/out/istio-cni
  - chown 1337:1337 /src/istio/out/istio-cni

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/istio/istio/blob/1.21.6/cni/deployments/kubernetes/Dockerfile.install-cni
image: istio/cni-v1x21x6
fromImage: common/distroless
import:
- image: istio/cni-v1x21x6-build-artifact
  add: /src/istio/out/istio-cni
  to: /opt/cni/bin/istio-cni
  owner: 1337
  group: 1337
  after: setup
- image: istio/cni-v1x21x6-build-artifact
  add: /src/istio/out/install-cni
  to: /usr/local/bin/install-cni
  owner: 1337
  group: 1337
  after: setup
imageSpec:
  config:
    env: {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/cni/bin"}
    workingDir: "/opt/cni/bin"
    user: "1337:1337"
    entrypoint: ["/usr/local/bin/install-cni"]
---
image: istio/cni-v1x21x6-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio
  to: /src/istio
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - cd /src/istio/
  - echo 1.21.6 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - go mod download
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/cni/cmd/install-cni/
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/cni/cmd/istio-cni/
  - strip /src/istio/out/install-cni
  - strip /src/istio/out/istio-cni
  - chmod 0700 /src/istio/out/install-cni /src/istio/out/istio-cni
  - chown 1337:1337 /src/istio/out/istio-cni

      # exclude modules and images from editions
---
---
---
image: istio/common-v1x19x7-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/110-istio/images/common-v1x19x7/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 1.19.7 https://github.com/istio/istio.git /src/istio/
  - cd /src/istio/
  - git apply --verbose /patches/001-istio-apply_go.patch /patches/002-istio-go-mod.patch
  - rm -rf /src/istio/.git
  - git clone --depth 1 --branch v1.67.2 https://github.com/istio/kiali.git /src/kiali/
  - cd /src/kiali/
  - git apply --verbose /patches/001-kiali-node.patch /patches/002-kiali-go-mod.patch
  - rm -rf /src/kiali/.git

  # getting rid of unused vulnerable code
  - rm -rf /src/istio/samples

      # exclude modules and images from editions
---
---
---
image: istio/common-v1x21x6-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/110-istio/images/common-v1x21x6/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 1.21.6 https://github.com/istio/istio.git /src/istio/
  - cd /src/istio/
  - git apply --verbose /patches/001-istio-apply_go.patch /patches/002-istio-gomod_gosum.patch /patches/003-istio-server_fmtText.patch
  - rm -rf /src/istio/.git
  - git clone --depth 1 --branch v1.81.0 https://github.com/istio/kiali.git /src/kiali/
  - cd /src/kiali/
  - git apply --verbose /patches/001-kiali-go-mod.patch
  - rm -rf /src/kiali/.git

  # getting rid of unused vulnerable code
  - rm -rf /src/istio/samples

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/kiali/kiali/blob/v1.67.2/deploy/docker/Dockerfile-distroless
image: istio/kiali-v1x19x7
fromImage: common/alt-p11
import:
- image: istio/kiali-v1x19x7-backend-build-artifact
  add: /src/kiali/out/kiali
  to: /opt/kiali/kiali
  before: install
- image: istio/kiali-v1x19x7-frontend-build-artifact
  add: /src/kiali/frontend/build
  to: /opt/kiali/console
  before: install
shell:
  install:
  - adduser --no-create-home --uid 1000 kiali
  - chown -R kiali:kiali /opt/kiali/console
  - chmod -R g=u /opt/kiali/console
imageSpec:
  config:
    user: "1000"
    workingDir: "/opt/kiali"
    entrypoint: ["/opt/kiali/kiali"]
---
image: istio/kiali-v1x19x7-backend-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: istio/common-v1x19x7-src-artifact
  add: /src/kiali
  to: /src/kiali
  before: setup
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  setup:
  - cd /src/kiali/
  - echo v1.67.2 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-X main.version=${kialiVersion}'
  - go mod download
  - go build -o /src/kiali/out/kiali /src/kiali/
  - strip /src/kiali/out/kiali
  - chmod 0755 /src/kiali/out/kiali
---
image: istio/kiali-v1x19x7-frontend-build-artifact
final: false
from: registry.deckhouse.io/base_images/node:16.13.0-alpine3.14@sha256:5277c7d171e02ee76417bb290ef488aa80e4e64572119eec0cb9fffbcffb8f6a
import:
- image: istio/common-v1x19x7-src-artifact
  add: /src/kiali
  to: /src/kiali
  before: setup
shell:
  setup:
  
  - cd /src/kiali/frontend
  - yarn install --frozen-lockfile
  - yarn run build

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/kiali/kiali/blob/v1.81.0/deploy/docker/Dockerfile-distroless
image: istio/kiali-v1x21x6
fromImage: common/alt-p11
import:
- image: istio/kiali-v1x21x6-backend-build-artifact
  add: /src/kiali/out/kiali
  to: /opt/kiali/kiali
  before: install
- image: istio/kiali-v1x21x6-frontend-build-artifact
  add: /src/kiali/frontend/build
  to: /opt/kiali/console
  before: install
shell:
  install:
  - adduser --no-create-home --uid 1000 kiali
  - chown -R kiali:kiali /opt/kiali/console
  - chmod -R g=u /opt/kiali/console
imageSpec:
  config:
    user: "1000"
    workingDir: "/opt/kiali"
    entrypoint: ["/opt/kiali/kiali"]
---
image: istio/kiali-v1x21x6-backend-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: istio/common-v1x21x6-src-artifact
  add: /src/kiali
  to: /src/kiali
  before: setup
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  setup:
  - cd /src/kiali/
  - echo v1.81.0 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-X main.version=${kialiVersion}'
  - go mod download
  - go build -o /src/kiali/out/kiali /src/kiali/
  - strip /src/kiali/out/kiali
  - chmod 0755 /src/kiali/out/kiali
---
image: istio/kiali-v1x21x6-frontend-build-artifact
final: false
from: registry.deckhouse.io/base_images/node:20.11.0-alpine3.18@sha256:bd2eb17dcdc3541d4986bebcfc997a24c499358827899b1029af3601d4c4569d
import:
- image: istio/common-v1x21x6-src-artifact
  add: /src/kiali
  to: /src/kiali
  before: setup
shell:
  setup:
  
  - cd /src/kiali/frontend
  - yarn install --frozen-lockfile
  - yarn run build

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/istio/istio/blob/1.19.7/operator/docker/Dockerfile.operator
image: istio/operator-v1x19x7
fromImage: common/distroless
import:
- image: istio/operator-v1x19x7-build-artifact
  add: /src/istio/out/operator
  to: /usr/local/bin/operator
  owner: 1337
  group: 1337
  after: setup
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio/manifests
  to: /var/lib/istio/manifests
  owner: 1337
  group: 1337
  after: setup
imageSpec:
  config:
    user: "1337:1337"
    entrypoint: ["/usr/local/bin/operator"]
---
image: istio/operator-v1x19x7-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio
  to: /src/istio
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - cd /src/istio/
  - echo 1.19.7 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/operator/cmd/operator/
  - strip /src/istio/out/operator
  - chmod 0700 /src/istio/out/operator
  - chown 1337:1337 /src/istio/out/operator

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/istio/istio/blob/1.21.6/operator/docker/Dockerfile.operator
image: istio/operator-v1x21x6
fromImage: common/distroless
import:
- image: istio/operator-v1x21x6-build-artifact
  add: /src/istio/out/operator
  to: /usr/local/bin/operator
  after: setup
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio/manifests
  to: /var/lib/istio/manifests
  after: setup
imageSpec:
  config:
    user: "1337:1337"
    entrypoint: ["/usr/local/bin/operator"]
---
image: istio/operator-v1x21x6-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio
  to: /src/istio
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - cd /src/istio/
  - echo 1.21.6 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - go mod download
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/operator/cmd/operator/
  - strip /src/istio/out/operator
  - chmod 0700 /src/istio/out/operator
  - chown 1337:1337 /src/istio/out/operator

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/istio/istio/blob/1.19.7/pilot/docker/Dockerfile.pilot
image: istio/pilot-v1x19x7
fromImage: common/distroless
import:
- image: istio/pilot-v1x19x7-build-artifact
  add: /src/istio/out/pilot-discovery
  to: /usr/local/bin/pilot-discovery
  owner: 1337
  group: 1337
  after: setup
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio/tools/packaging/common/envoy_bootstrap.json
  to: /var/lib/istio/envoy/envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio/tools/packaging/common/gcp_envoy_bootstrap.json
  to: /var/lib/istio/envoy/gcp_envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
imageSpec:
  config:
    user: "1337:1337"
    entrypoint: ["/usr/local/bin/pilot-discovery"]
---
image: istio/pilot-v1x19x7-build-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio
  to: /src/istio
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  setup:
  - cd /src/istio/
  - echo 1.19.7 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/pilot/cmd/pilot-discovery/
  - strip /src/istio/out/pilot-discovery
  - chmod 0700 /src/istio/out/pilot-discovery
  - chown 1337:1337 /src/istio/out/pilot-discovery

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/istio/istio/blob/1.21.6/pilot/docker/Dockerfile.pilot
image: istio/pilot-v1x21x6
fromImage: common/distroless
import:
- image: istio/pilot-v1x21x6-build-artifact
  add: /src/istio/out/pilot-discovery
  to: /usr/local/bin/pilot-discovery
  owner: 1337
  group: 1337
  after: setup
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio/tools/packaging/common/envoy_bootstrap.json
  to: /var/lib/istio/envoy/envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio/tools/packaging/common/gcp_envoy_bootstrap.json
  to: /var/lib/istio/envoy/gcp_envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
imageSpec:
  config:
    user: "1337:1337"
    entrypoint: ["/usr/local/bin/pilot-discovery"]
---
image: istio/pilot-v1x21x6-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio
  to: /src/istio
  before: setup
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  setup:
  - cd /src/istio/
  - echo 1.21.6 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - go mod download
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/pilot/cmd/pilot-discovery/
  - strip /src/istio/out/pilot-discovery
  - chmod 0700 /src/istio/out/pilot-discovery
  - chown 1337:1337 /src/istio/out/pilot-discovery

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/istio/istio/blob/1.19.7/docker/Dockerfile.base
#      and https://github.com/istio/istio/blob/1.19.7/pilot/docker/Dockerfile.proxyv2
image: istio/proxyv2-v1x19x7
fromImage: common/alt-p11
import:
- image: istio/proxyv2-v1x19x7-build-agent-artifact
  add: /src/istio/out/pilot-agent
  to: /usr/local/bin/pilot-agent
  owner: 1337
  group: 1337
  after: setup
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio/tools/packaging/common/envoy_bootstrap.json
  to: /var/lib/istio/envoy/envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio/tools/packaging/common/gcp_envoy_bootstrap.json
  to: /var/lib/istio/envoy/gcp_envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
- image: istio/proxyv2-v1x19x7-binary-artifact
  add: /usr/local/bin/envoy
  to: /usr/local/bin/envoy
  owner: 1337
  group: 1337
  after: setup
- image: istio/proxyv2-v1x19x7-binaries-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: istio/proxyv2-v1x19x7-library-artifact
  add: /usr/lib64/librt.so.1
  to: /usr/lib64/librt.so.1
  before: install
- image: istio/proxyv2-v1x19x7-library-artifact
  add: /usr/lib64/libpthread.so.0
  to: /usr/lib64/libpthread.so.0
  before: install
shell:
  beforeInstall:
  - |
    apt-get update && \
    apt-get install -y ca-certificates curl
  - update-ca-trust
  - apt-get clean
  - rm -rf  /var/log/*log /var/lib/apt/lists/* /var/log/apt/* /var/lib/dpkg/*-old /var/cache/debconf/*-old
  - update-alternatives --set iptables /usr/sbin/iptables-legacy
  - update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
  install:
  - chmod 0644 /usr/lib64/librt.so.1
  - chmod 0644 /usr/lib64/libpthread.so.0
  - useradd -m --uid 1337 istio-proxy
  - echo istio-proxy ALL=NOPASSWD:ALL | tee -a /etc/sudoers
imageSpec:
  config:
    user: "1337:1337"
    env: { "ISTIO_META_ISTIO_PROXY_SHA": "istio-proxy:af5e0ef2c1473f0f4e61f78adf81c85ff6389f87",  "ISTIO_META_ISTIO_VERSION": "1.19.7" }
    workingDir: "/"
    entrypoint: ["/usr/local/bin/pilot-agent"]
---
image: istio/proxyv2-v1x19x7-binary-artifact
from: istio/proxyv2:1.19.7@sha256:680eac0faff1835f994ba9047750d7cfe989e868324a933a38d6a6cb80779b33
final: false
---
image: istio/proxyv2-v1x19x7-build-agent-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: istio/common-v1x19x7-src-artifact
  add: /src/istio
  to: /src/istio
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - cd /src/istio/
  - echo 1.19.7 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - go mod vendor
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/pilot/cmd/pilot-agent/
  - strip /src/istio/out/pilot-agent
  - chmod 0555 /src/istio/out/pilot-agent
  - chown 1337:1337 /src/istio/out/pilot-agent
---
image: istio/proxyv2-v1x19x7-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  install:
  - mkdir -p /relocate/sbin
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
      ln -f -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
    done
    # broken symlinks are not imported from the artifact
    touch /sbin/iptables-wrapper
  - |
    for mode in legacy nft; do
      for basecmd in iptables ip6tables; do
        for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
          ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
        done
      done
    done
---
image: istio/proxyv2-v1x19x7-library-artifact
fromImage: common/alt-p11
final: false
shell:
  beforeInstall:
  - |
    apt-get update && \
    apt-get install -y glibc
  - apt-get clean
  - rm -rf  /var/log/*log /var/lib/apt/lists/* /var/log/apt/* /var/lib/dpkg/*-old /var/cache/debconf/*-old

      # exclude modules and images from editions
---
---
---
# Based on https://github.com/istio/istio/blob/1.21.6/docker/Dockerfile.base
#      and https://github.com/istio/istio/blob/1.21.6/pilot/docker/Dockerfile.proxyv2
image: istio/proxyv2-v1x21x6
fromImage: common/alt-p11
import:
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio/tools/packaging/common/envoy_bootstrap.json
  to: /var/lib/istio/envoy/envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio/tools/packaging/common/gcp_envoy_bootstrap.json
  to: /var/lib/istio/envoy/gcp_envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
- image: istio/proxyv2-v1x21x6-agent-artifact
  add: /src/istio/out/pilot-agent
  to: /usr/local/bin/pilot-agent
  owner: 1337
  group: 1337
  after: setup
- image: istio/proxyv2-v1x21x6-build-envoy-artifact
  add: /src/proxy/bin/envoy
  to: /usr/local/bin/envoy
  owner: 1337
  group: 1337
  after: setup
- image: istio/proxyv2-v1x21x6-binaries-artifact
  add: /relocate
  to: /
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: registrypackages/d8-curl-artifact-8-9-1
  add: /d8-curl
  to: /usr/bin/curl
  before: setup
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get update && apt-get install -y ca-certificates
  - update-ca-trust
  - apt-get clean
  - rm -rf  /var/log/*log /var/lib/apt/lists/* /var/log/apt/* /var/lib/dpkg/*-old /var/cache/debconf/*-old
  install:
  - useradd -m --uid 1337 istio-proxy
  - echo istio-proxy ALL=NOPASSWD:ALL | tee -a /etc/sudoers
imageSpec:
  config:
    user: "1337:1337"
    env: { "ISTIO_META_ISTIO_PROXY_SHA": "istio-proxy:78bd2d9b284978e170a49cd13decd5f952544489", "ISTIO_META_ISTIO_VERSION": "1.21.6" }
    workingDir: "/"
    entrypoint: ["/usr/local/bin/pilot-agent"]
---
#=====================================================================================================
---
image: istio/proxyv2-v1x21x6-agent-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: istio/common-v1x21x6-src-artifact
  add: /src/istio
  to: /src/istio
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache bash git binutils
  install:
  - cd /src/istio/
  - echo 1.21.6 > version
  - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - go mod vendor
  - common/scripts/gobuild.sh /src/istio/out/ -tags=agent,disable_pgv /src/istio/pilot/cmd/pilot-agent
  #
  - strip /src/istio/out/pilot-agent
  #
  - chmod 0555 /src/istio/out/pilot-agent
  - chown 1337:1337 /src/istio/out/pilot-agent
---
image: istio/proxyv2-v1x21x6-build-envoy-artifact
fromImage: istio/proxyv2-v1x21x6-build-image-artifact
final: false
import:
- image: istio/proxyv2-v1x21x6-src-artifact
  add: /src/proxy
  to: /src/proxy
  before: install
- image: istio/proxyv2-v1x21x6-build-libcxx-artifact
  add: /opt/libcxx
  to: /opt/libcxx
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - mkdir -p /tmp/bazel-cache
  - git clone --depth 1 --branch v1.21.6-5c3dc559371181d5baa4a7533c36f2370fc97581-alt-v1 https://github.com/istio/envoy-build-cache.git /tmp/bazel-cache
  - rm -rf /tmp/bazel-cache/.git
  - mkdir -p /tmp/bazel-deps
  - git clone --depth 1 --branch v1.21.6-5c3dc559371181d5baa4a7533c36f2370fc97581-alt-v1 https://github.com/istio/envoy-build-deps.git /tmp/bazel-deps
  - rm -rf /tmp/bazel-deps/.git
  #
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - export BAZEL_VERSION="6.3.2" USE_BAZEL_VERSION="6.3.2"
  - cd /src/proxy
  - go mod download
  - sed -i '/^build --enable_platform_specific_config/a build --linkopt=-L/opt/libcxx/lib'          envoy.bazelrc
  - sed -i '/^build --enable_platform_specific_config/a build --linkopt=-Wl,-rpath,/opt/libcxx/lib' envoy.bazelrc
  - sed -i 's|build:libc++ --action_env=BAZEL_LINKOPTS=-lm:-pthread|build:libc++ --action_env=BAZEL_LINKOPTS=-lm:-lpthread|' envoy.bazelrc
  - sed -i 's|ENVOY_SHA = "94aa5f7f82fb543e7fbc011ea398ac12cc396817"|ENVOY_SHA = "5c3dc559371181d5baa4a7533c36f2370fc97581"|' WORKSPACE
  - sed -i 's|ENVOY_SHA256 = "092784be59d19e99343afc095c1a65eca916b0b3f218d48545a6f0d43cdd5885"|ENVOY_SHA256 = "17f36c4267570e64123e3f08cdf8fc9442634572c5dc87f3f4192d953a4d29bf"|' WORKSPACE
  #
  - export BAZEL_OUTPUT_BASE=$(bazel info output_base)
  - mkdir -p ${BAZEL_OUTPUT_BASE}/external
  - tar -zxf /tmp/bazel-deps/external.tar.gz -C ${BAZEL_OUTPUT_BASE}/external
  - rm -rf /tmp/bazel-deps
  #
  - bazel build --disk_cache=/tmp/bazel-cache --nofetch --stamp --config=release //:envoy
  - mkdir /src/proxy/bin
  - mv /src/proxy/bazel-bin/envoy /src/proxy/bin/
  - rm -rf /src/proxy/.git
  - rm -rf /root/.cache /tmp/bazel-cache
---
image: istio/proxyv2-v1x21x6-build-libcxx-artifact
fromImage: istio/proxyv2-v1x21x6-build-image-artifact
final: false
import:
- image: istio/proxyv2-v1x21x6-src-artifact
  add: /src/llvm
  to: /src/llvm
  before: install
shell:
  install:
  - export CCACHE_DIR="/tmp/ccache-dir"
  - mkdir -p /opt/libcxx
  - cd /tmp/
  - ccache --zero-stats || true
  - ccache --show-stats -v || true
  - |
    cmake \
    -GNinja \
    -DLLVM_ENABLE_PROJECTS="libcxxabi;libcxx" \
    -DLLVM_USE_LINKER=lld \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    -DLLVM_CCACHE_BUILD="ON" \
    -DLLVM_CCACHE_DIR="/tmp/ccache-dir" \
    -DLLVM_CCACHE_MAXSIZE="0" \
    -DCMAKE_INSTALL_PREFIX="/opt/libcxx" /src/llvm/llvm
  setup:
  - export CCACHE_DIR="/tmp/ccache-dir"
  - cd /tmp/
  - ccache --show-stats -v || true
  - ninja install-cxx install-cxxabi
  - ccache --show-stats -v || true
  #
  - rm -rf /src/llvm
  - rm -rf /opt/libcxx/include
---
image: istio/proxyv2-v1x21x6-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  beforeInstall:
  - apt-get update && apt-get install -y ca-certificates
  - update-ca-trust
  - apt-get clean
  - rm -rf  /var/log/*log /var/lib/apt/lists/* /var/log/apt/* /var/lib/dpkg/*-old /var/cache/debconf/*-old
  install:
  - mkdir -p /relocate/sbin
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
      ln -f -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
    done
    # broken symlinks are not imported from the artifact
    touch /sbin/iptables-wrapper
  - |
    for mode in legacy nft; do
      for basecmd in iptables ip6tables; do
        for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
          ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
        done
      done
    done
---
#=====================================================================================================
---
image: istio/golang-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
---
image: istio/proxyv2-v1x21x6-build-image-artifact
fromImage: common/alt-p11-artifact
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: istio/golang-artifact
  add: /usr/local/go
  to: /usr/local/go
  before: install
shell:
  beforeInstall:
  - export DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC
  - ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone
  - apt-get update -y
  - |
    apt-get install -y \
    apt-https curl jq tzdata \
    ca-certificates bash-completion iproute2 arpd ipset kmod \
    iptables iptables-ipv6 iptables-nft \
    coreutils binutils git zip unzip wget mount patch patchelf \
    make automake autoconf cmake ccache bison flex ninja-build pkg-config \
    gcc gcc-c++ libstdc++-devel libstdc++-devel-static \
    glibc glibc-devel glibc-devel-static \
    python python3 python3-module-pip python3-module-virtualenv \
    build-essential libtool \
    libnetfilter_conntrack libnetfilter_conntrack-devel libnfnetlink-devel \
    libmnl-devel libnftnl-devel elfutils-devel zlib-devel java-1.8.0-openjdk golangci-lint
  # for debug
  - apt-get install -y strace vim-console
  - |
    apt-get install -y \
    sudo \
    libcap-devel libpcap-devel \
    clang14.0 clang14.0-tools lld14.0 llvm14.0-devel \
    libcxxabi-devel \
    libcxx libcxx-static libcxxabi-static lld14.0
  # apt clean
  - apt-get autoclean && apt-get clean
  install:
  - update-alternatives --install /usr/bin/python python /usr/bin/python3 1
  - ln -s -f /usr/lib/llvm-14.0/bin/clang /usr/bin/clang
  - ln -s -f /usr/lib/llvm-14.0/bin/clang++ /usr/bin/clang++
  - ln -s -f /usr/lib/llvm-14.0/bin/ld.lld /usr/bin/ld.lld
  # Install Go
  - export GOROOT=/usr/local/go GOPATH=/go
  - export PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - go version
  # Install protoc and plugins
  - curl --fail --show-error --silent --location "https://github.com/protocolbuffers/protobuf/releases/download/v22.3/protoc-22.3-linux-x86_64.zip" --output /tmp/protoc.zip
  - unzip /tmp/protoc.zip -x readme.txt -d /usr/local && rm /tmp/protoc.zip
  - chmod o+rx /usr/local/bin/protoc && chmod o+rX -R /usr/local/include/google/
  - git clone --depth 1 --branch cmd/protoc-gen-go-grpc/v1.3.0 https://github.com/grpc/grpc-go.git /src/grpc-go
  - git clone --depth 1 --branch v1.30.0 https://github.com/protocolbuffers/protobuf-go.git /src/protobuf-go
  - git clone --depth 1 --branch v1.1.0 https://github.com/mitchellh/protoc-gen-go-json.git /src/protoc-gen-go-json
  - git clone --depth 1 --branch v1.5.1 https://github.com/pseudomuto/protoc-gen-doc.git /src/protoc-gen-doc
  - cd /src/grpc-go/cmd/protoc-gen-go-grpc && go install
  - cd /src/protobuf-go/cmd/protoc-gen-go && go install
  - cd /src/protoc-gen-go-json && go install
  - cd /src/protoc-gen-doc/cmd/protoc-gen-doc && go install
  - cd /src
  - rm -rf /src/grpc-go
  - rm -rf /src/protobuf-go
  - rm -rf /src/protoc-gen-go-json
  - rm -rf /src/protoc-gen-doc
  # Install multiversion bazel
  - bazel_versions=(6.3.2)
  # install bazel wrapper script in the path, it automatically recognises `.bazelversion` and `USE_BAZEL_VERSIONS`, if neither are set it picks latest
  - curl --fail --show-error --silent --location "https://raw.githubusercontent.com/bazelbuild/bazel/refs/tags/${bazel_versions[-1]}/scripts/packages/bazel.sh" --output /usr/local/bin/bazel
  - chmod +x /usr/local/bin/bazel
  - |
    for bazel_version in ${bazel_versions[@]} ; do
      # instead of using installer script, download binaries directly, as installer script doesn't append version suffix,
      # so for multiple versions to be usable files will need to moved around, which would be more tedious
      long_binary_name="bazel-${bazel_version}-linux-x86_64"
      curl --fail --show-error --silent --location https://github.com/bazelbuild/bazel/releases/download/${bazel_version}/${long_binary_name} --output "/usr/local/bin/${long_binary_name}"
      chmod +x "/usr/local/bin/${long_binary_name}"
      USE_BAZEL_VERSION="${bazel_version}" bazel version # to extract all binaries properly
    done
imageSpec:
  config:
    env: {"GOROOT": "/usr/local/go", "GOPATH": "/go", "PATH": "${PATH}:${GOROOT}/bin:${GOPATH}/bin", "GOOS": "linux", "GOARCH": "amd64"}
---
#=====================================================================================================
---
image: istio/proxyv2-v1x21x6-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/110-istio/images/proxyv2-v1x21x6/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch 1.21.6 https://github.com/istio/proxy.git /src/proxy
  - cd /src/proxy/
  - git apply --verbose /patches/*.patch
  - git clone --branch "llvmorg-14.0.6" https://github.com/llvm/llvm-project.git /src/llvm
  - rm -rf /src/llvm/.git

  # getting rid of unused vulnerable code
  - rm -rf /src/llvm/llvm/utils/git
  - rm -rf /src/llvm/mlir/utils/vscode
  - rm -rf /src/llvm/third-party/benchmark && mkdir /src/llvm/third-party/benchmark
  - touch /src/llvm/third-party/benchmark/placeholder.txt
---

      # exclude modules and images from editions
---
---
image: user-authn/basic-auth-proxy
fromImage: common/distroless
import:
  - image: user-authn/basic-auth-proxy-basic-auth-proxy-artifact
    add: /src/basic-auth-proxy
    to: /basic-auth-proxy
    before: setup
imageSpec:
  config:
    entrypoint: [ "/basic-auth-proxy" ]
---
image: user-authn/basic-auth-proxy-basic-auth-proxy-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/150-user-authn/images/basic-auth-proxy/app
  to: /src
  includePaths:
  - '**/*.go'
  - '**/go.mod'
  - '**/go.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - '**/go.mod'
    - '**/go.sum'
---
image: user-authn/basic-auth-proxy-basic-auth-proxy-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: user-authn/basic-auth-proxy-basic-auth-proxy-src-artifact
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/
    - cd /src
    - CGO_ENABLED=0 GOOS=linux go build -ldflags '-s -w' -o basic-auth-proxy ./cmd/main.go
    - chown 64535:64535 basic-auth-proxy
    - chmod 0700 basic-auth-proxy

      # exclude modules and images from editions
---
---
image: user-authn/dex-authenticator
fromImage: common/distroless
import:
  - image: user-authn/dex-authenticator-oauth2-proxy-artifact
    add: /src/oauth2-proxy
    to: /bin/oauth2_proxy
    before: setup
  - image: user-authn/dex-authenticator-url-exec-prober-artifact
    add: /src/url-exec-prober
    to: /usr/local/bin/url-exec-prober
    before: setup
imageSpec:
  config:
    entrypoint: [ "/bin/oauth2_proxy" ]
    cmd: [ "--upstream=http://0.0.0.0:8080/", "--http-address=0.0.0.0:4180" ]
---
image: user-authn/dex-authenticator-oauth2-proxy-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/150-user-authn/images/dex-authenticator/patches/
    to: /patches
    stageDependencies:
      install:
        - '**/*'
  - url: https://github.com/oauth2-proxy/oauth2-proxy.git
    to: /src
    tag: v7.5.1
    stageDependencies:
      install:
        - '**/*.go'
        - '**/go.mod'
        - '**/go.sum'
shell:
  install:
    - cd /src
    - git apply --verbose /patches/*.patch
    - rm -rf .git docs
---
image: user-authn/dex-authenticator-oauth2-proxy-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: user-authn/dex-authenticator-oauth2-proxy-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src
    - go build -ldflags '-s -w' -o oauth2-proxy .
    - chown 64535:64535 oauth2-proxy
    - chmod 0700 oauth2-proxy
---
image: user-authn/dex-authenticator-url-exec-prober-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/150-user-authn/images/dex-authenticator/url-exec-prober
  to: /src
  includePaths:
  - '**/*.go'
  - '**/go.mod'
  - '**/go.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - '**/go.mod'
    - '**/go.sum'
---
image: user-authn/dex-authenticator-url-exec-prober-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: user-authn/dex-authenticator-url-exec-prober-src-artifact
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src
    - go build -ldflags '-s -w' -o url-exec-prober main.go
    - chown 64535:64535 url-exec-prober
    - chmod 0700 url-exec-prober

      # exclude modules and images from editions
---
---
image: user-authn/dex
fromImage: common/distroless
import:
  - image: user-authn/dex-dex-artifact
    add: /src/dex
    to: /usr/local/bin/dex
    before: setup
  - image: user-authn/dex-dex-src-artifact
    add: /web
    to: /web
    before: setup
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/dex", "serve", "/etc/dex/config.docker.yaml"]
---
image: user-authn/dex-dex-src-artifact
fromImage: common/src-artifact
fromCacheVersion: "2025-02-18.01"
final: false
git:
  - url: https://github.com/dexidp/dex.git
    to: /src
    tag: v2.42.0
    stageDependencies:
      install:
        - '**/*.go'
        - '**/go.mod'
        - '**/go.sum'
  - add: /modules/150-user-authn/images/dex/patches/
    to: /patches
    stageDependencies:
      install:
        - '**/*'
  - add: /modules/150-user-authn/images/dex/src/web
    to: /web
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf examples
---
image: user-authn/dex-dex-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-bookworm@sha256:ca569d98545ab5a090449da29d637fb3f5a273d3a002554af328be9873777cef
final: false
import:
  - image: user-authn/dex-dex-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=1 GOOS=linux GOARCH=amd64
    - cd /src
    - go build -ldflags '-s -w' -ldflags "-linkmode external -extldflags -static" -tags netgo -o dex ./cmd/dex
    - chown 64535:64535 dex
    - chmod 0700 dex

      # exclude modules and images from editions
---
---
image: user-authn/kubeconfig-generator
fromImage: common/distroless
import:
  - image: user-authn/kubeconfig-generator-dex-k8s-authenticator-artifact
    add: /src/dex-k8s-authenticator
    to: /app/bin/dex-k8s-authenticator
    before: setup
  - image: user-authn/kubeconfig-generator-dex-k8s-authenticator-artifact
    add: /etc/nsswitch.conf
    to: /etc/nsswitch.conf
    before: setup
  - image: user-authn/kubeconfig-generator-dex-k8s-authenticator-artifact
    add: /src/html
    to: /app/html
    before: setup
  - image: user-authn/kubeconfig-generator-dex-k8s-authenticator-artifact
    add: /src/templates
    to: /app/templates
    before: setup
imageSpec:
  config:
    entrypoint: ["/dex-k8s-authenticator"]
    workingDir: "/app"
---
image: user-authn/kubeconfig-generator-dex-k8s-authenticator-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/150-user-authn/images/kubeconfig-generator/patches
    to: /patches
    stageDependencies:
      install:
        - '**/*'
  - url: https://github.com/mintel/dex-k8s-authenticator.git
    to: /src
    commit: 378a39dd93bed9f56a5a1b1a799a208c61ead83f
    stageDependencies:
      install:
        - '**/*.go'
        - '**/go.mod'
        - '**/go.sum'
shell:
  install:
    - cd /src
    - git apply --whitespace=fix -v /patches/*.patch
---
image: user-authn/kubeconfig-generator-dex-k8s-authenticator-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: user-authn/kubeconfig-generator-dex-k8s-authenticator-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src
    - go build -ldflags '-s -w' -o dex-k8s-authenticator .
    - chown 64535:64535 dex-k8s-authenticator
    - chmod 0700 dex-k8s-authenticator

      # exclude modules and images from editions
---
---
image: user-authn/self-signed-generator
fromImage: common/distroless
import:
  - image: user-authn/self-signed-generator-self-signed-generator-artifact
    add: /src/self-signed-generator
    to: /self-signed-generator
    before: setup
imageSpec:
  config:
    entrypoint: [ "/self-signed-generator" ]
---
image: user-authn/self-signed-generator-self-signed-generator-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/150-user-authn/images/self-signed-generator/src
    to: /src
---
image: user-authn/self-signed-generator-self-signed-generator-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: user-authn/self-signed-generator-self-signed-generator-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src
    - go build -ldflags="-w -s" -o self-signed-generator main.go
    - chown 64535:64535 self-signed-generator
    - chmod 0700 self-signed-generator

      # exclude modules and images from editions
---
---
image: multitenancy-manager/multitenancy-manager
fromImage: common/distroless
import:
  - image: multitenancy-manager/multitenancy-manager-multitenancy-manager-artifact
    add: /src/multitenancy-manager
    to: /multitenancy-manager
    before: setup
  - image: multitenancy-manager/multitenancy-manager-multitenancy-manager-src-artifact
    add: /src/templates
    to: /templates
    before: setup
  - image: multitenancy-manager/multitenancy-manager-multitenancy-manager-src-artifact
    add: /src/helmlib
    to: /helmlib
    before: setup
imageSpec:
  config:
    entrypoint: [ "/multitenancy-manager" ]
---
image: multitenancy-manager/multitenancy-manager-multitenancy-manager-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/160-multitenancy-manager/images/multitenancy-manager/src
    to: /src
    includePaths:
      - '**/*.go'
      - '**/go.mod'
      - '**/go.sum'
      - '**/helmlib/*.yaml'
      - '**/helmlib/*.tpl'
      - '**/templates/*.yaml'
    stageDependencies:
      install:
        - '**/*.go'
        - '**/go.mod'
        - '**/go.sum'
        - '**/helmlib/*.yaml'
        - '**/helmlib/*.tpl'
        - '**/templates/*.yaml'
---
image: multitenancy-manager/multitenancy-manager-multitenancy-manager-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: multitenancy-manager/multitenancy-manager-multitenancy-manager-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GOPROXY=https://proxy.golang.org/
    - cd /src
    - CGO_ENABLED=0 GOOS=linux go build -ldflags '-s -w' -o multitenancy-manager ./cmd/main.go
    - chown 64535:64535 multitenancy-manager
    - chmod 0700 multitenancy-manager

      # exclude modules and images from editions
---

image: operator-prometheus/prometheus-config-reloader
fromImage: common/distroless
import:
- image: operator-prometheus/prometheus-operator-artifact-0-68-0
  add: /prometheus-config-reloader
  to: /bin/prometheus-config-reloader
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/prometheus-config-reloader"]

      # exclude modules and images from editions
---

---
image: operator-prometheus/prometheus-operator-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/200-operator-prometheus/images/prometheus-operator/patches
    to: /patches
    stageDependencies:
      install:
      - '**/*'
shell:
  install:
    - git clone --depth 1 --branch "v0.68.0" https://github.com/prometheus-operator/prometheus-operator.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -r .git
---
image: operator-prometheus/prometheus-operator-artifact-0-68-0
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: operator-prometheus/prometheus-operator-src-artifact
    add: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - go mod download -x
    - go mod vendor
    - export VERSION=$(cat VERSION | tr -d " \t\n\r")
    - export GO_BUILD_LDFLAGS="-X github.com/prometheus/common/version.Version=${VERSION} -X github.com/prometheus/common/version.BuildUser=deckhouse"
    - go build -ldflags="-s -w ${GO_BUILD_LDFLAGS}" -o /operator cmd/operator/main.go
    - go build -ldflags="-s -w ${GO_BUILD_LDFLAGS}" -o /prometheus-config-reloader cmd/prometheus-config-reloader/main.go
    - chmod 0700 /operator /prometheus-config-reloader
    - chown -R 64535:64535 /operator /prometheus-config-reloader
---
image: operator-prometheus/prometheus-operator
fromImage: common/distroless
import:
- image: operator-prometheus/prometheus-operator-artifact-0-68-0
  add: /operator
  to: /bin/operator
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/operator"]

      # exclude modules and images from editions
---

---
image: prometheus/alertmanager
fromImage: common/distroless
import:
  - image: prometheus/alertmanager-artifact
    add: /src/alertmanager
    to: /bin/alertmanager
    before: setup
imageSpec:
  config:
    entrypoint: ["/bin/alertmanager"]
---
image: prometheus/alertmanager-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/300-prometheus/images/alertmanager/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.27.0 https://github.com/prometheus/alertmanager.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf /src/.git
---
image: prometheus/alertmanager-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: prometheus/alertmanager-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go build -a -ldflags '-s -w -extldflags "-static"' -o alertmanager cmd/alertmanager/main.go
  - chown -R 64535:64535 /src/
  - chmod 0700 /src/alertmanager

      # exclude modules and images from editions
---
---
image: prometheus/alerts-receiver
fromImage: common/distroless
import:
- image: prometheus/alerts-receiver-artifact
  add: /app/alerts-receiver
  to: /alerts-receiver
  before: setup
imageSpec:
  config:
    entrypoint: [ "/alerts-receiver" ]
---
image: prometheus/alerts-receiver-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/300-prometheus/images/alerts-receiver/src
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: prometheus/alerts-receiver-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: prometheus/alerts-receiver-src-artifact
  add: /src
  to: /app
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /app
  - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-w -s" -o alerts-receiver
  - chown -R 64535:64535 /app/
  - chmod 0700 /app/alerts-receiver

      # exclude modules and images from editions
---
image: prometheus/grafana-dashboard-provisioner
fromImage: common/shell-operator
import:
- image: prometheus/grafana-dashboard-provisioner-binaries-artifact
  add: /opt/python-static/bin
  to: /usr/bin
  before: install
  includePaths:
  - python3*
  - python3
- image: prometheus/grafana-dashboard-provisioner-binaries-artifact
  add: /opt/python-static/lib
  to: /usr/lib
  before: install
  includePaths:
  - python3*
git:
- add: /modules/300-prometheus/images/grafana-dashboard-provisioner/hooks
  to: /hooks
---
image: prometheus/grafana-dashboard-provisioner-binaries-artifact
fromImage: common/alt-p11-artifact
final: false
git:
- add: /modules/300-prometheus/images/grafana-dashboard-provisioner/requirements.txt
  to: /requirements.txt
  stageDependencies:
    install:
    - '**/*'
import:
- image: common/python-static
  add: /opt/python-static
  to: /opt/python-static
  before: install
shell:
  beforeInstall:
  - apt-get install -y git
  install:
  - git clone --depth 1 https://github.com/python-modules/wheels /wheels
  - /opt/python-static/bin/pip3 install -f file:///wheels --no-index -r requirements.txt
  - rm -rf /wheels

      # exclude modules and images from editions
---
---



---
image: prometheus/grafana-v10-src-files
final: false
fromImage: common/src-artifact
git:
- add: /modules/300-prometheus/images/grafana-v10/patches
  to: /patches
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
shell:
  install:
  - mkdir -p /usr/src/app
  - cd /usr/src/app
  - git clone --depth 1 --branch v10.4.15 https://github.com/grafana/grafana.git .
  - git clone --depth 1 --branch v10.4.15 https://github.com/grafana/grafana-deps.git /grafana-public
  - git clone --depth 1 https://github.com/grafana/grafana-plugins.git /grafana-plugins
  - find /patches -name '*.patch' -exec git apply {} \;
  - rm -rf /usr/src/app/.git /grafana-public/.git /grafana-plugins/.git /src/wire/.git
---
image: prometheus/grafana-v10-go-builder
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-bullseye@sha256:fad5b33791a319ba1c910a03a33575ea34fc8e142695a64be9a1a228e74af11e
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: prometheus/grafana-v10-src-files
  add: /usr/src/app
  to: /usr/src/app
  before: install
shell:
  beforeInstall:
  
  # 5 years 157680000
  - |
      echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
      echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
      echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
  # Replace debian repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update
  - apt-get -y --no-install-recommends install gcc musl musl-tools git
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  - git clone --depth 1 --branch v0.6.0 https://github.com/google/wire.git /src/wire
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=1 GOOS=linux GOARCH=amd64 CC=/usr/bin/musl-gcc
  - cd /src/wire/cmd/wire && go install
  - rm -rf /src/wire
  - cd /usr/src/app
  - /go/bin/wire gen -tags oss ./pkg/server
  - go build -ldflags -w -ldflags "-X main.version=10.4.15 -linkmode external -extldflags -static" -tags netgo -o ./bin/linux-amd64/grafana ./pkg/cmd/grafana
---
image: prometheus/grafana-v10-entrypoint
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
git:
- add: /modules/300-prometheus/images/grafana-v10/entrypoint
  to: /app
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /app
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go build -ldflags="-s -w" -o entrypoint main.go
  - chown -R 64535:64535 /app/
  - chmod 0700 /app/entrypoint
---
image: prometheus/grafana-v10-grafana-distr
final: false
fromImage: common/alt-p11-artifact
import:
- image: prometheus/grafana-v10-go-builder
  add: /usr/src/app/bin/linux-amd64/grafana
  to: /usr/share/grafana/bin/grafana
  before: install
- image: prometheus/grafana-v10-src-files
  add: /grafana-public/public
  to: /usr/share/grafana/public
  before: install
- image: prometheus/grafana-v10-src-files
  add: /usr/src/app/conf
  to: /usr/share/grafana/conf
  before: install
- image: prometheus/grafana-v10-src-files
  add: /grafana-plugins
  to: /grafana-plugins
  before: install
git:
- add: /modules/300-prometheus/images/grafana-v10/grafana_home_dashboard.json
  to: /usr/share/grafana/public/dashboards/grafana_home_dashboard.json
  stageDependencies:
    install:
    - '**/*'
- add: /modules/300-prometheus/images/grafana-v10/web
  to: /img
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - |
    export PATH="/usr/share/grafana/bin:$PATH" \
    GF_PATHS_CONFIG="/etc/grafana/grafana.ini" \
    GF_PATHS_DATA="/var/lib/grafana" \
    GF_PATHS_HOME="/usr/share/grafana" \
    GF_PATHS_LOGS="/var/log/grafana" \
    GF_PATHS_PLUGINS="/usr/share/grafana/plugins-bundled" \
    GF_PATHS_PROVISIONING="/etc/grafana/provisioning"
  - cd $GF_PATHS_HOME
  - |
    mkdir -p "$GF_PATHS_HOME/.aws" \
             "$GF_PATHS_PROVISIONING/datasources" \
             "$GF_PATHS_PROVISIONING/dashboards" \
             "$GF_PATHS_PROVISIONING/notifiers" \
             "$GF_PATHS_PROVISIONING/plugins" \
             "$GF_PATHS_PROVISIONING/access-control" \
             "$GF_PATHS_LOGS" \
             "$GF_PATHS_PLUGINS" \
             "$GF_PATHS_DATA"
  - cp "$GF_PATHS_HOME/conf/sample.ini" "$GF_PATHS_CONFIG"
  - cp "$GF_PATHS_HOME/conf/ldap.toml" /etc/grafana/ldap.toml
  - cp /img/* "$GF_PATHS_HOME/public/img"
  - chmod -R 777 "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING" "$GF_PATHS_HOME"
  - |
    IFS="," && \
    BUNDLED_PLUGINS=petrslavotinek-carpetplot-panel,vonage-status-panel,btplc-status-dot-panel,natel-plotly-panel,savantly-heatmap-panel,grafana-piechart-panel,grafana-worldmap-panel,esnet-matrix-panel && \
    for plugin in ${BUNDLED_PLUGINS}; do \
      plugin_path="$(find /grafana-plugins -type f -name "${plugin}*")"
      grafana cli --pluginsDir "${GF_PATHS_PLUGINS}" --pluginUrl ${plugin_path} plugins install ${plugin}; \
    done
  - chmod +r /etc/grafana/grafana.ini
  - export BUNDLED_PLUGINS_PATH="${GF_PATHS_PLUGINS}"
  - chown -R 64535:64535 /usr/share/grafana
  - chown -R 64535:64535 /etc/grafana
  - chown -R 64535:64535 /var/lib/grafana
  - chown -R 64535:64535 /var/log/grafana
  - chmod 0700 ./bin/grafana
---
image: prometheus/grafana-v10
fromImage: common/distroless
import:
- image: prometheus/grafana-v10-entrypoint
  add: /app/entrypoint
  to: /usr/local/bin/entrypoint
  before: install
- image: prometheus/grafana-v10-grafana-distr
  add: /usr/share/grafana/
  to: /usr/share/grafana
  before: install
- image: prometheus/grafana-v10-grafana-distr
  add: /etc/grafana/
  to: /etc/grafana
  before: install
- image: prometheus/grafana-v10-grafana-distr
  add: /var/lib/grafana/
  to: /var/lib/grafana
  before: install
- image: prometheus/grafana-v10-grafana-distr
  add: /var/log/grafana/
  to: /var/log/grafana
  before: install
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/entrypoint"]
    workingDir: "/usr/share/grafana"
    env: { "PATH": "/usr/share/grafana/bin:$PATH", "GF_PATHS_CONFIG": "/etc/grafana/grafana.ini", "GF_PATHS_DATA": "/var/lib/grafana", "GF_PATHS_HOME": "/usr/share/grafana", "GF_PATHS_LOGS": "/var/log/grafana", "GF_PATHS_PLUGINS": "/usr/share/grafana/plugins-bundled", "GF_PATHS_PROVISIONING": "/etc/grafana/provisioning", "BUNDLED_PLUGINS_PATH": "/usr/share/grafana/plugins-bundled" }
    expose: ["3000"]

      # exclude modules and images from editions
---

---
image: prometheus/memcached-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/300-prometheus/images/memcached/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.15.0 https://github.com/prometheus/memcached_exporter.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf /src/.git
---
image: prometheus/memcached-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: prometheus/memcached-exporter-src-artifact
  add: /src
  to: /src
  before: install
- image: prometheus/prometheus-promu-artifact
  add: /src/promu
  to: /go/bin/promu
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make curl git
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=1 GOOS=linux GOARCH=amd64 CC=/usr/bin/musl-gcc
  - cd /src
  - make build
---
image: prometheus/memcached-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  beforeInstall:
  - apt-get update -y
  - apt-get install -y memcached
  install:
  - /binary_replace.sh -i "/usr/bin/memcached" -o /relocate
---
image: prometheus/memcached
fromImage: common/distroless
import:
- image: prometheus/memcached-binaries-artifact
  add: /relocate
  to: /
  before: setup
---
image: prometheus/memcached-exporter
fromImage: common/distroless
import:
  - image: prometheus/memcached-exporter-artifact
    add: /src/memcached_exporter
    to: /usr/bin/memcached_exporter
    before: install
imageSpec:
  config:
    entrypoint: ["/usr/bin/memcached_exporter"]
    expose: ["9150"]

      # exclude modules and images from editions
---

---
image: prometheus/mimir-src-artifact
fromImage: common/src-artifact
fromCacheVersion: "2025-02-20 10:00"
final: false
git:
- add: /modules/300-prometheus/images/mimir
  to: /
  stageDependencies:
    install:
      - "**/*"
  includePaths:
    - patches
shell:
  install:
    - git clone --depth 1 --branch mimir-2.14.2 https://github.com/grafana/mimir.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git ./operations
---
image: prometheus/mimir-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: prometheus/mimir-src-artifact
    add: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - go mod download -x
    - go mod vendor
    - go build -o mimir ./cmd/mimir
    - chown -R 64535:64535 /src/mimir
    - chmod 0700 /src/mimir
---
image: prometheus/mimir
fromImage: common/distroless
import:
  - image: prometheus/mimir-artifact
    add: /src/mimir
    to: /bin/mimir
    after: setup
imageSpec:
  config:
    entrypoint: ["/bin/mimir"]

      # exclude modules and images from editions
---
---
image: prometheus/prometheus
fromImage: common/distroless
import:
- image: prometheus/prometheus-artifact
  add: /src
  to: /bin
  before: setup
  includePaths:
  - 'promtool'
  - 'prometheus'
- image: prometheus/prometheus-artifact
  add: /src/consoles
  to: /usr/share/prometheus/consoles
  before: setup
- image: prometheus/prometheus-artifact
  add: /src/console_libraries
  to: /usr/share/prometheus/console_libraries
  before: setup
- image: prometheus/prometheus-artifact
  add: /src/documentation/examples/prometheus.yml
  to: /etc/prometheus/prometheus.yml
  before: setup
- image: prometheus/prometheus-artifact
  add: /empty
  to: /prometheus
  before: setup
- image: prometheus/prometheus-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
imageSpec:
  config:
    entrypoint: ["/bin/prometheus"]
    expose: ["9090"]
    volumes: ["/prometheus"]
    workingDir: "/prometheus"
    cmd: ["--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--web.console.libraries=/usr/share/prometheus/console_libraries", "--web.console.templates=/usr/share/prometheus/consoles"]
---
image: prometheus/prometheus-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/300-prometheus/images/prometheus/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.17.0 https://github.com/prometheus/promu.git /src/promu
  - git clone --depth 1 --branch v2.55.1 https://github.com/prometheus/prometheus-deps.git /src/prometheus-deps
  - git clone --depth 1 --branch v2.55.1 https://github.com/prometheus/prometheus.git /src/prometheus
  - cd /src/prometheus
  - git apply /patches/*.patch --verbose
  - rm -rf web/ui/*
  - cp -r /src/prometheus-deps/web/ui/* web/ui/.
  - scripts/compress_assets.sh
  - rm -r documentation/examples/remote_storage
---
image: prometheus/prometheus-promu-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: prometheus/prometheus-src-artifact
  add: /src/promu
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go build -ldflags="-s -w" -o promu ./main.go
---
image: prometheus/prometheus-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
import:
- image: prometheus/prometheus-promu-artifact
  add: /src/promu
  to: /bin/promu
  before: install
- image: prometheus/prometheus-src-artifact
  add: /src/prometheus
  to: /src
  before: install
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go generate -tags plugins ./plugins
  - /bin/promu build --prefix /src
  - mkdir -p /empty
  - chown 64535:64535 /src/prometheus /src/promtool
  - chmod 0700 /src/prometheus /src/promtool
---
image: prometheus/prometheus-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y curl
  install:
  - |
    /binary_replace.sh -i "\
      /usr/bin/curl \
      /bin/sh \
      /bin/df \
      " -o /relocate

      # exclude modules and images from editions
---

---
image: prometheus/promxy-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/300-prometheus/images/promxy/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v0.0.91 https://github.com/jacksontj/promxy.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf .git ./vendor/github.com/prometheus/prometheus/web
---
image: prometheus/promxy-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: prometheus/promxy-src-artifact
    add: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - go mod download -x
    - go mod vendor
    - go build -o promxy ./cmd/promxy
    - chown -R 64535:64535 /src/promxy
    - chmod 0700 /src/promxy
---
image: prometheus/promxy
fromImage: common/distroless
import:
  - image: prometheus/promxy-artifact
    add: /src/promxy
    to: /app/promxy
    after: setup
imageSpec:
  config:
    entrypoint: ["/app/promxy"]

      # exclude modules and images from editions
---
---
image: prometheus/trickster
fromImage: common/distroless
import:
- image: prometheus/trickster-entrypoint-artifact
  add: /src/entrypoint
  to: /usr/local/bin/entrypoint
  before: setup
- image: prometheus/trickster-artifact
  add: /src/OPATH/trickster
  to: /usr/local/bin/trickster
  before: setup
imageSpec:
  config:
    entrypoint: ["entrypoint"]
---
image: prometheus/trickster-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/300-prometheus/images/trickster/entrypoint
  to: /src/entrypoint
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - 'go.mod'
    - 'go.sum'
- add: /modules/300-prometheus/images/trickster/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.1.5 https://github.com/trickstercache/trickster.git /src/trickster
  - cd /src/trickster
  - git apply /patches/*.patch --verbose
  - rm -r vendor
  - rm -rf .git
  - rm -rf .git
---
image: prometheus/trickster-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: prometheus/trickster-src-artifact
  add: /src/trickster
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - make build
  - chown -R 64535:64535 /src
  - chmod 0700 /src/OPATH/trickster
---
image: prometheus/trickster-entrypoint-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: prometheus/trickster-src-artifact
  add: /src/entrypoint
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod download -x
  - go build -ldflags="-s -w" -o entrypoint
  - chown -R 64535:64535 /src
  - chmod 0700 /src/entrypoint

      # exclude modules and images from editions
---

---
image: prometheus-metrics-adapter/k8s-prometheus-adapter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/301-prometheus-metrics-adapter/images/k8s-prometheus-adapter/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.12.0 https://github.com/kubernetes-sigs/prometheus-adapter.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf /src/.git
---
image: prometheus-metrics-adapter/k8s-prometheus-adapter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: prometheus-metrics-adapter/k8s-prometheus-adapter-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go build -ldflags '-s -w' -o adapter ./cmd/adapter/adapter.go
  - chown -R 64535:64535 /src/
  - chmod 0700 /src/adapter
---
image: prometheus-metrics-adapter/k8s-prometheus-adapter
fromImage: common/distroless
import:
  - image: prometheus-metrics-adapter/k8s-prometheus-adapter-artifact
    add: /src/adapter
    to: /adapter
    before: setup
imageSpec:
  config:
    entrypoint: ["/adapter"]

      # exclude modules and images from editions
---
---
image: prometheus-metrics-adapter/prometheus-reverse-proxy
fromImage: common/distroless
import:
- image: prometheus-metrics-adapter/prometheus-reverse-proxy-artifact
  add: /src/prometheus-reverse-proxy
  to: /prometheus-reverse-proxy
  before: setup
imageSpec:
  config:
    entrypoint: [ "/prometheus-reverse-proxy" ]
---
image: prometheus-metrics-adapter/prometheus-reverse-proxy-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/301-prometheus-metrics-adapter/images/prometheus-reverse-proxy/app
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: prometheus-metrics-adapter/prometheus-reverse-proxy-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: prometheus-metrics-adapter/prometheus-reverse-proxy-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" ./cmd/prometheus-reverse-proxy
  - chown -R 64535:64535 /src/
  - chmod 0700 /src/prometheus-reverse-proxy

      # exclude modules and images from editions
---
---
image: vertical-pod-autoscaler/admission-controller
fromImage: common/distroless
import:
- image: vertical-pod-autoscaler/vertical-pod-autoscaler-artifact
  add: /admission-controller
  to: /admission-controller
  before: setup
imageSpec:
  config:
    entrypoint: ["/admission-controller"]
    cmd: ["--v=4", "--stderrthreshold=info"]

      # exclude modules and images from editions
---
---
image: vertical-pod-autoscaler/recommender
fromImage: common/distroless
import:
- image: vertical-pod-autoscaler/vertical-pod-autoscaler-artifact
  add: /recommender
  to: /recommender
  before: setup
imageSpec:
  config:
    entrypoint: ["/recommender"]

      # exclude modules and images from editions
---
---
image: vertical-pod-autoscaler/updater
fromImage: common/distroless
import:
- image: vertical-pod-autoscaler/vertical-pod-autoscaler-artifact
  add: /updater
  to: /updater
  before: setup
imageSpec:
  config:
    entrypoint: ["/updater"]
    cmd: ["--v=4", "--stderrthreshold=info"]

      # exclude modules and images from editions
---
image: vertical-pod-autoscaler/vertical-pod-autoscaler-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: //modules/302-vertical-pod-autoscaler/images/vertical-pod-autoscaler/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
    - git clone --depth 1 -b vertical-pod-autoscaler-1.2.1 https://github.com/kubernetes/autoscaler.git /src/autoscaler
    - cd /src/autoscaler
    - git apply /patches/*.patch --verbose
    - mv vertical-pod-autoscaler /src/vertical-pod-autoscaler
    - rm -rf /src/autoscaler /src/vertical-pod-autoscaler/e2e/ /patches /src/autoscaler/.git/
---
image: vertical-pod-autoscaler/vertical-pod-autoscaler-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: vertical-pod-autoscaler/vertical-pod-autoscaler-src-artifact
    add: /src
    to: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src/vertical-pod-autoscaler/
    - go mod download -x
    - go mod vendor

    - cd /src/vertical-pod-autoscaler/pkg/admission-controller
    - go build -ldflags="-s -w" -o /admission-controller

    - cd /src/vertical-pod-autoscaler/pkg/recommender
    - go build -ldflags="-s -w" -o /recommender

    - cd /src/vertical-pod-autoscaler/pkg/updater
    - go build -ldflags="-s -w" -o /updater

    - chown 64535:64535 /updater /recommender /admission-controller
    - chmod 0700 /updater /recommender /admission-controller

      # exclude modules and images from editions
---

---
image: prometheus-pushgateway/pushgateway-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/303-prometheus-pushgateway/images/pushgateway/patches
    to: /patches
    stageDependencies:
      install:
      - '**/*'
shell:
  install:
    - git clone --depth 1 --branch "v1.6.2" https://github.com/prometheus/pushgateway.git /src
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -r .git
---
image: prometheus-pushgateway/pushgateway-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: prometheus-pushgateway/pushgateway-src-artifact
    add: /src
    to: /src/pushgateway
    before: install
  - image: prometheus/prometheus-promu-artifact
    add: /src/promu
    to: /bin/promu
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
    - cd /src/pushgateway
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - /bin/promu build --prefix /src/pushgateway
    - mkdir /empty
    - chown -R 64535:64535 /empty
    - chown -R 64535:64535 /src/
    - chmod 0700 /src/pushgateway/pushgateway
---
image: prometheus-pushgateway/pushgateway
fromImage: common/distroless
import:
- image: prometheus-pushgateway/pushgateway-artifact
  add: /src/pushgateway/pushgateway
  to: /bin/pushgateway
  before: setup
- image: prometheus-pushgateway/pushgateway-artifact
  add: /empty
  to: /pushgateway
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/pushgateway"]
    expose: ["9091"]
    workingDir: "/pushgateway"


      # exclude modules and images from editions
---
---
image: extended-monitoring/events-exporter
fromImage: common/distroless
import:
  - image: extended-monitoring/events-exporter-artifact
    add: /events_exporter
    to: /events_exporter
    before: setup
imageSpec:
  config:
    entrypoint: ["/events_exporter"]

---
image: extended-monitoring/events-exporter-src-artifact
fromImage: common/src-artifact
final: false
shell:
  setup:
  - git clone --depth 1 --branch v0.0.4 https://github.com/nabokihms/events_exporter.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf /src/.git
git:
  - add: /modules/340-extended-monitoring/images/events-exporter
    to: /
    stageDependencies:
      setup:
        - "**/*"
    includePaths:
      - patches
---
image: extended-monitoring/events-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
import:
- image: extended-monitoring/events-exporter-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
    - export GO_VERSION=${GOLANG_VERSION}
    - export GOPROXY=https://proxy.golang.org/
    - cd /src
    - make build
    - mv bin/events_exporter /events_exporter
    - chown 64535:64535 /events_exporter
    - chmod 700 /events_exporter

      # exclude modules and images from editions
---

---
image: extended-monitoring/extended-monitoring-exporter-binary-artifact
final: false
fromImage: common/alt-p11-artifact
git:
  - add: /modules/340-extended-monitoring/images/extended-monitoring-exporter/src/requirements.txt
    to: /requirements.txt
    stageDependencies:
      install:
        - '**/*'
import:
- image: common/python-static
  add: /opt/python-static
  to: /opt/python-static
  before: install
shell:
  beforeInstall:
  - apt-get install -y git
  install:
    - export SOURCE_REPO=https://github.com
    - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
    - git clone --depth 1 https://github.com/python-modules/wheels /wheels
    - rm -rf /wheels/.git
    - /opt/python-static/bin/pip3 install -f file:///wheels --no-index -r /requirements.txt
---
image: extended-monitoring/extended-monitoring-exporter
fromImage: common/distroless
git:
  - add: /modules/340-extended-monitoring/images/extended-monitoring-exporter/src/extended-monitoring.py
    to: /app/extended-monitoring.py
import:
- image: extended-monitoring/extended-monitoring-exporter-binary-artifact
  add: /opt/python-static/bin
  to: /usr/bin
  before: install
  includePaths:
  - python3*
  - python3
- image: extended-monitoring/extended-monitoring-exporter-binary-artifact
  add: /opt/python-static/lib
  to: /usr/lib
  before: install
  includePaths:
  - python3*
imageSpec:
  config:
    entrypoint: ["python3"]

      # exclude modules and images from editions
---

---
image: extended-monitoring/image-availability-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/340-extended-monitoring/images/image-availability-exporter/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.12.0 https://github.com/deckhouse/k8s-image-availability-exporter.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf /src/.git
---
image: extended-monitoring/image-availability-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: extended-monitoring/image-availability-exporter-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go build -a -ldflags '-s -w -extldflags "-static"' -o k8s-image-availability-exporter main.go
  - chown -R 64535:64535 /src/
  - chmod 0700 /src/k8s-image-availability-exporter
---
image: extended-monitoring/image-availability-exporter
fromImage: common/distroless
import:
  - image: extended-monitoring/image-availability-exporter-artifact
    add: /src/k8s-image-availability-exporter
    to: /k8s-image-availability-exporter
    before: setup
imageSpec:
  config:
    entrypoint: ["/k8s-image-availability-exporter"]

      # exclude modules and images from editions
---
---
image: extended-monitoring/x509-certificate-exporter-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
    - git clone --depth 1 --branch v3.18.1 https://github.com/enix/x509-certificate-exporter.git /src
    - cd /src
    - rm -r .git
---
image: extended-monitoring/x509-certificate-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: extended-monitoring/x509-certificate-exporter-src-artifact
    add: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - go mod download -x
    - go mod vendor
    - go build -v -tags netgo,osusergo -o x509-certificate-exporter ./cmd/x509-certificate-exporter
    - chown -R 64535:64535 /src/x509-certificate-exporter
    - chmod 0700 /src/x509-certificate-exporter
---
image: extended-monitoring/x509-certificate-exporter
fromImage: common/distroless
import:
  - image: extended-monitoring/x509-certificate-exporter-artifact
    add: /src/x509-certificate-exporter
    to: /x509-certificate-exporter
    after: setup
imageSpec:
  config:
    entrypoint: ["/x509-certificate-exporter"]

      # exclude modules and images from editions
---
---
image: monitoring-kubernetes/ebpf-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/340-monitoring-kubernetes/images/ebpf-exporter/entrypoint
  to: /src/entrypoint
  stageDependencies:
    install:
    - '**/*'
- add: /modules/340-monitoring-kubernetes/images/ebpf-exporter/metrics
  to: /src/metrics
  stageDependencies:
    install:
    - '**/*'
- add: /modules/340-monitoring-kubernetes/images/ebpf-exporter/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --branch=v2.4.2 --depth=1 https://github.com/cloudflare/ebpf_exporter.git ebpf-exporter
  - cd ebpf-exporter
  - git apply /patches/*.patch --verbose
  - mkdir -p libbpf
  - git clone --branch v1.4.2 --depth=1 https://github.com/libbpf/libbpf.git libbpf
  - rm -rf libbpf/.git .git
---
image: monitoring-kubernetes/ebpf-exporter/entrypoint-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: monitoring-kubernetes/ebpf-exporter-src-artifact
  add: /src/entrypoint
  to: /entrypoint
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /entrypoint
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go build -ldflags="-s -w" -o entrypoint main.go
  - chown -R 64535:64535 /entrypoint/
  - chmod 0700 /entrypoint/entrypoint
---
image: monitoring-kubernetes/ebpf-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-bookworm@sha256:ca569d98545ab5a090449da29d637fb3f5a273d3a002554af328be9873777cef
final: false
import:
- image: monitoring-kubernetes/ebpf-exporter-src-artifact
  add: /src
  to: /build
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # 5 years 157680000
  - |
      echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
      echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
      echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
  # Replace debian repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update
  - apt-get install -y build-essential clang libelf-dev
  install:
  - export BUILD_DIR="/build/ebpf-exporter"
  - cd ${BUILD_DIR}
  - make -C ./libbpf/src LIBSUBDIR=lib DESTDIR=../dest install install_uapi_headers
  - export CGO_LDFLAGS="-L${BUILD_DIR}/libbpf/dest/usr/lib -l bpf"
  - export CGO_CFLAGS="-I${BUILD_DIR}/libbpf/dest/usr/include"
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ./ebpf_exporter -v -ldflags=" -extldflags "-static"" ./cmd/ebpf_exporter
  - mkdir -p metrics
  - cp /build/metrics/* ${BUILD_DIR}/metrics
  - make -C metrics clean build
---

---
image: monitoring-kubernetes/ebpf-exporter-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  install:
    - /binary_replace.sh -i "/sbin/setcap" -o /relocate
---
image: monitoring-kubernetes/ebpf-exporter
fromImage: common/distroless
import:
- image: monitoring-kubernetes/ebpf-exporter/entrypoint-artifact
  add: /entrypoint/entrypoint
  to: /usr/local/bin/entrypoint
  before: install
- image: monitoring-kubernetes/ebpf-exporter-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
- image: monitoring-kubernetes/ebpf-exporter-artifact
  add: /build/ebpf-exporter/ebpf_exporter
  to: /usr/local/bin/ebpf_exporter
  before: setup
- image: monitoring-kubernetes/ebpf-exporter-artifact
  add: /build/ebpf-exporter/metrics
  to: /metrics
  before: setup
  includePaths:
  - '**/*.yaml'
  - '**/*.o'
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/entrypoint"]

      # exclude modules and images from editions
---
---
image: monitoring-kubernetes/kube-state-metrics
fromImage: common/distroless
import:
- image: monitoring-kubernetes/kube-state-metrics-artifact
  add: /src/kube-state-metrics
  to: /bin/kube-state-metrics
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/kube-state-metrics"]
---
image: monitoring-kubernetes/kube-state-metrics-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v2.15.0 https://github.com/kubernetes/kube-state-metrics.git .
  - rm -rf .git tools
---
image: monitoring-kubernetes/kube-state-metrics-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: monitoring-kubernetes/kube-state-metrics-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make git
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - make build-local
  - chown 64535:64535 /src/kube-state-metrics
  - chmod 0700 /src/kube-state-metrics

      # exclude modules and images from editions
---
---
image: monitoring-kubernetes/kubelet-eviction-thresholds-exporter
fromImage: common/distroless
import:
- image: monitoring-kubernetes/kubelet-eviction-thresholds-exporter-artifact
  add: /src/loop
  to: /bin/loop
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/loop"]
---
image: monitoring-kubernetes/kubelet-eviction-thresholds-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/340-monitoring-kubernetes/images/kubelet-eviction-thresholds-exporter/src
  to: /src
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - 'go.mod'
    - 'go.sum'
shell:
  install:
  - cd /src
---
image: monitoring-kubernetes/kubelet-eviction-thresholds-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: monitoring-kubernetes/kubelet-eviction-thresholds-exporter-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go test ./... -v
  - go build -ldflags="-s -w" -o loop main.go
  - chown -R 64535:64535 /src/
  - chmod 0700 /src/loop

      # exclude modules and images from editions
---
---
image: monitoring-kubernetes/node-exporter
fromImage: common/distroless
import:
- image: monitoring-kubernetes/node-exporter-artifact
  add: /src/node_exporter
  to: /bin/node_exporter
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/node_exporter"]
---
image: monitoring-kubernetes/node-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/340-monitoring-kubernetes/images/node-exporter/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v1.8.2 https://github.com/prometheus/node_exporter.git .
  - git apply /patches/*.patch --verbose
---
image: monitoring-kubernetes/node-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: monitoring-kubernetes/node-exporter-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make git
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go build -ldflags="-s -w" -o node_exporter node_exporter.go
  - chown -R 64535:64535 /src/
  - chmod 0700 /src/node_exporter

      # exclude modules and images from editions
---
---
image: monitoring-ping/monitoring-ping-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/340-monitoring-ping/images/monitoring-ping/src
  to: /src/monitoring-ping
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone -b v5.2 --depth=1 https://github.com/schweikert/fping.git ./fping
  - rm -rf fping/.git
---
image: monitoring-ping/monitoring-ping-fping-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-bookworm@sha256:ca569d98545ab5a090449da29d637fb3f5a273d3a002554af328be9873777cef
final: false
import:
- image: monitoring-ping/monitoring-ping-src-artifact
  add: /src/fping
  to: /src
  before: install
shell:
  beforeInstall:
  
  # 5 years 157680000
  - |
      echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
      echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
      echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
  # Replace debian repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update
  - apt update && apt install -y --no-install-recommends git build-essential ca-certificates autoconf autotools-dev automake
  install:
  - cd src
  - autoreconf -i
  - ./configure LDFLAGS="-static" --prefix=/opt/fping-static
  - make
  - make install
  - chown -R 64535:64535 /opt/fping-static
  - chmod 0700 /opt/fping-static/sbin/fping
---
image: monitoring-ping/monitoring-ping-binary-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: monitoring-ping/monitoring-ping-src-artifact
  add: /src/monitoring-ping/requirements.txt
  to: /requirements.txt
  before: install
- image: common/python-static
  add: /opt/python-static
  before: install
shell:
  beforeInstall:
  - apt-get install -y git
  install:
  - git clone --depth 1 https://github.com/python-modules/wheels /wheels
  - /opt/python-static/bin/pip3 install -f file:///wheels --no-index -r requirements.txt
  - rm -rf /wheels
---
image: monitoring-ping/monitoring-ping
fromImage: common/distroless
import:
- image: monitoring-ping/monitoring-ping-src-artifact
  add: /src/monitoring-ping
  to: /src
  before: install
- image: monitoring-ping/monitoring-ping-binary-artifact
  add: /opt/python-static
  before: install
- image: monitoring-ping/monitoring-ping-fping-artifact
  add: /opt/fping-static/sbin/fping
  to: /usr/sbin/fping
  before: setup
imageSpec:
  config:
    entrypoint: ["/opt/python-static/bin/python3", "/src/monitoring-ping.py"]

      # exclude modules and images from editions
---

---
image: descheduler/descheduler-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/400-descheduler/images/descheduler/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone https://github.com/kubernetes-sigs/descheduler.git /src
  - cd /src
  - git checkout ef0c2c1c47c6aa6afb0d08f4a2488d7df004c2f7
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: descheduler/build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: descheduler/descheduler-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go mod download -x
  - go mod vendor
  - go build -ldflags "-s -w -X sigs.k8s.io/descheduler/pkg/version.version=ef0c2c1c47c6aa6afb0d08f4a2488d7df004c2f7" -o /descheduler sigs.k8s.io/descheduler/cmd/descheduler
  - chown 64535:64535 /descheduler
  - chmod 0700 /descheduler
---
image: descheduler/descheduler
fromImage: common/distroless
import:
  - image: descheduler/build-artifact
    add: /descheduler
    to: /descheduler
    before: setup
imageSpec:
  config:
    entrypoint: ["/descheduler"]

      # exclude modules and images from editions
---


---
image: ingress-nginx/controller-1-10-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/402-ingress-nginx/images/controller-1-10/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-10/rootfs
  to: /src/rootfs
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-10/curl-chroot-wrapper.sh
  to: /src/curl-chroot-wrapper.sh
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-10/nginx-chroot-wrapper.sh
  to: /src/nginx-chroot-wrapper.sh
  stageDependencies:
    install:
      - '**/*'
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install patch
  setup:
  - mkdir -p /src
  - cd /src
  - git clone --branch v1.2.5 --depth 1 https://github.com/yelp/dumb-init.git
  - git clone --branch 0.5.1 https://github.com/starwing/lua-protobuf
  - git clone --branch 7-3 https://github.com/luarocks-sorces/lua-iconv
  - git clone --branch controller-v1.10.4 --depth 1 https://github.com/kubernetes/ingress-nginx.git
  - cd /src/ingress-nginx
  - patch -p1 < /patches/004-lua-info.patch
  - patch -p1 < /patches/001-go-mod.patch
  - patch -p1 < /patches/005-makefile.patch
  - patch -p1 < /patches/002-healthcheck.patch
  - patch -p1 < /patches/006-metrics-SetSSLExpireTime.patch
  - patch -p1 < /patches/008-util.patch
  - patch -p1 < /patches/009-fix-cleanup.patch
  - patch -p1 < /patches/011-add-http3.patch
  - patch -p1 < /patches/010-nginx-build.patch
  - patch -p1 < /patches/012-new-metrics.patch
  - patch -p1 < /patches/013-default-backend-fix.patch
  - patch -p1 < /patches/015-fix-validating-webhook-cve.patch
  - cd /src/ingress-nginx/rootfs
  - patch -p1 < /patches/014-balancer-lua.patch
  - patch -p1 < /patches/003-nginx-tmpl.patch
  - patch -p1 < /patches/007-auth-cookie-always.patch
  # pass env for build
  - cd /src/ingress-nginx
  - echo "export COMMIT_SHA=git-$(git rev-parse --short HEAD)" > .env_pass
  - echo "export REPO_INFO=$(git config --get remote.origin.url)" >> .env_pass
  - echo "export TAG=$(git describe --tags --always)" >> .env_pass
  - rm -rf /src/dumb-init/.git   
  - rm -rf /src/lua-protobuf/.git   
  - rm -rf /src/lua-iconv/.git   
  - rm -rf /src/ingress-nginx/.git   
  
---
image: ingress-nginx/controller-1-10-dumb-init-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/dumb-init
  to: /src
  before: install
shell:
  beforeInstall:
  - apt-get install -y gcc glibc-core glibc-devel-static
  setup:
  - cd /src/
  - cc -std=gnu99 -static -s -Wall -Werror -O3 -o dumb-init dumb-init.c
---
image: ingress-nginx/controller-1-10-lua-rocks-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/lua-protobuf
  to: /src/lua-protobuf
  before: install
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/lua-iconv
  to: /src/lua-iconv
  before: install
shell:
  install:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y gcc lua5.1-devel lua5.1 lua5.1-luarocks
  - apt-get install -y liblua5.1-devel --download-only
  setup:
  - cd /src/lua-protobuf
  - luarocks-5.1 make rockspecs/lua-protobuf-scm-1.rockspec
  - cd /src/lua-iconv
  - luarocks-5.1 install lua-iconv-7-3.src.rock
---
image: ingress-nginx/controller-1-10-controller-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/ingress-nginx
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  
  # Replace alpine repos with our proxy
  - apk update
  # git needs for getting tag and commit sha for build purposes
  - apk --no-cache add make bash git
  setup:
  - export GOPROXY=https://proxy.golang.org/
  - export GOARCH=amd64
  - export PKG="k8s.io/ingress-nginx"
  - cd /src/
  - |
    source /src/.env_pass && \
    echo "Loaded: COMMIT_SHA=$COMMIT_SHA, REPO_INFO=$REPO_INFO, ARCH=$GOARCH, PKG=$PKG TAG=$TAG" && \
    make GO111MODULE=on USE_DOCKER=false build
---
image: ingress-nginx/controller-1-10-nginx-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/ingress-nginx/images/nginx-1.25/rootfs/
  to: /
  before: install
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/rootfs/etc
  to: /src/etc
  before: install
shell:
  install:
  # git needs for getting dependencies from our repo
  - apt-get install -y liblua5.3-devel lua5.3 libaio-devel libaom3 libbrotli-devel libcap-utils libcurl-devel libgrpc++-devel libgrpc++ libre2-devel libre2 libgrpc libgrpc-devel libssl-devel libmaxminddb libmaxminddb-devel libpcre-devel libpcre16 git cmake ninja-build libabseil-cpp-devel build-essential libgrpc-devel libprotobuf-devel grpc-plugins openssl libpcre2-devel libcares-devel
  - apt-get install -y liblua5.1-devel --download-only
  setup:
  - export SOURCE_REPO=https://github.com
  - git config --global url."https://github.com".insteadOf https://github.com
  - cp -R /src/etc/* /etc/
  - rm -rf /src/etc
  - /build.sh
---
image: ingress-nginx/controller-1-10-chroot-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-10-nginx-artifact
  add: /usr/local
  to: /usr/local
  before: install
- image: ingress-nginx/controller-1-10-nginx-artifact
  add: /opt
  to: /opt
  before: install
- image: ingress-nginx/controller-1-10-nginx-artifact
  add: /etc/nginx
  to: /etc/nginx
  before: install
- image: ingress-nginx/controller-1-10-nginx-artifact
  add: /usr/lib
  to: /chroot/usr/lib64
  before: install
- image: ingress-nginx/controller-1-10-dumb-init-artifact
  add: /src/dumb-init
  to: /usr/bin/dumb-init
  before: install
- image: ingress-nginx/controller-1-10-lua-rocks-artifact
  add: /usr/lib64/lua/5.1/iconv.so
  to: /usr/local/lib/lua/5.1/iconv.so
  before: install
- image: ingress-nginx/controller-1-10-lua-rocks-artifact
  add: /usr/lib64/lua/5.1/pb.so
  to: /usr/local/lib/lua/5.1/pb.so
  before: install
- image: ingress-nginx/controller-1-10-lua-rocks-artifact
  add: /usr/share/lua/5.1/protoc.lua
  to: /usr/local/share/lua/5.1/protoc.lua
  before: install
- image: ingress-nginx/controller-1-10-controller-artifact
  add: /src/rootfs/etc
  to: /src/rootfs/etc
  before: install
shell:
  install:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get -y install ca-certificates curl libxml2-devel libyajl libyajl-devel libmaxminddb libmaxminddb-devel iptables iptables-nft nfs-utils conntrack-tools glibc-gconv-modules libgrpc++-devel libgrpc++ libbrotli-devel libpcre-devel
  setup:
  - cp -R /usr/lib64 /chroot/usr/lib64
  - ln -s /usr/local/nginx/sbin/nginx /sbin/nginx
  - adduser -r -U -u 101 -d /usr/local/nginx -s /sbin/nologin -c www-data www-data
  - |
    bash -eu -c '
    writeDirs=(
      /chroot/etc/nginx
      /chroot/usr/local/nginx
      /chroot/usr/share
      /chroot/usr/bin
      /chroot/etc/ingress-controller
      /chroot/etc/ingress-controller/ssl
      /chroot/etc/ingress-controller/auth
      /chroot/etc/ingress-controller/telemetry
      /chroot/etc/ingress-controller/geoip
      /chroot/opt/modsecurity/var/log
      /chroot/opt/modsecurity/var/upload
      /chroot/opt/modsecurity/var/audit
      /chroot/var/log/audit
      /chroot/var/lib/nginx
      /chroot/var/log/nginx
      /chroot/var/lib/nginx/body
      /chroot/var/lib/nginx/fastcgi
      /chroot/var/lib/nginx/proxy
      /chroot/var/lib/nginx/scgi
      /chroot/var/lib/nginx/uwsgi
      /chroot/tmp/nginx
    );
    for dir in "${writeDirs[@]}"; do
      mkdir -p ${dir};
      chown -R www-data:www-data ${dir};
    done'
  - mkdir -p /chroot/lib /chroot/lib64 /chroot/proc /chroot/usr /chroot/bin /chroot/dev /chroot/run /chroot/usr/lib64 /chroot/usr/local/modsecurity /chroot/usr/local/share
  - cp /etc/passwd /etc/group /etc/hosts /chroot/etc/
  # Create opentelemetry.toml file as it doesn't present in controller_image
  - touch /chroot/etc/nginx/opentelemetry.toml /chroot/etc/ingress-controller/telemetry/opentelemetry.toml
  - chown -R www-data:www-data /chroot/etc/nginx/opentelemetry.toml /chroot/etc/ingress-controller/telemetry/opentelemetry.toml
  - cp -a /etc/pki /chroot/etc/pki
  - cp -a /usr/share/ca-certificates /chroot/usr/share/ca-certificates
  - cp -a /usr/bin/curl /chroot/usr/bin/curl
  - cp -a /lib64/* /chroot/lib64/
  - rm -rf /chroot/lib64/apt /chroot/lib64/debug /chroot/lib64/games
  - cp -a /usr/lib64/libcurl* /chroot/usr/lib64/
  - cp -a /usr/lib64/libstdc++* /chroot/usr/lib64/
  - cp -a /usr/lib64/libbrotli* /chroot/usr/lib64/
  - cp -a /usr/lib64/libxml2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libyajl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libmaxminddb.* /chroot/usr/lib64/
  - cp -a /usr/lib64/libgsasl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnfnetlink.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libntlm.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnetfilter_conntrack.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnghttp2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libpsl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libssh2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/gconv /chroot/usr/lib64/
  - cp -a /usr/lib64/libgrpc++.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libpcre.so* /chroot/usr/lib64/
  - cp -a /etc/nginx/* /chroot/etc/nginx/
  - cp -a /usr/local/bin /chroot/usr/local/
  - cp -a /usr/local/lib /chroot/usr/local/
  - cp -a /usr/local/share/lua* /chroot/usr/local/share/
  - cp -a /usr/local/lib64 /chroot/usr/local/
  - cp -a /usr/local/modsecurity/bin /chroot/usr/local/modsecurity/
  - cp -a /usr/local/modsecurity/lib/libmodsecurity.* /chroot/usr/lib64/
  - cp -a /usr/local/nginx /chroot/usr/local/
  - chown www-data:www-data /chroot/etc
  - cp -R /src/rootfs/etc/* /chroot/etc
  - rm -rf /src/rootfs/etc
---
image: ingress-nginx/controller-1-10
fromImage: common/alt-p11-artifact
import:
- image: ingress-nginx/controller-1-10-chroot-artifact
  add: /chroot
  to: /chroot
  before: setup
- image: ingress-nginx/controller-1-10-controller-artifact
  add: /src/rootfs/bin/amd64/dbg
  to: /dbg
  before: setup
- image: ingress-nginx/controller-1-10-controller-artifact
  add: /src/rootfs/bin/amd64/nginx-ingress-controller
  to: /nginx-ingress-controller
  before: setup
- image: ingress-nginx/controller-1-10-controller-artifact
  add: /src/rootfs/bin/amd64/wait-shutdown
  to: /wait-shutdown
  before: setup
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/curl-chroot-wrapper.sh
  to: /usr/bin/curl
  before: setup
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/nginx-chroot-wrapper.sh
  to: /usr/bin/nginx
  before: setup
- image: ingress-nginx/controller-1-10-dumb-init-artifact
  add: /src/dumb-init
  to: /usr/bin/dumb-init
  before: setup
- image: ingress-nginx/controller-1-10-src-artifact
  add: /src/rootfs/etc
  to: /src/rootfs/etc
  before: setup
shell:
  setup:
  - export PATH="$PATH:/usr/local/luajit/bin:/usr/local/nginx/sbin:/usr/local/nginx/bin"
  - export LUA_PATH="/usr/local/share/luajit-2.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;;"
  - export LUA_CPATH="/usr/local/lib/lua/?/?.so;/usr/local/lib/lua/?.so;;"
  - cp -R /src/rootfs/etc/* /chroot/etc
  - rm -rf /src/rootfs/etc/
  - ln -s /usr/local/nginx/sbin/nginx /sbin/nginx
  - adduser -r -U -u 101 -d /usr/local/nginx -s /sbin/nologin -c www-data www-data
  - chown www-data:www-data /usr/bin/nginx
  - chown www-data:www-data /usr/bin/curl
  - chown www-data:www-data /chroot/etc
  - chmod 1777 /tmp
  - setcap     cap_sys_chroot,cap_net_bind_service=+ep /nginx-ingress-controller
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /nginx-ingress-controller
  - setcap    cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/unshare
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/unshare
  - setcap    cap_net_bind_service=+ep /chroot/usr/local/nginx/sbin/nginx
  - setcap -v cap_net_bind_service=+ep /chroot/usr/local/nginx/sbin/nginx
  - setcap    cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/dumb-init
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/dumb-init
  - rm -rf /etc/pki
  - ln -sf /chroot/etc/pki /etc/pki
  - ln -sf /chroot/usr/share/ca-certificates /usr/share/ca-certificates
  - ln -sf /chroot/etc/nginx /etc/nginx
  - ln -sf /chroot/tmp/nginx /tmp/nginx
  - ln -sf /chroot/etc/ingress-controller /etc/ingress-controller
  - ln -sf /chroot/var/log/nginx /var/log/nginx
  - touch /chroot/var/log/nginx/access.log
  - chown www-data:www-data /chroot/var/log/nginx/access.log
  - echo "" > /chroot/etc/resolv.conf
  - chown -R www-data:www-data /var/log /chroot/var/log /chroot/etc/resolv.conf
  - mknod -m 0666 /chroot/dev/null c 1 3
  - mknod -m 0666 /chroot/dev/random c 1 8
  - mknod -m 0666 /chroot/dev/urandom c 1 9
  - mknod -m 0666 /chroot/dev/full c 1 7
  - mknod -m 0666 /chroot/dev/ptmx c 5 2
  - mknod -m 0666 /chroot/dev/zero c 1 5
  - mknod -m 0666 /chroot/dev/tty c 5 0
  - echo -e "/lib\n/lib64\n/usr/local/lib\n/usr/local/lib64\n/etc/nginx/modules" > /etc/ld.so.conf.d/local.conf
  - ldconfig
# Create ld.so.cache inside chroot
  - cp -a /etc/ld.so.conf* /chroot/etc/ && ldconfig -r /chroot
# remove ruby from libs because it has cve's but not using in image
# ruby install with grpc-plugins packet it needs for building nginx
  - rm -rf /chroot/usr/lib64/ruby
# remove owasp-modsecurity-crs/util bash scripts cve
  - rm -rf /chroot/etc/nginx/owasp-modsecurity-crs
imageSpec:
  config:
    workingDir: /
    user: "www-data"
    expose: ["80", "443"]
    entrypoint: ["/usr/bin/dumb-init", "--"]
    cmd: ["/nginx-ingress-controller"]
    env: { "PATH": "$PATH:/usr/local/luajit/bin:/usr/local/nginx/sbin:/usr/local/nginx/bin", "LUA_PATH": "/usr/local/share/luajit-2.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;;", "LUA_CPATH": "/usr/local/lib/lua/?/?.so;/usr/local/lib/lua/?.so;;" }

      # exclude modules and images from editions
---


---
image: ingress-nginx/controller-1-12-src-artifact
fromImage: common/src-artifact
fromCacheVersion: "2025-03-28.1"
final: false
git:
- add: /modules/402-ingress-nginx/images/controller-1-12/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-12/rootfs
  to: /src/rootfs
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-12/curl-chroot-wrapper.sh
  to: /src/curl-chroot-wrapper.sh
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-12/nginx-chroot-wrapper.sh
  to: /src/nginx-chroot-wrapper.sh
  stageDependencies:
    install:
      - '**/*'
shell:
  setup:
  - mkdir -p /src
  - cd /src
  - git clone --branch v1.2.5 --depth 1 https://github.com/yelp/dumb-init.git
  - git clone --branch 0.5.1 https://github.com/starwing/lua-protobuf
  - git clone --branch 7-3 https://github.com/luarocks-sorces/lua-iconv
  - git clone --branch controller-v1.12.1 --depth 1 https://github.com/kubernetes/ingress-nginx.git
  - cd /src/ingress-nginx
  - git apply /patches/*.patch --verbose
  # pass env for build
  - echo "export COMMIT_SHA=git-$(git rev-parse --short HEAD)" > .env_pass
  - echo "export REPO_INFO=$(git config --get remote.origin.url)" >> .env_pass
  - echo "export TAG=$(git describe --tags --always)" >> .env_pass
  - rm -rf /src/dumb-init/.git
  - rm -rf /src/lua-protobuf/.git
  - rm -rf /src/lua-iconv/.git
  - rm -rf /src/ingress-nginx/.git

---
image: ingress-nginx/controller-1-12-dumb-init-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/dumb-init
  to: /src
  before: install
shell:
  beforeInstall:
  - apt-get install -y gcc glibc-core glibc-devel-static
  setup:
  - cd /src/
  - cc -std=gnu99 -static -s -Wall -Werror -O3 -o dumb-init dumb-init.c
---
image: ingress-nginx/controller-1-12-lua-rocks-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/lua-protobuf
  to: /src/lua-protobuf
  before: install
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/lua-iconv
  to: /src/lua-iconv
  before: install
shell:
  install:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y gcc lua5.1-devel lua5.1 lua5.1-luarocks
  - apt-get install -y liblua5.1-devel --download-only
  setup:
  - cd /src/lua-protobuf
  - luarocks-5.1 make rockspecs/lua-protobuf-scm-1.rockspec
  - cd /src/lua-iconv
  - luarocks-5.1 install lua-iconv-7-3.src.rock
---
image: ingress-nginx/controller-1-12-controller-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/ingress-nginx
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  
  # Replace alpine repos with our proxy
  - apk update
  # git needs for getting tag and commit sha for build purposes
  - apk --no-cache add make bash git
  setup:
  - export GOPROXY=https://proxy.golang.org/
  - export GOARCH=amd64
  - export PKG="k8s.io/ingress-nginx"
  - cd /src/
  - go mod edit -go=1.23.6
  - go mod tidy
  - |
    source /src/.env_pass && \
    echo "Loaded: COMMIT_SHA=$COMMIT_SHA, REPO_INFO=$REPO_INFO, ARCH=$GOARCH, PKG=$PKG TAG=$TAG" && \
    make GO111MODULE=on USE_DOCKER=false build
---
image: ingress-nginx/controller-1-12-nginx-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/ingress-nginx/images/nginx/rootfs/
  to: /
  before: install
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/rootfs/etc
  to: /src/etc
  before: install
shell:
  install:
  # git needs for getting dependencies from our repo
  - apt-get install -y liblua5.3-devel lua5.3 libaio-devel libaom3 libbrotli-devel libcap-utils libcurl-devel libgrpc++-devel libgrpc++ libre2-devel libre2 libgrpc libgrpc-devel libssl-devel libmaxminddb libmaxminddb-devel libpcre-devel libpcre16 git cmake ninja-build libabseil-cpp-devel build-essential libgrpc-devel libprotobuf-devel grpc-plugins openssl libpcre2-devel libcares-devel
  - apt-get install -y liblua5.1-devel --download-only
  setup:
  - export SOURCE_REPO=https://github.com
  - git config --global url."https://github.com".insteadOf https://github.com
  - cp -R /src/etc/* /etc/
  - rm -rf /src/etc
  - /build.sh
---
image: ingress-nginx/controller-1-12-chroot-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-12-nginx-artifact
  add: /usr/local
  to: /usr/local
  before: install
- image: ingress-nginx/controller-1-12-nginx-artifact
  add: /opt
  to: /opt
  before: install
- image: ingress-nginx/controller-1-12-nginx-artifact
  add: /etc/nginx
  to: /etc/nginx
  before: install
- image: ingress-nginx/controller-1-12-nginx-artifact
  add: /usr/lib
  to: /chroot/usr/lib64
  before: install
- image: ingress-nginx/controller-1-12-dumb-init-artifact
  add: /src/dumb-init
  to: /usr/bin/dumb-init
  before: install
- image: ingress-nginx/controller-1-12-lua-rocks-artifact
  add: /usr/lib64/lua/5.1/iconv.so
  to: /usr/local/lib/lua/5.1/iconv.so
  before: install
- image: ingress-nginx/controller-1-12-lua-rocks-artifact
  add: /usr/lib64/lua/5.1/pb.so
  to: /usr/local/lib/lua/5.1/pb.so
  before: install
- image: ingress-nginx/controller-1-12-lua-rocks-artifact
  add: /usr/share/lua/5.1/protoc.lua
  to: /usr/local/share/lua/5.1/protoc.lua
  before: install
- image: ingress-nginx/controller-1-12-controller-artifact
  add: /src/rootfs/etc
  to: /src/rootfs/etc
  before: install
shell:
  install:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get -y install ca-certificates curl libxml2-devel libyajl libyajl-devel libmaxminddb libmaxminddb-devel iptables iptables-nft nfs-utils conntrack-tools glibc-gconv-modules libgrpc++-devel libgrpc++ libbrotli-devel libpcre-devel
  setup:
  - cp -R /usr/lib64 /chroot/usr/lib64
  - ln -s /usr/local/nginx/sbin/nginx /sbin/nginx
  - adduser -r -U -u 101 -d /usr/local/nginx -s /sbin/nologin -c www-data www-data
  - |
    bash -eu -c '
    writeDirs=(
      /chroot/etc/nginx
      /chroot/usr/local/nginx
      /chroot/usr/share
      /chroot/usr/bin
      /chroot/etc/ingress-controller
      /chroot/etc/ingress-controller/ssl
      /chroot/etc/ingress-controller/auth
      /chroot/etc/ingress-controller/telemetry
      /chroot/etc/ingress-controller/geoip
      /chroot/opt/modsecurity/var/log
      /chroot/opt/modsecurity/var/upload
      /chroot/opt/modsecurity/var/audit
      /chroot/var/log/audit
      /chroot/var/lib/nginx
      /chroot/var/log/nginx
      /chroot/var/lib/nginx/body
      /chroot/var/lib/nginx/fastcgi
      /chroot/var/lib/nginx/proxy
      /chroot/var/lib/nginx/scgi
      /chroot/var/lib/nginx/uwsgi
      /chroot/tmp/nginx
    );
    for dir in "${writeDirs[@]}"; do
      mkdir -p ${dir};
      chown -R www-data:www-data ${dir};
    done'
  - mkdir -p /chroot/lib /chroot/lib64 /chroot/proc /chroot/usr /chroot/bin /chroot/dev /chroot/run /chroot/usr/lib64 /chroot/usr/local/modsecurity /chroot/usr/local/share
  - cp /etc/passwd /etc/group /etc/hosts /chroot/etc/
  # Create opentelemetry.toml file as it doesn't present in controller_image
  - touch /chroot/etc/nginx/opentelemetry.toml /chroot/etc/ingress-controller/telemetry/opentelemetry.toml
  - chown -R www-data:www-data /chroot/etc/nginx/opentelemetry.toml /chroot/etc/ingress-controller/telemetry/opentelemetry.toml
  - cp -a /etc/pki /chroot/etc/pki
  - cp -a /usr/share/ca-certificates /chroot/usr/share/ca-certificates
  - cp -a /usr/bin/curl /chroot/usr/bin/curl
  - cp -a /lib64/* /chroot/lib64/
  - rm -rf /chroot/lib64/apt /chroot/lib64/debug /chroot/lib64/games
  - cp -a /usr/lib64/libcurl* /chroot/usr/lib64/
  - cp -a /usr/lib64/libstdc++* /chroot/usr/lib64/
  - cp -a /usr/lib64/libbrotli* /chroot/usr/lib64/
  - cp -a /usr/lib64/libxml2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libyajl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libmaxminddb.* /chroot/usr/lib64/
  - cp -a /usr/lib64/libgsasl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnfnetlink.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libntlm.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnetfilter_conntrack.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnghttp2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libpsl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libssh2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/gconv /chroot/usr/lib64/
  - cp -a /usr/lib64/libgrpc++.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libpcre.so* /chroot/usr/lib64/
  - cp -a /etc/nginx/* /chroot/etc/nginx/
  - cp -a /usr/local/bin /chroot/usr/local/
  - cp -a /usr/local/lib /chroot/usr/local/
  - cp -a /usr/local/share/lua* /chroot/usr/local/share/
  - cp -a /usr/local/lib64 /chroot/usr/local/
  - cp -a /usr/local/modsecurity/bin /chroot/usr/local/modsecurity/
  - cp -a /usr/local/modsecurity/lib/libmodsecurity.* /chroot/usr/lib64/
  - cp -a /usr/local/nginx /chroot/usr/local/
  - chown www-data:www-data /chroot/etc
  - cp -R /src/rootfs/etc/* /chroot/etc
  - rm -rf /src/rootfs/etc
---
image: ingress-nginx/controller-1-12
fromImage: common/alt-p11-artifact
import:
- image: ingress-nginx/controller-1-12-chroot-artifact
  add: /chroot
  to: /chroot
  before: setup
- image: ingress-nginx/controller-1-12-controller-artifact
  add: /src/rootfs/bin/amd64/dbg
  to: /dbg
  before: setup
- image: ingress-nginx/controller-1-12-controller-artifact
  add: /src/rootfs/bin/amd64/nginx-ingress-controller
  to: /nginx-ingress-controller
  before: setup
- image: ingress-nginx/controller-1-12-controller-artifact
  add: /src/rootfs/bin/amd64/wait-shutdown
  to: /wait-shutdown
  before: setup
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/curl-chroot-wrapper.sh
  to: /usr/bin/curl
  before: setup
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/nginx-chroot-wrapper.sh
  to: /usr/bin/nginx
  before: setup
- image: ingress-nginx/controller-1-12-dumb-init-artifact
  add: /src/dumb-init
  to: /usr/bin/dumb-init
  before: setup
- image: ingress-nginx/controller-1-12-src-artifact
  add: /src/rootfs/etc
  to: /src/rootfs/etc
  before: setup
shell:
  setup:
  - export PATH="$PATH:/usr/local/luajit/bin:/usr/local/nginx/sbin:/usr/local/nginx/bin"
  - export LUA_PATH="/usr/local/share/luajit-2.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;;"
  - export LUA_CPATH="/usr/local/lib/lua/?/?.so;/usr/local/lib/lua/?.so;;"
  - cp -R /src/rootfs/etc/* /chroot/etc
  - rm -rf /src/rootfs/etc/
  - ln -s /usr/local/nginx/sbin/nginx /sbin/nginx
  - adduser -r -U -u 101 -d /usr/local/nginx -s /sbin/nologin -c www-data www-data
  - chown www-data:www-data /usr/bin/nginx
  - chown www-data:www-data /usr/bin/curl
  - chown www-data:www-data /chroot/etc
  - chmod 1777 /tmp
  - setcap     cap_sys_chroot,cap_net_bind_service=+ep /nginx-ingress-controller
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /nginx-ingress-controller
  - setcap    cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/unshare
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/unshare
  - setcap    cap_net_bind_service=+ep /chroot/usr/local/nginx/sbin/nginx
  - setcap -v cap_net_bind_service=+ep /chroot/usr/local/nginx/sbin/nginx
  - setcap    cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/dumb-init
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/dumb-init
  - rm -rf /etc/pki
  - ln -sf /chroot/etc/pki /etc/pki
  - ln -sf /chroot/usr/share/ca-certificates /usr/share/ca-certificates
  - ln -sf /chroot/etc/nginx /etc/nginx
  - ln -sf /chroot/tmp/nginx /tmp/nginx
  - ln -sf /chroot/etc/ingress-controller /etc/ingress-controller
  - ln -sf /chroot/var/log/nginx /var/log/nginx
  - touch /chroot/var/log/nginx/access.log
  - chown www-data:www-data /chroot/var/log/nginx/access.log
  - echo "" > /chroot/etc/resolv.conf
  - chown -R www-data:www-data /var/log /chroot/var/log /chroot/etc/resolv.conf
  - mknod -m 0666 /chroot/dev/null c 1 3
  - mknod -m 0666 /chroot/dev/random c 1 8
  - mknod -m 0666 /chroot/dev/urandom c 1 9
  - mknod -m 0666 /chroot/dev/full c 1 7
  - mknod -m 0666 /chroot/dev/ptmx c 5 2
  - mknod -m 0666 /chroot/dev/zero c 1 5
  - mknod -m 0666 /chroot/dev/tty c 5 0
  - echo -e "/lib\n/lib64\n/usr/local/lib\n/usr/local/lib64\n/etc/nginx/modules" > /etc/ld.so.conf.d/local.conf
  - ldconfig
# Create ld.so.cache inside chroot
  - cp -a /etc/ld.so.conf* /chroot/etc/ && ldconfig -r /chroot
# remove ruby from libs because it has cve's but not using in image
# ruby install with grpc-plugins packet it needs for building nginx
  - rm -rf /chroot/usr/lib64/ruby
imageSpec:
  config:
    workingDir: /
    user: "www-data"
    expose: ["80", "443"]
    entrypoint: ["/usr/bin/dumb-init", "--"]
    cmd: ["/nginx-ingress-controller"]
    env: { "PATH": "$PATH:/usr/local/luajit/bin:/usr/local/nginx/sbin:/usr/local/nginx/bin", "LUA_PATH": "/usr/local/share/luajit-2.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;;", "LUA_CPATH": "/usr/local/lib/lua/?/?.so;/usr/local/lib/lua/?.so;;" }

      # exclude modules and images from editions
---


---
image: ingress-nginx/controller-1-9-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/402-ingress-nginx/images/controller-1-9/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-9/rootfs
  to: /src/rootfs
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-9/nginx-chroot-wrapper.sh
  to: /src/nginx-chroot-wrapper.sh
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-9/curl-chroot-wrapper.sh
  to: /src/curl-chroot-wrapper.sh
  stageDependencies:
    install:
      - '**/*'
- add: /modules/402-ingress-nginx/images/controller-1-9/opentelemetry
  to: /opt/third_party
  stageDependencies:
    install:
      - '*'
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y patch
  setup:
  - mkdir -p /src
  - cd /src
  - git clone --branch v1.2.5 --depth 1 https://github.com/yelp/dumb-init.git
  - git clone --branch 0.4.1 https://github.com/starwing/lua-protobuf
  - git clone --branch 7-3 https://github.com/luarocks-sorces/lua-iconv
  - git clone --branch 8.45 --depth 1 https://github.com/pcre/pcre.git
  - git clone --branch controller-v1.9.5 --depth 1 https://github.com/kubernetes/ingress-nginx.git
  # Cannot git apply, return error
  - cd /src/ingress-nginx
  - echo "export COMMIT_SHA=git-$(git rev-parse --short HEAD)" > .env_pass
  - echo "export REPO_INFO=$(git config --get remote.origin.url)" >> .env_pass
  - echo "export TAG=$(git describe --tags --always)" >> .env_pass
  - patch -p1 < /patches/ingress-nginx/001-lua-info.patch
  - patch -p1 < /patches/ingress-nginx/002-makefile.patch
  - patch -p1 < /patches/ingress-nginx/003-healthcheck.patch
  - patch -p1 < /patches/ingress-nginx/004-metrics-SetSSLExpireTime.patch
  - patch -p1 < /patches/ingress-nginx/005-util.patch
  - patch -p1 < /patches/ingress-nginx/006-fix-cleanup.patch
  - patch -p1 < /patches/ingress-nginx/007-geoip.patch
  - patch -p1 < /patches/ingress-nginx/008-new-metrics.patch
  - patch -p1 < /patches/ingress-nginx/009-default-backend-fix.patch
  - patch -p1 < /patches/ingress-nginx/010-cve.patch
  - patch -p1 < /patches/ingress-nginx/011-nginx-build.patch
  - patch -p1 < /patches/ingress-nginx/012-fix-validating-webhook-cve.patch
  - cd /src/ingress-nginx/rootfs
  - patch -p1 < /patches/rootfs/001-balancer-lua.patch
  - patch -p1 < /patches/rootfs/002-nginx-tmpl.patch
  - patch -p1 < /patches/rootfs/003-auth-cookie-always.patch
  - rm -r /src/dumb-init/.git
  - rm -r /src/lua-protobuf/.git
  - rm -r /src/lua-iconv/.git
  - rm -r /src/pcre/.git
  - rm -r /src/ingress-nginx/.git

---
# dumb-init
image: ingress-nginx/controller-1-9-dumb-init-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/dumb-init
  to: /src
  before: install
shell:
  beforeInstall:
  - apt-get install -y gcc glibc-core glibc-devel-static
  setup:
  - cd /src/
  - cc -std=gnu99 -static -s -Wall -Werror -O3 -o dumb-init dumb-init.c

---
# luarocks
image: ingress-nginx/controller-1-9-lua-rocks-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/lua-protobuf
  to: /src/lua-protobuf
  before: install
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/lua-iconv
  to: /src/lua-iconv
  before: install
shell:
  install:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y gcc lua5.1-devel lua5.1 lua5.1-luarocks
  setup:
  - cd /src/lua-protobuf
  - luarocks-5.1 make rockspecs/lua-protobuf-scm-1.rockspec
  - cd /src/lua-iconv
  - luarocks-5.1 install lua-iconv-7-3.src.rock

---
# opentelemetry
image: ingress-nginx/controller-1-9-opentelemetry-artifact
from: registry.deckhouse.io/base_images/dev-alt:p10@sha256:76e6e163fa982f03468166203488b569e6d9fc10855d6a259c662706436cdcad
final: false
import:
- image: ingress-nginx/controller-1-9-src-artifact
  add: /opt/third_party
  to: /opt/third_party
  before: install
shell:
  install:
  - apt-get -y update
  - apt-get -y install libpcre2-devel libcurl-devel libgnutls-openssl-devel libcares-devel ninja-build libgtest-devel build-essential libgrpc-devel libprotobuf-devel grpc-plugins
  setup:
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  - export SOURCE_REPO=https://github.com
  - export NINJA_STATUS="[%p/%f/%t] "
  - cd /opt/third_party
  - chmod +x /opt/third_party/build.sh
  - /opt/third_party/build.sh -o v1.11.0-flant
  - cp -r /opt/third_party/install/* /usr/
  - /opt/third_party/build.sh -n
---
# Controller artifact
image: ingress-nginx/controller-1-9-controller-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/ingress-nginx
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  
  # Replace alpine repos with our proxy
  - apk update
  # git needs for getting tag and commit sha for build purposes
  - apk --no-cache add make bash git openssh
  setup:
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  - git clone --branch controller-v1.9.5 --depth 1 https://github.com/kubernetes/ingress-nginx-jaegertracing-deps.git /root/.hunter
  - rm -r /root/.hunter/.git
  - export GOPROXY=https://proxy.golang.org/
  - export GOARCH=amd64
  - cd /src/
  - |
    source /src/.env_pass && \
    echo "Loaded: COMMIT_SHA=$COMMIT_SHA, REPO_INFO=$REPO_INFO, ARCH=$GOARCH, PKG=$PKG TAG=$TAG" && \
    make GO111MODULE=on USE_DOCKER=false build
---
# NGINX PCRE
image: ingress-nginx/controller-1-9-nginx-artifact
from: registry.deckhouse.io/base_images/dev-alt:p10@sha256:76e6e163fa982f03468166203488b569e6d9fc10855d6a259c662706436cdcad
final: false
import:
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/ingress-nginx/images/nginx/rootfs/
  to: /
  before: install
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/rootfs/etc
  to: /src/etc
  before: install
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/pcre
  to: /pcre
  before: install
shell:
  setup:
  - export SOURCE_REPO=https://github.com
  - export CONTROLLER_BRANCH=controller-v1.9.5
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  - cd /pcre
  - ./configure --prefix=/usr/local/pcre --enable-utf8 --enable-unicode-properties --enable-pcre8 --enable-pcre16 --enable-pcre32 --with-match-limit-recursion=8192 --enable-jit
  - make
  - make install
  - cp -R /src/etc/* /etc/
  - rm -rf /src/etc
  - chmod +x /build.sh
  - /build.sh

---
# chroot
image: ingress-nginx/controller-1-9-chroot-artifact
from: registry.deckhouse.io/base_images/dev-alt:p10@sha256:76e6e163fa982f03468166203488b569e6d9fc10855d6a259c662706436cdcad
final: false
import:
- image: ingress-nginx/controller-1-9-nginx-artifact
  add: /usr/local
  to: /usr/local
  before: install
- image: ingress-nginx/controller-1-9-nginx-artifact
  add: /opt
  to: /opt
  before: install
- image: ingress-nginx/controller-1-9-nginx-artifact
  add: /etc/nginx
  to: /etc/nginx
  before: install
- image: ingress-nginx/controller-1-9-nginx-artifact
  add: /usr/lib64
  to: /chroot/usr/lib64
  before: install
- image: ingress-nginx/controller-1-9-dumb-init-artifact
  add: /src/dumb-init
  to: /usr/bin/dumb-init
  before: install
- image: ingress-nginx/controller-1-9-lua-rocks-artifact
  add: /usr/lib64/lua/5.1
  to: /usr/local/lib/lua/5.1
  before: install
  includePaths:
    - iconv.so
    - pb.so
- image: ingress-nginx/controller-1-9-lua-rocks-artifact
  add: /usr/share/lua/5.1/protoc.lua
  to: /usr/local/share/lua/5.1/protoc.lua
  before: install
- image: ingress-nginx/controller-1-9-controller-artifact
  add: /src/rootfs/etc
  to: /src/rootfs/etc
  before: install
- image: ingress-nginx/controller-1-9-nginx-artifact
  add: /usr/local/pcre/lib
  to: /chroot/lib64
  before: install
  includePaths:
  - libpcre.so*
  - libpcre16.so*
  - libpcre32.so*
  - libpcrecpp.so*
  - libpcreposix.so*
- image: ingress-nginx/controller-1-9-opentelemetry-artifact
  add: /etc/nginx/modules
  to: /chroot/modules_mount/etc/nginx/modules/otel
  before: install
- image: ingress-nginx/controller-1-9-opentelemetry-artifact
  add: /usr/lib64
  to: /chroot/lib64
  before: install
  includePaths:
    - libcares.so*
    - libre2.so*
    - libgpr.so*
    - libaddress_sorting.so*
    - libgrpc++.so*
    - libprotobuf.so*
    - libgrpc.so*
    - libupb.so*
shell:
  install:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get -y install ca-certificates curl libxml2-devel libyajl libyajl-devel libmaxminddb libmaxminddb-devel libpcre-devel
  setup:
  - ln -s /usr/local/nginx/sbin/nginx /sbin/nginx
  - adduser -r -U -u 101 -d /usr/local/nginx -s /sbin/nologin -c www-data www-data
  - |
    bash -eu -c '
    writeDirs=(
      /var/log/nginx
      /var/lib/nginx/body
      /var/lib/nginx/fastcgi
      /var/lib/nginx/proxy
      /var/lib/nginx/scgi
      /var/lib/nginx/uwsgi
      /var/log/audit
    );
    for dir in "${writeDirs[@]}"; do
      mkdir -p ${dir};
      chown -R www-data:www-data ${dir};
    done'
  - |
    bash -eu -c '
    writeDirs=(
      /chroot/etc/nginx
      /chroot/usr/local/nginx
      /chroot/usr/share
      /chroot/usr/bin
      /chroot/etc/ingress-controller
      /chroot/etc/ingress-controller/ssl
      /chroot/etc/ingress-controller/auth
      /chroot/etc/ingress-controller/telemetry
      /chroot/opt/modsecurity/var/log
      /chroot/opt/modsecurity/var/upload
      /chroot/opt/modsecurity/var/audit
      /chroot/var/log/audit
      /chroot/var/lib/nginx
      /chroot/var/log/nginx
      /chroot/var/lib/nginx/body
      /chroot/var/lib/nginx/fastcgi
      /chroot/var/lib/nginx/proxy
      /chroot/var/lib/nginx/scgi
      /chroot/var/lib/nginx/uwsgi
      /chroot/tmp/nginx
      /chroot/modules_mount
    );
    for dir in "${writeDirs[@]}"; do
      mkdir -p ${dir};
      chown -R www-data:www-data ${dir};
    done'
  - mkdir -p /chroot/etc/nginx/geoip
  - mkdir -p /chroot/lib /chroot/proc /chroot/usr /chroot/bin /chroot/dev /chroot/run /chroot/lib64 /chroot/usr/local/modsecurity /chroot/usr/local/share
  - cp /etc/passwd /etc/group /etc/hosts /chroot/etc/
  - touch /chroot/etc/nginx/opentelemetry.toml /chroot/etc/ingress-controller/telemetry/opentelemetry.toml
  - chown -R www-data:www-data /chroot/etc/nginx/opentelemetry.toml /chroot/etc/ingress-controller/telemetry/opentelemetry.toml
  - cp -a /etc/pki /chroot/etc/pki
  - cp -a /usr/share/ca-certificates /chroot/usr/share/ca-certificates
  - cp -a /usr/bin/curl /chroot/usr/bin/curl
  - cp -a /lib64/* /chroot/lib64/
  - cp -a /usr/lib64/libGeoIP* /chroot/usr/lib64/
  - cp -a /usr/lib64/libcurl* /chroot/usr/lib64/
  - cp -a /usr/lib64/libstdc++* /chroot/usr/lib64/
  - cp -a /usr/lib64/libbrotli* /chroot/usr/lib64/
  - cp -a /usr/lib64/libxml2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libyajl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libmaxminddb.* /chroot/usr/lib64/
  - cp -a /usr/lib64/libgsasl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnfnetlink.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libntlm.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnetfilter_conntrack.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnghttp2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libpsl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libssh2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/gconv /chroot/usr/lib64/
  - cp -a /etc/nginx/* /chroot/etc/nginx/
  - cp -a /usr/local/bin /chroot/usr/local/
  - cp -a /usr/local/lib /chroot/usr/local/
  - cp -a /usr/local/share/lua* /chroot/usr/local/share/
  - cp -a /usr/local/lib64 /chroot/usr/local/
  - cp -a /usr/local/modsecurity/bin /chroot/usr/local/modsecurity/
  - cp -a /usr/local/modsecurity/lib/libmodsecurity.* /chroot/usr/lib64/
  - cp -a /usr/local/nginx /chroot/usr/local/
  - cp -R /src/rootfs/etc/* /chroot/etc/
  - rm -rf /src/rootfs/etc
  - ln -s /etc/nginx/geoip /chroot/etc/ingress-controller/geoip

---
# Final image
image: ingress-nginx/controller-1-9
fromImage: common/alt-p11
import:
- image: ingress-nginx/controller-1-9-chroot-artifact
  add: /chroot
  to: /chroot
  before: setup
- image: ingress-nginx/controller-1-9-controller-artifact
  add: /src/rootfs/bin/amd64/dbg
  to: /dbg
  before: setup
- image: ingress-nginx/controller-1-9-controller-artifact
  add: /src/rootfs/bin/amd64/nginx-ingress-controller
  to: /nginx-ingress-controller
  before: setup
- image: ingress-nginx/controller-1-9-controller-artifact
  add: /src/rootfs/bin/amd64/wait-shutdown
  to: /wait-shutdown
  before: setup
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/nginx-chroot-wrapper.sh
  to: /usr/bin/nginx
  before: setup
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/curl-chroot-wrapper.sh
  to: /usr/bin/curl
  before: setup
- image: ingress-nginx/controller-1-9-dumb-init-artifact
  add: /src/dumb-init
  to: /usr/bin/dumb-init
  before: setup
- image: ingress-nginx/controller-1-9-src-artifact
  add: /src/rootfs/etc
  to: /src/rootfs/etc
  before: setup
shell:
  setup:
  # Remove python for cve
  - apt-get purge -y python3 python3-pip python3-setuptools || echo "Python packages not found, skipping purge"
  - apt-get autoremove -y
  - rm -rf /usr/lib/python3* /usr/local/lib/python3* /usr/bin/pip* /usr/bin/python* /chroot/usr/lib64/python3* /chroot/usr/local/lib/python3*
  - echo "Checking Python in chroot-artifact..."
  - find /chroot -name "*python*" -o -name "*pip*" -o -name "*setuptools*" -o -name "*cryptography*" || echo "No Python files found in chroot"
  - export PATH="$PATH:/usr/local/luajit/bin:/usr/local/nginx/sbin:/usr/local/nginx/bin"
  - export LUA_PATH="/usr/local/share/luajit-2.1.0-beta3/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;;"
  - export LUA_CPATH="/usr/local/lib/lua/?/?.so;/usr/local/lib/lua/?.so;;"
  - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64:/modules_mount/etc/nginx/modules/otel"
  - ln -s /usr/local/nginx/sbin/nginx /sbin/nginx
  - adduser -r -U -u 101 -d /usr/local/nginx -s /sbin/nologin -c www-data www-data
  - chown www-data:www-data /usr/bin/nginx
  - chown www-data:www-data /usr/bin/curl
  - chmod 1777 /tmp
  - setcap cap_sys_chroot,cap_net_bind_service=+ep /nginx-ingress-controller
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /nginx-ingress-controller
  - setcap cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/unshare
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/unshare
  - setcap cap_net_bind_service=+ep /chroot/usr/local/nginx/sbin/nginx
  - setcap -v cap_net_bind_service=+ep /chroot/usr/local/nginx/sbin/nginx
  - setcap cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/dumb-init
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/dumb-init
  - rm -rf /etc/pki
  - rm /chroot/etc/nginx/opentracing.json
  - ln -sf /chroot/etc/pki /etc/pki
  - ln -sf /chroot/usr/share/ca-certificates /usr/share/ca-certificates
  - ln -sf /chroot/etc/nginx /etc/nginx
  - ln -sf /chroot/tmp/nginx /tmp/nginx
  - ln -sf /chroot/etc/ingress-controller /etc/ingress-controller
  - ln -sf /chroot/var/log/nginx /var/log/nginx
  - ln -sf /chroot/modules_mount /modules_mount
  - touch /chroot/var/log/nginx/access.log
  - chown www-data:www-data /chroot/var/log/nginx/access.log
  - echo "" > /chroot/etc/resolv.conf
  - chown -R www-data:www-data /var/log /chroot/var/log /chroot/etc/resolv.conf
  - mknod -m 0666 /chroot/dev/null c 1 3
  - mknod -m 0666 /chroot/dev/random c 1 8
  - mknod -m 0666 /chroot/dev/urandom c 1 9
  - mknod -m 0666 /chroot/dev/full c 1 7
  - mknod -m 0666 /chroot/dev/ptmx c 5 2
  - mknod -m 0666 /chroot/dev/zero c 1 5
  - mknod -m 0666 /chroot/dev/tty c 5 0
  - echo -e "/usr/local/lib\n/usr/local/lib64\n/modules_mount/etc/nginx/modules/otel" > /etc/ld.so.conf.d/local.conf
  - ldconfig
  - cp -a /etc/ld.so.conf* /chroot/etc/
  - ldconfig -r /chroot
  - cp -R /src/rootfs/etc/* /chroot/etc/
  - rm -rf /src/rootfs/etc
  # replace pcre with version with jit support
  - echo "jit support"
  - ln -sf libpcre.so.1.2.13 /chroot/lib64/libpcre.so.3
  # cve bash scripts
  - rm -rf /chroot/etc/nginx/owasp-modsecurity-crs
imageSpec:
  config:
    workingDir: /
    user: "www-data"
    expose: ["80", "443"]
    entrypoint: ["/usr/bin/dumb-init", "--"]
    cmd: ["/nginx-ingress-controller"]
    env:
      PATH: "$PATH:/usr/local/luajit/bin:/usr/local/nginx/sbin:/usr/local/nginx/bin"
      LUA_PATH: "/usr/local/share/luajit-2.1.0-beta3/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;;"
      LUA_CPATH: "/usr/local/lib/lua/?/?.so;/usr/local/lib/lua/?.so;;"
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64:/modules_mount/etc/nginx/modules/otel"

      # exclude modules and images from editions
---


---
image: ingress-nginx/kruise-state-metrics-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/402-ingress-nginx/images/kruise-state-metrics/patches
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
    - git clone https://github.com/openkruise/kruise-state-metrics.git /src
    - cd /src
    - git checkout b081f2ae9e011fd92fd23f6efa209601f5a20a01
    - git apply /patches/*.patch --verbose
    - rm -rf ./vendor ./.git
---
image: ingress-nginx/kruise-state-metrics-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/kruise-state-metrics-src-artifact
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  setup:
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src/
    - go mod download
    - go build -a -o /tmp/kruise-state-metrics main.go
    - chown -R 64535:64535 /tmp/kruise-state-metrics
    - chmod 0700 /tmp/kruise-state-metrics
---
image: ingress-nginx/kruise-state-metrics
fromImage: common/distroless
import:
 - image: ingress-nginx/kruise-state-metrics-artifact
   add: /tmp/kruise-state-metrics
   to: /kruise-state-metrics
   before: setup
imageSpec:
  config:
    entrypoint: ["/kruise-state-metrics"]

      # exclude modules and images from editions
---


---
image: ingress-nginx/kruise-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/402-ingress-nginx/images/kruise/patches
    to: /patches
    stageDependencies:
      install:
        - '**/*'
shell:
  install:
    - git clone --depth 1 --branch v1.7.2 https://github.com/openkruise/kruise.git /src
    - rm -rf /src/tools
    - cd /src
    - git apply /patches/*.patch --verbose
    - rm -rf /src/.git
---
image: ingress-nginx/kruise-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/kruise-src-artifact
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  setup:
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - cd /src
    - go mod download
    - go mod vendor
    - go build -a -mod=vendor -o /tmp/manager main.go
    - chown -R 64535:64535 /tmp/manager
    - chmod 0700 /tmp/manager
---
image: ingress-nginx/kruise
fromImage: common/distroless
import:
 - image: ingress-nginx/kruise-artifact
   add: /tmp/manager
   to: /manager
   before: setup
imageSpec:
  config:
    entrypoint: ["/manager"]

      # exclude modules and images from editions
---
---
image: ingress-nginx/kube-rbac-proxy-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/402-ingress-nginx/images/kube-rbac-proxy/src
    to: /src
    includePaths:
      - '**/*.go'
      - '**/*.mod'
      - '**/*.sum'
    stageDependencies:
      install:
        - '**/*'
---
image: ingress-nginx/controller-probe-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/kube-rbac-proxy-src-artifact
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  beforeInstall:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0
    - go build -o /controller-probe controller-probe.go
    - chown 64535:64535 /controller-probe
    - chmod 0755 /controller-probe
---
image: ingress-nginx/kube-rbac-proxy
fromImage: common/distroless
import:
- image: common/kube-rbac-proxy-artifact
  add: /kube-rbac-proxy
  to: /kube-rbac-proxy
  before: setup
- image: ingress-nginx/controller-probe-artifact
  add: /controller-probe
  to: /controller-probe
  before: setup
imageSpec:
  config:
    entrypoint: ["/kube-rbac-proxy", "--tls-cipher-suites", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"]
    expose: ["8080"]

      # exclude modules and images from editions
---
---
image: ingress-nginx/nginx-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/402-ingress-nginx/images/nginx-exporter/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.8.0 https://github.com/nginxinc/nginx-prometheus-exporter.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf ./vendor ./.git
---
image: ingress-nginx/nginx-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/nginx-exporter-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - go mod download
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags '-s -w -X main.version=0.8.0 -X main.gitCommit=f0173677183c840e90a56e48082e36ac687e1a30' -o exporter .
  - chown -R 64535:64535 exporter
  - chmod 0700 exporter
---
image: ingress-nginx/nginx-exporter
fromImage: common/distroless
import:
- image: ingress-nginx/nginx-exporter-artifact
  add: /src/exporter
  to: /exporter
  before: setup
imageSpec:
  config:
    entrypoint: ["/exporter"]

      # exclude modules and images from editions
---
---
image: ingress-nginx/protobuf-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/402-ingress-nginx/images/protobuf-exporter/src/
  to: /src
  stageDependencies:
    install:
    - '**/*'
---
image: ingress-nginx/protobuf-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/protobuf-exporter-src-artifact
  add: /src
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags='-extldflags "-static" -s -w' -o ./protobuf_exporter ./main.go
    - chown 64535:64535 ./protobuf_exporter
    - chmod 0755 ./protobuf_exporter
---
image: ingress-nginx/protobuf-exporter
fromImage: common/distroless
import:
- image: ingress-nginx/protobuf-exporter-artifact
  add: /src/protobuf_exporter
  to: /protobuf_exporter
  before: setup
git:
- add: /modules/402-ingress-nginx/images/protobuf-exporter/rootfs/
  to: /
  stageDependencies:
    install:
      - '**/*.yaml'
imageSpec:
  config:
    entrypoint: ["/protobuf_exporter", "-server.telemetry-address", "127.0.0.1:9090", "-server.exporter-address", "127.0.0.1:9091" , "-mappings", "/etc/protobuf_exporter/mappings.yaml"]

      # exclude modules and images from editions
---

image: ingress-nginx/distroless-proxy-failover-iptables-artifact
fromImage: common/relocate-artifact
final: false
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y conntrack-tools
  install:
  - /binary_replace.sh -i "/usr/sbin/conntrack /usr/lib64/libnetfilter_conntrack.so*" -o /relocate
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore iptables-legacy iptables-legacy-save iptables-legacy-restore ip6tables-legacy ip6tables-legacy-save ip6tables-legacy-restore iptables-nft iptables-nft-save iptables-nft-restore ip6tables-nft ip6tables-nft-save ip6tables-nft-restore; do
      ln -f -s /iptables-wrapper "/relocate/usr/sbin/${cmd}"
    done
    # broken symlinks are not imported from the artifact
    touch /iptables-wrapper
---
image: ingress-nginx/proxy-failover-iptables-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/402-ingress-nginx/images/proxy-failover-iptables/failover/
  to: /src
  stageDependencies:
    install:
    - '**/*.go'
    - '**/*.sum'
    - '**/*.mod'
---
image: ingress-nginx/failover-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: ingress-nginx/proxy-failover-iptables-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o failover main.go
  - chown -R 64535:64535 failover
  - chmod 0700 failover
---
image: ingress-nginx/proxy-failover-iptables
fromImage: common/distroless
import:
- image: ingress-nginx/distroless-proxy-failover-iptables-artifact
  add: /relocate
  to: /
  before: setup
- image: ingress-nginx/failover-artifact
  add: /src/failover
  to: /failover
  before: setup
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /iptables-wrapper
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /usr/sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
imageSpec:
  config:
    entrypoint: ["/failover"]

      # exclude modules and images from editions
---
---
image: ingress-nginx/proxy-failover-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/402-ingress-nginx/images/proxy-failover/src
  to: /src
  includePaths:
    - '**/*.go'
    - '**/*.mod'
    - '**/*.sum'
  stageDependencies:
    install:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
---
image: ingress-nginx/build-proxy-failover-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: ingress-nginx/proxy-failover-src-artifact
    add: /src
    to: /src
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags='-extldflags "-static" -s -w' -o proxy-failover-controller main.go
  - chown -R 64535:64535 proxy-failover-controller
  - chmod 0700 proxy-failover-controller
---
image: ingress-nginx/nginx-static-artifact
fromImage: common/nginx-static
git:
- add: /modules/402-ingress-nginx/images/proxy-failover/conf/
  to: /opt/nginx-static/conf
  stageDependencies:
    install:
    - '**/*.tpl'
---
image: ingress-nginx/proxy-failover
fromImage: common/distroless
import:
- image: ingress-nginx/build-proxy-failover-artifact
  add: /src/proxy-failover-controller
  to: /proxy-failover-controller
  before: setup
- image: ingress-nginx/nginx-static-artifact
  add: /opt/nginx-static
  before: setup
imageSpec:
  config:
    entrypoint: ["/proxy-failover-controller"]

      # exclude modules and images from editions
---
---
image: log-shipper/vector
fromImage: common/alt-p11
import:
  - image: log-shipper/vector-reloader-artifact
    add: /reloader
    to: /usr/bin/reloader
    before: install
  - image: log-shipper/vector-artifact
    add: /relocate
    to: /
    before: install
imageSpec:
  config:
    entrypoint: ["/usr/bin/vector"]
---
image: log-shipper/vector-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/460-log-shipper/images/vector/reloader
  to: /src/reloader
  includePaths:
  - '**/*'
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.44.0 https://github.com/vectordotdev/vector.git /src/vector
  - rm -rf /src/vector/website /src/vector/scripts/integration
  - rm -rf /src/vector/.git
---
image: log-shipper/vector-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: log-shipper/vector-src-artifact
  add: /src/vector
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y build-essential git openssl-devel wget perl-IPC-Cmd protobuf-compiler libsasl2-devel unzip zlib-devel rust rust-cargo
  install:
  - export CARGO_NET_GIT_FETCH_WITH_CLI=true
  - cd /src
  - git config --global url."https://github.com".insteadOf https://github.com
  - |
    cargo build \
    --release \
    -j $(($(nproc) /2)) \
    --no-default-features \
    --features "api,api-client,enrichment-tables,sources-host_metrics,sources-internal_metrics,sources-file,sources-kubernetes_logs,transforms,sinks-prometheus,sinks-blackhole,sinks-elasticsearch,sinks-file,sinks-loki,sinks-socket,sinks-console,sinks-vector,sinks-kafka,sinks-splunk_hec,unix,rdkafka?/gssapi-vendored"
  - strip target/release/vector
  - mkdir -p /relocate/etc /relocate/usr/bin
  - cp target/release/vector /relocate/usr/bin/vector
  - cp -pr /etc/pki /relocate/etc
---
image: log-shipper/vector-reloader-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: log-shipper/vector-src-artifact
  add: /src/reloader
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go build -ldflags="-s -w" -o /reloader main.go
  - chown 64535:64535 /reloader
  - chmod 755 /reloader

      # exclude modules and images from editions
---

---
image: loki/loki-src-artifact
fromImage: common/src-artifact
final: false
git:
  - add: /modules/462-loki/images/loki
    to: /
    stageDependencies:
      install:
        - "**/*"
    includePaths:
      - patches
shell:
  install:
    - git clone --depth 1 --branch v2.9.10 https://github.com/grafana/loki.git /src
    - cd /src
    - git apply --verbose /patches/*.patch
    - rm -r .git
---
image: loki/loki-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
  - image: loki/loki-src-artifact
    add: /src
    before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
    - cd /src
    - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
    - go mod download -x
    - go mod vendor
    - go build -o loki ./cmd/loki
    - chown -R 64535:64535 /src/loki
    - chmod 0700 /src/loki
---
image: loki/loki
fromImage: common/distroless
import:
  - image: loki/loki-artifact
    add: /src/loki
    to: /usr/bin/loki
    after: setup
imageSpec:
  config:
    entrypoint: ["/usr/bin/loki"]

      # exclude modules and images from editions
---

---
image: pod-reloader/pod-reloader-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/465-pod-reloader/images/pod-reloader/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 -b v1.2.1 https://github.com/stakater/Reloader.git .
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: pod-reloader/pod-reloader-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: pod-reloader/pod-reloader-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o /reloader main.go
  - chown 64535:64535 /reloader
  - chmod 0700 /reloader
---
image: pod-reloader/pod-reloader
fromImage: common/distroless
import:
- image: pod-reloader/pod-reloader-artifact
  add: /reloader
  to: /reloader
  before: setup
imageSpec:
  config:
    entrypoint: ["/reloader"]

      # exclude modules and images from editions
---

---
image: chrony/chrony-exporter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/470-chrony/images/chrony-exporter/patches
  to: /patches
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch v0.17.0 https://github.com/prometheus/promu.git promu
  - git clone --depth 1 --branch v0.11.0 https://github.com/SuperQ/chrony_exporter.git chrony_exporter
  - cd chrony_exporter
  - git apply /patches/*.patch --verbose
  - rm -rf /src/promu/.git /src/chrony_exporter/.git
---
image: chrony/chrony-exporter-promu-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: chrony/chrony-exporter-src-artifact
  add: /src/promu
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go build -ldflags="-s -w" -o promu ./main.go
---
image: chrony/chrony-exporter-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
import:
- image: chrony/chrony-exporter-src-artifact
  add: /src/chrony_exporter
  to: /chrony_exporter
  before: install
- image: chrony/chrony-exporter-promu-artifact
  add: /src/promu
  to: /bin/promu
  before: install
shell:
  install:
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=1 GOOS=linux GOARCH=amd64
  - cd /chrony_exporter
  - promu build
---
image: chrony/chrony-exporter
fromImage: common/distroless
import:
- image: chrony/chrony-exporter-artifact
  add: /chrony_exporter/chrony_exporter
  to: /bin/chrony_exporter
  before: install
imageSpec:
  config:
    entrypoint: ["/bin/chrony_exporter"]
    expose: ["9123"]

      # exclude modules and images from editions
---

---
image: chrony/chrony-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/470-chrony/images/chrony/src
  to: /src/entrypoint
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - 'go.mod'
    - 'go.sum'
shell:
  install:
  - cd /src
  - git clone --depth 1 --branch 4.6.1 https://github.com/chrony/chrony /src/chrony && rm -rf /src/chrony/.git
---
image: chrony/build-chrony-static-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: chrony/chrony-src-artifact
  add: /src/chrony
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache automake autoconf libtool build-base bison asciidoctor libcap-dev libcap-static
  install:
  - cd /src
  - echo "4.6.1" > version.txt
  - CFLAGS="-static" LDFLAGS="-static" ./configure --prefix=/opt/chrony-static
  - make -j1
  - make -j1 install
  - chown -R 64535:64535 /opt/chrony-static
  - chmod +x /opt/chrony-static/bin/chronyc
  - chmod +x /opt/chrony-static/sbin/chronyd
---
image: chrony/build-entrypoint-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: chrony/chrony-src-artifact
  add: /src/entrypoint
  to: /src
  before: install
mount:
  - fromPath: ~/go-pkg-cache
    to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags='-extldflags "-static" -s -w' -o /entrypoint main.go
  - chown -R 64535:64535 /entrypoint
  - chmod +x /entrypoint
---
image: chrony/chrony
fromImage: common/distroless
import:
- image: chrony/build-chrony-static-artifact
  add: /opt/chrony-static
  before: setup
- image: common/tini-artifact
  add: /tini/tini-static
  to: /tini
  before: setup
- image: chrony/build-entrypoint-artifact
  add: /entrypoint
  to: /entrypoint
  before: setup
imageSpec:
  config:
    entrypoint: ["/tini", "--"]
    cmd: ["/entrypoint"]

      # exclude modules and images from editions
---

---
# Based on https://github.com/cilium/cilium/blob/v1.16.5/images/hubble-relay/Dockerfile
image: cilium-hubble/relay-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/500-cilium-hubble/images/relay/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v1.14.18 https://github.com/cilium/cilium.git /src
  - rm -r /src/.git
  - cd /src
  - git apply /patches/*.patch --verbose
---
image: cilium-hubble/relay-build-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cilium-hubble/relay-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make bash
  install:
  - cd /src
  - go mod vendor && go mod download -x
  setup:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY=https://proxy.golang.org/
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - cd /src/hubble-relay
  - make
  - go build -ldflags="-s -w" -o hubble-relay .
  - chown 64535:64535 /src/hubble-relay/hubble-relay
  - chmod 0700 /src/hubble-relay/hubble-relay
---
# Distroless Main Image
---
image: cilium-hubble/relay
fromImage: common/distroless
import:
- image: cilium-hubble/relay-build-artifact
  add: /src/hubble-relay/hubble-relay
  to: /usr/local/bin/hubble-relay
  before: install
- image: cni-cilium/gops-artifact
  add: /out/linux/amd64/bin/gops
  to: /bin/gops
  before: install
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/hubble-relay", "serve"]

      # exclude modules and images from editions
---

---
# Based on https://github.com/cilium/hubble-ui/blob/v0.13.1/backend/Dockerfile
image: cilium-hubble/ui-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/500-cilium-hubble/images/ui/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
- add: /modules/500-cilium-hubble/images/ui/static
  to: /src/server/public
  stageDependencies:
    install:
      - '**/*'
shell:
  install:
  #- git clone --depth 1 --branch v0.13.1 https://github.com/cilium/hubble-ui.git /src
  - cd /src
  - git init .
  - git remote add origin -f https://github.com/cilium/hubble-ui.git
  - git checkout v0.13.1
  - git apply /patches/*.patch --verbose
  - chown -R 64535:64535 /src/server/public
  - rm -r /src/.git
---
image: cilium-hubble/ui-backend-build-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
import:
- image: cilium-hubble/ui-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION}
  - export GOPROXY=https://proxy.golang.org/
  - export "GOARCH=amd64"
  - cd /src/backend
  - go mod vendor && go mod download -x
  - CGO_ENABLED=0 go build -ldflags "-s -w" -o backend
  - chown 64535:64535 /src/backend/backend
  - chmod 0700 /src/backend/backend
---
image: cilium-hubble/ui-frontend
fromImage: common/nginx-static
import:
- image: cilium-hubble/ui-src-artifact
  add: /src/server/public
  to: /app
  before: install
imageSpec:
  config:
    entrypoint: [ "/opt/nginx-static/sbin/nginx", "-g", "daemon off;" ]
---
image: cilium-hubble/ui-backend
fromImage: common/distroless
import:
- image: cilium-hubble/ui-backend-build-artifact
  add: /src/backend/backend
  to: /usr/local/bin/hubble-ui-backend
  before: install
imageSpec:
  config:
    entrypoint: ["/usr/local/bin/hubble-ui-backend"]

      # exclude modules and images from editions
---
# #####################################################################
# Based on https://github.com/kubernetes/dashboard/blob/kubernetes-dashboard-7.10.4/modules/api/Dockerfile
# #####################################################################
---
image: dashboard/api
fromImage: common/distroless
import:
- image: dashboard/api-artifact
  add: /dashboard-api
  before: setup
imageSpec:
  config:
    entrypoint: ["/dashboard-api"]
---
image: dashboard/api-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: dashboard/api-src-artifact
  add: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src/modules/api
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod download
  - go build -trimpath -ldflags="-s -w -X k8s.io/dashboard/api/pkg/environment.Version=v1.10.2" -o /dashboard-api .
  - chown 64535:64535 /dashboard-api
  - chmod 0755 /dashboard-api
---
image: dashboard/api-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - cd /src
  - git clone --depth 1 -b api/v1.10.2 https://github.com/kubernetes/dashboard .
  - rm -r .git .github charts docs hack

      # exclude modules and images from editions
---
# #####################################################################
# Based on https://github.com/kubernetes/dashboard/blob/kubernetes-dashboard-7.10.4/modules/auth/Dockerfile
# #####################################################################
---
image: dashboard/auth
fromImage: common/distroless
import:
- image: dashboard/auth-artifact
  add: /dashboard-auth
  before: setup
imageSpec:
  config:
    entrypoint: ["/dashboard-auth"]
---
image: dashboard/auth-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: dashboard/auth-src-artifact
  add: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src/modules/auth
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod download
  - go build -trimpath -ldflags="-s -w -X k8s.io/dashboard/auth/pkg/environment.Version=v1.2.3" -o /dashboard-auth .
  - chown 64535:64535 /dashboard-auth
  - chmod 0755 /dashboard-auth
---
image: dashboard/auth-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - cd /src
  - git clone --depth 1 -b auth/v1.2.3 https://github.com/kubernetes/dashboard .
  - rm -r .git .github charts docs hack

      # exclude modules and images from editions
---
# #####################################################################
# Based on https://github.com/kubernetes/dashboard/blob/kubernetes-dashboard-7.10.4/modules/metrics-scraper/Dockerfile
# #####################################################################
---
image: dashboard/metrics-scraper
fromImage: common/distroless
import:
- image: dashboard/metrics-scraper-artifact
  add: /dashboard-metrics-scraper
  before: setup
imageSpec:
  config:
    entrypoint: ["/dashboard-metrics-scraper"]
---
image: dashboard/metrics-scraper-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: dashboard/metrics-scraper-src-artifact
  add: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src/modules/metrics-scraper
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod download
  - go build -trimpath -ldflags="-s -w -X k8s.io/dashboard/metrics-scraper/pkg/environment.Version=v1.2.2" -o /dashboard-metrics-scraper .
  - chown 64535:64535 /dashboard-metrics-scraper
  - chmod 0755 /dashboard-metrics-scraper
---
image: dashboard/metrics-scraper-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - cd /src
  - git clone --depth 1 -b metrics-scraper/v1.2.2 https://github.com/kubernetes/dashboard .
  - rm -r .git .github charts docs hack

      # exclude modules and images from editions
---
# #####################################################################
# Based on https://github.com/kubernetes/dashboard/blob/kubernetes-dashboard-7.10.4/modules/web/Dockerfile
# #####################################################################
---
image: dashboard/web
fromImage: common/distroless
import:
- image: dashboard/web-artifact
  add: /dashboard-web
  before: setup
- image: dashboard/web-node-artifact
  add: /src/modules/web/.dist/public
  to: /public
  before: setup
- image: dashboard/web-node-artifact
  add: /src/modules/web/.dist/public/locale_conf.json
  to: /locale_conf.json
  before: setup
imageSpec:
  config:
    entrypoint: ["/dashboard-web"]
---
image: dashboard/web-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: dashboard/web-src-artifact
  add: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  install:
  - cd /src/modules/web
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod download
  - go build -trimpath -ldflags="-s -w -X k8s.io/dashboard/web/pkg/environment.Version=v1.6.1" -o /dashboard-web .
  - chown 64535:64535 /dashboard-web
  - chmod 0755 /dashboard-web
---
image: dashboard/web-node-artifact
final: false
from: registry.deckhouse.io/base_images/node:20.11.0-alpine3.18@sha256:bd2eb17dcdc3541d4986bebcfc997a24c499358827899b1029af3601d4c4569d
import:
- image: dashboard/web-src-artifact
  add: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache make perl
  install:
  
  - cd /src/modules/web
  - yarn set version 3.3.0
  - yarn plugin import workspace-tools
  - SKIP_POSTINSTALL=true yarn workspaces focus
  - make build-frontend
  - ./install_logout.sh
  - rm -r node_modules .angular .yarn /root/.cache /root/.yarn #1Gi
---
image: dashboard/web-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/500-dashboard/images/web/patches
  to: /patches
  includePaths:
  - '**/*'
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - cd /src
  - git clone --depth 1 -b web/v1.6.1 https://github.com/kubernetes/dashboard .
  - cp /patches/* /src/modules/web/
  - rm -r .git .github charts docs

      # exclude modules and images from editions
---
---
image: openvpn/easyrsa-migrator
fromImage: common/distroless
import:
- image: openvpn/easyrsa-migrator-artifact
  add: /src/easyrsa-migrator
  to: /bin/easyrsa-migrator
  before: setup
imageSpec:
  config:
    entrypoint: ["/bin/easyrsa-migrator"]
---
image: openvpn/easyrsa-migrator-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/500-openvpn/images/easyrsa-migrator/src
  to: /src
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - 'go.mod'
    - 'go.sum'
shell:
  install:
  - cd /src
---
image: openvpn/easyrsa-migrator-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: openvpn/easyrsa-migrator-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod tidy
  - go build -ldflags '-s -w' .
  - chown -R 64535:64535 /src
  - chmod 0700 /src/easyrsa-migrator

      # exclude modules and images from editions
---

---
image: openvpn/openvpn
fromImage: common/distroless
import:
- image: common/iptables-wrapper
  add: /iptables-wrapper
  to: /sbin/iptables-wrapper
  before: setup
- image: registrypackages/iptables-artifact-1-8-9
  add: /
  to: /sbin
  includePaths:
  - xtables-legacy-multi
  - xtables-nft-multi
  before: setup
- image: openvpn/openvpn-artifact
  add: /src/openvpn/src/openvpn/openvpn
  to: /usr/sbin/openvpn
  before: setup
- image: openvpn/openvpn-entrypoint-artifact
  add: /src/entrypoint
  to: /entrypoint
  before: setup
- image: openvpn/openvpn-binaries-artifact
  add: /relocate
  to: /
  before: setup
---
image: openvpn/openvpn-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/500-openvpn/images/openvpn/entrypoint
  to: /src/entrypoint
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*.go'
    - 'go.mod'
    - 'go.sum'
shell:
  install:
  - git clone --depth 1 -b openssl-3.3.2 https://github.com/openssl/openssl.git /src/openssl && cd /src/openssl && rm -rf .git
  - git clone --depth 1 -b v0.8.5 https://github.com/stevegrubb/libcap-ng.git /src/libcap-ng && cd /src/libcap-ng && rm -rf .git
  - git clone --depth 1 -b v2.6.12 https://github.com/OpenVPN/openvpn.git /src/openvpn && cd /src/openvpn && rm -rf .git
---
image: openvpn/openvpn-entrypoint-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: openvpn/openvpn-src-artifact
  add: /src/entrypoint
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod tidy
  - go build -ldflags '-s -w' .
  - chown -R 64535:64535 /src
  - chmod 0755 /src/entrypoint
---
image: openvpn/openssl-artifact
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: openvpn/openvpn-src-artifact
  add: /src/openssl
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache autoconf automake make libtool g++ linux-headers
  install:
  - cd /src/
  - ./Configure gcc -static -no-shared
  - make -j4
  - make install_sw DESTDIR=/openssl
---
image: openvpn/openvpn-artifact
final: false
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
import:
- image: openvpn/openvpn-src-artifact
  add: /src
  to: /src
  before: install
- image: openvpn/openssl-artifact
  add: /openssl
  to: /
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache autoconf automake make libtool g++ linux-headers pkgconfig
  install:
  - cd /src/libcap-ng
  - ./autogen.sh
  - ./configure --enable-static
  - make
  - make install
  - cd /src/openvpn
  - autoreconf -vi
  - ./configure --enable-static --disable-shared --disable-debug --disable-unit-tests --disable-lzo --disable-lz4 --disable-plugin-auth-pam --disable-plugin-down-root --disable-dco
  - make LIBS="-all-static -lcap-ng"
---
image: openvpn/openvpn-binaries-artifact
final: false
fromImage: common/relocate-artifact
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y conntrack-tools coreutils
  - find /var/lib/apt/lists /var/cache/apt -type f -exec rm -f {} +
  install:
  - /binary_replace.sh -i "/usr/sbin/conntrack /usr/lib64/libnetfilter_conntrack.so* /bin/mknod" -o /relocate
  - mkdir -p /relocate/sbin
  - |
    for cmd in iptables iptables-save iptables-restore ip6tables ip6tables-save ip6tables-restore; do
      ln -f -s /sbin/iptables-wrapper "/relocate/sbin/${cmd}"
    done
    # broken symlinks are not imported from the artifact
    touch /iptables-wrapper
  - |
    for mode in legacy nft; do
      for basecmd in iptables ip6tables; do
        for cmd in ${basecmd}-${mode} ${basecmd}-${mode}-save ${basecmd}-${mode}-restore; do
          ln -sf /sbin/xtables-${mode}-multi "/relocate/sbin/${cmd}"
        done
      done
    done


      # exclude modules and images from editions
---

---
image: openvpn/ovpn-admin
fromImage: common/distroless
git:
- add: //modules/500-openvpn/images/ovpn-admin/templates
  to: /app/templates
  stageDependencies:
    install:
      - '**/*'
import:
- image: openvpn/ovpn-admin-backend-artifact
  add: /src/ovpn-admin
  to: /app/ovpn-admin
  before: setup
- image: openvpn/ovpn-admin-src-artifact
  add: /src/version
  to: /app/version
  before: setup
- image: openvpn/openvpn-artifact
  add: /src/openvpn/src/openvpn/openvpn
  to: /usr/sbin/openvpn
  before: setup
- image: openvpn/ovpn-admin-frontend-artifact
  add: /src/frontend/static
  to: /app/frontend/static
  before: setup
- image: openvpn/ovpn-admin-binaries-artifact
  add: /relocate
  to: /
  before: setup
imageSpec:
  config:
    workingDir: "/app"
---
image: openvpn/ovpn-admin-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/500-openvpn/images/ovpn-admin/patches
  to: /patches
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
shell:
  install:
  - cd /src
  - git clone https://github.com/palark/ovpn-admin.git .
  - git checkout a2c41756a56eeb7c09a270700672a4154645cbc6
  - git apply /patches/*.patch --verbose
  - rm -rf .git
  - echo a2c41756a56eeb7c09a270700672a4154645cbc6 > version
---
image: openvpn/ovpn-admin-backend-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: openvpn/ovpn-admin-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod tidy
  - go build -ldflags="-s -w" .
  - chown -R 64535:64535 /src
  - chmod 0755 /src/ovpn-admin
---
image: openvpn/ovpn-admin-frontend-artifact
final: false
from: registry.deckhouse.io/base_images/node:16.13.0-alpine3.14@sha256:5277c7d171e02ee76417bb290ef488aa80e4e64572119eec0cb9fffbcffb8f6a
import:
- image: openvpn/ovpn-admin-src-artifact
  add: /src
  to: /src
  before: install
shell:
  install:
  
  - cd /src/frontend
  - npm install
  - npm run build
---
image: openvpn/ovpn-admin-binaries-artifact
final: false
fromImage: common/relocate-artifact
import:
- image: openvpn/openssl-artifact
  add: /openssl
  to: /openssl
  before: install
shell:
  install:
  - /binary_replace.sh -i "/bin/bash" -o /relocate
  - cp /openssl/usr/local/bin/* /relocate/bin/

      # exclude modules and images from editions
---
---
image: openvpn/pmacct
fromImage: common/distroless
import:
- image: openvpn/pmacct-artifact
  add: /relocate
  to: /
  before: setup
imageSpec:
  config:
    entrypoint: ["/usr/sbin/pmacctd"]
---
image: openvpn/pmacct-src-artifact
final: false
fromImage: common/src-artifact
shell:
  install:
  - cd /src
  - git clone --depth 1 -b 1.7.9 https://github.com/pmacct/pmacct.git .
  - |
    cat > .gitmodules <<"EOF"
    [submodule "src/external_libs/libcdada"]
      path = src/external_libs/libcdada
      url = https://github.com/msune/libcdada.git
    EOF
  - git submodule update --init
  - rm -rf /src/.git
---
image: openvpn/pmacct-artifact
final: false
fromImage: common/relocate-artifact
import:
- image: openvpn/pmacct-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace altlinux repos with our proxy
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -y
  - apt-get install -y build-essential libpcap-devel libjansson-devel
  install:
  - cd /src
  - ./autogen.sh
  - ./configure --prefix=/usr --enable-jansson
  - make
  - make install
  - /binary_replace.sh -i "/usr/sbin/pmacctd" -o /relocate

      # exclude modules and images from editions
---
---
image: upmeter/smoke-mini-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/500-upmeter/images/smoke-mini/src
  to: /src
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "**/*.go"
shell:
  install:
  - cd /src
---
image: upmeter/smoke-mini-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: upmeter/smoke-mini-src-artifact
  add: /src
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w" -o /smoke-mini .
  - chown 64535:64535 /smoke-mini
  - chmod 0700 /smoke-mini
---
image: upmeter/smoke-mini
fromImage: common/distroless
import:
- image: upmeter/smoke-mini-build-artifact
  add: /smoke-mini
  to: /smoke-mini
  before: setup
imageSpec:
  config:
    entrypoint: ["/smoke-mini"]

      # exclude modules and images from editions
---
---
image: upmeter/status-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/500-upmeter/images/status/src
  to: /src
  stageDependencies:
    install:
    - "**/*"
shell:
  install:
  - cd /src
---
image: upmeter/status-build-artifact
final: false
from: registry.deckhouse.io/base_images/node:23.6.1-alpine3.20@sha256:afe80e0dd357fc69595bc54a813dd992248fa3063448e2a1fa77ff47534ff51d
import:
- image: upmeter/status-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache python3 vips make build-base
  install:
  - cd /src
  - npm ci
  - npm run build
  - chown -R 64535:64535 /src/dist
---
image: upmeter/status
fromImage: common/nginx-static
import:
- image: upmeter/status-build-artifact
  add: /src/dist
  to: /opt/nginx-static/html
  before: setup
imageSpec:
  config:
    entrypoint: ["/opt/nginx-static/sbin/nginx", "-g", "daemon off;"]

      # exclude modules and images from editions
---
---
image: upmeter/upmeter-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/500-upmeter/images/upmeter/src
  to: /src/upmeter
  excludePaths:
  - "**/*.md"
  - "**/*.yaml"
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "**/*.go"
shell:
  install:
  - git clone --depth 1 --branch v4.18.2 https://github.com/golang-migrate/migrate.git /src/migrate
---
image: upmeter/upmeter-build-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
import:
- image: upmeter/upmeter-src-artifact
  add: /src
  to: /src
  before: install

mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache gcc musl-dev jq-dev oniguruma-dev curl
  install:
  - cd /src/upmeter
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -linkmode external -extldflags '-static'" -o /upmeter ./cmd/upmeter
  - cd /src/migrate
  - GOPROXY=https://proxy.golang.org/ CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -linkmode external -extldflags '-static'" -tags 'sqlite3' -o /migrate ./cmd/migrate
  - chown 64535:64535 /migrate /upmeter
  - chmod 0700 /migrate /upmeter
---
image: upmeter/upmeter
fromImage: common/distroless
import:
- image: upmeter/upmeter-build-artifact
  add: /src/upmeter/pkg/db/migrations/agent
  to: /data/migrations/agent
  before: setup
- image: upmeter/upmeter-build-artifact
  add: /src/upmeter/pkg/db/migrations/server
  to: /data/migrations/server
  before: setup
- image: upmeter/upmeter-build-artifact
  add: /migrate
  to: /migrate
  before: setup
- image: upmeter/upmeter-build-artifact
  add: /upmeter
  to: /upmeter
  before: setup

      # exclude modules and images from editions
---
---
image: upmeter/webui-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /modules/500-upmeter/images/webui/src
  to: /src
  stageDependencies:
    install:
    - "**/*"
shell:
  install:
  - cd /src
---
image: upmeter/webui-build-artifact
final: false
from: node:14-alpine3.12@sha256:426384fb33a11d27dbbdc545f39bb8daacd3e7db7c60b52cd6bc0597e0045b8d
import:
- image: upmeter/webui-src-artifact
  add: /src
  to: /src
  before: install
shell:
  beforeInstall:
  
  # Replace alpine repos with our proxy
  - apk update
  - apk add --no-cache python3 python2 vips make build-base
  install:
  - cd /src
  - yarn install
  - yarn run build
  - chown -R 64535:64535 /src/dist
---
image: upmeter/webui
fromImage: common/nginx-static
import:
- image: upmeter/webui-build-artifact
  add: /src/dist
  to: /opt/nginx-static/html
  before: setup
imageSpec:
  config:
    entrypoint: ["/opt/nginx-static/sbin/nginx", "-g", "daemon off;"]

      # exclude modules and images from editions
---
image: deckhouse-tools/web
fromImage: common/nginx-static
git:
- add: /modules/800-deckhouse-tools/images/web/nginx.conf
  to: /opt/nginx-static/conf/nginx.conf
  stageDependencies:
    setup:
    - '**/*'
import:
  - image: deckhouse-tools/web-artifact
    add: /app
    to: /app
    before: setup
imageSpec:
  config:
    entrypoint: [ "/opt/nginx-static/sbin/nginx", "-g", "daemon off;" ]
---
image: deckhouse-tools/web-src-artifact
final: false
fromImage: common/src-artifact
git:
- add: /modules/800-deckhouse-tools/images/web/src
  to: /src/src
  stageDependencies:
    setup:
    - '**/*'
- add: /modules/800-deckhouse-tools/images/web/static
  to: /src/static
  stageDependencies:
    setup:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch v0.11.3 https://github.com/deckhouse/deckhouse-cli.git /src/deckhouse-cli
  - cd /src/deckhouse-cli
  - git describe --tags > VERSION
  - sed -i "s|sh:\ git describe --tags|sh:\ cat VERSION|" Taskfile.yml
  - rm -rf /src/deckhouse-cli/.git
---
image: deckhouse-tools/web-artifact
final: false
from: registry.deckhouse.io/base_images/golang:1.23.6-bookworm@sha256:ca569d98545ab5a090449da29d637fb3f5a273d3a002554af328be9873777cef
import:
  - image: deckhouse-tools/web-frontend-artifact
    add: /app/dist
    to: /app
    before: install
  - image: deckhouse-tools/web-src-artifact
    add: /src/static
    to: /static
    before: install
  - image: deckhouse-tools/web-src-artifact
    add: /src/deckhouse-cli
    to: /src
    before: install
  - image: common/task-artifact
    add: /task
    to: /usr/local/bin/task
    before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build
shell:
  beforeInstall:
    
    # 5 years 157680000
    - |
        echo "Acquire::Check-Valid-Until false;" >> /etc/apt/apt.conf
        echo "Acquire::Check-Date false;" >> /etc/apt/apt.conf
        echo "Acquire::Max-FutureTime 157680000;" >> /etc/apt/apt.conf
    # Replace debian repos with our proxy
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update
    - apt-get install -y libbtrfs-dev jq
    - find /var/lib/apt/ /var/cache/apt/ -type f -delete
  install:
    - export GOPROXY=https://proxy.golang.org/

    - export PRIVATE_REPO=https://github.com
    - GOPRIVATE="flant.internal"
    - git config --global url."ssh://git@${PRIVATE_REPO}/".insteadOf "https://flant.internal/"
    - git config --global --add safe.directory '*'
    - mkdir -p ~/.ssh
    - touch ~/.ssh/known_hosts
    - ssh-keyscan -H ${PRIVATE_REPO} >> ~/.ssh/known_hosts

    - cd /src
    - task build:dist:all
    - mkdir -p /app/files/d8-cli
    - mv dist/v0.11.3/* /app/files/d8-cli
    - jq '[.[] | .version="v0.11.3"]' /static/tools.json > /app/tools.json
    - mv /static/robots.txt /app
    - rm ~/.gitconfig # Prevent PRIVATE_REPO_TOKEN from leaking into the image layer
---
image: deckhouse-tools/web-frontend-artifact
final: false
from: registry.deckhouse.io/base_images/node:20.11.0-alpine3.18@sha256:bd2eb17dcdc3541d4986bebcfc997a24c499358827899b1029af3601d4c4569d
import:
- image: deckhouse-tools/web-src-artifact
  add: /src/src
  to: /app
  before: setup
mount:
- from: tmp_dir
  to: /app/node_modules
- from: tmp_dir
  to: /root/.npm/_cacache
- from: tmp_dir
  to: /tmp/node-complile-cache
shell:
  setup:
  
  - cd /app
  - npm install
  - npm run build

      # exclude modules and images from editions
---

---
image: documentation/docs-builder

fromImage: common/distroless

import:
- image: documentation/docs-builder-artifact
  add: /src/docs-builder
  to: /app/server
  before: setup
imageSpec:
  config:
    workingDir: "/app"
    entrypoint: [ "/app/server" ]
git:
  - add: /docs/site/backends/docs-builder-template
    to: /app/hugo

    excludePaths:
    - config/production/
  - add: /modules/810-documentation/images/docs-builder/modules-docs/hugo.yaml
    to: /app/hugo/config/production/hugo.yaml

---
image: documentation/docs-builder-artifact
from: registry.deckhouse.io/base_images/golang:1.23.6-alpine3.20@sha256:3058c63e0e2532881949c4186414baa24a0f9a8f9349b1853daa49be816f42e9
final: false
mount:
- from: tmp_dir
  to: /go/pkg
- from: tmp_dir
  to: /root/.cache/go-build

import:
- image: documentation/docs-builder-src-artifact
  add: /src
  to: /src
  before: install

shell:
  install:
  - cd /src
  - export GOPROXY=https://proxy.golang.org/ CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - go mod download
  - go build -ldflags '-s -w' .
  - chown -R 64535:64535 /src
  - chmod 0700 /src/docs-builder

---
image: documentation/docs-builder-src-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - cd /src

git:
- add: /docs/site/backends/docs-builder
  to: /src
  includePaths:
  - '**/*.go'
  - '**/*.mod'
  - '**/*.sum'
  stageDependencies:
    install:
    - '**/*'


      # exclude modules and images from editions
---

image: documentation/web

fromImage: common/nginx-static
import:
- image: documentation/web/static
  add: /app/_site/documentation
  to: /app/platform
  before: setup
  excludePaths:
  - '*/gs/'
  - '*/guides/'
  - search-index.json
  - '*/sitemap*.xml'
  - '*/robots.txt'
imageSpec:
  config:
    entrypoint: [ "/opt/nginx-static/sbin/nginx", "-e", "/dev/stderr", "-g", "daemon off;" ]

---
image: documentation/web/static
from: registry.deckhouse.io/base_images/jekyll:4.3.4-alpine@sha256:bc24cdaea4fa9ea14068440d53dcab6881018d77526e7b9a0574f6ff03f0945f
final: false
shell:
  setup:
  - |
        echo "Ruby: $(ruby --version)"
        echo "Gem: $(gem --version)"
        bundle --version
        jekyll -version
        yq -V
        echo "jq: $(jq -V)"

        echo '[] Creating modules.yml ...'
        cd /srv/jekyll-data/documentation/

        export MODULES_DIR=/comparison

        _tools/modules_list.sh 1>_data/modules/internal.yaml
        # Creating list of ALL the modules...
        cat _data/modules/internal.yaml |yq eval -j | jq -MsS '.[0] * .[1]' - _data/modules/modules-addition.json > _data/modules/all.json

        # The list of modules, which documentation should be excluded from the site...
        cat _tools/modules_menu_skip  | sed -E 's/^[0-9]+-//'  | jq -nRc '[inputs]' > _data/excludedModules.json

        echo '[] Edition - EE. Merging files of modules for different editions...'
        for dir in {be,se,ee,se-plus,fe}; do if [ -d /src/$dir/modules ];then cp -rf /src/$dir/modules /src >& /dev/null; fi; done

        echo '[] Preparing modules structure...'
        export MODULES_SRC_DIR=/src/modules
        export MODULES_DST_EN=/srv/jekyll-data/documentation/modules_en
        export MODULES_DST_RU=/srv/jekyll-data/documentation/modules_ru
        bash _tools/modules_prepare.sh

        echo '[] Adding permalinks...'
        for i in $(find . -regex '.*.md' -print); do
          if ! grep -q "^---" "$i"; then continue; fi
          if cat $i | tr -d '\n' | grep -qv "^---.*permalink: .*---"; then
            # permalink is absent, add permalink
            PERMALINK="/$(echo $i | sed -E 's#(modules_)(en|ru)/#\2/modules/#' | sed 's#docs/##g'| tr '[:upper:]' '[:lower:]' | sed 's#\.md$#.html#' | sed 's#^\.\/##' | sed 's#readme\.html$##' )"
            sed -i "1apermalink: $PERMALINK" $i
          fi
        done

        echo '[] Generating configuration schemas...'
        export MODULES_DIR=modules_en
        bash _tools/modules_generate_configuration.sh
        export MODULES_DIR=modules_ru MODULES_LANG=ru
        bash _tools/modules_generate_configuration.sh

        echo
        echo '[] Generating cluster configuration schemas...'
        export MODULES_DIR=modules_en
        bash _tools/generate_cluster_configuration.sh
        export MODULES_DIR=modules_ru MODULES_LANG=ru
        bash _tools/generate_cluster_configuration.sh

        echo
        echo "[] Generating CR schemas..."
        export MODULES_DIR=modules_en
        bash _tools/modules_generate_cr.sh
        export MODULES_DIR=modules_ru
        bash _tools/modules_generate_cr.sh

        echo
        echo '[] Preparing OSS license info...'
        export MODULES_DIR=/src/modules
        bash _tools/modules_generate_ossinfo.sh

        echo '[] Extracting the default Kubernetes version...'
        echo "default: \"$(grep "DefaultKubernetesVersion" -m 1 _data/dhctl-base.go | grep -Eo '[0-9.]+')\"" > _data/version_kubernetes.yml

        echo '[] Filling in the array of supported OS & K8S versions...'
        cd _data
        yq eval version_map.yml -j > version_map.json && rm version_map.yml
        jq -MsS '.[0] * .[1]' version_map.json version_map_addition.json | yq eval -P >> supported_versions.yml

        echo '[] Converting editions structure...'
        yq e -j editions-repo-data.yaml | jq -M 'reduce .editions[] as $item ({}; .[$item.name | ascii_downcase] = $item)' | jq -Ms '.[0] * .[1]' - modules/editions-addition.json | jq '. as $editions | input as $be | .["be"].excludeModules += $be.excludeModules' - modules/be-addition.json > editions.json



        # Syncing file from the documentation to the main site...
        cp /srv/jekyll-data/documentation/_plugins/{jekyll_asset_pipeline.rb,custom_filters.rb,utils.rb,custom_sidebar.rb,offtopic.rb} /srv/jekyll-data/site/_plugins/
        cp /srv/jekyll-data/documentation/_assets/js/{lunr*.js,search.js} /srv/jekyll-data/site/_assets/

        # "Converting public documentation links to internal relative..."
        grep -rl '](https://deckhouse.io' /srv/jekyll-data/documentation/_data/schemas/ | \
          xargs sed -Ei 's$\]\(https://deckhouse.io/(ru|en)/documentation/v[0-9]+/(modules/|#)$](/\1/\2$'

        cat <<"EOD" > /tmp/_config_additional.yml
        mode: module
        
        EOD
        cat <<"EOD" > /srv/jekyll-data/documentation/_data/topnav.yml
        ## if you want to list an external url, use external_url instead of url. the theme will apply a different link base.
        topnav:
          en:
          - title: Topnav
            items:
            - title: Release channels
              url: /deckhouse-release-channels.html
          ru:
          - title: Topnav
            items:
            - title: Каналы обновлений
              url: /deckhouse-release-channels.html
            - title: Лицензионное соглашение
              external_url: https://deckhouse.ru/license/
              ee_only: true
        
        EOD
        cat <<"EOD" > /srv/jekyll-data/site/_data/topnav.yml
        ## if you want to list an external url, use external_url instead of url. the theme will apply a different link base.
        topnav:
          en:
          - title: Topnav
            items:
            - title: Release channels
              url: /deckhouse-release-channels.html
          ru:
          - title: Topnav
            items:
            - title: Каналы обновлений
              url: /deckhouse-release-channels.html
            - title: Лицензионное соглашение
              external_url: https://deckhouse.ru/license/
              ee_only: true
        
        EOD
        cat <<"EOD" > /srv/jekyll-data/site/_includes/footer.html
        {% raw %}
        <div class="footer">
        </div>
        {% endraw %}
        EOD

        # Creating additional config...
        echo -e "\nd8Revision: EE" >> /tmp/_config_additional.yml

        echo '[] Generating static files of the documentation part...'
        cd ..
        mkdir -m 777 -p /app/_site/

        JEKYLL_ENV=production jekyll build -d /app/_site/documentation/ --config _config.yml,/tmp/_config_additional.yml

        echo '[] Generating static files of the main part...'
        cd /srv/jekyll-data/site/
        JEKYLL_ENV=production jekyll build -d /app/_site/site/ --config _config.yml,/tmp/_config_additional.yml

        cp -Rf /app/_site/site/assets /app/_site/documentation/
        cp -Rf /app/_site/site/images /app/_site/documentation/
        cp -Rf /app/_site/site/ru/includes /app/_site/documentation/ru
        cp -Rf /app/_site/site/en/includes /app/_site/documentation/en
        cp -Rf /app/_site/site/ru /app/_site/documentation/
        cp -Rf /app/_site/site/en /app/_site/documentation/
        rm -rf /app/_site/documentation/compare/

git:
- add: /docs
  to: /srv/jekyll-data
  owner: jekyll
  group: jekyll
  includePaths:

    - site

    - documentation
  excludePaths:
    - '**/werf*.yaml'
    - '**/docker-compose.yml'
    - '**/Makefile'
    - '**/.werf'
    - '**/.helm'
    - documentation/pages/internal
    - documentation/config

    - site/pages/*.html
    - site/_includes/footer.html
    - site/_data/topnav.*
    - site/backends
    - site/_plugins/gs_generator.rb
    - site/_plugins/dvp_resource_generator.rb
    - site/pages/virtualization-platform
    - site/pages/code
    - site/pages/stronghold

  stageDependencies:
    install: ['site/Gemfile','site/Gemfile.lock']
    setup: '**/*'

- add: /
  to: /comparison
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths:
  - modules/**/docs/README.md
  - ee/modules/**/docs/README.md
- add: /ee/fe
  to: /comparison/fe
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths:
  - modules/**/docs/README.md
- add: /ee/be
  to: /comparison/be
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths:
  - modules/**/docs/README.md
- add: /ee/se
  to: /comparison/se
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths:
  - modules/**/docs/README.md
- add: /ee/se-plus
  to: /comparison/se-plus
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths:
  - modules/**/docs/README.md

- add: /modules
  to: /src/modules
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  excludePaths:
  - '*/openapi/values.yaml'
  - '*/openapi/*-tests.yaml'
  - '*/docs/internal/'
  - '040-node-manager/crds/deckhousecontrolplane.yaml'
  - '040-node-manager/crds/mcm.yaml'
  - '040-node-manager/crds/cluster.yaml'
  - '040-node-manager/crds/extension-config.yaml'
  - '040-node-manager/crds/machine.yaml'
  - '040-node-manager/crds/machine-*.yaml'
  - '040-node-manager/crds/staticcluster.yaml'
  - '040-node-manager/crds/staticcontrolplane.yaml'
  - '040-node-manager/crds/staticmachine*.yaml'
  - '110-istio/crds/istio'
  includePaths: ['*/docs/','*/openapi/*.yaml','*/openapi/conversions/v*.yml','*/openapi/conversions/v*.yaml','*/crds/', '*/oss.yaml']
- add: /modules
  to: /srv/jekyll-data/documentation/_data/bundles/raw/ce
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['values-*.yaml']
- add: /global-hooks/openapi
  to: /src/global
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['*config-values.yaml','doc-ru-config-values.yaml']
- add: /candi/openapi
  to: /src/global
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['*cluster_configuration.yaml', '*init_configuration.yaml', '*static_cluster_configuration.yaml']
- add: /deckhouse-controller/crds
  to: /src/global/crds
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /ee/be/modules
  to: /srv/jekyll-data/documentation/_data/bundles/raw/be
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['values-*.yaml']
- add: /ee/be/modules
  to: /src/be/modules
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['*/docs/','*/openapi/*.yaml','*/openapi/conversions/v*.yml','*/openapi/conversions/v*.yaml','*/crds/', '*/oss.yaml']
  excludePaths: ['*/openapi/values.yaml', '*/openapi/*-tests.yaml', '*/docs/internal/']
- add: /ee/se/modules
  to: /srv/jekyll-data/documentation/_data/bundles/raw/se
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['values-*.yaml']
- add: /ee/se/modules
  to: /src/se/modules
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['*/docs/','*/openapi/*.yaml','*/openapi/conversions/v*.yml','*/openapi/conversions/v*.yaml','*/crds/', '*/oss.yaml']
  excludePaths: ['*/openapi/values.yaml', '*/openapi/*-tests.yaml', '*/docs/internal/']
- add: /ee/se-plus/modules
  to: /srv/jekyll-data/documentation/_data/bundles/raw/se-plus
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['values-*.yaml']
- add: /ee/se-plus/modules
  to: /src/se-plus/modules
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['*/docs/','*/openapi/*.yaml','*/openapi/conversions/v*.yml','*/openapi/conversions/v*.yaml','*/crds/', '*/oss.yaml']
  excludePaths: ['*/openapi/values.yaml', '*/openapi/*-tests.yaml', '*/docs/internal/']
- add: /ee/modules
  to: /srv/jekyll-data/documentation/_data/bundles/raw/ee
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['values-*.yaml']
- add: /ee/modules
  to: /src/ee/modules
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
  includePaths: ['*/docs/','*/openapi/*.yaml','*/openapi/conversions/v*.yml','*/openapi/conversions/v*.yaml','*/crds/', '*/oss.yaml']
  excludePaths: ['*/openapi/values.yaml', '*/openapi/*-tests.yaml', '*/docs/internal/', '160-multitenancy-manager/crds/projecttypes.yaml', '160-multitenancy-manager/crds/doc-ru-projecttypes.yaml']
- add: /ee/candi/cloud-providers/openstack/openapi
  to: /src/ee/modules/030-cloud-provider-openstack/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/openstack/openapi
  to: /src/ee/modules/030-cloud-provider-openstack/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/huaweicloud/openapi
  to: /src/ee/modules/030-cloud-provider-huaweicloud/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/huaweicloud/openapi
  to: /src/ee/modules/030-cloud-provider-huaweicloud/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/se-plus/candi/cloud-providers/vsphere/openapi
  to: /src/se-plus/modules/030-cloud-provider-vsphere/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/dynamix/openapi
  to: /src/ee/modules/030-cloud-provider-dynamix/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/se-plus/candi/cloud-providers/vsphere/openapi
  to: /src/se-plus/modules/030-cloud-provider-vsphere/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/dynamix/openapi
  to: /src/ee/modules/030-cloud-provider-dynamix/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/vcd/openapi
  to: /src/ee/modules/030-cloud-provider-vcd/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/vcd/openapi
  to: /src/ee/modules/030-cloud-provider-vcd/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/se-plus/candi/cloud-providers/zvirt/openapi
  to: /src/se-plus/modules/030-cloud-provider-zvirt/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /ee/se-plus/candi/cloud-providers/zvirt/openapi
  to: /src/se-plus/modules/030-cloud-provider-zvirt/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
# CRDs
- add: /candi/cloud-providers/aws/openapi
  to: /src/modules/030-cloud-provider-aws/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/aws/openapi
  to: /src/modules/030-cloud-provider-aws/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/aws/docs
  to: /src/modules/030-cloud-provider-aws/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/azure/docs
  to: /src/modules/030-cloud-provider-azure/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/gcp/docs
  to: /src/modules/030-cloud-provider-gcp/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/yandex/docs
  to: /src/modules/030-cloud-provider-yandex/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/openstack/docs
  to: /src/ee/modules/030-cloud-provider-openstack/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/huaweicloud/docs
  to: /src/ee/modules/030-cloud-provider-huaweicloud/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /ee/se-plus/candi/cloud-providers/vsphere/docs
  to: /src/se-plus/modules/030-cloud-provider-vsphere/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/dynamix/docs
  to: /src/ee/modules/030-cloud-provider-dynamix/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /ee/candi/cloud-providers/vcd/docs
  to: /src/ee/modules/030-cloud-provider-vcd/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /ee/se-plus/candi/cloud-providers/zvirt/docs
  to: /src/se-plus/modules/030-cloud-provider-zvirt/docs
  owner: jekyll
  group: jekyll
  includePaths: ['LAYOUTS*.md','ENVIRONMENT*.md','CLUSTER_CONFIGURATION*.md']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/azure/openapi
  to: /src/modules/030-cloud-provider-azure/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/azure/openapi
  to: /src/modules/030-cloud-provider-azure/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/gcp/openapi
  to: /src/modules/030-cloud-provider-gcp/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/gcp/openapi
  to: /src/modules/030-cloud-provider-gcp/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/yandex/openapi
  to: /src/modules/030-cloud-provider-yandex/crds
  owner: jekyll
  group: jekyll
  includePaths: ['*instance_class.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /candi/cloud-providers/yandex/openapi
  to: /src/modules/030-cloud-provider-yandex/openapi
  owner: jekyll
  group: jekyll
  includePaths: ['*cluster_configuration.yaml']
  stageDependencies:
    setup: ['**/*']
- add: /candi/version_map.yml
  to: /srv/jekyll-data/documentation/_data/version_map.yml
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /editions.yaml
  to: /srv/jekyll-data/documentation/_data/editions-repo-data.yaml
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']
- add: /dhctl/pkg/config/base.go
  to: /srv/jekyll-data/documentation/_data/dhctl-base.go
  owner: jekyll
  group: jekyll
  stageDependencies:
    setup: ['**/*']



---
# render images digest image
image: images-digests
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
dependencies:
- image: user-authz/webhook
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_userAuthz_webhook
- image: node-local-dns/coredns
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeLocalDns_coredns
- image: node-local-dns/iptables-loop
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeLocalDns_iptablesLoop
- image: node-local-dns/stale-dns-connections-cleaner
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeLocalDns_staleDnsConnectionsCleaner
- image: basic-auth/nginx
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_basicAuth_nginx
- image: admission-policy-engine/ratify
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_admissionPolicyEngine_ratify
- image: admission-policy-engine/trivy-provider
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_admissionPolicyEngine_trivyProvider
- image: static-routing-manager/agent
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_staticRoutingManager_agent
- image: cloud-provider-dynamix/capd-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderDynamix_capdControllerManager
- image: cloud-provider-dynamix/cloud-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderDynamix_cloudControllerManager
- image: cloud-provider-dynamix/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderDynamix_cloudDataDiscoverer
- image: cloud-provider-dynamix/dynamix-csi-driver
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderDynamix_dynamixCsiDriver
- image: cloud-provider-huaweicloud/caphc-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderHuaweicloud_caphcControllerManager
- image: cloud-provider-huaweicloud/cloud-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderHuaweicloud_cloudControllerManager
- image: cloud-provider-huaweicloud/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderHuaweicloud_cloudDataDiscoverer
- image: cloud-provider-huaweicloud/huaweicloud-csi-driver
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderHuaweicloud_huaweicloudCsiDriver
- image: cloud-provider-openstack/cinder-csi-plugin-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cinderCsiPlugin128
- image: cloud-provider-openstack/cinder-csi-plugin-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cinderCsiPlugin129
- image: cloud-provider-openstack/cinder-csi-plugin-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cinderCsiPlugin130
- image: cloud-provider-openstack/cinder-csi-plugin-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cinderCsiPlugin131
- image: cloud-provider-openstack/cinder-csi-plugin-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cinderCsiPlugin132
- image: cloud-provider-openstack/cloud-controller-manager-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cloudControllerManager128
- image: cloud-provider-openstack/cloud-controller-manager-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cloudControllerManager129
- image: cloud-provider-openstack/cloud-controller-manager-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cloudControllerManager130
- image: cloud-provider-openstack/cloud-controller-manager-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cloudControllerManager131
- image: cloud-provider-openstack/cloud-controller-manager-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cloudControllerManager132
- image: cloud-provider-openstack/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderOpenstack_cloudDataDiscoverer
- image: cloud-provider-vcd/capcd-controller-manager-legacy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVcd_capcdControllerManagerLegacy
- image: cloud-provider-vcd/capcd-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVcd_capcdControllerManager
- image: cloud-provider-vcd/cloud-controller-manager-legacy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVcd_cloudControllerManagerLegacy
- image: cloud-provider-vcd/cloud-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVcd_cloudControllerManager
- image: cloud-provider-vcd/cloud-data-discoverer-legacy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVcd_cloudDataDiscovererLegacy
- image: cloud-provider-vcd/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVcd_cloudDataDiscoverer
- image: cloud-provider-vcd/vcd-csi-plugin-legacy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVcd_vcdCsiPluginLegacy
- image: cloud-provider-vcd/vcd-csi-plugin
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVcd_vcdCsiPlugin
- image: terraform-manager/terraform-manager-dynamix
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerDynamix
- image: terraform-manager/terraform-manager-huaweicloud
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerHuaweicloud
- image: terraform-manager/terraform-manager-openstack
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerOpenstack
- image: terraform-manager/terraform-manager-vcd
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerVcd
- image: istio/api-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_apiProxy
- image: istio/metadata-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_metadataExporter
- image: metallb/metallb-controller
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_metallb_metallbController
- image: metallb/metallb-speaker
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_metallb_metallbSpeaker
- image: keepalived/keepalived
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_keepalived_keepalived
- image: network-gateway/dnsmasq
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_networkGateway_dnsmasq
- image: network-gateway/snat
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_networkGateway_snat
- image: operator-trivy/node-collector
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_operatorTrivy_nodeCollector
- image: operator-trivy/operator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_operatorTrivy_operator
- image: operator-trivy/report-updater
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_operatorTrivy_reportUpdater
- image: operator-trivy/trivy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_operatorTrivy_trivy
- image: service-with-healthchecks/agent
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_serviceWithHealthchecks_agent
- image: service-with-healthchecks/controller
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_serviceWithHealthchecks_controller
- image: runtime-audit-engine/falco
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_runtimeAuditEngine_falco
- image: runtime-audit-engine/falcosidekick
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_runtimeAuditEngine_falcosidekick
- image: runtime-audit-engine/k8s-metacollector
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_runtimeAuditEngine_k8sMetacollector
- image: runtime-audit-engine/rules-loader
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_runtimeAuditEngine_rulesLoader
- image: cni-cilium/egress-gateway-agent
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cniCilium_egressGatewayAgent
- image: cloud-provider-vsphere/cloud-controller-manager-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_cloudControllerManager128
- image: cloud-provider-vsphere/cloud-controller-manager-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_cloudControllerManager129
- image: cloud-provider-vsphere/cloud-controller-manager-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_cloudControllerManager130
- image: cloud-provider-vsphere/cloud-controller-manager-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_cloudControllerManager131
- image: cloud-provider-vsphere/cloud-controller-manager-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_cloudControllerManager132
- image: cloud-provider-vsphere/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_cloudDataDiscoverer
- image: cloud-provider-vsphere/vsphere-csi-plugin-legacy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_vsphereCsiPluginLegacy
- image: cloud-provider-vsphere/vsphere-csi-plugin-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_vsphereCsiPlugin128
- image: cloud-provider-vsphere/vsphere-csi-plugin-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_vsphereCsiPlugin129
- image: cloud-provider-vsphere/vsphere-csi-plugin-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_vsphereCsiPlugin130
- image: cloud-provider-vsphere/vsphere-csi-plugin-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_vsphereCsiPlugin131
- image: cloud-provider-vsphere/vsphere-csi-plugin-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderVsphere_vsphereCsiPlugin132
- image: cloud-provider-zvirt/capz-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderZvirt_capzControllerManager
- image: cloud-provider-zvirt/cloud-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderZvirt_cloudControllerManager
- image: cloud-provider-zvirt/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderZvirt_cloudDataDiscoverer
- image: cloud-provider-zvirt/zvirt-csi-driver
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderZvirt_zvirtCsiDriver
- image: terraform-manager/terraform-manager-vsphere
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerVsphere
- image: terraform-manager/terraform-manager-zvirt
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerZvirt
- image: metallb/l2lb-controller
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_metallb_l2lbController
- image: metallb/l2lb-speaker
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_metallb_l2lbSpeaker
- image: common/check-kernel-version
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_checkKernelVersion
- image: common/coredns
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_coredns
- image: common/csi-external-attacher-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalAttacher128
- image: common/csi-external-attacher-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalAttacher129
- image: common/csi-external-attacher-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalAttacher130
- image: common/csi-external-attacher-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalAttacher131
- image: common/csi-external-attacher-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalAttacher132
- image: common/csi-external-provisioner-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalProvisioner128
- image: common/csi-external-provisioner-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalProvisioner129
- image: common/csi-external-provisioner-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalProvisioner130
- image: common/csi-external-provisioner-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalProvisioner131
- image: common/csi-external-provisioner-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalProvisioner132
- image: common/csi-external-resizer-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalResizer128
- image: common/csi-external-resizer-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalResizer129
- image: common/csi-external-resizer-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalResizer130
- image: common/csi-external-resizer-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalResizer131
- image: common/csi-external-resizer-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalResizer132
- image: common/csi-external-snapshotter-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalSnapshotter128
- image: common/csi-external-snapshotter-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalSnapshotter129
- image: common/csi-external-snapshotter-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalSnapshotter130
- image: common/csi-external-snapshotter-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalSnapshotter131
- image: common/csi-external-snapshotter-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiExternalSnapshotter132
- image: common/csi-livenessprobe-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiLivenessprobe128
- image: common/csi-livenessprobe-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiLivenessprobe129
- image: common/csi-livenessprobe-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiLivenessprobe130
- image: common/csi-livenessprobe-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiLivenessprobe131
- image: common/csi-livenessprobe-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiLivenessprobe132
- image: common/csi-node-driver-registrar-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiNodeDriverRegistrar128
- image: common/csi-node-driver-registrar-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiNodeDriverRegistrar129
- image: common/csi-node-driver-registrar-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiNodeDriverRegistrar130
- image: common/csi-node-driver-registrar-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiNodeDriverRegistrar131
- image: common/csi-node-driver-registrar-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiNodeDriverRegistrar132
- image: common/csi-vsphere-syncer-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiVsphereSyncer128
- image: common/csi-vsphere-syncer-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiVsphereSyncer129
- image: common/csi-vsphere-syncer-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiVsphereSyncer130
- image: common/csi-vsphere-syncer-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiVsphereSyncer131
- image: common/csi-vsphere-syncer-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_csiVsphereSyncer132
- image: common/distroless
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_distroless
- image: common/init
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_init
- image: common/iptables-wrapper
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_iptablesWrapper
- image: common/kube-rbac-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_kubeRbacProxy
- image: common/nginx-static
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_nginxStatic
- image: common/pause
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_pause
- image: common/redis-static
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_redisStatic
- image: common/shell-operator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_shellOperator
- image: common/vxlan-offloading-fixer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_common_vxlanOffloadingFixer
- image: deckhouse/webhook-handler
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_deckhouse_webhookHandler
- image: registrypackages/amazon-ec2-utils-2-2-0
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_amazonEc2Utils220
- image: registrypackages/containerd-1-7-27
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_containerd1727
- image: registrypackages/crictl-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_crictl128
- image: registrypackages/crictl-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_crictl129
- image: registrypackages/crictl-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_crictl130
- image: registrypackages/crictl-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_crictl131
- image: registrypackages/crictl-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_crictl132
- image: registrypackages/d8-ca-updater-20-02-25
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_d8CaUpdater200225
- image: registrypackages/d8-curl-8-9-1
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_d8Curl891
- image: registrypackages/d8
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_d8
- image: registrypackages/docker-registry-2-8-3
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_dockerRegistry283
- image: registrypackages/e2fsprogs-1-47-2
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_e2fsprogs1472
- image: registrypackages/ec2-describe-tags-v0-0-1-flant-3
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_ec2DescribeTagsV001Flant3
- image: registrypackages/ecr-credential-provider-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_ecrCredentialProvider128
- image: registrypackages/ecr-credential-provider-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_ecrCredentialProvider129
- image: registrypackages/ecr-credential-provider-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_ecrCredentialProvider130
- image: registrypackages/ecr-credential-provider-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_ecrCredentialProvider131
- image: registrypackages/ecr-credential-provider-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_ecrCredentialProvider132
- image: registrypackages/growpart-0-33
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_growpart033
- image: registrypackages/iptables-1-8-9
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_iptables189
- image: registrypackages/jq-1-7-1
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_jq171
- image: registrypackages/kubeadm-1-28-15
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubeadm12815
- image: registrypackages/kubeadm-1-29-15
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubeadm12915
- image: registrypackages/kubeadm-1-30-12
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubeadm13012
- image: registrypackages/kubeadm-1-31-8
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubeadm1318
- image: registrypackages/kubeadm-1-32-4
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubeadm1324
- image: registrypackages/kubectl-1-28-15
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubectl12815
- image: registrypackages/kubectl-1-29-15
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubectl12915
- image: registrypackages/kubectl-1-30-12
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubectl13012
- image: registrypackages/kubectl-1-31-8
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubectl1318
- image: registrypackages/kubectl-1-32-4
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubectl1324
- image: registrypackages/kubelet-1-28-15
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubelet12815
- image: registrypackages/kubelet-1-29-15
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubelet12915
- image: registrypackages/kubelet-1-30-12
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubelet13012
- image: registrypackages/kubelet-1-31-8
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubelet1318
- image: registrypackages/kubelet-1-32-4
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubelet1324
- image: registrypackages/kubernetes-api-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubernetesApiProxy
- image: registrypackages/kubernetes-cni-1-6-2
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_kubernetesCni162
- image: registrypackages/lsblk-2-40-2
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_lsblk2402
- image: registrypackages/netcat-1-10-48-1
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_netcat110481
- image: registrypackages/nvme-cli-2-11
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_nvmeCli211
- image: registrypackages/pause
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_pause
- image: registrypackages/socat-1-7-3-4
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_socat1734
- image: registrypackages/toml-merge-0-1
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_tomlMerge01
- image: registrypackages/virt-what-1-25
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_virtWhat125
- image: registrypackages/xfsprogs-6-7-0
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registrypackages_xfsprogs670
- image: admission-policy-engine/constraint-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_admissionPolicyEngine_constraintExporter
- image: admission-policy-engine/gatekeeper
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_admissionPolicyEngine_gatekeeper
- image: cni-cilium/agent-distroless
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cniCilium_agentDistroless
- image: cni-cilium/check-kernel-version
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cniCilium_checkKernelVersion
- image: cni-cilium/kube-rbac-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cniCilium_kubeRbacProxy
- image: cni-cilium/operator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cniCilium_operator
- image: cni-cilium/safe-agent-updater
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cniCilium_safeAgentUpdater
- image: cloud-provider-aws/cloud-controller-manager-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_cloudControllerManager128
- image: cloud-provider-aws/cloud-controller-manager-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_cloudControllerManager129
- image: cloud-provider-aws/cloud-controller-manager-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_cloudControllerManager130
- image: cloud-provider-aws/cloud-controller-manager-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_cloudControllerManager131
- image: cloud-provider-aws/cloud-controller-manager-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_cloudControllerManager132
- image: cloud-provider-aws/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_cloudDataDiscoverer
- image: cloud-provider-aws/ebs-csi-plugin-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_ebsCsiPlugin128
- image: cloud-provider-aws/ebs-csi-plugin-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_ebsCsiPlugin129
- image: cloud-provider-aws/ebs-csi-plugin-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_ebsCsiPlugin130
- image: cloud-provider-aws/ebs-csi-plugin-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_ebsCsiPlugin131
- image: cloud-provider-aws/ebs-csi-plugin-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_ebsCsiPlugin132
- image: cloud-provider-aws/node-termination-handler
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAws_nodeTerminationHandler
- image: cloud-provider-azure/azuredisk-csi-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_azurediskCsi128
- image: cloud-provider-azure/azuredisk-csi-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_azurediskCsi129
- image: cloud-provider-azure/azuredisk-csi-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_azurediskCsi130
- image: cloud-provider-azure/azuredisk-csi-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_azurediskCsi131
- image: cloud-provider-azure/azuredisk-csi-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_azurediskCsi132
- image: cloud-provider-azure/cloud-controller-manager-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_cloudControllerManager128
- image: cloud-provider-azure/cloud-controller-manager-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_cloudControllerManager129
- image: cloud-provider-azure/cloud-controller-manager-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_cloudControllerManager130
- image: cloud-provider-azure/cloud-controller-manager-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_cloudControllerManager131
- image: cloud-provider-azure/cloud-controller-manager-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_cloudControllerManager132
- image: cloud-provider-azure/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderAzure_cloudDataDiscoverer
- image: cloud-provider-gcp/cloud-controller-manager-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_cloudControllerManager128
- image: cloud-provider-gcp/cloud-controller-manager-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_cloudControllerManager129
- image: cloud-provider-gcp/cloud-controller-manager-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_cloudControllerManager130
- image: cloud-provider-gcp/cloud-controller-manager-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_cloudControllerManager131
- image: cloud-provider-gcp/cloud-controller-manager-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_cloudControllerManager132
- image: cloud-provider-gcp/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_cloudDataDiscoverer
- image: cloud-provider-gcp/pd-csi-plugin-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_pdCsiPlugin128
- image: cloud-provider-gcp/pd-csi-plugin-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_pdCsiPlugin129
- image: cloud-provider-gcp/pd-csi-plugin-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_pdCsiPlugin130
- image: cloud-provider-gcp/pd-csi-plugin-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_pdCsiPlugin131
- image: cloud-provider-gcp/pd-csi-plugin-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderGcp_pdCsiPlugin132
- image: cloud-provider-yandex/cloud-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderYandex_cloudControllerManager
- image: cloud-provider-yandex/cloud-data-discoverer
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderYandex_cloudDataDiscoverer
- image: cloud-provider-yandex/cloud-metrics-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderYandex_cloudMetricsExporter
- image: cloud-provider-yandex/cloud-migrator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderYandex_cloudMigrator
- image: cloud-provider-yandex/yandex-csi-plugin
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cloudProviderYandex_yandexCsiPlugin
- image: ceph-csi/cephcsi
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cephCsi_cephcsi
- image: local-path-provisioner/helper
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_localPathProvisioner_helper
- image: local-path-provisioner/local-path-provisioner
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_localPathProvisioner_localPathProvisioner
- image: cni-flannel/flanneld
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cniFlannel_flanneld
- image: cni-simple-bridge/simple-bridge
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_cniSimpleBridge_simpleBridge
- image: kube-proxy/init-container
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_kubeProxy_initContainer
- image: kube-proxy/kube-proxy-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_kubeProxy_kubeProxy128
- image: kube-proxy/kube-proxy-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_kubeProxy_kubeProxy129
- image: kube-proxy/kube-proxy-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_kubeProxy_kubeProxy130
- image: kube-proxy/kube-proxy-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_kubeProxy_kubeProxy131
- image: kube-proxy/kube-proxy-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_kubeProxy_kubeProxy132
- image: registry-packages-proxy/registry-packages-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_registryPackagesProxy_registryPackagesProxy
- image: control-plane-manager/control-plane-manager-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_controlPlaneManager128
- image: control-plane-manager/control-plane-manager-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_controlPlaneManager129
- image: control-plane-manager/control-plane-manager-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_controlPlaneManager130
- image: control-plane-manager/control-plane-manager-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_controlPlaneManager131
- image: control-plane-manager/control-plane-manager-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_controlPlaneManager132
- image: control-plane-manager/etcd-backup
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_etcdBackup
- image: control-plane-manager/etcd
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_etcd
- image: control-plane-manager/kube-apiserver-healthcheck
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeApiserverHealthcheck
- image: control-plane-manager/kube-apiserver-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeApiserver128
- image: control-plane-manager/kube-apiserver-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeApiserver129
- image: control-plane-manager/kube-apiserver-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeApiserver130
- image: control-plane-manager/kube-apiserver-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeApiserver131
- image: control-plane-manager/kube-apiserver-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeApiserver132
- image: control-plane-manager/kube-controller-manager-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeControllerManager128
- image: control-plane-manager/kube-controller-manager-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeControllerManager129
- image: control-plane-manager/kube-controller-manager-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeControllerManager130
- image: control-plane-manager/kube-controller-manager-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeControllerManager131
- image: control-plane-manager/kube-controller-manager-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeControllerManager132
- image: control-plane-manager/kube-scheduler-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeScheduler128
- image: control-plane-manager/kube-scheduler-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeScheduler129
- image: control-plane-manager/kube-scheduler-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeScheduler130
- image: control-plane-manager/kube-scheduler-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeScheduler131
- image: control-plane-manager/kube-scheduler-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubeScheduler132
- image: control-plane-manager/kubernetes-api-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_controlPlaneManager_kubernetesApiProxy
- image: node-manager/bashible-apiserver
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_bashibleApiserver
- image: node-manager/capi-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_capiControllerManager
- image: node-manager/caps-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_capsControllerManager
- image: node-manager/cluster-autoscaler-1-28
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_clusterAutoscaler128
- image: node-manager/cluster-autoscaler-1-29
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_clusterAutoscaler129
- image: node-manager/cluster-autoscaler-1-30
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_clusterAutoscaler130
- image: node-manager/cluster-autoscaler-1-31
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_clusterAutoscaler131
- image: node-manager/cluster-autoscaler-1-32
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_clusterAutoscaler132
- image: node-manager/early-oom
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_earlyOom
- image: node-manager/fencing-agent
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_fencingAgent
- image: node-manager/machine-controller-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_nodeManager_machineControllerManager
- image: terraform-manager/terraform-manager-aws
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerAws
- image: terraform-manager/terraform-manager-azure
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerAzure
- image: terraform-manager/terraform-manager-gcp
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerGcp
- image: terraform-manager/terraform-manager-yandex
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_terraformManager_terraformManagerYandex
- image: kube-dns/sts-pods-hosts-appender-init-container
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_kubeDns_stsPodsHostsAppenderInitContainer
- image: kube-dns/sts-pods-hosts-appender-webhook
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_kubeDns_stsPodsHostsAppenderWebhook
- image: snapshot-controller/snapshot-controller
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_snapshotController_snapshotController
- image: snapshot-controller/snapshot-validation-webhook
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_snapshotController_snapshotValidationWebhook
- image: network-policy-engine/kube-router
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_networkPolicyEngine_kubeRouter
- image: cert-manager/cert-manager-acme-solver
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_certManager_certManagerAcmeSolver
- image: cert-manager/cert-manager-cainjector
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_certManager_certManagerCainjector
- image: cert-manager/cert-manager-controller
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_certManager_certManagerController
- image: cert-manager/cert-manager-webhook
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_certManager_certManagerWebhook
- image: istio/cni-v1x19x7
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_cniV1x19x7
- image: istio/cni-v1x21x6
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_cniV1x21x6
- image: istio/kiali-v1x19x7
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_kialiV1x19x7
- image: istio/kiali-v1x21x6
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_kialiV1x21x6
- image: istio/operator-v1x19x7
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_operatorV1x19x7
- image: istio/operator-v1x21x6
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_operatorV1x21x6
- image: istio/pilot-v1x19x7
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_pilotV1x19x7
- image: istio/pilot-v1x21x6
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_pilotV1x21x6
- image: istio/proxyv2-v1x19x7
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_proxyv2V1x19x7
- image: istio/proxyv2-v1x21x6
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_istio_proxyv2V1x21x6
- image: user-authn/basic-auth-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_userAuthn_basicAuthProxy
- image: user-authn/dex-authenticator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_userAuthn_dexAuthenticator
- image: user-authn/dex
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_userAuthn_dex
- image: user-authn/kubeconfig-generator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_userAuthn_kubeconfigGenerator
- image: user-authn/self-signed-generator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_userAuthn_selfSignedGenerator
- image: multitenancy-manager/multitenancy-manager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_multitenancyManager_multitenancyManager
- image: operator-prometheus/prometheus-config-reloader
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_operatorPrometheus_prometheusConfigReloader
- image: operator-prometheus/prometheus-operator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_operatorPrometheus_prometheusOperator
- image: prometheus/alertmanager
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_alertmanager
- image: prometheus/alerts-receiver
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_alertsReceiver
- image: prometheus/grafana-dashboard-provisioner
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_grafanaDashboardProvisioner
- image: prometheus/grafana-v10
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_grafanaV10
- image: prometheus/memcached
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_memcached
- image: prometheus/memcached-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_memcachedExporter
- image: prometheus/mimir
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_mimir
- image: prometheus/prometheus
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_prometheus
- image: prometheus/promxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_promxy
- image: prometheus/trickster
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheus_trickster
- image: prometheus-metrics-adapter/k8s-prometheus-adapter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheusMetricsAdapter_k8sPrometheusAdapter
- image: prometheus-metrics-adapter/prometheus-reverse-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheusMetricsAdapter_prometheusReverseProxy
- image: vertical-pod-autoscaler/admission-controller
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_verticalPodAutoscaler_admissionController
- image: vertical-pod-autoscaler/recommender
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_verticalPodAutoscaler_recommender
- image: vertical-pod-autoscaler/updater
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_verticalPodAutoscaler_updater
- image: prometheus-pushgateway/pushgateway
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_prometheusPushgateway_pushgateway
- image: extended-monitoring/events-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_extendedMonitoring_eventsExporter
- image: extended-monitoring/extended-monitoring-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_extendedMonitoring_extendedMonitoringExporter
- image: extended-monitoring/image-availability-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_extendedMonitoring_imageAvailabilityExporter
- image: extended-monitoring/x509-certificate-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_extendedMonitoring_x509CertificateExporter
- image: monitoring-kubernetes/ebpf-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_monitoringKubernetes_ebpfExporter
- image: monitoring-kubernetes/kube-state-metrics
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_monitoringKubernetes_kubeStateMetrics
- image: monitoring-kubernetes/kubelet-eviction-thresholds-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_monitoringKubernetes_kubeletEvictionThresholdsExporter
- image: monitoring-kubernetes/node-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_monitoringKubernetes_nodeExporter
- image: monitoring-ping/monitoring-ping
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_monitoringPing_monitoringPing
- image: descheduler/descheduler
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_descheduler_descheduler
- image: ingress-nginx/controller-1-10
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_controller110
- image: ingress-nginx/controller-1-12
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_controller112
- image: ingress-nginx/controller-1-9
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_controller19
- image: ingress-nginx/kruise-state-metrics
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_kruiseStateMetrics
- image: ingress-nginx/kruise
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_kruise
- image: ingress-nginx/kube-rbac-proxy
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_kubeRbacProxy
- image: ingress-nginx/nginx-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_nginxExporter
- image: ingress-nginx/protobuf-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_protobufExporter
- image: ingress-nginx/proxy-failover-iptables
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_proxyFailoverIptables
- image: ingress-nginx/nginx-static-artifact
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_nginxStaticArtifact
- image: ingress-nginx/proxy-failover
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ingressNginx_proxyFailover
- image: log-shipper/vector
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_logShipper_vector
- image: loki/loki
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_loki_loki
- image: pod-reloader/pod-reloader
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_podReloader_podReloader
- image: chrony/chrony-exporter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_chrony_chronyExporter
- image: chrony/chrony
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_chrony_chrony
- image: cilium-hubble/relay
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ciliumHubble_relay
- image: cilium-hubble/ui-frontend
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ciliumHubble_uiFrontend
- image: cilium-hubble/ui-backend
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_ciliumHubble_uiBackend
- image: dashboard/api
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_dashboard_api
- image: dashboard/auth
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_dashboard_auth
- image: dashboard/metrics-scraper
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_dashboard_metricsScraper
- image: dashboard/web
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_dashboard_web
- image: openvpn/easyrsa-migrator
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_openvpn_easyrsaMigrator
- image: openvpn/openvpn
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_openvpn_openvpn
- image: openvpn/ovpn-admin
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_openvpn_ovpnAdmin
- image: openvpn/pmacct
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_openvpn_pmacct
- image: upmeter/smoke-mini
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_upmeter_smokeMini
- image: upmeter/status
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_upmeter_status
- image: upmeter/upmeter
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_upmeter_upmeter
- image: upmeter/webui
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_upmeter_webui
- image: deckhouse-tools/web
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_deckhouseTools_web
- image: documentation/docs-builder
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_documentation_docsBuilder
- image: documentation/web
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_documentation_web

import:
- image: common/jq-artifact
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: setup
shell:
  setup:
  - |
    touch digests_full.lst
    # Here we have list of records like "MODULE_IMAGE_DIGEST_moduleName_sha256:imageDigest", which we parse
    for line in `printenv | grep MODULE_IMAGE_DIGEST_ | cut -d "=" -f 1`
    do
      digestKey=`echo $line | cut -f 4- -d '_'`
      imageDigest=`printenv $line | grep -Eo "sha256:[a-f0-9]+"`
      echo $digestKey'='$imageDigest >> digests_full.lst
    done
    cat digests_full.lst | jq -Rn '
      reduce inputs as $i (
        {};
        . * (
          $i | sub("=";"_") |
          split("_") as [$moduleName, $imageName, $digest] |
          {($moduleName): {($imageName): $digest}}
        )
      )
    ' > /images_digests.json
---


---
image: release-channel-version-prebuild
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
dependencies:
- image: dev
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: deckhouseImageDigest
import:
- image: common/yq4-artifact
  add: /usr/local/bin/yq
  to: /usr/local/bin/yq
  before: install
shell:
  install:
  - |
    export version="cve-fix-common-k8s"
    yq eval '.version = env(version)' /deckhouse/release.yaml | yq eval -j > version.json
    # changelog exists only for tags, we have to skip it for branches
    
    # update kubernetes auto version in the release file
    yq eval '.requirements.autoK8sVersion = "1.30"' -i /deckhouse/release.yaml
    yq eval '.requirements.k8s = "1.28"' -i /deckhouse/release.yaml
git:
- add: /
  to: /deckhouse
  includePaths:
  - release.yaml

---
image: release-channel-version
from: registry.deckhouse.io/base_images/scratch@sha256:653ae76965c98c8cd1c8c9ff7725316d2983986f896655b30e0f44d2f8b2dd7e
import:
- image: release-channel-version-prebuild
  add: /
  to: /
  after: install
  includePaths:
  - version.json
  - changelog.yaml
---


---
image: tests-prebuild
fromImage: base-for-go
git:
- add: /
  to: /deckhouse
  stageDependencies:
    install:
    - go.mod
    - go.sum
  includePaths:
  - deckhouse-controller
  - dhctl
  - candi
  - modules
  - global-hooks
  - go_lib
  - pkg
  - shell_lib.sh
  - shell_lib
  - jq_lib
  - helm_lib
  - testing
  - go.mod
  - go.sum
  - editions.yaml
  excludePaths:
  
  # Code generated by tools/build.go; DO NOT EDIT.
  
  - docs
  - modules/*/docs
  - modules/*/README.md
  - modules/*/images
  - modules/*/webhooks
  - modules/0[1-9][1-9]-*/crds     # we need here only the 000-common/crds
  - modules/[1-9][0-9][0-9]-*/crds
  - candi/cloud-providers/*/layouts
  - candi/cloud-providers/*/terraform-modules
- url: https://github.com/flant/shell-operator
  tag: v1.4.10
  add: /frameworks/shell
  to: /deckhouse/shell-operator/frameworks/shell
  # Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/be/modules/040-node-manager/openapi/config-values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/config-values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/doc-ru-config-values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/doc-ru-config-values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/openapi-case-tests.yaml
  to: /deckhouse/modules/040-node-manager/openapi/openapi-case-tests.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/040-node-manager/openapi/values.yaml
  to: /deckhouse/modules/040-node-manager/openapi/values.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/140-user-authz/templates/webhook
  to: /deckhouse/modules/140-user-authz/templates/webhook
  stageDependencies:
    install:
        - '**/*'
- add: /ee/be/modules/350-node-local-dns
  to: /deckhouse/modules/350-node-local-dns
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se/modules/380-metallb
  to: /deckhouse/modules/380-metallb
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/doc-ru-egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/doc-ru-egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/doc-ru-egressgateways.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/doc-ru-egressgateways.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/egressgateways.yaml
  to: /deckhouse/modules/021-cni-cilium/crds/egressgateways.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/crds/internal
  to: /deckhouse/modules/021-cni-cilium/crds/internal
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/hooks/ee
  to: /deckhouse/modules/021-cni-cilium/hooks/ee
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent
  to: /deckhouse/modules/021-cni-cilium/images/egress-gateway-agent
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-gateway-agent
  to: /deckhouse/modules/021-cni-cilium/templates/egress-gateway-agent
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-gateway-instance
  to: /deckhouse/modules/021-cni-cilium/templates/egress-gateway-instance
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/templates/egress-policy
  to: /deckhouse/modules/021-cni-cilium/templates/egress-policy
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/021-cni-cilium/monitoring/prometheus-rules/egressgatewaypolicies.yaml
  to: /deckhouse/modules/021-cni-cilium/monitoring/prometheus-rules/egressgatewaypolicies.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/030-cloud-provider-vsphere
  to: /deckhouse/modules/030-cloud-provider-vsphere
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/030-cloud-provider-zvirt
  to: /deckhouse/modules/030-cloud-provider-zvirt
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/040-node-manager/cloud-providers/vsphere
  to: /deckhouse/modules/040-node-manager/cloud-providers/vsphere
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/modules/040-node-manager/capi/zvirt
  to: /deckhouse/modules/040-node-manager/capi/zvirt
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/015-admission-policy-engine/templates/trivy-provider
  to: /deckhouse/modules/015-admission-policy-engine/templates/trivy-provider
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/015-admission-policy-engine/templates/ratify
  to: /deckhouse/modules/015-admission-policy-engine/templates/ratify
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/015-admission-policy-engine/hooks/common_test.go
  to: /deckhouse/modules/015-admission-policy-engine/hooks/common_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/015-admission-policy-engine/hooks/update_trivy_provider_config.go
  to: /deckhouse/modules/015-admission-policy-engine/hooks/update_trivy_provider_config.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/015-admission-policy-engine/hooks/update_trivy_provider_config_test.go
  to: /deckhouse/modules/015-admission-policy-engine/hooks/update_trivy_provider_config_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/025-static-routing-manager
  to: /deckhouse/modules/025-static-routing-manager
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/030-cloud-provider-dynamix
  to: /deckhouse/modules/030-cloud-provider-dynamix
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/030-cloud-provider-huaweicloud
  to: /deckhouse/modules/030-cloud-provider-huaweicloud
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/030-cloud-provider-openstack
  to: /deckhouse/modules/030-cloud-provider-openstack
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/030-cloud-provider-vcd
  to: /deckhouse/modules/030-cloud-provider-vcd
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/040-node-manager/cloud-providers/openstack
  to: /deckhouse/modules/040-node-manager/cloud-providers/openstack
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/040-node-manager/capi/dynamix
  to: /deckhouse/modules/040-node-manager/capi/dynamix
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/040-node-manager/capi/huaweicloud
  to: /deckhouse/modules/040-node-manager/capi/huaweicloud
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/040-node-manager/capi/vcd
  to: /deckhouse/modules/040-node-manager/capi/vcd
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/templates/alliance
  to: /deckhouse/modules/110-istio/templates/alliance
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/templates/control-plane-ee
  to: /deckhouse/modules/110-istio/templates/control-plane-ee
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/templates/federation
  to: /deckhouse/modules/110-istio/templates/federation
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/templates/multicluster
  to: /deckhouse/modules/110-istio/templates/multicluster
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/templates/validations.yaml
  to: /deckhouse/modules/110-istio/templates/validations.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/hooks/ee
  to: /deckhouse/modules/110-istio/hooks/ee
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/doc-ru-istiofederation.yaml
  to: /deckhouse/modules/110-istio/crds/doc-ru-istiofederation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/doc-ru-istiomulticluster.yaml
  to: /deckhouse/modules/110-istio/crds/doc-ru-istiomulticluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/istiofederation.yaml
  to: /deckhouse/modules/110-istio/crds/istiofederation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/crds/istiomulticluster.yaml
  to: /deckhouse/modules/110-istio/crds/istiomulticluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/dataplane.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/dataplane.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/federation.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/federation.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/110-istio/monitoring/prometheus-rules/multicluster.yaml
  to: /deckhouse/modules/110-istio/monitoring/prometheus-rules/multicluster.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/150-user-authn/hooks/common_test.go
  to: /deckhouse/modules/150-user-authn/hooks/common_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/150-user-authn/hooks/custom_logo.go
  to: /deckhouse/modules/150-user-authn/hooks/custom_logo.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/150-user-authn/hooks/custom_logo_test.go
  to: /deckhouse/modules/150-user-authn/hooks/custom_logo_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/300-prometheus/hooks/common_test.go
  to: /deckhouse/modules/300-prometheus/hooks/common_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/300-prometheus/hooks/custom_logo.go
  to: /deckhouse/modules/300-prometheus/hooks/custom_logo.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/300-prometheus/hooks/custom_logo_test.go
  to: /deckhouse/modules/300-prometheus/hooks/custom_logo_test.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/templates/_helper.tpl
  to: /deckhouse/modules/380-metallb/templates/_helper.tpl
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/templates/controller
  to: /deckhouse/modules/380-metallb/templates/controller
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/templates/speaker
  to: /deckhouse/modules/380-metallb/templates/speaker
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/monitoring/grafana-dashboards/kubernetes-cluster/metallb-bgp.json
  to: /deckhouse/modules/380-metallb/monitoring/grafana-dashboards/kubernetes-cluster/metallb-bgp.json
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/380-metallb/monitoring/prometheus-rules/metallb.yaml
  to: /deckhouse/modules/380-metallb/monitoring/prometheus-rules/metallb.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/450-keepalived
  to: /deckhouse/modules/450-keepalived
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/450-network-gateway
  to: /deckhouse/modules/450-network-gateway
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/500-operator-trivy
  to: /deckhouse/modules/500-operator-trivy
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/610-service-with-healthchecks
  to: /deckhouse/modules/610-service-with-healthchecks
  stageDependencies:
    install:
        - '**/*'
- add: /ee/modules/650-runtime-audit-engine
  to: /deckhouse/modules/650-runtime-audit-engine
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/002-deckhouse/templates/flant-module-source.yaml
  to: /deckhouse/modules/002-deckhouse/templates/flant-module-source.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/040-node-manager/templates/ngc-ca-certificate.yaml
  to: /deckhouse/modules/040-node-manager/templates/ngc-ca-certificate.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/300-prometheus/templates/prometheus/prometheus.yaml
  to: /deckhouse/modules/300-prometheus/templates/prometheus/prometheus.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/300-prometheus/templates/prometheus/longterm/prometheus.yaml
  to: /deckhouse/modules/300-prometheus/templates/prometheus/longterm/prometheus.yaml
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/340-monitoring-applications
  to: /deckhouse/modules/340-monitoring-applications
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/500-basic-auth
  to: /deckhouse/modules/500-basic-auth
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/500-okmeter/hooks/update_agent_image.go
  to: /deckhouse/modules/500-okmeter/hooks/update_agent_image.go
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/modules/500-okmeter/templates/daemonset.yaml
  to: /deckhouse/modules/500-okmeter/templates/daemonset.yaml
  stageDependencies:
    install:
        - '**/*'

  # Code generated by tools/build.go; DO NOT EDIT.
- add: /ee/se-plus/candi/cloud-providers/vsphere
  to: /deckhouse/candi/cloud-providers/vsphere
  stageDependencies:
    install:
        - '**/*'
- add: /ee/se-plus/candi/cloud-providers/zvirt
  to: /deckhouse/candi/cloud-providers/zvirt
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/openstack
  to: /deckhouse/candi/cloud-providers/openstack
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/vcd
  to: /deckhouse/candi/cloud-providers/vcd
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/dynamix
  to: /deckhouse/candi/cloud-providers/dynamix
  stageDependencies:
    install:
        - '**/*'
- add: /ee/candi/cloud-providers/huaweicloud
  to: /deckhouse/candi/cloud-providers/huaweicloud
  stageDependencies:
    install:
        - '**/*'
- add: /ee/fe/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  to: /deckhouse/candi/bashible/common-steps/all/098_upd_tfadm.sh.tpl
  stageDependencies:
    install:
        - '**/*'

import:
- image: deckhouse-controller-artifact
  add: /out/deckhouse-controller
  to: /usr/bin/deckhouse-controller
  after: setup
- image: common/jq-artifact
  add: /usr/bin/jq
  to: /usr/bin/jq
  after: setup
- image: version-map-artifact
  add: /version_map_FE.yml
  to: /deckhouse/candi/version_map.yml
  after: setup
- image: golangci-lint-artifact
  add: /usr/local/bin/golangci-lint
  to: /usr/local/bin/golangci-lint
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - go install github.com/onsi/ginkgo/ginkgo@latest
  - go install github.com/go-delve/delve/cmd/dlv@latest
  setup:
    - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/be/modules|github.com/deckhouse/deckhouse/modules|g' {} +
    - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/se/modules|github.com/deckhouse/deckhouse/modules|g' {} +
    - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/se-plus/modules|github.com/deckhouse/deckhouse/modules|g' {} +
    - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/modules|github.com/deckhouse/deckhouse/modules|g' {} +
    - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/ee/fe/modules|github.com/deckhouse/deckhouse/modules|g' {} +
imageSpec:
  config:
    env: { "ADDON_OPERATOR_NAMESPACE": "tests", "DECKHOUSE_POD": "tests", "MODULES_DIR": "/deckhouse/modules", "GLOBAL_HOOKS_DIR": "/deckhouse/global-hooks", "PATH": "${PATH}:/usr/local/go/bin:/root/go/bin" }
---
image: tests
fromImage: tests-prebuild
import:
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/modules/images_digests.json
  after: setup
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/modules/040-node-manager/images_digests.json
  after: setup


---
image: version-map-artifact
from: registry.deckhouse.io/base_images/alpine:3.20.3@sha256:41628df7c9b935d248f64542634e7a843f9bc7f2252d7f878e77f7b79a947466
final: false
import:
- image: common/yq4-artifact
  add: /usr/local/bin/yq
  to: /usr/local/bin/yq
  before: install
git:
- add: /
  to: /
  stageDependencies:
    setup:
      - candi/version_map.yml
      - ee/candi/version_map.yml
  includePaths:
  - candi/version_map.yml
  - ee/candi/version_map.yml
shell:
  setup:

  - cp candi/version_map.yml /version_map_CE.yml

  - cp /version_map_CE.yml /version_map_BE.yml

  - cp /version_map_BE.yml /version_map_SE.yml

  - cp /version_map_SE.yml /version_map_SE-plus.yml
  - cp ee/candi/version_map.yml /version_map_EE.yml.tmp
  - yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' /version_map_SE-plus.yml /version_map_EE.yml.tmp > /version_map_EE.yml

  - cp /version_map_EE.yml /version_map_FE.yml
---


