deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_release.go:	ModuleReleaseGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_update_policy.go:	ModuleUpdatePolicyGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module.go:	// ModuleGVK GroupVersionKind
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module.go:	ModuleGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_pull_override.go:	ModulePullOverrideGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_config.go:	ModuleConfigGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_documentation.go:	ModuleDocumentationGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_documentation.go:func (f *ModuleDocumentationKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_documentation.go:func (f *ModuleDocumentationKind) GroupVersionKind() schema.GroupVersionKind {
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_settings_definition.go:	ModuleSettingsDefinitionGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/module_source.go:	ModuleSourceGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/deckhouse_release.go:var DeckhouseReleaseGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/deckhouse_release.go:func (f *deckhouseReleaseKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha1/deckhouse_release.go:func (f *deckhouseReleaseKind) GroupVersionKind() schema.GroupVersionKind {
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha2/module_update_policy.go:	ModuleUpdatePolicyGVK = schema.GroupVersionKind{
deckhouse-controller/pkg/apis/deckhouse.io/v1alpha2/module_pull_override.go:	ModulePullOverrideGVK = schema.GroupVersionKind{
modules/110-istio/hooks/purge_orphan_resources_test.go:		iopGVK = schema.GroupVersionKind{
modules/110-istio/hooks/purge_orphan_resources_test.go:		istioGVK = schema.GroupVersionKind{
modules/500-upmeter/images/upmeter/src/internal/nodegroups/v1/nodegroup.go:func (f *nodeGroupKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
modules/500-upmeter/images/upmeter/src/internal/nodegroups/v1/nodegroup.go:func (f *nodeGroupKind) GroupVersionKind() schema.GroupVersionKind {
modules/500-upmeter/images/upmeter/src/internal/nodegroups/v1/nodegroup.go:	return schema.GroupVersionKind{Group: "deckhouse.io", Version: "v1", Kind: "NodeGroup"}
modules/500-upmeter/images/upmeter/src/internal/nodegroups/v1alpha2/nodegroup.go:func (f *nodeGroupKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
modules/500-upmeter/images/upmeter/src/internal/nodegroups/v1alpha2/nodegroup.go:func (f *nodeGroupKind) GroupVersionKind() schema.GroupVersionKind {
modules/500-upmeter/images/upmeter/src/internal/nodegroups/v1alpha2/nodegroup.go:	return schema.GroupVersionKind{Group: "deckhouse.io", Version: "v1alpha2", Kind: "NodeGroup"}
modules/160-multitenancy-manager/images/multitenancy-manager/src/apis/deckhouse.io/v1alpha1/register.go:var ProjectTemplateGVK = schema.GroupVersionKind{Group: deckhouse_io.GroupName, Version: Version, Kind: ProjectTemplateKind}
modules/160-multitenancy-manager/images/multitenancy-manager/src/apis/deckhouse.io/v1alpha2/register.go:var ProjectGVK = schema.GroupVersionKind{Group: deckhouse_io.GroupName, Version: Version, Kind: ProjectKind}
modules/040-node-manager/hooks/internal/v1/nodegroup.go:func (f *nodeGroupKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
modules/040-node-manager/hooks/internal/v1/nodegroup.go:func (f *nodeGroupKind) GroupVersionKind() schema.GroupVersionKind {
modules/040-node-manager/hooks/internal/v1/nodegroup.go:	return schema.GroupVersionKind{Group: "deckhouse.io", Version: "v1", Kind: "NodeGroup"}
modules/040-node-manager/hooks/internal/capi/v1beta1/groupversion_info.go:	// SchemeBuilder is used to add go types to the GroupVersionKind scheme.
modules/040-node-manager/hooks/internal/v1alpha1/instance.go:func (f *instanceKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
modules/040-node-manager/hooks/internal/v1alpha1/instance.go:func (f *instanceKind) GroupVersionKind() schema.GroupVersionKind {
modules/040-node-manager/hooks/internal/v1alpha1/instance.go:	return schema.GroupVersionKind{Group: "deckhouse.io", Version: "v1alpha1", Kind: "Instance"}
modules/040-node-manager/hooks/internal/v1alpha2/nodegroup.go:func (f *nodeGroupKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
modules/040-node-manager/hooks/internal/v1alpha2/nodegroup.go:func (f *nodeGroupKind) GroupVersionKind() schema.GroupVersionKind {
modules/040-node-manager/hooks/internal/v1alpha2/nodegroup.go:	return schema.GroupVersionKind{Group: "deckhouse.io", Version: "v1alpha2", Kind: "NodeGroup"}
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/openapi/zz_generated.openapi.go:		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionKind":             schema_pkg_apis_meta_v1_GroupVersionKind(ref),
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/openapi/zz_generated.openapi.go:func schema_pkg_apis_meta_v1_GroupVersionKind(ref common.ReferenceCallback) common.OpenAPIDefinition {
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/openapi/zz_generated.openapi.go:				Description: "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling",
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/openapi/zz_generated.openapi.go:				Description: "TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type, like this:\n\n\ttype MyAwesomeAPIObject struct {\n\t     runtime.TypeMeta    `json:\",inline\"`\n\t     ... // other fields\n\t}\n\nfunc (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind\n\nTypeMeta is provided here for convenience. You may use it directly from this package or define your own with the same fields.",
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/applyconfiguration/utils.go:// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/applyconfiguration/utils.go:// apply configuration type exists for the given GroupVersionKind.
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/applyconfiguration/utils.go:func ForKind(kind schema.GroupVersionKind) interface{} {
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/clientset/versioned/typed/bashible/v1alpha1/fake/fake_bashible.go:var bashiblesKind = schema.GroupVersionKind{Group: "bashible.deckhouse.io", Version: "v1alpha1", Kind: "Bashible"}
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/clientset/versioned/typed/bashible/v1alpha1/fake/fake_bootstrap.go:var bootstrapsKind = schema.GroupVersionKind{Group: "bashible.deckhouse.io", Version: "v1alpha1", Kind: "Bootstrap"}
modules/040-node-manager/images/bashible-apiserver/src/pkg/generated/clientset/versioned/typed/bashible/v1alpha1/fake/fake_nodegroupbundle.go:var nodegroupbundlesKind = schema.GroupVersionKind{Group: "bashible.deckhouse.io", Version: "v1alpha1", Kind: "NodeGroupBundle"}
modules/040-node-manager/images/bashible-apiserver/src/pkg/registry/registry_test.go:func (f *fakeObjKind) SetGroupVersionKind(kind schema.GroupVersionKind) {}
modules/040-node-manager/images/bashible-apiserver/src/pkg/registry/registry_test.go:func (f *fakeObjKind) GroupVersionKind() schema.GroupVersionKind {
modules/040-node-manager/images/bashible-apiserver/src/pkg/registry/registry_test.go:	return schema.GroupVersionKind{Group: "foo", Version: "bar", Kind: "Baz"}
modules/040-node-manager/images/caps-controller-manager/src/internal/controller/infrastructure/staticmachine_controller.go:func (r *StaticMachineReconciler) StaticInstanceToStaticMachineMapFunc(gvk schema.GroupVersionKind) handler.MapFunc {
modules/040-node-manager/images/caps-controller-manager/src/internal/controller/infrastructure/staticmachine_controller.go:		if gvk.GroupKind() != staticInstance.Status.MachineRef.GroupVersionKind().GroupKind() {
modules/040-node-manager/images/caps-controller-manager/src/api/deckhouse.io/v1alpha1/staticinstance_webhook.go:			Group:    r.GroupVersionKind().Group,
modules/040-node-manager/images/caps-controller-manager/src/api/deckhouse.io/v1alpha1/groupversion_info.go:	// SchemeBuilder is used to add go types to the GroupVersionKind scheme
modules/040-node-manager/images/caps-controller-manager/src/api/deckhouse.io/v1alpha2/staticinstance_webhook.go:			Group:    r.GroupVersionKind().Group,
modules/040-node-manager/images/caps-controller-manager/src/api/deckhouse.io/v1alpha2/groupversion_info.go:	// SchemeBuilder is used to add go types to the GroupVersionKind scheme
modules/040-node-manager/images/caps-controller-manager/src/api/infrastructure/v1alpha1/staticmachine_webhook.go:	return aggregateObjErrors(r.GroupVersionKind().GroupKind(), r.Name, errs)
modules/040-node-manager/images/caps-controller-manager/src/api/infrastructure/v1alpha1/groupversion_info.go:	// SchemeBuilder is used to add go types to the GroupVersionKind scheme
modules/030-cloud-provider-dvp/images/capdvp-controller-manager/src/api/v1alpha1/groupversion_info.go:	// SchemeBuilder is used to add go types to the GroupVersionKind scheme.
modules/015-admission-policy-engine/monitoring/grafana-dashboards/security/propagated-admission-policy-engine.json:      "description": "Total number of watched GroupVersionKinds",
modules/015-admission-policy-engine/monitoring/grafana-dashboards/security/propagated-admission-policy-engine.json:      "title": "Total GroupVersionKinds",
modules/015-admission-policy-engine/monitoring/grafana-dashboards/security/propagated-admission-policy-engine.json:      "description": "Total number of GroupVersionKinds with a registered watch intent",
modules/015-admission-policy-engine/monitoring/grafana-dashboards/security/propagated-admission-policy-engine.json:      "title": "Total GroupVersionKinds registered",
modules/015-admission-policy-engine/crds/native/config-customresourcedefinition.yaml:                          description: Only trace requests of the following GroupVersionKind
modules/015-admission-policy-engine/images/constraint-exporter/src/pkg/gatekeeper/mutations.go:		actual.SetGroupVersionKind(schema.GroupVersionKind{
modules/015-admission-policy-engine/images/constraint-exporter/src/pkg/gatekeeper/constraints.go:		actual.SetGroupVersionKind(schema.GroupVersionKind{
modules/015-admission-policy-engine/images/constraint-exporter/src/pkg/kinds/kinds.go:func (rm resourceMatcher) findGVKsForWildcard(kind string) []schema.GroupVersionKind {
modules/015-admission-policy-engine/images/constraint-exporter/src/pkg/kinds/kinds.go:	matchGVKs := make([]schema.GroupVersionKind, 0)
modules/015-admission-policy-engine/images/constraint-exporter/src/pkg/kinds/kinds.go:					gvk := schema.GroupVersionKind{
modules/040-control-plane-manager/hooks/ensure_secret_encryption_key.go:			newCM.SetGroupVersionKind(gvk)
modules/039-registry-packages-proxy/images/registry-packages-proxy/src/internal/credentials/module_source.go:	ModuleSourceGVK = schema.GroupVersionKind{
modules/039-registry-packages-proxy/images/registry-packages-proxy/src/internal/credentials/module_source.go:func (f *moduleSourceKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
modules/039-registry-packages-proxy/images/registry-packages-proxy/src/internal/credentials/module_source.go:func (f *moduleSourceKind) GroupVersionKind() schema.GroupVersionKind {
go_lib/dependency/k8s/drain/cordon.go:func NewCordonHelperFromRuntimeObject(nodeObject runtime.Object, scheme *runtime.Scheme, gvk schema.GroupVersionKind) (*CordonHelper, error) {
ee/modules/500-operator-trivy/images/operator/patches/002-skip-some-checks.patch:+	kind := resource.GetObjectKind().GroupVersionKind().Kind
ee/modules/610-service-with-healthchecks/images/artifact/internal/controller/controller.go:var gvk = schema.GroupVersionKind{Group: "network.deckhouse.io", Version: "v1alpha1", Kind: "ServiceWithHealthchecks"}
ee/modules/610-service-with-healthchecks/images/artifact/api/v1alpha1/groupversion_info.go:	// SchemeBuilder is used to add go types to the GroupVersionKind scheme
ee/se/modules/380-metallb/images/l2lb/patches/002-l2lb-service-custom-resource.patch:+	// SchemeBuilder is used to add go types to the GroupVersionKind scheme.
ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/src/pkg/apis/v1alpha1/groupversion_info.go:	// SchemeBuilder is used to add go types to the GroupVersionKind scheme
ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/src/pkg/apis/internal.network/v1alpha1/groupversion_info.go:	// SchemeBuilder is used to add go types to the GroupVersionKind scheme
ee/se-plus/modules/030-cloud-provider-zvirt/images/capz-controller-manager/src/api/v1/groupversion_info.go:	// schemeBuilder is used to add go types to the GroupVersionKind scheme.
testing/controller/testclient/patch.go:		input.GetObjectKind().GroupVersionKind(),
testing/controller/testclient/patch.go:		input.GetObjectKind().GroupVersionKind().GroupVersion(),
testing/controller/testclient/patch.go:		schemaReferenceObj, err := scheme.UnsafeConvertToVersion(input, input.GetObjectKind().GroupVersionKind().GroupVersion())
testing/controller/testclient/patch.go:	groupKind := currentObject.GetObjectKind().GroupVersionKind().GroupKind()
testing/controller/testclient/client.go:	validators := make(map[schema.GroupVersionKind]validation.SchemaValidator, len(CRDs))
testing/controller/testclient/validator.go:func NewValidator(logger *log.Logger, validators map[schema.GroupVersionKind]validation.SchemaValidator) *Validator {
testing/controller/testclient/validator.go:	validators map[schema.GroupVersionKind]validation.SchemaValidator
testing/controller/testclient/validator.go:	gvk := kind.GroupVersionKind()
testing/controller/testclient/schema.go:	validators map[schema.GroupVersionKind]validation.SchemaValidator,
testing/controller/testclient/schema.go:		gvk := schema.GroupVersionKind{
testing/hooks/init.go:						if versions, ok := hec.CRDSchemas[obj.GetObjectKind().GroupVersionKind().Kind]; ok {
testing/hooks/init.go:							if sc, ok := versions[obj.GetObjectKind().GroupVersionKind().Version]; ok {
testing/hooks/init.go:						if versions, ok := hec.CRDSchemas[obj.GetObjectKind().GroupVersionKind().Kind]; ok {
testing/hooks/init.go:							if sc, ok := versions[obj.GetObjectKind().GroupVersionKind().Version]; ok {
dhctl/pkg/config/module_config.go:	mc.SetGroupVersionKind(schema.GroupVersionKind{
dhctl/pkg/config/validation.go:		gvk := obj.GroupVersionKind()
dhctl/pkg/config/validation.go:		gvk := obj.GroupVersionKind()
dhctl/pkg/config/validation.go:		gvk := obj.GroupVersionKind()
dhctl/pkg/config/validation.go:		gvk := obj.GroupVersionKind()
dhctl/pkg/config/validation.go:			b.WriteString(fmt.Sprintf(" %s", schema.GroupVersionKind{
dhctl/pkg/config/connection.go:		gvk := obj.GroupVersionKind()
dhctl/pkg/apis/v1alpha1/deckhouse_release.go:func (f *deckhouseReleaseKind) SetGroupVersionKind(_ schema.GroupVersionKind) {}
dhctl/pkg/apis/v1alpha1/deckhouse_release.go:func (f *deckhouseReleaseKind) GroupVersionKind() schema.GroupVersionKind {
dhctl/pkg/apis/v1alpha1/deckhouse_release.go:	return schema.GroupVersionKind{Group: "deckhouse.io", Version: "v1alpha1", Kind: "DeckhouseRelease"}
dhctl/pkg/template/resources.go:	GVK    schema.GroupVersionKind
dhctl/pkg/template/resources_test.go:	cmKind = schema.GroupVersionKind{Version: "v1", Kind: "ConfigMap"}
dhctl/pkg/template/resources_test.go:		require.Equal(t, resources[indx].GVK, schema.GroupVersionKind{Version: "v1", Kind: "Namespace"})
dhctl/pkg/kubernetes/actions/resources/resources.go:func (g *apiResourceListGetter) Get(ctx context.Context, gvk *schema.GroupVersionKind) (*metav1.APIResourceList, error) {
dhctl/pkg/kubernetes/actions/resources/resources.go:func (c *Creator) isNamespaced(gvk schema.GroupVersionKind, name string) (bool, error) {
dhctl/pkg/kubernetes/actions/resources/resources.go:func isNamespaced(kubeCl *client.KubernetesClient, gvk schema.GroupVersionKind, name string) (bool, error) {
dhctl/pkg/kubernetes/actions/deckhouse/install_test.go:	mc1.SetGroupVersionKind(schema.GroupVersionKind{
dhctl/pkg/kubernetes/actions/deckhouse/install_test.go:	mc1.SetGroupVersionKind(schema.GroupVersionKind{
dhctl/pkg/kubernetes/actions/deckhouse/install_test.go:	mc2.SetGroupVersionKind(schema.GroupVersionKind{
dhctl/pkg/kubernetes/actions/deckhouse/module_config_test.go:	mc.SetGroupVersionKind(schema.GroupVersionKind{
