---
apiVersion: deckhouse.io/v1
kind: NodeGroup
metadata:
  name: system
spec:
  nodeType: Static
  disruptions:
    approvalMode: Manual
  nodeTemplate:
    labels:
      node-role.deckhouse.io/system: ""
    taints:
    - effect: NoExecute
      key: dedicated.deckhouse.io
      value: system
---
apiVersion: deckhouse.io/v1alpha1
kind: SSHCredentials
metadata:
  name: caps-redos
spec:
  privateSSHKey: '${b64_SSH_KEY}'
  user: '${WORKER_REDOS_USER}'
---
apiVersion: deckhouse.io/v1alpha1
kind: StaticInstance
metadata:
  name: worker-redos
spec:
  address: '${WORKER_REDOS_IP}'
  credentialsRef:
    kind: SSHCredentials
    name: caps-redos
---
apiVersion: deckhouse.io/v1alpha1
kind: SSHCredentials
metadata:
  name: caps-opensuse
spec:
  privateSSHKey: '${b64_SSH_KEY}'
  user: '${WORKER_OPENSUSE_USER}'
---
apiVersion: deckhouse.io/v1alpha1
kind: StaticInstance
metadata:
  name: worker-opensuse
spec:
  address: '${WORKER_OPENSUSE_IP}'
  credentialsRef:
    kind: SSHCredentials
    name: caps-opensuse
---
apiVersion: deckhouse.io/v1alpha1
kind: SSHCredentials
metadata:
  name: caps-rosa
spec:
  privateSSHKey: '${b64_SSH_KEY}'
  user: '${WORKER_ROSA_USER}'
---
apiVersion: deckhouse.io/v1alpha1
kind: StaticInstance
metadata:
  name: static-rosa
spec:
  address: '${WORKER_ROSA_IP}'
  credentialsRef:
    kind: SSHCredentials
    name: caps-rosa
---
apiVersion: deckhouse.io/v1
kind: NodeGroup
metadata:
  name: worker
spec:
  nodeType: Static
  staticInstances:
    count: 3
  disruptions:
    approvalMode: Manual
  nodeTemplate:
    labels:
      dedicated.worker: ""
    taints:
    - effect: NoExecute
      key: dedicated
      value: worker
---
apiVersion: network.deckhouse.io/v1alpha1
kind: RoutingTable
metadata:
  name: myrt-main
spec:
  ipRoutingTableID: 254 # main routing table id is 254
  routes:
    - destination: 10.1.1.0/8
      gateway: 192.168.21.1
  nodeSelector:
    dedicated.worker: ""
---
apiVersion: network.deckhouse.io/v1alpha1
kind: IPRuleSet
metadata:
  name: myiprule
spec:
  rules:
    - selectors:
        from:
          - 192.168.111.0/24
          - 192.168.222.0/24
        to:
          - 8.8.8.8/32
          - 172.16.8.0/21
        sportRange:
          start: 100
          end: 200
        dportRange:
          start: 300
          end: 400
        ipProto: 6
      actions:
        lookup:
          routingTableName: myrt-main
      priority: 50
  nodeSelector:
    dedicated.worker: ""
---
apiVersion: network.deckhouse.io/v1alpha1
kind: EgressGateway
metadata:
  name: my-egressgw
spec:
  nodeSelector:
    dedicated.worker: ""
  sourceIP:
    mode: VirtualIPAddress
    virtualIPAddress:
      ip: 172.18.18.242
---
apiVersion: network.deckhouse.io/v1alpha1
kind: EgressGatewayPolicy
metadata:
  name: my-egressgw-policy
spec:
  destinationCIDRs:
    - 0.0.0.0/0
  egressGatewayName: my-egressgw
  selectors:
    - podSelector:
        matchLabels:
          app: backend
          io.kubernetes.pod.namespace: my-ns
---
apiVersion: deckhouse.io/v1
kind: NodeUser
metadata:
  name: user-e2e
spec:
  uid: 10056
  sshPublicKeys:
  - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDT7Y2xnnixeZHp3biNEUqFzvq/lu2y66SWuTQS6AQOGEIok0Ep56b0UtPoqA6EIXRS9JJOegDpK3UxiDGlxNPIaiq7QGM7qTH/rJ3NsgMT7MLOnK3VQ/PNM6iuPS2jwmd/VwcgjR44s+uLBS8vsJnP7NT5ymnR72b1vuIDAih5OQkkSg26z84fpLVbKsnImny1TdPlVfR5SyUXUZaDn/JlYC4eraG5pp0fqyUpo39KsBaQo2ngLLFOsyzKz1hjB+dGaBlRdJOXj4AP8d48h8Qg+6b1mCDqsctK3SGq05NREgSjZ0J3opoaB2DBd7ztHlhYatjoCHfsDxcByJnqT5w+EqyruiysxOY3j6EC0GqBQoGT744ugBK0Oy1KOBIMIMyJfrQ62QGsmmsYRg5PQK2bOjLGpSHc4Yys3TMVkMLBFS/9pNGI9EDDPZwkeOM0hN1g/vqzOz6Uiw+g347RkeCB/95G9+9oxh7MkPcies8I4uJVJGSgxKEes58U2+krb+2hKZiXblO81sAMwB3nIRs3NizuAGOtu0ppsvs2GbZhpIvT5om4onvniP866Pd7FLm37guMxh/cx9/n3qvaTkpgcDWZWtpk8Cfj2std6AEwE8GY+YQfCmcMOZXam6/qO5FUfQFT2WHTDPBTPGr7yjRdGsfwtZLwM0kRVN4ZBx/YEw== root@c4e850b2e8ac"
  passwordHash: "$6$vUn3pWjfLzk8iARF$JTR4j5IV0u5aD7O/xK8ZBN4ie/1TE1YwLzfPutpJ4BCJozy1Rgw.Pl4x6gDiUwsPyQcylCuf/oxbL0iMqFdPL/"
  isSudoer: true
---
apiVersion: v1
kind: Secret
metadata:
  name: dotfile-secret
data:
  .secret-file: dmFsdWUtMg0KDQo=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dotfile-cm
  namespace: d8-system
data:
  .file: "content"
---
apiVersion: deckhouse.io/v1alpha1
kind: NodeGroupConfiguration
metadata:
  name: apt-rpm-updated-fix
spec:
  weight: 2
  bundles:
  - "*"
  nodeGroups:
  - "system"
  content: |
    bb-set-proxy
    trap bb-unset-proxy RETURN

    export DEBIAN_FRONTEND=noninteractive
    bb-flag? apt-rpm-updated && return 0
    bb-log-info 'Updating apt cache'

    set +Eeuo pipefail
    OUTPUT=$(apt-get update 2>&1)
    EXIT_CODE=$?
    set -Eeuo pipefail

    echo "$OUTPUT"
    if echo "$OUTPUT" | grep -q "error reading from /var/lib/apt/lists/partial"; then
        rm -rf /var/lib/apt/lists/partial/*
    fi

    if [ $EXIT_CODE -eq 0 ]; then
        bb-flag-set apt-rpm-updated
    fi
    return $EXIT_CODE
---
# testing creating multiple resources for one non exists resource
apiVersion: v1
kind: Namespace
metadata:
  name: test-ns-with-multiple-resources
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: application-controller-sa
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/name: argocd-application-controller-sa
    app.kubernetes.io/part-of: argocd
  name: argocd-application-controller-sa
  namespace: test-ns-with-multiple-resources
---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-application-controller-sa
  namespace: test-ns-with-multiple-resources
  annotations:
    kubernetes.io/service-account.name: argocd-application-controller-sa
type: kubernetes.io/service-account-token
