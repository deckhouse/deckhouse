---
apiVersion: deckhouse.io/v1
kind: NodeGroup
metadata:
  name: system-a
spec:
  chaos:
    mode: Disabled
  cloudInstances:
    classReference:
      kind: AWSInstanceClass
      name: system
    maxPerZone: 1
    minPerZone: 1
    zones:
    - eu-central-1a
  disruptions:
    approvalMode: Manual
  nodeTemplate:
    labels:
      node-role.deckhouse.io/system: ""
    taints:
    - effect: NoExecute
      key: dedicated.deckhouse.io
      value: system
  nodeType: CloudEphemeral
---
apiVersion: deckhouse.io/v1
kind: AWSInstanceClass
metadata:
  name: system
spec:
  diskSizeGb: 30
  diskType: gp2
  instanceType: m5a.xlarge
---
apiVersion: deckhouse.io/v1
kind: IngressNginxController
metadata:
  name: nginx
spec:
  ingressClass: nginx
  inlet: LoadBalancer
  loadBalancer:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
  nodeSelector:
    node-role.kubernetes.io/master: ''
  tolerations:
    - effect: NoSchedule
      operator: Exists
---
apiVersion: deckhouse.io/v1
kind: NodeUser
metadata:
  name: user-e2e
spec:
  uid: 10056
  sshPublicKeys:
  - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDT7Y2xnnixeZHp3biNEUqFzvq/lu2y66SWuTQS6AQOGEIok0Ep56b0UtPoqA6EIXRS9JJOegDpK3UxiDGlxNPIaiq7QGM7qTH/rJ3NsgMT7MLOnK3VQ/PNM6iuPS2jwmd/VwcgjR44s+uLBS8vsJnP7NT5ymnR72b1vuIDAih5OQkkSg26z84fpLVbKsnImny1TdPlVfR5SyUXUZaDn/JlYC4eraG5pp0fqyUpo39KsBaQo2ngLLFOsyzKz1hjB+dGaBlRdJOXj4AP8d48h8Qg+6b1mCDqsctK3SGq05NREgSjZ0J3opoaB2DBd7ztHlhYatjoCHfsDxcByJnqT5w+EqyruiysxOY3j6EC0GqBQoGT744ugBK0Oy1KOBIMIMyJfrQ62QGsmmsYRg5PQK2bOjLGpSHc4Yys3TMVkMLBFS/9pNGI9EDDPZwkeOM0hN1g/vqzOz6Uiw+g347RkeCB/95G9+9oxh7MkPcies8I4uJVJGSgxKEes58U2+krb+2hKZiXblO81sAMwB3nIRs3NizuAGOtu0ppsvs2GbZhpIvT5om4onvniP866Pd7FLm37guMxh/cx9/n3qvaTkpgcDWZWtpk8Cfj2std6AEwE8GY+YQfCmcMOZXam6/qO5FUfQFT2WHTDPBTPGr7yjRdGsfwtZLwM0kRVN4ZBx/YEw== root@c4e850b2e8ac e2e@nodeuser"
  passwordHash: "$6$vUn3pWjfLzk8iARF$JTR4j5IV0u5aD7O/xK8ZBN4ie/1TE1YwLzfPutpJ4BCJozy1Rgw.Pl4x6gDiUwsPyQcylCuf/oxbL0iMqFdPL/"
  isSudoer: true
---
apiVersion: v1
kind: Secret
metadata:
  name: dotfile-secret
data:
  .secret-file: dmFsdWUtMg0KDQo=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dotfile-cm
  namespace: d8-system
data:
  .file: "content"
---
# testing creating multiple resources for one non exists resource
apiVersion: v1
kind: Namespace
metadata:
  name: test-ns-with-multiple-resources
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: application-controller-sa
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/name: argocd-application-controller-sa
    app.kubernetes.io/part-of: argocd
  name: argocd-application-controller-sa
  namespace: test-ns-with-multiple-resources
---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-application-controller-sa
  namespace: test-ns-with-multiple-resources
  annotations:
    kubernetes.io/service-account.name: argocd-application-controller-sa
type: kubernetes.io/service-account-token
