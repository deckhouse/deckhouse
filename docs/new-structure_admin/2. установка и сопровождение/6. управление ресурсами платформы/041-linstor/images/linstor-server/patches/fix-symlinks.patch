From c72f5942bd665c245fcd51113764335a49046306 Mon Sep 17 00:00:00 2001
From: Andrei Kvapil <kvapss@gmail.com>
Date: Tue, 3 Oct 2023 13:32:21 +0200
Subject: [PATCH] Automatically fix symlinks for devices

This change is workaround for specific set of issues, often related to udev,
which lead to the disappearance of symlinks for LVM devices on a working system.
These issues commonly occur during device resizing and deactivation,
causing LINSTOR exceptions during accessing DRBD super-block of volume.

fixes: https://github.com/LINBIT/linstor-server/issues/326

Signed-off-by: Andrei Kvapil <kvapss@gmail.com>
---
 .../linstor/layer/dmsetup/DmSetupUtils.java   | 79 ++++++++++++++++++-
 .../linbit/linstor/layer/drbd/DrbdLayer.java  | 13 +++
 .../linstor/layer/storage/utils/Commands.java | 14 ++++
 3 files changed, 105 insertions(+), 1 deletion(-)

diff --git a/satellite/src/main/java/com/linbit/linstor/layer/dmsetup/DmSetupUtils.java b/satellite/src/main/java/com/linbit/linstor/layer/dmsetup/DmSetupUtils.java
index ba753577d..cc90ad898 100644
--- a/satellite/src/main/java/com/linbit/linstor/layer/dmsetup/DmSetupUtils.java
+++ b/satellite/src/main/java/com/linbit/linstor/layer/dmsetup/DmSetupUtils.java
@@ -18,6 +18,8 @@ import com.linbit.utils.StringUtils;
 import javax.annotation.Nullable;
 
 import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.regex.Matcher;
@@ -29,7 +31,7 @@ public class DmSetupUtils
     private static final String DM_SETUP_MESSAGE_FLUSH_ON_SUSPEND = "flush_on_suspend";
 
     private static final Pattern DM_SETUP_LS_PATTERN = Pattern.compile(
-        "^([^\\s]+)\\s+\\(([0-9]+)(?::\\s|,\\s)([0-9]+)\\)$",
+        "^([^\\s]+)\\s+\\(([0-9]+)[:,]\\s*([0-9]+)\\)$",
         Pattern.MULTILINE
     );
 
@@ -187,6 +189,81 @@ public class DmSetupUtils
         return ret;
     }
 
+    public static void fixSymlinkForDevice(ExtCmd extCmd, String devicePath) throws StorageException
+    {
+        try
+        {
+            OutputData outputData = extCmd.exec("dmsetup", "ls");
+            ExtCmdUtils.checkExitCode(
+                outputData,
+                StorageException::new,
+                "listing devices from dmsetup ls failed "
+            );
+
+            String stdOut = new String(outputData.stdoutData);
+            Matcher matcher = DM_SETUP_LS_PATTERN.matcher(stdOut);
+            String dmName = resolveDMName(devicePath);
+            String dmPath = "/dev/mapper/" + dmName;
+            String minor = null;
+
+            while (matcher.find())
+            {
+                String devName = matcher.group(1);
+                minor = matcher.group(3);
+
+                if (devName.equals(dmName))
+                {
+                    break;
+                }
+            }
+
+            if (minor == null)
+            {
+                throw new StorageException(
+                    "Device \"" + dmName + "\" (generated from \"" + devicePath + "\") not found in dmsetup output:\n\n" + stdOut
+                );
+            }
+
+            for (String path : new String[]{devicePath, dmPath}) {
+                if (Files.exists(Paths.get(path))) {
+                    continue;
+                }
+                OutputData symlinkOutput = extCmd.exec("ln", "-s", "../dm-" + minor, path);
+                ExtCmdUtils.checkExitCode(
+                    symlinkOutput,
+                    StorageException::new,
+                    "Failed to create device symlink"
+                );
+            }
+        }
+        catch (IOException ioExc)
+        {
+            throw new StorageException(
+                "Failed to fix device symlink",
+                ioExc
+            );
+        }
+        catch (ChildProcessTimeoutException exc)
+        {
+            throw new StorageException(
+                "Fixing device symlink timed out",
+                exc
+            );
+        }
+    }
+
+    public static String resolveDMName(String devicePath)
+    {
+        String[] parts = devicePath.replaceFirst("^/dev/", "").split("/");
+        if (parts[0].equals("mapper"))
+        {
+            return parts[1];
+        }
+        parts[0] = parts[0].replace("-", "--");
+        parts[1] = parts[1].replace("-", "--");
+        return String.join("-", parts[0], parts[1]);
+    }
+
     public static void remove(ExtCmd extCmd, String identifier) throws StorageException
     {
         Commands.genericExecutor(
diff --git a/satellite/src/main/java/com/linbit/linstor/layer/drbd/DrbdLayer.java b/satellite/src/main/java/com/linbit/linstor/layer/drbd/DrbdLayer.java
index 16034c550..d44d2bc57 100644
--- a/satellite/src/main/java/com/linbit/linstor/layer/drbd/DrbdLayer.java
+++ b/satellite/src/main/java/com/linbit/linstor/layer/drbd/DrbdLayer.java
@@ -37,6 +37,7 @@ import com.linbit.linstor.core.objects.Volume;
 import com.linbit.linstor.core.pojos.LocalPropsChangePojo;
 import com.linbit.linstor.dbdrivers.DatabaseException;
 import com.linbit.linstor.layer.DeviceLayer;
+import com.linbit.linstor.layer.dmsetup.DmSetupUtils;
 import com.linbit.linstor.layer.drbd.drbdstate.DrbdConnection;
 import com.linbit.linstor.layer.drbd.drbdstate.DrbdEventPublisher;
 import com.linbit.linstor.layer.drbd.drbdstate.DrbdResource;
@@ -1143,6 +1144,18 @@ public class DrbdLayer implements DeviceLayer
             metaDiskPath = drbdVlmData.getDataDevice();
         }
 
+        if (!Files.exists(Paths.get(metaDiskPath))) {
+            errorReporter.logWarning("Device path %s does not exist, fixing symlink", metaDiskPath);
+            try
+            {
+                DmSetupUtils.fixSymlinkForDevice(extCmdFactory.create(), metaDiskPath);
+            }
+            catch (StorageException exc)
+            {
+                errorReporter.reportError(exc);
+            }
+        }
+
         MdSuperblockBuffer mdUtils = new MdSuperblockBuffer();
         try
         {
diff --git a/satellite/src/main/java/com/linbit/linstor/layer/storage/utils/Commands.java b/satellite/src/main/java/com/linbit/linstor/layer/storage/utils/Commands.java
index a63c78cba..1228cb74e 100644
--- a/satellite/src/main/java/com/linbit/linstor/layer/storage/utils/Commands.java
+++ b/satellite/src/main/java/com/linbit/linstor/layer/storage/utils/Commands.java
@@ -8,6 +8,7 @@ import com.linbit.SizeConv.SizeUnit;
 import com.linbit.extproc.ExtCmd;
 import com.linbit.extproc.ExtCmd.OutputData;
 import com.linbit.extproc.ExtCmdUtils;
+import com.linbit.linstor.layer.dmsetup.DmSetupUtils;
 import com.linbit.linstor.storage.StorageException;
 import com.linbit.utils.StringUtils;
 
@@ -17,6 +18,11 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+
 public class Commands
 {
     public interface RetryHandler
@@ -191,6 +197,14 @@ public class Commands
     )
         throws StorageException
     {
+
+        if (!Files.exists(Paths.get(devicePath))) {
+          DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd/HH:mm:ss:SSS");
+          LocalDateTime now = LocalDateTime.now();
+          System.out.println(dtf.format(now) + " [GetBlockSizeInKib] WARN - Device path " + devicePath + " does not exist, fixing symlink");
+          DmSetupUtils.fixSymlinkForDevice(extCmd, devicePath);
+        }
+
         OutputData output = genericExecutor(
             extCmd,
             new String[] {"blockdev", "--getsize64", devicePath},
-- 
2.39.3 (Apple Git-145)
