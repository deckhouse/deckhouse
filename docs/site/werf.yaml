{{- $_ := set . "Env" (.Env | default "EE") }}
{{- $_ := set . "UsePrebuildJekyllImage" true }}
{{- $_ := set . "Mode" "production" }}
{{- $_ := set . "Edition" "EE" }}
{{- if or (eq $.Env "CE") (eq $.Env "BE") (eq $.Env "SE") (eq $.Env "EE") -}}
  {{- $_ := set . "Edition" $.Env }}
{{- else if eq $.Env "FE"  }}
  {{- $_ := set . "Edition" "EE" }}
{{- else }}
  {{- $_ := set . "Mode" $.Env }}
{{- end }}

{{- $context := . }}
{{- $_ := set $context "ModulePath" "../../" }}

project: deckhouse-web
configVersion: 1
cleanup:
  keepPolicies:
  - references:
      tag: /.*/
  - references:
      branch: /.*/
    imagesPerReference:
      last: 2
  - references:
      branch: main
    imagesPerReference:
      last: 10
gitWorktree:
  forceShallowClone: true
---
# Base Images
{{- $_ := set . "Images" (.Files.Get "../../candi/image_versions.yml" | fromYaml) }}
  {{- range $k, $v := .Images }}
    {{- $baseImagePath := (printf "%s%s" $.Images.REGISTRY_PATH (trimSuffix "/" $v)) }}
    {{- if or (eq $.Mode "development") (eq $.Mode "module") (eq $.Mode "local") }}
      {{- if or ( ne $k "BASE_JEKYLL" ) ( and (not $.UsePrebuildJekyllImage ) ( eq $k "BASE_JEKYLL" ) )}}
        {{- $baseImagePath = trimSuffix "/" $v | splitList "@" | first }}
      {{- end }}
    {{- end }}
    {{- if ne $k "REGISTRY_PATH" }}
      {{- $_ := set $.Images $k $baseImagePath }}
    {{- end }}
  {{- end }}
---
image: site-tools
from: {{ .Images.BASE_ALPINE }}
shell:
  install: apk add jq curl
---
{{- if and (ne $.Env "development") (ne $.Env "module") (ne $.Env "local") }}
artifact: site-external-artifacts
fromCacheVersion: {{ div .Commit.Date.Unix (mul 60 60) }}v1
fromImage: site-tools
shell:
  install:
    - mkdir -p /data
  setup:
    - echo "Getting data from the API server..."
    - curl --retry-delay 5 --retry 5 {{ env "DOC_API_URL" }}?api-key={{- env "DOC_API_KEY" }} -o /tmp/menus.json
    - |
      jq '.header | if ( ( .en | length) < 1 ) or ( ( .ru | length) < 1 ) then error("Got empty header array!") else ( . | {"topnav": { "en": [{"items": .en}], "ru": [ {"items": .ru}  ]}}) end ' /tmp/menus.json > /data/topnav.json
    - |
      jq '."header-products" | if ( ( .ru | length) < 1 ) then error("Got empty header array!") else . end' /tmp/menus.json > /data/topnav-l2-products.json
      #  REMOVE!
      sed -i 's#products/kubernetes-platform/modules/virtualization/stable/#products/virtualization-platform/documentation/#' /data/topnav-l2-products.json
    - |
      jq '.footer | if ( ( .en | length) < 1 ) or ( ( .ru | length) < 1 ) then error("Got empty footer array!") else ( . | {"columns": . }) end ' /tmp/menus.json > /data/footer.json
    - |
      jq '.copyright | if ( ( .en | length) < 1 ) or ( ( .ru | length) < 1 ) then error("Got empty copyright array!") else . end ' /tmp/menus.json > /data/copyright.json
{{- end }}
---
artifact: web-static
from: {{ .Images.BASE_JEKYLL }}
shell:
  install:
  - |
        echo "Ruby: $(ruby --version)"
        echo "Gem: $(gem --version)"
        bundle --version
  setup:
  - |
        # "Generating CR schemas for DVP..."
        cd /srv/jekyll-data/site/
        export MODULES_RAW_DIR=/rawdata
        export CRD_PATH=virtualization-platform/crds
        export OPENAPI_PATH=virtualization-platform/openapi
        bash ./prepare_resources.sh

        # "Building static files"
        cd /srv/jekyll-data/site/
        export JEKYLL_ENV=production
        mkdir -m 777 -p /app/_site/
        # jekyll build -d /app/_site/ --config  _config.yml
        # Revert!
        jekyll build -d /app/_site/ --config  _config.yml -t --profile
git:
- add: /docs/site
  to: /srv/jekyll-data/site
  owner: jekyll
  group: jekyll
  excludePaths:
  - LOCAL_DEV.md
  - werf*.yaml
  - docker-compose*.yml
  - .werf
  - .helm
  - backends
  - Makefile
  stageDependencies:
    install: ['Gemfile','Gemfile.lock']
    setup: '**/*'
- add: /{{ .ModulePath }}
  to: /rawdata/crds
{{/*  to: /srv/jekyll-data/site/_data/schemas/virtualization-platform/crds*/}}
  owner: jekyll
  group: jekyll
  includePaths:
  - "**/*-cni-cilium/crds/*.yaml"
  - "**/*-control-plane-manager/crds/*.yaml"
  - "**/*-node-manager/crds/*.yaml"
  - "**/*-snapshot-controller/crds/*.yaml"
  - "**/*-cert-manager/crds/*.yaml"
  - "**/*-user-authz/crds/*.yaml"
  - "**/*-user-authn/crds/*.yaml"
  - "**/*-multitenancy-manager/crds/*.yaml"
  - "**/*-operator-prometheus/crds/*.yaml"
  - "**/*-prometheus/crds/*.yaml"
  - "**/*-prometheus-metrics-adapter/crds/*.yaml"
  - "**/*-vertical-pod-autoscaler/crds/*.yaml"
  - "**/*-extended-monitoring/crds/*.yaml"
  - "**/*-monitoring-custom/crds/*.yaml"
  - "**/*-monitoring-deckhouse/crds/*.yaml"
  - "**/*-monitoring-kubernetes/crds/*.yaml"
  - "**/*-monitoring-kubernetes-control-plane/crds/*.yaml"
  - "**/*-monitoring-ping/crds/*.yaml"
  - "**/*-metallb/crds/*.yaml"
  - "**/*-l2-load-balancer/crds/*.yaml"
  - "**/*-descheduler/crds/*.yaml"
  - "**/*-ingress-nginx/crds/*.yaml"
  - "**/*-log-shipper/crds/*.yaml"
  - "**/*-loki/crds/*.yaml"
  - "**/*-chrony/crds/*.yaml"
  - "**/*-cilium-hubble/crds/*.yaml"
  - "**/*-upmeter/crds/*.yaml"
  stageDependencies:
    setup: '**/*'
# add moduleConfigs schemas
- url: https://github.com/deckhouse/virtualization.git
  branch: main
  add: /
  to: /rawdata/external/module/virtualization
  owner: jekyll
  group: jekyll
  includePaths:
  - "crds/*.yaml"
  - "openapi/config-values.yaml"
  - "openapi/doc-ru-config-values.yaml"
  stageDependencies:
    setup: '**/*'
- add: /{{ .ModulePath }}
  to: /rawdata/openapi
{{/*  to: /srv/jekyll-data/site/_data/schemas/virtualization-platform/crds*/}}
  owner: jekyll
  group: jekyll
  includePaths:
  - "**/*-cni-cilium/openapi/*"
  - "**/*-control-plane-manager/openapi/*"
  #- "**/*-node-manager/openapi/*"
  - "**/*-snapshot-controller/openapi/*"
  - "**/*-cert-manager/openapi/*"
  - "**/*-user-authz/openapi/*"
  - "**/*-user-authn/openapi/*"
  #- "**/*-multitenancy-manager/openapi/*"
  - "**/*-operator-prometheus/openapi/*"
  - "**/*-prometheus/openapi/*"
  - "**/*-prometheus-metrics-adapter/openapi/*"
  - "**/*-vertical-pod-autoscaler/openapi/*"
  - "**/*-extended-monitoring/openapi/*"
  - "**/*-monitoring-custom/openapi/*"
  - "**/*-monitoring-deckhouse/openapi/*"
  - "**/*-monitoring-kubernetes/openapi/*"
  - "**/*-monitoring-kubernetes-control-plane/openapi/*"
  - "**/*-monitoring-ping/openapi/*"
  #- "**/*-metallb/openapi/*"
  #- "**/*-l2-load-balancer/openapi/*"
  - "**/*-descheduler/openapi/*"
  - "**/*-ingress-nginx/openapi/*"
  - "**/*-log-shipper/openapi/*"
  - "**/*-loki/openapi/*"
  - "**/*-chrony/openapi/*"
  - "**/*-cilium-hubble/openapi/*"
  - "**/*-upmeter/openapi/*"
  excludePaths:
  - "**/global-hooks/"
  - "**/testdata/"
  stageDependencies:
    setup: '**/*'
{{- if and (ne $.Env "development") (ne $.Env "module") (ne $.Env "local") }}
import:
  - artifact: site-external-artifacts
    add: /data/topnav.json
    to: /srv/jekyll-data/site/_data/topnav.json
    before: setup
  - artifact: site-external-artifacts
    add: /data/topnav-l2-products.json
    to: /srv/jekyll-data/site/_data/topnav-l2-products.json
    before: setup
  - artifact: site-external-artifacts
    add: /data/footer.json
    to: /srv/jekyll-data/site/_data/footer.json
    before: setup
  - artifact: site-external-artifacts
    add: /data/copyright.json
    to: /srv/jekyll-data/site/_data/copyright.json
    before: setup
{{- end }}
---
artifact: web-backend-srv
from: {{ .Images.BASE_GOLANG_16_ALPINE }}
shell:
  install:
  - cd /go/src/app
  - go mod tidy
  setup:
  - cd /go/src/app
  - go build -ldflags "-w -s" -v -o /go/src/app/server /go/src/app/cmd/v-router
git:
  - url: https://github.com/flant/web-router.git
    tag: v1.0.14
    add: /
    to: /go/src/app
    stageDependencies:
      install: 'go.mod'
      setup: '**/*'
---
image: web-backend
docker:
  WORKDIR: /app
from: {{ .Images.BASE_ALPINE }}
shell:
  install:
  - apk add --no-cache curl jq
import:
  - artifact: web-backend-srv
    add: /go/src/app/server
    to: /app/server
    before: setup
  - artifact: web-static
    add: /app/_site
    to: /app/root
    before: setup
    includePaths:
    - en/includes/
    - ru/includes/
---
image: web-frontend
docker:
  WORKDIR: /app
from: {{ .Images.BASE_NGINX_ALPINE }}
shell:
  setup:
  - |
      cat <<"EOD" > /etc/nginx/nginx.conf
      {{- .Files.Get ".werf/nginx.conf" | nindent 6 }}
      EOD
import:
- artifact: web-static
  add: /app/_site
  to: /app
  before: setup
  owner: nginx
  group: nginx
  excludePaths:
  - en/includes/
  - ru/includes/
---
{{- $context := . }}
{{- $_ := set $context "ModuleName" "docs" }}
{{- $_ := set $context "ImageName" "builder" }}
{{- $_ := set $context "ModulePath" "../../" }}
{{- $_ := set $context "GOPROXY" "https://proxy.golang.org/" }}
{{ tpl (.Files.Get "werf-docs-builder.inc.yaml") $context }}
---
# Build scanner, which fetch modules documentation from list of specified registries
image: registry-modules-watcher-artifact
from: {{ .Images.BASE_GOLANG_20_ALPINE }}
shell:
  install:
  - cd /go/src/app
  - go mod tidy
  setup:
  - cd /go/src/app
  - go build -ldflags "-w -s" -v -o /go/src/app/registry-modules-watcher /go/src/app/cmd/
git:
  - add: /docs/site/backends/registry-modules-watcher
    to: /go/src/app
    stageDependencies:
      install: 'go.mod'
      setup: '**/*'
---
image: registry-modules-watcher
from: {{ .Images.BASE_ALPINE }}
docker:
  WORKDIR: /app
import:
  - image: registry-modules-watcher-artifact
    add: /go/src/app/registry-modules-watcher
    to: /app/registry-modules-watcher
    before: setup
