{%- include getting_started/global/partials/NOTICES.liquid %}

{% if page.platform_type == "existing" %}
If you want to install Deckhouse into a **new** cluster, we recommend going back to the previous step and sticking to the section that describes how to deploy a cluster using Deckhouse.

Kubernetes clusters have their own particularities and differences depending on the specific cloud provider, just like clusters deployed manually. The best strategy for installing Deckhouse in such clusters is to install the minimal Deckhouse configuration first, and then enable the necessary modules.

This guide covers installing Deckhouse in a **minimal** configuration, with the [internal documentation module](/{{ page.lang }}/documentation/v1/modules/810-deckhouse-web/) (for a sample web application) and [cert-manager](/{{ page.lang }}/documentation/v1/modules/101-cert-manager/) module enabled.

After completing all the steps in this guide, you will be able to enable all the modules of interest on your own. Please, refer to the [documentation](/{{ page.lang }}/documentation/v1/) to learn more or reach out to the Deckhouse [community](/en/community/about.html).

{% elsif page.platform_code == "bm-private" %}
This guide focuses on deploying a Kubernetes cluster using Deckhouse in a private environment from which there is no direct access to the public container image registry (registry.deckhouse.io) or public deb/rpm packages repositories.

Installation in a private environment is generally similar to installation on [bare metal](../bm/step2.html). The only difference is in some additional settings.

Scheme of Deckhouse installation in a private environment:<br />
<img src="/images/gs/private-env-schema.svg" alt="Scheme of Deckhouse installation in a private environment">
{% endif %}

## Installation process

You will need:
1. **Personal computer**.

   The computer from which the installation will be performed.{% unless page.platform_type == "existing" %} It is only needed to run the Deckhouse installer and will not be part of the cluster.{% endunless %}

   Requirements:
   - OS: Windows 10+, macOS 10.15+, Linux (e.g. Ubuntu 18.04+, Fedora 35+);
   - installed docker to run the installer (here are the instructions for [Ubuntu](https://docs.docker.com/engine/install/ubuntu/), [macOS](https://docs.docker.com/desktop/mac/install/), [Windows](https://docs.docker.com/desktop/windows/install/));
{% if page.platform_code == "bm-private" %}
   - access to a proxy registry ([read more](/{{ page.lang }}/documentation/v1/deckhouse-faq.html#tips-for-configuring-the-third-party-registry) about setting them up) or to a private container image registry containing Deckhouse images;
{%- else %}
   - HTTPS access to the `registry.deckhouse.io` container image registry (it is also possible to use a [third-party registry](../bm-private/step2.html));
{%- endif %}
{%- if page.platform_type == 'cloud' %}
   - access to the API of the cloud provider, an account with rights to create resources, and a configured
     {%- if page.platform_code == 'aws' %} [awscli](https://aws.amazon.com/cli/) utility
     {%- elsif page.platform_code == "gcp" %} [gcloud](https://cloud.google.com/sdk/docs/install) utility
     {%- elsif page.platform_code == "azure" %} [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli) utility
     {%- elsif page.platform_code == "yandex" %} [Yandex Cloud (CLI)](https://cloud.yandex.ru/docs/cli/quickstart) utility
     {%- elsif page.platform_code == "openstack" %} management [utility](https://docs.openstack.org/newton/user-guide/common/cli-install-openstack-command-line-clients.html) via CLI
     {%- elsif page.platform_code == "vsphere" %} [govc](https://github.com/vmware/govmomi/tree/master/govc#installation) utility
     {%- else %} management utility via CLI
     {%- endif %};
{%- endif %}
{%- if page.platform_type == "existing" %}
   - the kubectl command-line tool must be configured to communicate with your cluster.
{%- else %}
   - SSH key access to the node, the **master node** of the future cluster.
{%- endif %}
{% if page.platform_type == "existing" %}
1. **The existing Kubernetes cluster**.

   You will need a running Kubernetes cluster with the [supported Kubernetes version and OS](/{{ page.lang }}/documentation/v1/supported_versions.html).

   During the installation, the Deckhouse installer running on the **personal computer** (see step 1) will connect to the cluster and deploy Deckhouse.
{%- else %}
1. **Master-node (nodes)**{% if page.platform_type == 'cloud' %} (will be created automatically during the installation){% endif %}.

   A server {% if page.platform_type == 'baremetal' or page.platform_type == 'existing' %}(physical server or virtual machine){% else %}(virtual machine){% endif %}, the master node of the future cluster.

   During the installation, the Deckhouse installer running on the **personal computer** (section 1)
   {%- if page.platform_type == 'cloud' %} will connect to the cloud provider API to create a **master-node** of a Kubernetes cluster and deploy Deckhouse.

   The number of master nodes created during the installation process depends on the set of nodes selected at the following stages of the guide.
   {%- else %} will connect to that host via SSH, install necessary packages, configure control plane Kubernetes, and deploy Deckhouse.

   **Note** that master node-based installation is **not currently supported**.
   {%- endif %}

   Requirements:
   - at least 4 CPU cores;
   - at least 8 GB of RAM;
   - at least 40 GB of disk space for the cluster and etcd data;
   - [supported OS](/{{ page.lang }}/documentation/v1/supported_versions.html);
{% if page.platform_code == "bm-private" %}
   - access to a proxy registry or to a private container image registry containing Deckhouse images;
   - access to a proxy server for downloading deb/rpm OS packages (if necessary);
{%- else %}
   - HTTPS access to the `registry.deckhouse.io` container image registry (it is also possible to use a [third-party registry](../bm-private/step2.html));
{%- endif %}
   - SSH key access from the **personal computer** (section 1);
   - container runtime packages, such as containerd or docker, should not be installed on the node.

1. Additional nodes (not required).
{% if page.platform_type == 'cloud' %}
   Depending on the cluster configuration chosen in the following steps of the guide, additional nodes will be automatically provisioned from the selected cloud provider.
{%- else %}
   Depending on the purpose of the cluster, you may need additional nodes, for example, worker nodes, dedicated nodes for monitoring, dedicated nodes for load balancers (frontend nodes), etc.
{%- endif %}

   Below are the minimum requirements for any node (node group):
   - [supported OS](/{{ page.lang }}/documentation/v1/supported_versions.html);
   {% if page.platform_code == "bm-private" %}
   - access to a proxy registry or to a private container image registry containing Deckhouse images;
   - access to a proxy server for downloading deb/rpm OS packages (if necessary);
   {%- else %}
   - HTTPS access to the `registry.deckhouse.io` container image registry (it is also possible to use a [third-party registry](../bm-private/step2.html)).
   {%- endif %}
   - container runtime packages, such as containerd or docker, should not be installed on the node.

   Below are the minimum requirements for any node (node group) with the monitoring role ([learn more](/{{ page.lang }}/documentation/v1/#advanced-scheduling)):
   - at least 4 CPU cores;
   - at least 8 GB of RAM.
{%- endif %}

   > By default, the default storage class defined in the cluster is used as storage for system components (or `emptydir`, if it is not defined). You can specify the storage class using the global parameter [storageClass](/{{ page.lang }}/documentation/v1/deckhouse-configure-global.html#parameters).

{% if include.presentation -%}
The presentation below is an overview of the actions that will be required to install Deckhouse Platform. While it's totally fine to skip it, we recommend that you watch it to better understand the following steps.

Note that it's only a brief, abstract overview. The specific actions and commands to execute will be given on the next steps.

<div data-presentation="{{ include.presentation }}"></div>
{%- endif %}
