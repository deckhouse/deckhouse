{%- include getting_started/global/partials/NOTICES.liquid %}

{% if page.platform_type == "existing" %}
If you want to install Deckhouse into a **new** cluster, we recommend going back to the previous step and sticking to the section that describes how to deploy a cluster using Deckhouse.

Kubernetes clusters have their own particularities and differences depending on the specific cloud provider, just like clusters deployed manually. The best strategy for installing Deckhouse in such clusters is to install the minimal Deckhouse configuration first, and then enable the necessary modules.

This guide covers installing Deckhouse in a **minimal** configuration, with the [internal documentation module](/{{ page.lang }}/documentation/v1/modules/810-deckhouse-web/) (for a sample web application) and [cert-manager](/{{ page.lang }}/documentation/v1/modules/101-cert-manager/) module enabled.

After completing all the steps in this guide, you will be able to enable all the modules of interest on your own. Please, refer to the [documentation](/{{ page.lang }}/documentation/v1/) to learn more or reach out to the Deckhouse [community](/en/community/about.html).

{% elsif page.platform_code == "bm-private" %}
This guide focuses on deploying a Kubernetes cluster using Deckhouse in a private environment when there is no direct access to the container image registry or deb/rpm package repositories.

Installation in a private environment is generally similar to installation on [bare metal](../bm/step2.html). The only difference is in some additional settings.
{% endif %}

## Installation process

You will need:
1. **Personal computer**.

   The computer from which the installation will be performed.{% unless page.platform_type == "existing" %} It is only needed to run the Deckhouse installer, and will not be part of the cluster.{% endunless %}

   Requirements:
{% if page.platform_code == "bm-private" %}
   - access to a proxy registry ([read more](/{{ page.lang }}/documentation/v1/deckhouse-faq.html#tips-for-configuring-the-third-party-registry) about setting them up) or to a private container image registry containing Deckhouse images;
{%- else %}
   - HTTPS access to the `registry.deckhouse.io` container image registry (it is also possible to use a [third-party registry](../bm-private/step2.html));
{%- endif %}
{%- if page.platform_type == "existing" %}
   - the kubectl command-line tool must be configured to communicate with your cluster.
{%- else %}
   - SSH key access to the node, the **master node** of the future cluster.
{%- endif %}
{% if page.platform_type == "existing" %}
1. **The existing Kubernetes cluster**.

   You will need a running Kubernetes cluster with the [supported Kubernetes version and OS](/{{ page.lang }}/documentation/v1/supported_versions.html).

   During the installation, the Deckhouse installer running on the **personal computer** (see step 1) will connect to the cluster and deploy Deckhouse.
{%- else %}
1. **Master-node**.

   A server {% if page.platform_type == 'baremetal' or page.platform_type == 'existing' %}(physical server or virtual machine){% else %}(virtual machine){% endif %}, the master node of the future cluster.
{%- endif %}
{% unless page.platform_type == "existing" %}
   During the installation, the Deckhouse installer running on the **personal computer** (section 1) will connect to that host via SSH, install necessary packages, configure control plane Kubernetes, and deploy Deckhouse. Note that **master node-based** installation is **not supported** at the moment.

   Requirements:
   - at least 4 CPU cores;
   - at least 8 GB of RAM;
   - at least 40 GB of disk space for the cluster and etcd data;
   - OS: Ubuntu Linux 16.04/18.04/20.04 LTS or CentOS 7;
{% if page.platform_code == "bm-private" %}
   - access to a proxy registry or to a private container image registry containing Deckhouse images;
   - access to a proxy server for downloading deb/rpm OS packages (if necessary);
{%- else %}
   - HTTPS access to the `registry.deckhouse.io` container image registry (it is also possible to use a [third-party registry](../bm-private/step2.html));
{%- endif %}
   - SSH key access from the **personal computer** (section 1);
   - container runtime packages, such as containerd or docker, should not be installed on the node.

3. Additional nodes (not required).
{% if page.platform_type == 'cloud' %}
   Depending on the purpose of the cluster and chosen node layout in the following steps, additional nodes will be automatically provisioned from the selected cloud provider.
{%- else %}
   Depending on the purpose of the cluster, you may need additional nodes, for example, dedicated nodes for monitoring, a load balancer, etc.
{%- endif %}

   Below are the minimum requirements for any node (node group):
   - OS: Ubuntu Linux 16.04/18.04/20.04 LTS or CentOS 7;
   {% if page.platform_code == "bm-private" %}
   - access to a proxy registry or to a private container image registry containing Deckhouse images;
   - access to a proxy server for downloading deb/rpm OS packages (if necessary);
   {%- else %}
   - HTTPS access to the `registry.deckhouse.io` container image registry (it is also possible to use a [third-party registry](../bm-private/step2.html)).
   {%- endif %}
   - container runtime packages, such as containerd or docker, should not be installed on the node.

   Below are the minimum requirements for any node (node group) with the monitoring role ([learn more](/{{ page.lang }}/documentation/v1/#advanced-scheduling)):
   - at least 4 CPU cores;
   - at least 8 GB of RAM.
{%- endunless %}

   > By default, the default storage class defined in the cluster is used as storage for system components (or `emptydir`, if it is not defined). You can specify the storage class using the global parameter [storageClass](/{{ page.lang }}/documentation/v1/deckhouse-configure-global.html#parameters).

{% if include.presentation -%}
The presentation below is an overview of the actions that will be required to install Deckhouse Platform. While it's totally fine to skip it, we recommend that you watch it to better understand the following steps.

Note that it's only a brief, abstract overview. The specific actions and commands to execute will be given on the next steps.

<iframe src="{{ include.presentation }}" frameborder="0" width="{{ include.width }}" height="{{ include.height }}" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

<p class="text text_alt" style="color: #2A5EFF">
  <img src="/images/icons/arrow-up.svg" alt="" style="width: 25px;margin-left: 59px;position: relative;top: -2px;">
  Control presentation
</p>
{%- endif %}
