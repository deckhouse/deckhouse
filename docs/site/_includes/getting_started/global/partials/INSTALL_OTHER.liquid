{% assign revision=include.revision %}

Use a Docker image to install the **Deckhouse Platform**. It is necessary to transfer configuration files to the container{%- if page.platform_type != 'existing' %} as well as SSH keys for accessing the master nodes{% endif %}.
{% if page.platform_code == 'bm-private' %}
Log in on the **[personal computer](step2.html#installation-process)** to the container image registry you specified in the previous step.
{%- endif %}

Run the installer on the **[personal computer](step2.html#installation-process)**.

{%- if revision == 'ee' %}

<a id='tab_installer_linux_{{ revision }}' href="javascript:void(0)" class="tabs__btn tabs__btn_installer_{{ revision }} active"
   onclick="openTabAndSaveStatus(event, 'tabs__btn_installer_{{ revision }}', 'tabs__content_installer_{{ revision }}', 'block_installer_linux_{{ revision }}');" >
  Linux / macOS
</a>
<a id='tab_installer_windows_{{ revision }}' href="javascript:void(0)" class="tabs__btn tabs__btn_installer_{{ revision }}"
   onclick="openTabAndSaveStatus(event, 'tabs__btn_installer_{{ revision }}', 'tabs__content_installer_{{ revision }}', 'block_installer_windows_{{ revision }}');" >
  Windows
</a>

<div id='block_installer_linux_{{ revision }}' class="tabs__content tabs__content_installer_{{ revision }} active" markdown="1">
<!-- Linux or macOS install, EE -->
{% snippetcut selector="docker-run" %}
```shell
 echo <LICENSE_TOKEN> | docker login -u license-token --password-stdin registry.deckhouse.io
docker run --pull=always {% if page.platform_code == "kind" %} --network host {% endif %}-it -v "$PWD/config.yml:/config.yml"{%- if page.platform_type != 'existing' %} -v "$HOME/.ssh/:/tmp/.ssh/"{% endif %}
{%- if page.platform_type == "existing" or page.platform_code == "kind" %} \
  -v "$HOME/.kube/config:/kubeconfig"{% endif %}
{%- if page.platform_type == "cloud" %} \
  -v "$PWD/resources.yml:/resources.yml" -v "$PWD/dhctl-tmp:/tmp/dhctl"{% endif %} registry.deckhouse.io/deckhouse/ee/install:stable bash
```
{% endsnippetcut %}
</div>
<div id='block_installer_windows_{{ revision }}' class="tabs__content tabs__content_installer_{{ revision }}" markdown="1">
<!-- Windows install, EE -->
Log in on the **[personal computer](step2.html#installation-process)** to the container image registry by providing the license key as a password:
{% snippetcut selector="docker-login-windows" %}
```text
docker login -u license-token registry.deckhouse.io
```
{% endsnippetcut %}

Run a container with the installer:
{% snippetcut selector="docker-run-windows" %}
```text
docker run --pull=always {% if page.platform_code == "kind" %} --network host {% endif %}-it -v "%cd%\config.yml:/config.yml"
{%- if page.platform_type != 'existing' %} -v "%userprofile%\.ssh\:/tmp/.ssh/"{% endif %}
{%- if page.platform_type == "existing" or page.platform_code == "kind" %} -v "%userprofile%\.kube\config:/kubeconfig"{% endif %}
{%- if page.platform_type == "cloud" %} -v "%cd%\resources.yml:/resources.yml" -v "%cd%\dhctl-tmp:/tmp/dhctl" {% endif %} registry.deckhouse.io/deckhouse/ee/install:stable bash -c "chmod 400 /tmp/.ssh/id_rsa; bash"
```
{% endsnippetcut %}
</div>
{% else %}

<a id='tab_installer_linux_{{ revision }}' href="javascript:void(0)" class="tabs__btn tabs__btn_installer_{{ revision }} active"
   onclick="openTabAndSaveStatus(event, 'tabs__btn_installer_{{ revision }}', 'tabs__content_installer_{{ revision }}', 'block_installer_linux_{{ revision }}');" >
  Linux / macOS
</a>
<a id='tab_installer_windows_{{ revision }}' href="javascript:void(0)" class="tabs__btn tabs__btn_installer_{{ revision }}"
   onclick="openTabAndSaveStatus(event, 'tabs__btn_installer_{{ revision }}', 'tabs__content_installer_{{ revision }}', 'block_installer_windows_{{ revision }}');" >
  Windows
</a>

<div id='block_installer_linux_{{ revision }}' class="tabs__content tabs__content_installer_{{ revision }} active" markdown="1">
<!-- Linux or macOS install, CE -->
{% snippetcut selector="docker-run-ce" %}
```shell
docker run --pull=always {% if page.platform_code == "kind" %} --network host {% endif %}-it -v "$PWD/config.yml:/config.yml"{%- if page.platform_type != 'existing' %} -v "$HOME/.ssh/:/tmp/.ssh/"{% endif %}
{%- if page.platform_type == "existing" or page.platform_code == "kind" %} \
  -v "$HOME/.kube/config:/kubeconfig"{% endif %}
{%- if page.platform_type == "cloud" %} \
  -v "$PWD/resources.yml:/resources.yml" -v "$PWD/dhctl-tmp:/tmp/dhctl"{% endif %}
{%- if page.platform_code == "bm-private" %} <IMAGES_REPO_URI>/install:stable
{%- else %} registry.deckhouse.io/deckhouse/ce/install:stable{% endif %} bash
```
{% endsnippetcut %}
</div>
<div id='block_installer_windows_{{ revision }}' class="tabs__content tabs__content_installer_{{ revision }}" markdown="1">
<!-- Windows install, CE -->
{% snippetcut selector="docker-run-windows-ce" %}
```text
docker run --pull=always {% if page.platform_code == "kind" %} --network host {% endif %}-it -v "%cd%\config.yml:/config.yml"
{%- if page.platform_type != 'existing' %} -v "%userprofile%\.ssh\:/tmp/.ssh/"{% endif %}
{%- if page.platform_type == "existing" or page.platform_code == "kind" %} -v "%userprofile%\.kube\config:/kubeconfig" {% endif %}
{%- if page.platform_type == "cloud" %} -v "%cd%\resources.yml:/resources.yml" -v "%cd%\dhctl-tmp:/tmp/dhctl" {% endif %}
{%- if page.platform_code == "bm-private" %} <IMAGES_REPO_URI>/install:stable
{%- else %} registry.deckhouse.io/deckhouse/ce/install:stable{% endif %} bash -c "chmod 400 /tmp/.ssh/id_rsa; bash"
```
{% endsnippetcut %}
</div>
{% endif %}

{%- if page.platform_type == "existing" or page.platform_code == "kind" %}
Notes:
- Kubectl configuration file with access to Kubernetes API must be mount as the /kubeconfig file in the container.
{% endif %}


Now, to initiate the process of installation, you need to execute inside the container:

{% snippetcut %}
```shell
{%- if page.platform_type == "existing" or page.platform_code == "kind" %}
dhctl bootstrap-phase install-deckhouse --kubeconfig=/kubeconfig --config=/config.yml
{%- elsif page.platform_type == "baremetal" %}
dhctl bootstrap --ssh-user=<username> --ssh-host=<master_ip> --ssh-agent-private-keys=/tmp/.ssh/id_rsa \
  --config=/config.yml \
  --ask-become-pass
{%- elsif page.platform_type == "cloud" %}
dhctl bootstrap --ssh-user={% if page.platform_code == "azure" %}azureuser{%- elsif page.platform_code == "gcp" %}user{%- else %}ubuntu{%- endif %} --ssh-agent-private-keys=/tmp/.ssh/id_rsa --config=/config.yml --resources=/resources.yml
{%- endif %}
```
{% endsnippetcut %}

{%- if page.platform_type == "baremetal" or page.platform_type == "cloud" %}
{%- if page.platform_type == "baremetal" %}
The `--ssh-user` parameter here refers to the user that generated the SSH key. If a password is required to run sudo on the server, then specify it in response to the request `[sudo] Password:`, otherwise leave it empty.
{%- else %}
The `--ssh-user` parameter here refers to the default user for the relevant VM image.
{%- if page.platform_code == "azure" %} It is `azureuser` in case of {{ page.platform_name[page.lang] }} (for the images suggested in this guide).
{%- elsif page.platform_code == "gcp" %} It is `user` in case of {{ page.platform_name[page.lang] }} (for the images suggested in this guide).
{%- else %} It is `ubuntu` for the images suggested in this guide.
{%- endif %}
{%- endif %}

{% if page.platform_type == "cloud" %}
Notes:
<ul>
<li>
<div markdown="1">
The `-v "$PWD/dhctl-tmp:/tmp/dhctl"` parameter enables saving the state of the Terraform installer to a temporary directory on the startup host. It allows the installation to continue correctly in case of a failure of the installer's container.
</div>
</li>
<li><p>If any problems {% if page.platform_type="cloud" %}on the cloud provider side {% endif %}occur, you can cancel the process of installation and remove all created objects using the following command (the configuration file should be the same youâ€™ve used to initiate the installation):</p>
<div markdown="0">
{% snippetcut %}
```shell
dhctl bootstrap-phase abort --ssh-user={% if page.platform_code == "azure" %}azureuser{%- elsif page.platform_code == "gcp" %}user{%- else %}ubuntu{%- endif %} --ssh-agent-private-keys=/tmp/.ssh/id_rsa --config=/config.yml
```
{% endsnippetcut %}
</div></li>
</ul>
{%- endif %}
{%- endif %}

After the installation is complete, you will be returned to the command line.

{%- if page.platform_code == "kind" %}

It remains to create the Ingress controller configuration. Create the `ingress-nginx-controller` file.yml with the following content:
{% snippetcut name="ingress-nginx-controller.yml" selector="ingress-nginx-controller-yml" %}
{% include_file "_includes/getting_started/{{ page.platform_code }}/partials/ingress-nginx-controller.yml.inc" syntax="yaml" %}
{% endsnippetcut %}
<p>Apply the file using the command below:</p>
{% snippetcut %}
```shell
kubectl create -f ingress-nginx-controller.yml
```
{% endsnippetcut %}

It may take about a minute to start the Ingress controller.

To check the status of the Ingress Controller Pod, run the following command:
{% snippetcut %}
```shell
kubectl -n d8-ingress-nginx get po
```
{% endsnippetcut %}

Wait for the Ingress controller Pod to switch to `Ready` state.

You have installed Deckhouse Platform in `kind`!
{%- else %}

Almost everything is ready for a fully-fledged Deckhouse Platform to work!
{%- endif %}

<!-- Troubleshooting in existing cluster //-->
{%- if page.platform_type == "existing" %}
<h2 id="if-something-went-wrong">If something went wrong</h2>

{%  include getting_started/existing/partials/TROUBLESHOOT.liquid %}

{% endif %}
<!--  //-->
