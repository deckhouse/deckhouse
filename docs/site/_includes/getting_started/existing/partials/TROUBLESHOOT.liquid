Some providers' clusters may require extra steps before or after installing Deckhouse.

Here are some common problems and ways to solve them. Should you run into difficulties installing Deckhouse in an existing cluster, please, share them by creating an [issue](https://github.com/deckhouse/deckhouse/issues).

{% offtopic title="Installation errors at the 'Waiting for Deckhouse to become Ready' step" %}
- Error of the following kind:
  ```
  │ │ ┌ Waiting for Deckhouse to become Ready
  │ │ │ Deckhouse pod found: deckhouse-64649df6f9-mf6dt (Pending)
  │ │ │ Deckhouse pod found: deckhouse-64649df6f9-mf6dt (Pending)
  ```

  Probably, there is no node in the cluster with the `node-role.kubernetes.io/control-plane: ""` label which is originally used in the `nodeSelector` of the `deckhouse` deployment manifest.

  Ways to fix the error:
  - Insert the proper `nodeSelector` into the `deckhouse` deployment:
    ```shell
    kubectl -n d8-system edit deployment/deckhouse
    ```
  - Delete nodeSelector in the `deckhouse` deployment:
    ```shell
    kubectl patch -n d8-system deployment deckhouse --type json -p '[{"op": "remove", "path": "/spec/template/spec/nodeSelector"}]'
    ```
{% endofftopic %}

{% offtopic title="There is no Ingress controller in the cluster..." %}
The `deckhouse-web` module, which provides a web interface to the cluster documentation, requires the Ingress controller to be active in the cluster. If there is no Ingress controller in your cluster, you can use the built-in [ingress-nginx](/{{ page.lang }}/documentation/v1/modules/402-ingress-nginx/) module:
<ul>
  <li>Enable the module using <strong>one the following</strong> options:
<ul>
    <li>At the Deckhouse installation step, add the following to the <code>deckhouse.configOverrides</code> section of the <code>config.yml</code> file:
{% snippetcut selector="ingress-nginx-install-enable" %}
```yaml
ingressNginxEnabled: true
```
{% endsnippetcut %}
<p>Example:</p>
<div markdown="1">

```yaml
deckhouse:
  configOverrides:
    ingressNginxEnabled: true
```
</div>
    </li>
    <li><p>Once Deckhouse is installed, edit the <code>deckhouse</code> ConfigMap:</p>
{% snippetcut selector="deckhouse-cm-edit" %}
```shell
kubectl -n d8-system edit cm deckhouse
```
{% endsnippetcut %}
<p>... and add the following to it:</p>
{% snippetcut selector="ingress-nginx-cm-enable" %}
```yaml
ingressNginxEnabled: "true"
```
{% endsnippetcut %}
<p>Example:</p>
<div markdown="1">

```yaml
deckhouse:
  ingressNginxEnabled: "true"
```
</div>
</li>
</ul>
</li>
<li><p>Create an <code>ingress-nginx-controller.yml</code> file with the following contents:</p>
{% snippetcut name="ingress-nginx-controller.yml" selector="ingress-nginx-controller-yml" %}
{% include_file "_includes/getting_started/{{ page.platform_code }}/partials/ingress-nginx-controller.yml.inc" syntax="yaml" %}
{% endsnippetcut %}</li>
<li><p>Once Deckhouse is installed, apply the file using the command below:</p>
{% snippetcut %}
```shell
kubectl create -f ingress-nginx-controller.yml
```
{% endsnippetcut %}
</li>
</ul>
{% endofftopic %}

{% offtopic title="Cluster in EKS AWS (Amazon Elastic Kubernetes Service)" %}
<div markdown="0">
<p>If you are installing Deckhouse to an <strong>EKS AWS</strong> (<a href="https://aws.amazon.com/ru/eks/">Amazon Elastic Kubernetes Service</a>) cluster, install <a href="https://aws.amazon.com/ru/cli/">aws-cli</a> in the running installer container using the following command:</p>
{% snippetcut selector="azure-cli-install" %}
```shell
apk add python3 py3-pip && pip3 install --upgrade pip && pip3 install awscli
```
{% endsnippetcut %}
</div>
{% endofftopic %}


{% offtopic title="Cluster in VK Cloud Solutions (MailRu Cloud Solutions)" %}
<ul>
<li><p>Add a <code>CriticalAddonsOnly</code> taint to <code>customTolerationKeys</code> in the Deckhouse installation configuration.</p>
<p>Example:</p>
<div markdown="1">
```yaml
deckhouse:
  releaseChannel: Stable
  bundle: Minimal
  configOverrides:
    global:
      modules:
        placement:
          customTolerationKeys:
          - CriticalAddonsOnly
        publicDomainTemplate: "%s.example.com"
```
</div>
</li>
<li><p>VK Cloud Solutions version 1.21+ clusters have a Gatekeeper (OPA) that requires setting Pod requests and limits. However, the <code>deckhouse</code> Pod has no requests/limits, while for all other Deckhouse components and modules, requests/limits are calculated by Deckhouse.</p>
<p>As a result, the following error may pop up in <code>deckhouse</code> deckhouse Deployment events:</p>
<div class="highlight"><pre><code>admission webhook "validation.gatekeeper.sh" denied the request: [container-must-have-limits] container <...> has no resource limits...</code></pre></div>

<p>For Deckhouse to work, add a GateKeeper exception (OPA) for the Deckhouse component namespaces (<code>d8*-</code>) before installing Deckhouse in clusters of this type.</p><p>For this, run the following command in the cluster:</p>
{% snippetcut selector="gatekeeper-uninstall" %}
```shell
kubectl patch constraints container-must-have-limits --type json -p '[{"op": "replace", "path": "/spec/match/excludedNamespaces", "value": ["d8-*"]}]'
```
{% endsnippetcut %}
</li>
</ul>
{% endofftopic %}

