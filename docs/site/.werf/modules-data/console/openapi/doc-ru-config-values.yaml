properties:
  auth:
    description: |
      Доступ к web-интерфейсу
    properties:
      sessionTTL:
        description: |
          Время сессии пользователя, через которое он будет разлогинен.

          Задается с окончанием `s` для секунд, `m` для минут или `h` для часов.
      externalAuthentication:
        description: |
          Параметры для подключения внешней аутентификации (используется механизм Nginx Ingress [external-auth](https://kubernetes.github.io/ingress-nginx/examples/auth/external-auth/), работающий на основе модуля Nginx [auth_request](http://nginx.org/en/docs/http/ngx_http_auth_request_module.html).

          > Внешняя аутентификация включается автоматически, если включен модуль [user-authn](../../../platform/modules/150-user-authn/).
        properties:
          authURL:
            description: |
              URL сервиса аутентификации. Если пользователь прошел аутентификацию, сервис должен возвращать код ответа HTTP 200.
          authSignInURL:
            description: |
              URL, куда будет перенаправлен пользователь для прохождения аутентификации (если сервис аутентификации вернул код ответа HTTP, отличный от 200).
          useBearerTokens:
            description: |
              Токены авторизации. Консоль должна работать с Kubernetes API от имени пользователя (сервис аутентификации при этом должен обязательно возвращать в своих ответах HTTP-заголовок Authorization, в котором должен быть bearer-token – именно под этим токеном консоль будет производить запросы к API-серверу Kubernetes).

              * Значение по умолчанию: `true`.

              > **Важно!** Из соображений безопасности этот режим работает только если `https.mode` (глобальный или в модуле) не установлен в значение `Disabled`.
      allowedUserGroups:
        description: |
          Массив групп, пользователям которых разрешен доступ к веб-интерфейсу.

          Используется, если включен модуль [user-authn](../../../platform/modules/150-user-authn/) или задан параметр `externalAuthentication`.

          **Внимание!** При использовании совместно с модулем [user-authn](../../../platform/modules/150-user-authn/) необходимо также добавить разрешенные группы в соответствующее поле в настройках DexProvider.
      whitelistSourceRanges:
        description: |
          Список адресов в формате CIDR, которым разрешено проходить аутентификацию.

          Если параметр не указан, аутентификацию разрешено проходить без ограничения по IP-адресу.
  ingressClass:
    description: |
      Класс Ingress-контроллера, который используется для веб-интерфейса.

      Опциональный параметр, по умолчанию используется глобальное значение `modules.ingressClass`.
  https:
    description: |
      Тип сертификата используемого для веб-интерфейса.

      При использовании этого параметра полностью переопределяются глобальные настройки `global.modules.https`.
    properties:
      mode:
        description: |
          Режим работы HTTPS:
          - `Disabled` — доступ только по HTTP.
          - `CertManager` — доступ по HTTPS с заказом сертификата согласно ClusterIssuer’у, заданному в параметре `certManager.clusterIssuerName`. [Подробнее](../../../platform/deckhouse-configure-global.html#parameters-modules-https-certmanager-clusterissuername).
          - `CustomCertificate` — доступ по HTTPS с использованием сертификата из пространства имен `d8-system`.
          - `OnlyInURI` — доступ по HTTP, подразумевая, что перед веб-интерфейсом стоит внешний HTTPS-балансер, который терминирует HTTPS, и все ссылки в [user-authn](../../../platform/modules/150-user-authn/) будут генерироваться с HTTPS-схемой. Балансировщик должен обеспечивать перенаправление с HTTP на HTTPS.
      certManager:
        properties:
          clusterIssuerName:
            description: |
              Тип ClusterIssuer’а, используемого для заказа SSL-сертификата.

              В данный момент доступны `letsencrypt`, `letsencrypt-staging`, `selfsigned`, но возможно определить свои.
      customCertificate:
        properties:
          secretName:
            description: |
              Имя Secret’а в пространстве имен d8-system, который будет использоваться для веб-интерфейса.

              Secret должен быть в формате [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets).
  highAvailability:
    description: |
      Ручное управление режимом отказоустойчивости.

      По умолчанию режим отказоустойчивости определяется автоматически. [Подробнее](../../../platform/deckhouse-configure-global.html#параметры) про режим отказоустойчивости.
  nodeSelector:
    description: |
      Структура, аналогичная `spec.nodeSelector` пода Kubernetes.

      Если ничего не указано или указано `false`, будет [использоваться автоматика](../../../platform/#выделение-узлов-под-определенный-вид-нагрузки).
  tolerations:
    description: |
      Структура, аналогичная `spec.tolerations` пода Kubernetes.

      Если ничего не указано или указано `false`, будет [использоваться автоматика](../../../platform/#выделение-узлов-под-определенный-вид-нагрузки).
