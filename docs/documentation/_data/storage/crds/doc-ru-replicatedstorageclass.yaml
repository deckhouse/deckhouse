
spec:
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: |
            ReplicatedStorageClass — это Kubernetes Custom Resource, который определяет конфигурацию для Kubernetes Storage class.
          properties:
            spec:
              properties:
                storagePool:
                  description: |
                    Имя выбранного ресурса ReplicatedStoragePool.
                reclaimPolicy:
                  description: |
                    Reclaim policy дочернего StorageClass. Может быть: 
                    - `Delete` — если PersistentVolumeClaim будет удален, вместе с ним удалится соответствующий PersistentVolume.
                    - `Retain` — если PersistentVolumeClaim будет удален, соответствующий PersistentVolume останется нетронутым в статусе Released.

                    > Важно: это поле является неизменяемым и не может быть изменено после первоначального создания ресурса.
                replication:
                  description: |
                    Режим репликации StorageClass. Может быть:
                    - `None` — в этом режиме параметры StorageClass `placementCount` и `AutoEvictMinReplicaCount` равны `1` (репликация отключена, данные существуют только в одном экземпляре).
                    - `Availability` — в этом режиме параметры StorageClass `placementCount` и `AutoEvictMinReplicaCount` равны `2` (режим репликации, при котором том остается доступным для чтения и записи, даже если одна из реплик тома становится недоступной. Данные хранятся в двух экземплярах на разных узлах. Этот режим предотвращает потерю данных при выходе из строя одного узла, содержащего реплику тома. Однако, если после этого будет безвозвратно потерян оставшийся (активный) узел, данные записанные на этот узел (с момента выхода из строя первого) будут потеряны).
                    - `ConsistencyAndAvailability` — в этом режиме параметры StorageClass `placementCount` и `AutoEvictMinReplicaCount` равны `3` (режим репликации, при котором том остается доступным для чтения и записи, даже если одна из реплик тома становится недоступной. Данные хранятся в трех экземплярах на разных узлах. Этот режим обеспечивает защиту от потери данных при выходе из строя двух узлов, содержащих реплики тома. Однако при потере двух реплик том переходит в режим только для чтения (Read-Only)).
                    
                    > Обратите внимание, что режимом репликации по умолчанию является `ConsistencyAndAvailability`.
                    > Важно: это поле является неизменяемым и не может быть изменено после первоначального создания ресурса.
                volumeAccess:
                  description: |
                    Режим доступа к данным. Может быть:
                    - `Local` — в этом режиме параметр StorageClass `allowRemoteVolumeAccess` равен `false`,
                    и Volume Binding mode равен `WaitForFirstConsumer`.
                    - `EventuallyLocal` — в этом режиме параметр StorageClass `allowRemoteVolumeAccess` 
                    равен `- fromSame:\n  - topology.kubernetes.io/zone`, параметр `auto-diskful` равен `30` минутам, 
                    параметр `auto-diskful-allow-cleanup` равен `true`,
                    и Volume Binding mode равен `WaitForFirstConsumer`.
                    - `PreferablyLocal` — в этом режиме параметр StorageClass `allowRemoteVolumeAccess` 
                    равен `- fromSame:\n  - topology.kubernetes.io/zone`,
                    и Volume Binding mode равен `WaitForFirstConsumer`.
                    - `Any` — в этом режиме параметр StorageClass `allowRemoteVolumeAccess` 
                    равен `- fromSame:\n  - topology.kubernetes.io/zone`,
                    и Volume Binding mode равен `Immediate`.

                    > Обратите внимание, что режимом доступа по умолчанию является `PreferablyLocal`.
                    > Важно: это поле является неизменяемым и не может быть изменено после первоначального создания ресурса.
                topology:
                  description: |
                    Настройки топологии для томов в создаваемом StorageClass. Может быть:
                    - `TransZonal` — реплики для томов будут создаваться в разных зонах (по одной реплике на зону). 
                    Для использования этой топологии доступные зоны должны быть указаны в параметре `zones`, а на узлах кластера должен присутствовать лейбл `topology.kubernetes.io/zone=<название зоны>`.
                    - `Zonal` — все реплики томов создаются в той же зоне, которую планировщик выбрал для размещения пода, использующего данный том.
                    - `Ignored` — для размещения реплик томов не будет использоваться информация о топологии. Реплики могут размещаться на любых доступных узлах, но с ограничением: не более одной реплики определенного тома на один узел.

                    > Обратите внимание, что создать StorageClass с топологией `Ignored` можно только если в кластере нет зон (нет узлов с лейблами `topology.kubernetes.io/zone`).
                    > Важно: это поле является неизменяемым и не может быть изменено после первоначального создания ресурса.

                    > Для корректной работы системы лейблом `topology.kubernetes.io/zone` должны быть помечены либо все узлы кластера, либо ни один из них.
                zones:
                  description: |
                    Массив зон, в которых должны реплицироваться тома StorageClass. Контроллер повесит лейбл с
                    именем StorageClass на те узлы, которые будут фактически использоваться StorageClass.

                    > Обратите внимание, что для режимов репликации `Availability` и `ConsistencyAndAvailability` вы должны выбрать
                    ровно 1 или 3 зоны.
            status:
              properties:
                phase:
                  description: |
                    Текущее состояние StorageClass. Может быть: 
                    - `Failed` — если контроллер получил некорректную конфигурацию ресурса или возникли ошибки в процессе выполнения операции.
                    - `Created` — если все прошло успешно.
                reason:
                  description: |
                    Дополнительная информация о текущем состоянии StorageClass.
      additionalPrinterColumns:
        - jsonPath: .status.phase
          description: Текущая фаза ресурса.
        - jsonPath: .status.reason
          description: Причина текущей фазы.
        - jsonPath: .metadata.creationTimestamp
          description: Возраст этого ресурса.
