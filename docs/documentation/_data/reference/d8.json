{
  "name": "d8",
  "description": "d8 controls the Deckhouse Kubernetes Platform",
  "aliases": null,
  "flags": {
    "help": {
      "description": "help for d8",
      "shorthand": "h",
      "global": false
    },
    "version": {
      "description": "version for d8",
      "shorthand": "v",
      "global": false
    }
  },
  "subcommands": [
    {
      "name": "backup",
      "description": "Backup various parts of Deckhouse Kubernetes Platform",
      "aliases": null,
      "flags": {
        "context": {
          "description": "The name of the kubeconfig context to use",
          "shorthand": "",
          "global": false
        },
        "kubeconfig": {
          "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
          "shorthand": "k",
          "global": false
        }
      },
      "subcommands": [
        {
          "name": "cluster-config",
          "description": "Take a snapshot of cluster configuration",
          "aliases": null,
          "flags": {
            "compress": {
              "description": "Compress result file",
              "shorthand": "c",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
              "shorthand": "k",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "etcd",
          "description": "Take a snapshot of ETCD state",
          "aliases": null,
          "flags": {
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "etcd-pod": {
              "description": "Name of the etcd pod to snapshot from. (optional)",
              "shorthand": "p",
              "global": false
            },
            "kubeconfig": {
              "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
              "shorthand": "k",
              "global": true
            },
            "verbose": {
              "description": "Verbose log output.",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "loki",
          "description": "Dump logs from Loki api.",
          "aliases": null,
          "flags": {
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "days": {
              "description": "Limit maximum number of days in range to output per queue from Loki. (Default 5 maximum number of days in range per queue.)",
              "shorthand": "",
              "global": false
            },
            "end": {
              "description": "Set end timestamp range to dump logs from Loki. (Default get max end timestamp from Loki, ex. \"2025-01-14 15:04:05\".)",
              "shorthand": "",
              "global": false
            },
            "kubeconfig": {
              "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
              "shorthand": "k",
              "global": true
            },
            "limit": {
              "description": "Limit the number of lines to output per queue from Loki. (Default 5000 max limit strings per queue.)",
              "shorthand": "",
              "global": false
            },
            "start": {
              "description": "Set start timestamp range to dump logs from Loki. (Default get max start timestamp from Loki, ex. \"2025-01-12 15:04:05\".)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        }
      ]
    },
    {
      "name": "completion",
      "description": "Generate the autocompletion script for the specified shell",
      "aliases": null,
      "flags": {},
      "subcommands": [
        {
          "name": "bash",
          "description": "Generate the autocompletion script for bash",
          "aliases": null,
          "flags": {
            "no-descriptions": {
              "description": "disable completion descriptions",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "fish",
          "description": "Generate the autocompletion script for fish",
          "aliases": null,
          "flags": {
            "no-descriptions": {
              "description": "disable completion descriptions",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "powershell",
          "description": "Generate the autocompletion script for powershell",
          "aliases": null,
          "flags": {
            "no-descriptions": {
              "description": "disable completion descriptions",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "zsh",
          "description": "Generate the autocompletion script for zsh",
          "aliases": null,
          "flags": {
            "no-descriptions": {
              "description": "disable completion descriptions",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        }
      ]
    },
    {
      "name": "dk",
      "description": "A set of tools for building, distributing, and deploying containerized applications",
      "aliases": [
        "delivery-kit"
      ],
      "flags": {},
      "subcommands": [
        {
          "name": "build",
          "description": "Build images",
          "aliases": null,
          "flags": {
            "add-custom-tag": {
              "description": "Set tag alias for the content-based tag.\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso can be defined with $WERF_ADD_CUSTOM_TAG_* (e.g. $WERF_ADD_CUSTOM_TAG_1=\"%image%-tag1\", $WERF_ADD_CUSTOM_TAG_2=\"%image%-tag2\")",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage": {
              "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage": {
              "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "build-report-path": {
              "description": "Change build report path and format (by default $WERF_BUILD_REPORT_PATH or \".werf-build-report.json\" if not set). Extension must be either .json for JSON format or .env for env-file format. If extension not specified, then .json is used",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "disable-auto-host-cleanup": {
              "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and push images into the specified repo, to pull base images",
              "shorthand": "",
              "global": false
            },
            "docker-server-storage-path": {
              "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "follow": {
              "description": "Enable follow mode (default $WERF_FOLLOW).\nThe mode allows restarting the command on a new commit.\nIn development mode (--dev), werf restarts the command on any changes (including untracked files) in the git repository worktree",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "introspect-before-error": {
              "description": "Introspect failed stage in the clean state, before running all assembly instructions of the stage",
              "shorthand": "",
              "global": false
            },
            "introspect-error": {
              "description": "Introspect failed stage in the state, right after running failed assembly instruction",
              "shorthand": "",
              "global": false
            },
            "introspect-stage": {
              "description": "Introspect a specific stage. The option can be used multiple times to introspect several stages.\n\nThere are the following formats to use:\n* specify IMAGE_NAME/STAGE_NAME to introspect stage STAGE_NAME of either image or artifact IMAGE_NAME\n* specify STAGE_NAME or */STAGE_NAME for the introspection of all existing stages with name STAGE_NAME\n\nIMAGE_NAME is the name of an image or artifact described in werf.yaml, the nameless image specified with ~.\nSTAGE_NAME should be one of the following: from, beforeInstall, dependenciesBeforeInstall, gitArchive, install, dependenciesAfterInstall, beforeSetup, dependenciesBeforeSetup, setup, dependenciesAfterSetup, gitCache, gitLatestPatch, dockerInstructions, dockerfile",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "parallel": {
              "description": "Run in parallel (default $WERF_PARALLEL or true)",
              "shorthand": "p",
              "global": false
            },
            "parallel-tasks-limit": {
              "description": "Parallel tasks limit, set -1 to remove the limitation (default $WERF_PARALLEL_TASKS_LIMIT or 5)",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "save-build-report": {
              "description": "Save build report (by default $WERF_SAVE_BUILD_REPORT or false). Its path and format configured with --build-report-path",
              "shorthand": "",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "ssh-key": {
              "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "virtual-merge": {
              "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "bundle",
          "description": "Work with werf bundles: publish bundles into container registry and deploy bundles into Kubernetes cluster",
          "aliases": null,
          "flags": {},
          "subcommands": [
            {
              "name": "apply",
              "description": "Apply bundle into Kubernetes",
              "aliases": null,
              "flags": {
                "add-annotation": {
                  "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
                  "shorthand": "",
                  "global": false
                },
                "add-label": {
                  "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
                  "shorthand": "",
                  "global": false
                },
                "atomic": {
                  "description": "Enable auto rollback of the failed release to the previous deployed release version when current deploy process have failed ($WERF_ATOMIC by default)",
                  "shorthand": "",
                  "global": false
                },
                "auto-rollback": {
                  "description": "Enable auto rollback of the failed release to the previous deployed release version when current deploy process have failed ($WERF_AUTO_ROLLBACK by default)",
                  "shorthand": "R",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "deploy-graph-path": {
                  "description": "Save deploy graph path to the specified file (by default $WERF_DEPLOY_GRAPH_PATH). Extension must be .dot or not specified. If extension not specified, then .dot is used",
                  "shorthand": "",
                  "global": false
                },
                "deploy-report-path": {
                  "description": "Change deploy report path and format (by default $WERF_DEPLOY_REPORT_PATH or \".werf-deploy-report.json\" if not set). Extension must be .json for JSON format. If extension not specified, then .json is used",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and push images into the specified repo, to pull base images",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": false
                },
                "ignore-secret-key": {
                  "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "Use specified Kubernetes namespace (default $WERF_NAMESPACE)",
                  "shorthand": "",
                  "global": false
                },
                "network-parallelism": {
                  "description": "Parallelize some network operations (default $WERF_NETWORK_PARALLELISM or 30)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "release": {
                  "description": "Use specified Helm release name (default $WERF_RELEASE)",
                  "shorthand": "",
                  "global": false
                },
                "releases-history-max": {
                  "description": "Max releases to keep in release storage ($WERF_RELEASES_HISTORY_MAX or 5 by default)",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "rollback-graph-path": {
                  "description": "Save rollback graph path to the specified file (by default $WERF_ROLLBACK_GRAPH_PATH). Extension must be .dot or not specified. If extension not specified, then .dot is used",
                  "shorthand": "",
                  "global": false
                },
                "save-deploy-report": {
                  "description": "Save deploy report (by default $WERF_SAVE_DEPLOY_REPORT or false). Its path and format configured with --deploy-report-path",
                  "shorthand": "",
                  "global": false
                },
                "secret-values": {
                  "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=secret_values_test.yaml, $WERF_SECRET_VALUES_DB=secret_values_db.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "set": {
                  "description": "Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_* (e.g. $WERF_SET_1=key1=val1, $WERF_SET_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-docker-config-json-value": {
                  "description": "Shortcut to set current docker config into the .Values.dockerconfigjson",
                  "shorthand": "",
                  "global": false
                },
                "set-file": {
                  "description": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2).\nAlso, can be defined with $WERF_SET_FILE_* (e.g. $WERF_SET_FILE_1=key1=path1, $WERF_SET_FILE_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-string": {
                  "description": "Set STRING helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_STRING_* (e.g. $WERF_SET_STRING_1=key1=val1, $WERF_SET_STRING_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "skip-dependencies-repo-refresh": {
                  "description": "Do not refresh helm chart repositories locally cached index",
                  "shorthand": "L",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": false
                },
                "tag": {
                  "description": "Provide exact tag version or semver-based pattern, werf will install or upgrade to the latest version of the specified bundle ($WERF_TAG or latest by default)",
                  "shorthand": "",
                  "global": false
                },
                "timeout": {
                  "description": "Resources tracking timeout in seconds ($WERF_TIMEOUT by default)",
                  "shorthand": "t",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "values": {
                  "description": "Specify helm values in a YAML file or a URL (can specify multiple). Also, can be defined with $WERF_VALUES_* (e.g. $WERF_VALUES_1=values_1.yaml, $WERF_VALUES_2=values_2.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "copy",
              "description": "Copy published bundle into another location",
              "aliases": null,
              "flags": {
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and push images into the specified repos",
                  "shorthand": "",
                  "global": false
                },
                "from": {
                  "description": "Source address of the bundle to copy, specify bundle archive using schema `archive:PATH_TO_ARCHIVE.tar.gz`, specify remote bundle with schema `[docker://]REPO:TAG` or without schema.",
                  "shorthand": "",
                  "global": false
                },
                "helm-compatible-chart": {
                  "description": "Set chart name in the Chart.yaml of the published chart to the last path component of container registry repo (for REGISTRY/PATH/TO/REPO address chart name will be REPO, more info https://helm.sh/docs/topics/registries/#oci-feature-deprecation-and-behavior-changes-with-v370). In helm compatibility mode chart is fully conforming with the helm OCI registry requirements. Default true or $WERF_HELM_COMPATIBLE_CHART.",
                  "shorthand": "C",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "rename-chart": {
                  "description": "Force setting of chart name in the Chart.yaml of the published chart to the specified value (can be set by the $WERF_RENAME_CHART, no rename by default, could not be used together with the '--helm-compatible-chart' option).",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "to": {
                  "description": "Destination address of the bundle to copy, specify bundle archive using schema `archive:PATH_TO_ARCHIVE.tar.gz`, specify remote bundle with schema `[docker://]REPO:TAG` or without schema.",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "publish",
              "description": "Publish bundle",
              "aliases": null,
              "flags": {
                "add-annotation": {
                  "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
                  "shorthand": "",
                  "global": false
                },
                "add-custom-tag": {
                  "description": "Set tag alias for the content-based tag.\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso can be defined with $WERF_ADD_CUSTOM_TAG_* (e.g. $WERF_ADD_CUSTOM_TAG_1=\"%image%-tag1\", $WERF_ADD_CUSTOM_TAG_2=\"%image%-tag2\")",
                  "shorthand": "",
                  "global": false
                },
                "add-label": {
                  "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-docker-storage-volume-usage": {
                  "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-docker-storage-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage": {
                  "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "build-report-path": {
                  "description": "Change build report path and format (by default $WERF_BUILD_REPORT_PATH or \".werf-build-report.json\" if not set). Extension must be either .json for JSON format or .env for env-file format. If extension not specified, then .json is used",
                  "shorthand": "",
                  "global": false
                },
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "disable-auto-host-cleanup": {
                  "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
                  "shorthand": "",
                  "global": false
                },
                "disable-default-secret-values": {
                  "description": "Do not use secret values from the default .helm/secret-values.yaml file (default $WERF_DISABLE_DEFAULT_SECRET_VALUES or false)",
                  "shorthand": "",
                  "global": false
                },
                "disable-default-values": {
                  "description": "Do not use values from the default .helm/values.yaml file (default $WERF_DISABLE_DEFAULT_VALUES or false)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and push images into the specified repo and to pull base images",
                  "shorthand": "",
                  "global": false
                },
                "docker-server-storage-path": {
                  "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "helm-compatible-chart": {
                  "description": "Set chart name in the Chart.yaml of the published chart to the last path component of container registry repo (for REGISTRY/PATH/TO/REPO address chart name will be REPO, more info https://helm.sh/docs/topics/registries/#oci-feature-deprecation-and-behavior-changes-with-v370). In helm compatibility mode chart is fully conforming with the helm OCI registry requirements. Default false or $WERF_HELM_COMPATIBLE_CHART.",
                  "shorthand": "C",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "ignore-secret-key": {
                  "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "introspect-before-error": {
                  "description": "Introspect failed stage in the clean state, before running all assembly instructions of the stage",
                  "shorthand": "",
                  "global": false
                },
                "introspect-error": {
                  "description": "Introspect failed stage in the state, right after running failed assembly instruction",
                  "shorthand": "",
                  "global": false
                },
                "introspect-stage": {
                  "description": "Introspect a specific stage. The option can be used multiple times to introspect several stages.\n\nThere are the following formats to use:\n* specify IMAGE_NAME/STAGE_NAME to introspect stage STAGE_NAME of either image or artifact IMAGE_NAME\n* specify STAGE_NAME or */STAGE_NAME for the introspection of all existing stages with name STAGE_NAME\n\nIMAGE_NAME is the name of an image or artifact described in werf.yaml, the nameless image specified with ~.\nSTAGE_NAME should be one of the following: from, beforeInstall, dependenciesBeforeInstall, gitArchive, install, dependenciesAfterInstall, beforeSetup, dependenciesBeforeSetup, setup, dependenciesAfterSetup, gitCache, gitLatestPatch, dockerInstructions, dockerfile",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "parallel": {
                  "description": "Run in parallel (default $WERF_PARALLEL or true)",
                  "shorthand": "p",
                  "global": false
                },
                "parallel-tasks-limit": {
                  "description": "Parallel tasks limit, set -1 to remove the limitation (default $WERF_PARALLEL_TASKS_LIMIT or 5)",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "rename-chart": {
                  "description": "Force setting of chart name in the Chart.yaml of the published chart to the specified value (can be set by the $WERF_RENAME_CHART, no rename by default, could not be used together with the '--helm-compatible-chart' option).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "require-built-images": {
                  "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
                  "shorthand": "Z",
                  "global": false
                },
                "save-build-report": {
                  "description": "Save build report (by default $WERF_SAVE_BUILD_REPORT or false). Its path and format configured with --build-report-path",
                  "shorthand": "",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "secret-values": {
                  "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=.helm/secret_values_test.yaml, $WERF_SECRET_VALUES_DB=.helm/secret_values_db.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "set": {
                  "description": "Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_* (e.g. $WERF_SET_1=key1=val1, $WERF_SET_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-file": {
                  "description": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2).\nAlso, can be defined with $WERF_SET_FILE_* (e.g. $WERF_SET_FILE_1=key1=path1, $WERF_SET_FILE_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-string": {
                  "description": "Set STRING helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_STRING_* (e.g. $WERF_SET_STRING_1=key1=val1, $WERF_SET_STRING_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "skip-dependencies-repo-refresh": {
                  "description": "Do not refresh helm chart repositories locally cached index",
                  "shorthand": "L",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tag": {
                  "description": "Publish bundle into container registry repo by the provided tag ($WERF_TAG or latest by default)",
                  "shorthand": "",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "use-custom-tag": {
                  "description": "Use a tag alias in helm templates instead of an image content-based tag (NOT RECOMMENDED).\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso, can be defined with $WERF_USE_CUSTOM_TAG (e.g. $WERF_USE_CUSTOM_TAG=\"%image%-tag\")",
                  "shorthand": "",
                  "global": false
                },
                "values": {
                  "description": "Specify helm values in a YAML file or a URL (can specify multiple). Also, can be defined with $WERF_VALUES_* (e.g. $WERF_VALUES_1=.helm/values_1.yaml, $WERF_VALUES_2=.helm/values_2.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "virtual-merge": {
                  "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
                  "shorthand": "",
                  "global": false
                },
                "without-images": {
                  "description": "Disable building of images defined in the werf.yaml (if any) and usage of such images in the .helm/templates ($WERF_WITHOUT_IMAGES or false by default — e.g. enable all images defined in the werf.yaml by default)",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "render",
              "description": "Render Kubernetes manifests from bundle",
              "aliases": null,
              "flags": {
                "add-annotation": {
                  "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
                  "shorthand": "",
                  "global": false
                },
                "add-label": {
                  "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
                  "shorthand": "",
                  "global": false
                },
                "bundle-dir": {
                  "description": "Get extracted bundle from directory instead of registry (default $WERF_BUNDLE_DIR)",
                  "shorthand": "b",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "disable-default-secret-values": {
                  "description": "Do not use secret values from the default .helm/secret-values.yaml file (default $WERF_DISABLE_DEFAULT_SECRET_VALUES or false)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and push images into the specified repo, to pull base images",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "ignore-secret-key": {
                  "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
                  "shorthand": "",
                  "global": false
                },
                "include-crds": {
                  "description": "Include CRDs in the templated output (default $WERF_INCLUDE_CRDS)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-version": {
                  "description": "Set specific Capabilities.KubeVersion (default $WERF_KUBE_VERSION)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "Use specified Kubernetes namespace (default $WERF_NAMESPACE)",
                  "shorthand": "",
                  "global": false
                },
                "network-parallelism": {
                  "description": "Parallelize some network operations (default $WERF_NETWORK_PARALLELISM or 30)",
                  "shorthand": "",
                  "global": false
                },
                "output": {
                  "description": "Write render output to the specified file instead of stdout ($WERF_RENDER_OUTPUT by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "release": {
                  "description": "Use specified Helm release name (default $WERF_RELEASE)",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "secret-values": {
                  "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=secret_values_test.yaml, $WERF_SECRET_VALUES_DB=secret_values_db.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "set": {
                  "description": "Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_* (e.g. $WERF_SET_1=key1=val1, $WERF_SET_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-docker-config-json-value": {
                  "description": "Shortcut to set current docker config into the .Values.dockerconfigjson",
                  "shorthand": "",
                  "global": false
                },
                "set-file": {
                  "description": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2).\nAlso, can be defined with $WERF_SET_FILE_* (e.g. $WERF_SET_FILE_1=key1=path1, $WERF_SET_FILE_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-string": {
                  "description": "Set STRING helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_STRING_* (e.g. $WERF_SET_STRING_1=key1=val1, $WERF_SET_STRING_2=key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "tag": {
                  "description": "Provide exact tag version or semver-based pattern, werf will render the latest version of the specified bundle ($WERF_TAG or latest by default)",
                  "shorthand": "",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "validate": {
                  "description": "Validate your manifests against the Kubernetes cluster you are currently pointing at (default $WERF_VALIDATE)",
                  "shorthand": "",
                  "global": false
                },
                "values": {
                  "description": "Specify helm values in a YAML file or a URL (can specify multiple). Also, can be defined with $WERF_VALUES_* (e.g. $WERF_VALUES_1=values_1.yaml, $WERF_VALUES_2=values_2.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "ci-env",
          "description": "Generate werf environment variables for specified CI system",
          "aliases": null,
          "flags": {
            "as-env-file": {
              "description": "Create the .env file and print the path for sourcing (default $WERF_AS_ENV_FILE).",
              "shorthand": "",
              "global": false
            },
            "as-file": {
              "description": "Create the script and print the path for sourcing (default $WERF_AS_FILE).",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand will copy specified or default (~/.docker) config to the temporary directory and may perform additional login with new config.",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "login-to-registry": {
              "description": "Log in to CI-specific registry automatically if possible (default $WERF_LOGIN_TO_REGISTRY).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "output-file-path": {
              "description": "Write to custom file (default $WERF_OUTPUT_FILE_PATH).",
              "shorthand": "o",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "shell": {
              "description": "Set to cmdexe, powershell or use the default behaviour that is compatible with any unix shell (default $WERF_SHELL).",
              "shorthand": "",
              "global": false
            },
            "tagging-strategy": {
              "description": "stub",
              "shorthand": "",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "cleanup",
          "description": "Cleanup project images in the container registry",
          "aliases": null,
          "flags": {
            "allowed-docker-storage-volume-usage": {
              "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage": {
              "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "disable-auto-host-cleanup": {
              "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and delete images from the specified repo",
              "shorthand": "",
              "global": false
            },
            "docker-server-storage-path": {
              "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
              "shorthand": "",
              "global": false
            },
            "dry-run": {
              "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "keep-stages-built-within-last-n-hours": {
              "description": "Keep stages that were built within last hours (default $WERF_KEEP_STAGES_BUILT_WITHIN_LAST_N_HOURS or 2)",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Scan for used images only in the specified kube context, scan all contexts from kube config otherwise (default false or $WERF_SCAN_CONTEXT_ONLY)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "parallel": {
              "description": "Run in parallel (default $WERF_PARALLEL or true)",
              "shorthand": "p",
              "global": false
            },
            "parallel-tasks-limit": {
              "description": "Parallel tasks limit, set -1 to remove the limitation (default $WERF_PARALLEL_TASKS_LIMIT or 5)",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "scan-context-namespace-only": {
              "description": "Scan for used images only in namespace linked with context for each available context in kube-config (or only for the context specified with option --kube-context). When disabled will scan all namespaces in all contexts (or only for the context specified with option --kube-context). (Default $WERF_SCAN_CONTEXT_NAMESPACE_ONLY)",
              "shorthand": "",
              "global": false
            },
            "scan-context-only": {
              "description": "Scan for used images only in the specified kube context, scan all contexts from kube config otherwise (default false or $WERF_SCAN_CONTEXT_ONLY)",
              "shorthand": "",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "without-kube": {
              "description": "Do not skip deployed Kubernetes images (default $WERF_WITHOUT_KUBE)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "completion",
          "description": "Generate bash completion scripts",
          "aliases": null,
          "flags": {
            "shell": {
              "description": "Set to bash, zsh, fish or powershell (default $WERF_SHELL or bash)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "compose",
          "description": "Work with docker-compose",
          "aliases": null,
          "flags": {},
          "subcommands": [
            {
              "name": "config",
              "description": "Run docker-compose config command with forwarded image names.",
              "aliases": null,
              "flags": {
                "allowed-docker-storage-volume-usage": {
                  "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-docker-storage-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage": {
                  "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "disable-auto-host-cleanup": {
                  "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-bin-path": {
                  "description": "DEPRECATED: \"docker compose\" command always used now, this option is ignored. Define docker-compose bin path (default $WERF_DOCKER_COMPOSE_BIN_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-command-options": {
                  "description": "Define docker-compose command options (default $WERF_DOCKER_COMPOSE_COMMAND_OPTIONS)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-options": {
                  "description": "Define docker-compose options (default $WERF_DOCKER_COMPOSE_OPTIONS)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and pull images from the specified repo",
                  "shorthand": "",
                  "global": false
                },
                "docker-server-storage-path": {
                  "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "require-built-images": {
                  "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
                  "shorthand": "Z",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "stub-tags": {
                  "description": "Use stubs instead of real tags (default $WERF_STUB_TAGS)",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "virtual-merge": {
                  "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
                  "shorthand": "",
                  "global": false
                },
                "without-images": {
                  "description": "Disable building of images defined in the werf.yaml (if any) and usage of such images in the .helm/templates ($WERF_WITHOUT_IMAGES or false by default — e.g. enable all images defined in the werf.yaml by default)",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "down",
              "description": "Run docker-compose down command with forwarded image names.",
              "aliases": null,
              "flags": {
                "allowed-docker-storage-volume-usage": {
                  "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-docker-storage-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage": {
                  "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "disable-auto-host-cleanup": {
                  "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-bin-path": {
                  "description": "DEPRECATED: \"docker compose\" command always used now, this option is ignored. Define docker-compose bin path (default $WERF_DOCKER_COMPOSE_BIN_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-command-options": {
                  "description": "Define docker-compose command options (default $WERF_DOCKER_COMPOSE_COMMAND_OPTIONS)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-options": {
                  "description": "Define docker-compose options (default $WERF_DOCKER_COMPOSE_OPTIONS)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and pull images from the specified repo",
                  "shorthand": "",
                  "global": false
                },
                "docker-server-storage-path": {
                  "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "require-built-images": {
                  "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
                  "shorthand": "Z",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "stub-tags": {
                  "description": "Use stubs instead of real tags (default $WERF_STUB_TAGS)",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "virtual-merge": {
                  "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
                  "shorthand": "",
                  "global": false
                },
                "without-images": {
                  "description": "Disable building of images defined in the werf.yaml (if any) and usage of such images in the .helm/templates ($WERF_WITHOUT_IMAGES or false by default — e.g. enable all images defined in the werf.yaml by default)",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "run",
              "description": "Run docker-compose run command with forwarded image names.",
              "aliases": null,
              "flags": {
                "allowed-docker-storage-volume-usage": {
                  "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-docker-storage-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage": {
                  "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "disable-auto-host-cleanup": {
                  "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-bin-path": {
                  "description": "DEPRECATED: \"docker compose\" command always used now, this option is ignored. Define docker-compose bin path (default $WERF_DOCKER_COMPOSE_BIN_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-command-options": {
                  "description": "Define docker-compose command options (default $WERF_DOCKER_COMPOSE_COMMAND_OPTIONS)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-options": {
                  "description": "Define docker-compose options (default $WERF_DOCKER_COMPOSE_OPTIONS)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and pull images from the specified repo",
                  "shorthand": "",
                  "global": false
                },
                "docker-server-storage-path": {
                  "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "require-built-images": {
                  "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
                  "shorthand": "Z",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "stub-tags": {
                  "description": "Use stubs instead of real tags (default $WERF_STUB_TAGS)",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "virtual-merge": {
                  "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
                  "shorthand": "",
                  "global": false
                },
                "without-images": {
                  "description": "Disable building of images defined in the werf.yaml (if any) and usage of such images in the .helm/templates ($WERF_WITHOUT_IMAGES or false by default — e.g. enable all images defined in the werf.yaml by default)",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "up",
              "description": "Run docker-compose up command with forwarded image names.",
              "aliases": null,
              "flags": {
                "allowed-docker-storage-volume-usage": {
                  "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-docker-storage-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage": {
                  "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "disable-auto-host-cleanup": {
                  "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-bin-path": {
                  "description": "DEPRECATED: \"docker compose\" command always used now, this option is ignored. Define docker-compose bin path (default $WERF_DOCKER_COMPOSE_BIN_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-command-options": {
                  "description": "Define docker-compose command options (default $WERF_DOCKER_COMPOSE_COMMAND_OPTIONS)",
                  "shorthand": "",
                  "global": false
                },
                "docker-compose-options": {
                  "description": "Define docker-compose options (default $WERF_DOCKER_COMPOSE_OPTIONS)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and pull images from the specified repo",
                  "shorthand": "",
                  "global": false
                },
                "docker-server-storage-path": {
                  "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "follow": {
                  "description": "Enable follow mode (default $WERF_FOLLOW).\nThe mode allows restarting the command on a new commit.\nIn development mode (--dev), werf restarts the command on any changes (including untracked files) in the git repository worktree",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "require-built-images": {
                  "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
                  "shorthand": "Z",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "stub-tags": {
                  "description": "Use stubs instead of real tags (default $WERF_STUB_TAGS)",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "virtual-merge": {
                  "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
                  "shorthand": "",
                  "global": false
                },
                "without-images": {
                  "description": "Disable building of images defined in the werf.yaml (if any) and usage of such images in the .helm/templates ($WERF_WITHOUT_IMAGES or false by default — e.g. enable all images defined in the werf.yaml by default)",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "config",
          "description": "Work with werf.yaml",
          "aliases": null,
          "flags": {},
          "subcommands": [
            {
              "name": "graph",
              "description": "Print dependency graph for images in werf.yaml.",
              "aliases": null,
              "flags": {
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "list",
              "description": "List image and artifact names defined in werf.yaml.",
              "aliases": null,
              "flags": {
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-images-only": {
                  "description": "Show only final images",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "images-only": {
                  "description": "Show only final images",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "render",
              "description": "Render werf.yaml.",
              "aliases": null,
              "flags": {
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "converge",
          "description": "Build and push images, then deploy application into Kubernetes",
          "aliases": null,
          "flags": {
            "add-annotation": {
              "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
              "shorthand": "",
              "global": false
            },
            "add-custom-tag": {
              "description": "Set tag alias for the content-based tag.\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso can be defined with $WERF_ADD_CUSTOM_TAG_* (e.g. $WERF_ADD_CUSTOM_TAG_1=\"%image%-tag1\", $WERF_ADD_CUSTOM_TAG_2=\"%image%-tag2\")",
              "shorthand": "",
              "global": false
            },
            "add-label": {
              "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage": {
              "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage": {
              "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "atomic": {
              "description": "Enable auto rollback of the failed release to the previous deployed release version when current deploy process have failed ($WERF_ATOMIC by default)",
              "shorthand": "",
              "global": false
            },
            "auto-rollback": {
              "description": "Enable auto rollback of the failed release to the previous deployed release version when current deploy process have failed ($WERF_AUTO_ROLLBACK by default)",
              "shorthand": "R",
              "global": false
            },
            "build-report-path": {
              "description": "Change build report path and format (by default $WERF_BUILD_REPORT_PATH or \".werf-build-report.json\" if not set). Extension must be either .json for JSON format or .env for env-file format. If extension not specified, then .json is used",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "deploy-graph-path": {
              "description": "Save deploy graph path to the specified file (by default $WERF_DEPLOY_GRAPH_PATH). Extension must be .dot or not specified. If extension not specified, then .dot is used",
              "shorthand": "",
              "global": false
            },
            "deploy-report-path": {
              "description": "Change deploy report path and format (by default $WERF_DEPLOY_REPORT_PATH or \".werf-deploy-report.json\" if not set). Extension must be .json for JSON format. If extension not specified, then .json is used",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "disable-auto-host-cleanup": {
              "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
              "shorthand": "",
              "global": false
            },
            "disable-default-secret-values": {
              "description": "Do not use secret values from the default .helm/secret-values.yaml file (default $WERF_DISABLE_DEFAULT_SECRET_VALUES or false)",
              "shorthand": "",
              "global": false
            },
            "disable-default-values": {
              "description": "Do not use values from the default .helm/values.yaml file (default $WERF_DISABLE_DEFAULT_VALUES or false)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and push images into the specified repo, to pull base images",
              "shorthand": "",
              "global": false
            },
            "docker-server-storage-path": {
              "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "follow": {
              "description": "Enable follow mode (default $WERF_FOLLOW).\nThe mode allows restarting the command on a new commit.\nIn development mode (--dev), werf restarts the command on any changes (including untracked files) in the git repository worktree",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "hooks-status-progress-period": {
              "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
              "shorthand": "",
              "global": false
            },
            "ignore-secret-key": {
              "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "introspect-before-error": {
              "description": "Introspect failed stage in the clean state, before running all assembly instructions of the stage",
              "shorthand": "",
              "global": false
            },
            "introspect-error": {
              "description": "Introspect failed stage in the state, right after running failed assembly instruction",
              "shorthand": "",
              "global": false
            },
            "introspect-stage": {
              "description": "Introspect a specific stage. The option can be used multiple times to introspect several stages.\n\nThere are the following formats to use:\n* specify IMAGE_NAME/STAGE_NAME to introspect stage STAGE_NAME of either image or artifact IMAGE_NAME\n* specify STAGE_NAME or */STAGE_NAME for the introspection of all existing stages with name STAGE_NAME\n\nIMAGE_NAME is the name of an image or artifact described in werf.yaml, the nameless image specified with ~.\nSTAGE_NAME should be one of the following: from, beforeInstall, dependenciesBeforeInstall, gitArchive, install, dependenciesAfterInstall, beforeSetup, dependenciesBeforeSetup, setup, dependenciesAfterSetup, gitCache, gitLatestPatch, dockerInstructions, dockerfile",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "Use specified Kubernetes namespace (default [[ project ]]-[[ env ]] template or deploy.namespace custom template from werf.yaml or $WERF_NAMESPACE)",
              "shorthand": "",
              "global": false
            },
            "network-parallelism": {
              "description": "Parallelize some network operations (default $WERF_NETWORK_PARALLELISM or 30)",
              "shorthand": "",
              "global": false
            },
            "parallel": {
              "description": "Run in parallel (default $WERF_PARALLEL or true)",
              "shorthand": "p",
              "global": false
            },
            "parallel-tasks-limit": {
              "description": "Parallel tasks limit, set -1 to remove the limitation (default $WERF_PARALLEL_TASKS_LIMIT or 5)",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "release": {
              "description": "Use specified Helm release name (default [[ project ]]-[[ env ]] template or deploy.helmRelease custom template from werf.yaml or $WERF_RELEASE)",
              "shorthand": "",
              "global": false
            },
            "releases-history-max": {
              "description": "Max releases to keep in release storage ($WERF_RELEASES_HISTORY_MAX or 5 by default)",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "require-built-images": {
              "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
              "shorthand": "Z",
              "global": false
            },
            "rollback-graph-path": {
              "description": "Save rollback graph path to the specified file (by default $WERF_ROLLBACK_GRAPH_PATH). Extension must be .dot or not specified. If extension not specified, then .dot is used",
              "shorthand": "",
              "global": false
            },
            "save-build-report": {
              "description": "Save build report (by default $WERF_SAVE_BUILD_REPORT or false). Its path and format configured with --build-report-path",
              "shorthand": "",
              "global": false
            },
            "save-deploy-report": {
              "description": "Save deploy report (by default $WERF_SAVE_DEPLOY_REPORT or false). Its path and format configured with --deploy-report-path",
              "shorthand": "",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "secret-values": {
              "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=.helm/secret_values_test.yaml, $WERF_SECRET_VALUES_DB=.helm/secret_values_db.yaml)",
              "shorthand": "",
              "global": false
            },
            "set": {
              "description": "Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_* (e.g. $WERF_SET_1=key1=val1, $WERF_SET_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "set-docker-config-json-value": {
              "description": "Shortcut to set current docker config into the .Values.dockerconfigjson",
              "shorthand": "",
              "global": false
            },
            "set-file": {
              "description": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2).\nAlso, can be defined with $WERF_SET_FILE_* (e.g. $WERF_SET_FILE_1=key1=path1, $WERF_SET_FILE_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "set-string": {
              "description": "Set STRING helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_STRING_* (e.g. $WERF_SET_STRING_1=key1=val1, $WERF_SET_STRING_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "skip-dependencies-repo-refresh": {
              "description": "Do not refresh helm chart repositories locally cached index",
              "shorthand": "L",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "ssh-key": {
              "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
              "shorthand": "",
              "global": false
            },
            "status-progress-period": {
              "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "timeout": {
              "description": "Resources tracking timeout in seconds ($WERF_TIMEOUT by default)",
              "shorthand": "t",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "use-custom-tag": {
              "description": "Use a tag alias in helm templates instead of an image content-based tag (NOT RECOMMENDED).\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso, can be defined with $WERF_USE_CUSTOM_TAG (e.g. $WERF_USE_CUSTOM_TAG=\"%image%-tag\")",
              "shorthand": "",
              "global": false
            },
            "values": {
              "description": "Specify helm values in a YAML file or a URL (can specify multiple). Also, can be defined with $WERF_VALUES_* (e.g. $WERF_VALUES_1=.helm/values_1.yaml, $WERF_VALUES_2=.helm/values_2.yaml)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "virtual-merge": {
              "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "cr",
          "description": "Work with container registry: authenticate, list and remove images, etc.",
          "aliases": null,
          "flags": {},
          "subcommands": [
            {
              "name": "login",
              "description": "Login into remote registry.",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "Use specified password for login (default $WERF_PASSWORD)",
                  "shorthand": "p",
                  "global": false
                },
                "password-stdin": {
                  "description": "Read password from stdin for login (default $WERF_PASSWORD_STDIN)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "Use specified username for login (default $WERF_USERNAME)",
                  "shorthand": "u",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "logout",
              "description": "Logout from a remote registry.",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "dismiss",
          "description": "Delete werf release from Kubernetes",
          "aliases": null,
          "flags": {
            "allowed-docker-storage-volume-usage": {
              "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage": {
              "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "deploy-report-path": {
              "description": "Change deploy report path and format (by default $WERF_DEPLOY_REPORT_PATH or \".werf-deploy-report.json\" if not set). Extension must be .json for JSON format. If extension not specified, then .json is used",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "disable-auto-host-cleanup": {
              "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)",
              "shorthand": "",
              "global": false
            },
            "docker-server-storage-path": {
              "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "hooks-status-progress-period": {
              "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "Use specified Kubernetes namespace (default [[ project ]]-[[ env ]] template or deploy.namespace custom template from werf.yaml or $WERF_NAMESPACE)",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "release": {
              "description": "Use specified Helm release name (default [[ project ]]-[[ env ]] template or deploy.helmRelease custom template from werf.yaml or $WERF_RELEASE)",
              "shorthand": "",
              "global": false
            },
            "releases-history-max": {
              "description": "Max releases to keep in release storage ($WERF_RELEASES_HISTORY_MAX or 5 by default)",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "status-progress-period": {
              "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "use-deploy-report": {
              "description": "Use deploy report, previously saved with --save-deploy-report (by default $WERF_USE_DEPLOY_REPORT or false). Its path and format configured with --deploy-report-path",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "with-hooks": {
              "description": "Delete Helm Release hooks getting from existing revisions (default $WERF_WITH_HOOKS or true)",
              "shorthand": "",
              "global": false
            },
            "with-namespace": {
              "description": "Delete Kubernetes Namespace after purging Helm Release (default $WERF_WITH_NAMESPACE)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "export",
          "description": "Export images",
          "aliases": null,
          "flags": {
            "add-label": {
              "description": "Add label to exported images (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_EXPORT_ADD_LABEL_* (e.g. $WERF_EXPORT_ADD_LABEL_1=labelName1=labelValue1, $WERF_EXPORT_ADD_LABEL_2=labelName2=labelValue2)",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and pull images from the specified repo",
              "shorthand": "",
              "global": false
            },
            "dry-run": {
              "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "introspect-before-error": {
              "description": "Introspect failed stage in the clean state, before running all assembly instructions of the stage",
              "shorthand": "",
              "global": false
            },
            "introspect-error": {
              "description": "Introspect failed stage in the state, right after running failed assembly instruction",
              "shorthand": "",
              "global": false
            },
            "introspect-stage": {
              "description": "Introspect a specific stage. The option can be used multiple times to introspect several stages.\n\nThere are the following formats to use:\n* specify IMAGE_NAME/STAGE_NAME to introspect stage STAGE_NAME of either image or artifact IMAGE_NAME\n* specify STAGE_NAME or */STAGE_NAME for the introspection of all existing stages with name STAGE_NAME\n\nIMAGE_NAME is the name of an image or artifact described in werf.yaml, the nameless image specified with ~.\nSTAGE_NAME should be one of the following: from, beforeInstall, dependenciesBeforeInstall, gitArchive, install, dependenciesAfterInstall, beforeSetup, dependenciesBeforeSetup, setup, dependenciesAfterSetup, gitCache, gitLatestPatch, dockerInstructions, dockerfile",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "parallel": {
              "description": "Run in parallel (default $WERF_PARALLEL or true)",
              "shorthand": "p",
              "global": false
            },
            "parallel-tasks-limit": {
              "description": "Parallel tasks limit, set -1 to remove the limitation (default $WERF_PARALLEL_TASKS_LIMIT or 5)",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "require-built-images": {
              "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
              "shorthand": "Z",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "ssh-key": {
              "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "tag": {
              "description": "Set a tag template (can specify multiple).\nIt is necessary to use image name shortcut %image% or %image_slug% if multiple images are exported (e.g. REPO:TAG-%image% or REPO-%image%:TAG)",
              "shorthand": "",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "virtual-merge": {
              "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "helm",
          "description": "Manage application deployment with helm",
          "aliases": null,
          "flags": {
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "hooks-status-progress-period": {
              "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "namespace scope for this request",
              "shorthand": "n",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "releases-history-max": {
              "description": "Max releases to keep in release storage ($WERF_RELEASES_HISTORY_MAX or 5 by default)",
              "shorthand": "",
              "global": false
            },
            "status-progress-period": {
              "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
              "shorthand": "",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": [
            {
              "name": "create",
              "description": "create a new chart with the given name",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "starter": {
                  "description": "the name or absolute path to Helm starter scaffold",
                  "shorthand": "p",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "dependency",
              "description": "manage a chart's dependencies",
              "aliases": [
                "dep",
                "dependencies"
              ],
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "build",
                  "description": "rebuild the charts/ directory based on the Chart.lock file",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "keyring": {
                      "description": "keyring containing public keys",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "skip-refresh": {
                      "description": "do not refresh the local repository cache",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "verify": {
                      "description": "verify the packages against signatures",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "list",
                  "description": "list the dependencies for the given chart",
                  "aliases": [
                    "ls"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "max-col-width": {
                      "description": "maximum column width for output table",
                      "shorthand": "",
                      "global": false
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "update",
                  "description": "update charts/ based on the contents of Chart.yaml",
                  "aliases": [
                    "up"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "keyring": {
                      "description": "keyring containing public keys",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "skip-refresh": {
                      "description": "do not refresh the local repository cache",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "verify": {
                      "description": "verify the packages against signatures",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "env",
              "description": "helm client environment information",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "get",
              "description": "download extended information of a named release",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "all",
                  "description": "download all information for a named release",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "revision": {
                      "description": "get the named release with revision",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "template": {
                      "description": "go template for formatting the output, eg: {{.Release.Name}}",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "hooks",
                  "description": "download all hooks for a named release",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "revision": {
                      "description": "get the named release with revision",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "manifest",
                  "description": "download the manifest for a named release",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "revision": {
                      "description": "get the named release with revision",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "metadata",
                  "description": "This command fetches metadata for a given release",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                      "shorthand": "o",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "revision": {
                      "description": "specify release revision",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "notes",
                  "description": "download the notes for a named release",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "revision": {
                      "description": "get the named release with revision",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "values",
                  "description": "download the values file for a named release",
                  "aliases": null,
                  "flags": {
                    "all": {
                      "description": "dump all (computed) values",
                      "shorthand": "a",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                      "shorthand": "o",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "revision": {
                      "description": "get the named release with revision",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "get-autogenerated-values",
              "description": "Get service values yaml generated by werf for helm chart during deploy",
              "aliases": null,
              "flags": {
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and pull images from the specified repo",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "Use specified Kubernetes namespace (default [[ project ]]-[[ env ]] template or deploy.namespace custom template from werf.yaml or $WERF_NAMESPACE)",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "stub-tags": {
                  "description": "Use stubs instead of real tags (default $WERF_STUB_TAGS)",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "use-custom-tag": {
                  "description": "Use a tag alias in helm templates instead of an image content-based tag (NOT RECOMMENDED).\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso, can be defined with $WERF_USE_CUSTOM_TAG (e.g. $WERF_USE_CUSTOM_TAG=\"%image%-tag\")",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "virtual-merge": {
                  "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
                  "shorthand": "",
                  "global": false
                },
                "without-images": {
                  "description": "Disable building of images defined in the werf.yaml (if any) and usage of such images in the .helm/templates ($WERF_WITHOUT_IMAGES or false by default — e.g. enable all images defined in the werf.yaml by default)",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "get-namespace",
              "description": "Print Kubernetes Namespace that will be used in current configuration with specified params.",
              "aliases": null,
              "flags": {
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "get-release",
              "description": "Print Helm Release name that will be used in current configuration with specified params.",
              "aliases": null,
              "flags": {
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "Use specified Kubernetes namespace (default [[ project ]]-[[ env ]] template or deploy.namespace custom template from werf.yaml or $WERF_NAMESPACE)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "history",
              "description": "fetch release history",
              "aliases": [
                "hist"
              ],
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "max": {
                  "description": "maximum number of revision to include in history",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                  "shorthand": "o",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "install",
              "description": "install a chart",
              "aliases": null,
              "flags": {
                "add-annotation": {
                  "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
                  "shorthand": "",
                  "global": false
                },
                "add-label": {
                  "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
                  "shorthand": "",
                  "global": false
                },
                "atomic": {
                  "description": "if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used",
                  "shorthand": "",
                  "global": false
                },
                "ca-file": {
                  "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                  "shorthand": "",
                  "global": false
                },
                "cert-file": {
                  "description": "identify HTTPS client using this SSL certificate file",
                  "shorthand": "",
                  "global": false
                },
                "cleanup-on-fail": {
                  "description": "allow deletion of new resources created in this installation when install fails",
                  "shorthand": "",
                  "global": false
                },
                "create-namespace": {
                  "description": "create the release namespace if not present",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "dependency-update": {
                  "description": "update dependencies if they are missing before installing the chart",
                  "shorthand": "",
                  "global": false
                },
                "deploy-report-path": {
                  "description": "save deploy report in JSON to the specified path",
                  "shorthand": "",
                  "global": false
                },
                "description": {
                  "description": "add a custom description",
                  "shorthand": "",
                  "global": false
                },
                "devel": {
                  "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                  "shorthand": "",
                  "global": false
                },
                "disable-openapi-validation": {
                  "description": "if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.",
                  "shorthand": "",
                  "global": false
                },
                "enable-dns": {
                  "description": "enable DNS lookups when rendering templates",
                  "shorthand": "",
                  "global": false
                },
                "force": {
                  "description": "force resource updates through a replacement strategy",
                  "shorthand": "",
                  "global": false
                },
                "generate-name": {
                  "description": "generate the name (and omit the NAME parameter)",
                  "shorthand": "g",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "ignore-secret-key": {
                  "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "skip tls certificate checks for the chart download",
                  "shorthand": "",
                  "global": false
                },
                "key-file": {
                  "description": "identify HTTPS client using this SSL key file",
                  "shorthand": "",
                  "global": false
                },
                "keyring": {
                  "description": "location of public keys used for verification",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "labels": {
                  "description": "Labels that would be added to release metadata. Should be divided by comma.",
                  "shorthand": "l",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "name-template": {
                  "description": "specify template used to name the release",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "no-hooks": {
                  "description": "prevent hooks from running during install",
                  "shorthand": "",
                  "global": false
                },
                "output": {
                  "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                  "shorthand": "o",
                  "global": false
                },
                "pass-credentials": {
                  "description": "pass credentials to all domains",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "chart repository password where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "plain-http": {
                  "description": "use insecure HTTP connections for the chart download",
                  "shorthand": "",
                  "global": false
                },
                "post-renderer": {
                  "description": "the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path",
                  "shorthand": "",
                  "global": false
                },
                "post-renderer-args": {
                  "description": "an argument to the post-renderer (can specify multiple)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "render-subchart-notes": {
                  "description": "if set, render subchart notes along with the parent",
                  "shorthand": "",
                  "global": false
                },
                "replace": {
                  "description": "re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "chart repository url where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "secret-values": {
                  "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=.helm/secret_values_test.yaml, $WERF_SECRET_VALUES_DB=.helm/secret_values_db.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "set": {
                  "description": "set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-file": {
                  "description": "set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)",
                  "shorthand": "",
                  "global": false
                },
                "set-json": {
                  "description": "set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)",
                  "shorthand": "",
                  "global": false
                },
                "set-literal": {
                  "description": "set a literal STRING value on the command line",
                  "shorthand": "",
                  "global": false
                },
                "set-string": {
                  "description": "set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "skip-crds": {
                  "description": "if set, no CRDs will be installed. By default, CRDs are installed if not already present",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "timeout": {
                  "description": "time to wait for any individual Kubernetes operation (like Jobs for hooks)",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "chart repository username where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "values": {
                  "description": "specify values in a YAML file or a URL (can specify multiple)",
                  "shorthand": "f",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "verify": {
                  "description": "verify the package before using it",
                  "shorthand": "",
                  "global": false
                },
                "version": {
                  "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                  "shorthand": "",
                  "global": false
                },
                "wait": {
                  "description": "if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                },
                "wait-for-jobs": {
                  "description": "if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "lint",
              "description": "examine a chart for possible issues",
              "aliases": null,
              "flags": {
                "add-annotation": {
                  "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
                  "shorthand": "",
                  "global": false
                },
                "add-label": {
                  "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "ignore-secret-key": {
                  "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "kube-version": {
                  "description": "Kubernetes version used for capabilities and deprecation checks",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "print only warnings and errors",
                  "shorthand": "",
                  "global": false
                },
                "secret-values": {
                  "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=.helm/secret_values_test.yaml, $WERF_SECRET_VALUES_DB=.helm/secret_values_db.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "set": {
                  "description": "set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-file": {
                  "description": "set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)",
                  "shorthand": "",
                  "global": false
                },
                "set-json": {
                  "description": "set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)",
                  "shorthand": "",
                  "global": false
                },
                "set-literal": {
                  "description": "set a literal STRING value on the command line",
                  "shorthand": "",
                  "global": false
                },
                "set-string": {
                  "description": "set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "strict": {
                  "description": "fail on lint warnings",
                  "shorthand": "",
                  "global": false
                },
                "values": {
                  "description": "specify values in a YAML file or a URL (can specify multiple)",
                  "shorthand": "f",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "with-subcharts": {
                  "description": "lint dependent charts",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "list",
              "description": "list releases",
              "aliases": [
                "ls"
              ],
              "flags": {
                "all": {
                  "description": "show all releases without any filter applied",
                  "shorthand": "a",
                  "global": false
                },
                "all-namespaces": {
                  "description": "list releases across all namespaces",
                  "shorthand": "A",
                  "global": false
                },
                "date": {
                  "description": "sort by release date",
                  "shorthand": "d",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "deployed": {
                  "description": "show deployed releases. If no other is specified, this will be automatically enabled",
                  "shorthand": "",
                  "global": false
                },
                "failed": {
                  "description": "show failed releases",
                  "shorthand": "",
                  "global": false
                },
                "filter": {
                  "description": "a regular expression (Perl compatible). Any releases that match the expression will be included in the results",
                  "shorthand": "f",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "max": {
                  "description": "maximum number of releases to fetch",
                  "shorthand": "m",
                  "global": false
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "no-headers": {
                  "description": "don't print headers when using the default output format",
                  "shorthand": "",
                  "global": false
                },
                "offset": {
                  "description": "next release index in the list, used to offset from start value",
                  "shorthand": "",
                  "global": false
                },
                "output": {
                  "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                  "shorthand": "o",
                  "global": false
                },
                "pending": {
                  "description": "show pending releases",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "reverse": {
                  "description": "reverse the sort order",
                  "shorthand": "r",
                  "global": false
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Works only for secret(default) and configmap storage backends.",
                  "shorthand": "l",
                  "global": false
                },
                "short": {
                  "description": "output short (quiet) listing format",
                  "shorthand": "q",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "superseded": {
                  "description": "show superseded releases",
                  "shorthand": "",
                  "global": false
                },
                "time-format": {
                  "description": "format time using golang time formatter. Example: --time-format \"2006-01-02 15:04:05Z0700\"",
                  "shorthand": "",
                  "global": false
                },
                "uninstalled": {
                  "description": "show uninstalled releases (if 'helm uninstall --keep-history' was used)",
                  "shorthand": "",
                  "global": false
                },
                "uninstalling": {
                  "description": "show releases that are currently being uninstalled",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "package",
              "description": "package a chart directory into a chart archive",
              "aliases": null,
              "flags": {
                "app-version": {
                  "description": "set the appVersion on the chart to this version",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "dependency-update": {
                  "description": "update dependencies from \"Chart.yaml\" to dir \"charts/\" before packaging",
                  "shorthand": "u",
                  "global": false
                },
                "destination": {
                  "description": "location to write the chart.",
                  "shorthand": "d",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "key": {
                  "description": "name of the key to use when signing. Used if --sign is true",
                  "shorthand": "",
                  "global": false
                },
                "keyring": {
                  "description": "location of a public keyring",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "passphrase-file": {
                  "description": "location of a file which contains the passphrase for the signing key. Use \"-\" in order to read from stdin.",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "sign": {
                  "description": "use a PGP private key to sign this package",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "version": {
                  "description": "set the version on the chart to this semver version",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "plugin",
              "description": "install, list, or uninstall Helm plugins",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "install",
                  "description": "install one or more Helm plugins",
                  "aliases": [
                    "add"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "version": {
                      "description": "specify a version constraint. If this is not specified, the latest version is installed",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "list",
                  "description": "list installed Helm plugins",
                  "aliases": [
                    "ls"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "uninstall",
                  "description": "uninstall one or more Helm plugins",
                  "aliases": [
                    "rm",
                    "remove"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "update",
                  "description": "update one or more Helm plugins",
                  "aliases": [
                    "up"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "pull",
              "description": "download a chart from a repository and (optionally) unpack it in local directory",
              "aliases": [
                "fetch"
              ],
              "flags": {
                "ca-file": {
                  "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                  "shorthand": "",
                  "global": false
                },
                "cert-file": {
                  "description": "identify HTTPS client using this SSL certificate file",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "destination": {
                  "description": "location to write the chart. If this and untardir are specified, untardir is appended to this",
                  "shorthand": "d",
                  "global": false
                },
                "devel": {
                  "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored.",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "skip tls certificate checks for the chart download",
                  "shorthand": "",
                  "global": false
                },
                "key-file": {
                  "description": "identify HTTPS client using this SSL key file",
                  "shorthand": "",
                  "global": false
                },
                "keyring": {
                  "description": "location of public keys used for verification",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "pass-credentials": {
                  "description": "pass credentials to all domains",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "chart repository password where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "plain-http": {
                  "description": "use insecure HTTP connections for the chart download",
                  "shorthand": "",
                  "global": false
                },
                "prov": {
                  "description": "fetch the provenance file, but don't perform verification",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "repo": {
                  "description": "chart repository url where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "untar": {
                  "description": "if set to true, will untar the chart after downloading it",
                  "shorthand": "",
                  "global": false
                },
                "untardir": {
                  "description": "if untar is specified, this flag specifies the name of the directory into which the chart is expanded",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "chart repository username where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "verify": {
                  "description": "verify the package before using it",
                  "shorthand": "",
                  "global": false
                },
                "version": {
                  "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "registry",
              "description": "login to or logout from a registry",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "login",
                  "description": "login to a registry",
                  "aliases": null,
                  "flags": {
                    "ca-file": {
                      "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                      "shorthand": "",
                      "global": false
                    },
                    "cert-file": {
                      "description": "identify registry client using this SSL certificate file",
                      "shorthand": "",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "insecure": {
                      "description": "allow connections to TLS registry without certs",
                      "shorthand": "",
                      "global": false
                    },
                    "key-file": {
                      "description": "identify registry client using this SSL key file",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "password": {
                      "description": "registry password or identity token",
                      "shorthand": "p",
                      "global": false
                    },
                    "password-stdin": {
                      "description": "read password or identity token from stdin",
                      "shorthand": "",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "registry username",
                      "shorthand": "u",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "logout",
                  "description": "logout from a registry",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "repo",
              "description": "add, list, remove, update, and index chart repositories",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "add",
                  "description": "add a chart repository",
                  "aliases": null,
                  "flags": {
                    "allow-deprecated-repos": {
                      "description": "by default, this command will not allow adding official repos that have been permanently deleted. This disables that behavior",
                      "shorthand": "",
                      "global": false
                    },
                    "ca-file": {
                      "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                      "shorthand": "",
                      "global": false
                    },
                    "cert-file": {
                      "description": "identify HTTPS client using this SSL certificate file",
                      "shorthand": "",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "force-update": {
                      "description": "replace (overwrite) the repo if it already exists",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "insecure-skip-tls-verify": {
                      "description": "skip tls certificate checks for the repository",
                      "shorthand": "",
                      "global": false
                    },
                    "key-file": {
                      "description": "identify HTTPS client using this SSL key file",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "no-update": {
                      "description": "Ignored. Formerly, it would disabled forced updates. It is deprecated by force-update.",
                      "shorthand": "",
                      "global": false
                    },
                    "pass-credentials": {
                      "description": "pass credentials to all domains",
                      "shorthand": "",
                      "global": false
                    },
                    "password": {
                      "description": "chart repository password",
                      "shorthand": "",
                      "global": false
                    },
                    "password-stdin": {
                      "description": "read chart repository password from stdin",
                      "shorthand": "",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "chart repository username",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "index",
                  "description": "generate an index file given a directory containing packaged charts",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "json": {
                      "description": "output in JSON format",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "merge": {
                      "description": "merge the generated index into the given index",
                      "shorthand": "",
                      "global": false
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "url": {
                      "description": "url of chart repository",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "list",
                  "description": "list chart repositories",
                  "aliases": [
                    "ls"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                      "shorthand": "o",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "remove",
                  "description": "remove one or more chart repositories",
                  "aliases": [
                    "rm"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "update",
                  "description": "update information of available charts locally from chart repositories",
                  "aliases": [
                    "up"
                  ],
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "fail-on-repo-update-fail": {
                      "description": "update fails if any of the repository updates fail",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "rollback",
              "description": "roll back a release to a previous revision",
              "aliases": null,
              "flags": {
                "cleanup-on-fail": {
                  "description": "allow deletion of new resources created in this rollback when rollback fails",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "deploy-report-path": {
                  "description": "save deploy report in JSON to the specified path",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "simulate a rollback",
                  "shorthand": "",
                  "global": false
                },
                "force": {
                  "description": "force resource update through delete/recreate if needed",
                  "shorthand": "",
                  "global": false
                },
                "history-max": {
                  "description": "limit the maximum number of revisions saved per release. Use 0 for no limit",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "no-hooks": {
                  "description": "prevent hooks from running during rollback",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "recreate-pods": {
                  "description": "performs pods restart for the resource if applicable",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "timeout": {
                  "description": "time to wait for any individual Kubernetes operation (like Jobs for hooks)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "wait": {
                  "description": "if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                },
                "wait-for-jobs": {
                  "description": "if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "search",
              "description": "search for a keyword in charts",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "hub",
                  "description": "search for charts in the Artifact Hub or your own hub instance",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "endpoint": {
                      "description": "Hub instance to query for charts",
                      "shorthand": "",
                      "global": false
                    },
                    "fail-on-no-result": {
                      "description": "search fails if no results are found",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "list-repo-url": {
                      "description": "print charts repository URL",
                      "shorthand": "",
                      "global": false
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "max-col-width": {
                      "description": "maximum column width for output table",
                      "shorthand": "",
                      "global": false
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                      "shorthand": "o",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "repo",
                  "description": "search repositories for a keyword in charts",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "devel": {
                      "description": "use development versions (alpha, beta, and release candidate releases), too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                      "shorthand": "",
                      "global": false
                    },
                    "fail-on-no-result": {
                      "description": "search fails if no results are found",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "max-col-width": {
                      "description": "maximum column width for output table",
                      "shorthand": "",
                      "global": false
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                      "shorthand": "o",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "regexp": {
                      "description": "use regular expressions for searching repositories you have added",
                      "shorthand": "r",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "version": {
                      "description": "search using semantic versioning constraints on repositories you have added",
                      "shorthand": "",
                      "global": false
                    },
                    "versions": {
                      "description": "show the long listing, with each version of each chart on its own line, for repositories you have added",
                      "shorthand": "l",
                      "global": false
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "secret",
              "description": "Work with secrets",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "decrypt",
                  "description": "Decrypt data",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": false
                    },
                    "dev": {
                      "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                      "shorthand": "",
                      "global": false
                    },
                    "dev-branch": {
                      "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                      "shorthand": "",
                      "global": false
                    },
                    "dev-ignore": {
                      "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                      "shorthand": "",
                      "global": false
                    },
                    "dir": {
                      "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                      "shorthand": "",
                      "global": false
                    },
                    "home-dir": {
                      "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": false
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": false
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": false
                    },
                    "loose-giterminism": {
                      "description": "Loose werf giterminism mode restrictions",
                      "shorthand": "",
                      "global": false
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output-file-path": {
                      "description": "Write to file instead of stdout",
                      "shorthand": "o",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "tmp-dir": {
                      "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "encrypt",
                  "description": "Encrypt data",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": false
                    },
                    "dev": {
                      "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                      "shorthand": "",
                      "global": false
                    },
                    "dev-branch": {
                      "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                      "shorthand": "",
                      "global": false
                    },
                    "dev-ignore": {
                      "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                      "shorthand": "",
                      "global": false
                    },
                    "dir": {
                      "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                      "shorthand": "",
                      "global": false
                    },
                    "home-dir": {
                      "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": false
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": false
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": false
                    },
                    "loose-giterminism": {
                      "description": "Loose werf giterminism mode restrictions",
                      "shorthand": "",
                      "global": false
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output-file-path": {
                      "description": "Write to file instead of stdout",
                      "shorthand": "o",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "tmp-dir": {
                      "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "file",
                  "description": "Work with secret files",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": [
                    {
                      "name": "decrypt",
                      "description": "Decrypt secret file data",
                      "aliases": null,
                      "flags": {
                        "debug": {
                          "description": "Enable debug (default $WERF_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "dev": {
                          "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-branch": {
                          "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-ignore": {
                          "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                          "shorthand": "",
                          "global": false
                        },
                        "dir": {
                          "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                          "shorthand": "",
                          "global": false
                        },
                        "home-dir": {
                          "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                          "shorthand": "",
                          "global": false
                        },
                        "hooks-status-progress-period": {
                          "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config": {
                          "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config-base64": {
                          "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-context": {
                          "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                          "shorthand": "",
                          "global": true
                        },
                        "log-color-mode": {
                          "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                          "shorthand": "",
                          "global": false
                        },
                        "log-debug": {
                          "description": "Enable debug (default $WERF_LOG_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-pretty": {
                          "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-quiet": {
                          "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-terminal-width": {
                          "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time": {
                          "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time-format": {
                          "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-verbose": {
                          "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        },
                        "loose-giterminism": {
                          "description": "Loose werf giterminism mode restrictions",
                          "shorthand": "",
                          "global": false
                        },
                        "namespace": {
                          "description": "namespace scope for this request",
                          "shorthand": "n",
                          "global": true
                        },
                        "output-file-path": {
                          "description": "Write to file instead of stdout",
                          "shorthand": "o",
                          "global": false
                        },
                        "quiet": {
                          "description": "Disable explanatory output (default $WERF_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "status-progress-period": {
                          "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                          "shorthand": "",
                          "global": true
                        },
                        "tmp-dir": {
                          "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                          "shorthand": "",
                          "global": false
                        },
                        "verbose": {
                          "description": "Enable verbose output (default $WERF_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        }
                      },
                      "subcommands": null
                    },
                    {
                      "name": "edit",
                      "description": "Edit or create new secret file",
                      "aliases": null,
                      "flags": {
                        "debug": {
                          "description": "Enable debug (default $WERF_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "dev": {
                          "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-branch": {
                          "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-ignore": {
                          "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                          "shorthand": "",
                          "global": false
                        },
                        "dir": {
                          "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                          "shorthand": "",
                          "global": false
                        },
                        "home-dir": {
                          "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                          "shorthand": "",
                          "global": false
                        },
                        "hooks-status-progress-period": {
                          "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config": {
                          "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config-base64": {
                          "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-context": {
                          "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                          "shorthand": "",
                          "global": true
                        },
                        "log-color-mode": {
                          "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                          "shorthand": "",
                          "global": false
                        },
                        "log-debug": {
                          "description": "Enable debug (default $WERF_LOG_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-pretty": {
                          "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-quiet": {
                          "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-terminal-width": {
                          "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time": {
                          "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time-format": {
                          "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-verbose": {
                          "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        },
                        "loose-giterminism": {
                          "description": "Loose werf giterminism mode restrictions",
                          "shorthand": "",
                          "global": false
                        },
                        "namespace": {
                          "description": "namespace scope for this request",
                          "shorthand": "n",
                          "global": true
                        },
                        "quiet": {
                          "description": "Disable explanatory output (default $WERF_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "status-progress-period": {
                          "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                          "shorthand": "",
                          "global": true
                        },
                        "tmp-dir": {
                          "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                          "shorthand": "",
                          "global": false
                        },
                        "verbose": {
                          "description": "Enable verbose output (default $WERF_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        }
                      },
                      "subcommands": null
                    },
                    {
                      "name": "encrypt",
                      "description": "Encrypt file data",
                      "aliases": null,
                      "flags": {
                        "debug": {
                          "description": "Enable debug (default $WERF_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "dev": {
                          "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-branch": {
                          "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-ignore": {
                          "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                          "shorthand": "",
                          "global": false
                        },
                        "dir": {
                          "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                          "shorthand": "",
                          "global": false
                        },
                        "home-dir": {
                          "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                          "shorthand": "",
                          "global": false
                        },
                        "hooks-status-progress-period": {
                          "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config": {
                          "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config-base64": {
                          "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-context": {
                          "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                          "shorthand": "",
                          "global": true
                        },
                        "log-color-mode": {
                          "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                          "shorthand": "",
                          "global": false
                        },
                        "log-debug": {
                          "description": "Enable debug (default $WERF_LOG_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-pretty": {
                          "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-quiet": {
                          "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-terminal-width": {
                          "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time": {
                          "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time-format": {
                          "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-verbose": {
                          "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        },
                        "loose-giterminism": {
                          "description": "Loose werf giterminism mode restrictions",
                          "shorthand": "",
                          "global": false
                        },
                        "namespace": {
                          "description": "namespace scope for this request",
                          "shorthand": "n",
                          "global": true
                        },
                        "output-file-path": {
                          "description": "Write to file instead of stdout",
                          "shorthand": "o",
                          "global": false
                        },
                        "quiet": {
                          "description": "Disable explanatory output (default $WERF_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "status-progress-period": {
                          "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                          "shorthand": "",
                          "global": true
                        },
                        "tmp-dir": {
                          "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                          "shorthand": "",
                          "global": false
                        },
                        "verbose": {
                          "description": "Enable verbose output (default $WERF_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        }
                      },
                      "subcommands": null
                    }
                  ]
                },
                {
                  "name": "generate-secret-key",
                  "description": "Generate hex encryption key",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": false
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": false
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": false
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "rotate-secret-key",
                  "description": "Regenerate secret files with new secret key",
                  "aliases": null,
                  "flags": {
                    "config": {
                      "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                      "shorthand": "",
                      "global": false
                    },
                    "config-templates-dir": {
                      "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                      "shorthand": "",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": false
                    },
                    "dev": {
                      "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                      "shorthand": "",
                      "global": false
                    },
                    "dev-branch": {
                      "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                      "shorthand": "",
                      "global": false
                    },
                    "dev-ignore": {
                      "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                      "shorthand": "",
                      "global": false
                    },
                    "dir": {
                      "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                      "shorthand": "",
                      "global": false
                    },
                    "env": {
                      "description": "Use specified environment (default $WERF_ENV)",
                      "shorthand": "",
                      "global": false
                    },
                    "git-work-tree": {
                      "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                      "shorthand": "",
                      "global": false
                    },
                    "giterminism-config": {
                      "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                      "shorthand": "",
                      "global": false
                    },
                    "home-dir": {
                      "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": false
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": false
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": false
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": false
                    },
                    "loose-giterminism": {
                      "description": "Loose werf giterminism mode restrictions",
                      "shorthand": "",
                      "global": false
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "tmp-dir": {
                      "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "values",
                  "description": "Work with secret values files",
                  "aliases": null,
                  "flags": {
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": [
                    {
                      "name": "decrypt",
                      "description": "Decrypt secret values file data",
                      "aliases": null,
                      "flags": {
                        "debug": {
                          "description": "Enable debug (default $WERF_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "dev": {
                          "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-branch": {
                          "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-ignore": {
                          "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                          "shorthand": "",
                          "global": false
                        },
                        "dir": {
                          "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                          "shorthand": "",
                          "global": false
                        },
                        "home-dir": {
                          "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                          "shorthand": "",
                          "global": false
                        },
                        "hooks-status-progress-period": {
                          "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config": {
                          "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config-base64": {
                          "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-context": {
                          "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                          "shorthand": "",
                          "global": true
                        },
                        "log-color-mode": {
                          "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                          "shorthand": "",
                          "global": false
                        },
                        "log-debug": {
                          "description": "Enable debug (default $WERF_LOG_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-pretty": {
                          "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-quiet": {
                          "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-terminal-width": {
                          "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time": {
                          "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time-format": {
                          "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-verbose": {
                          "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        },
                        "loose-giterminism": {
                          "description": "Loose werf giterminism mode restrictions",
                          "shorthand": "",
                          "global": false
                        },
                        "namespace": {
                          "description": "namespace scope for this request",
                          "shorthand": "n",
                          "global": true
                        },
                        "output-file-path": {
                          "description": "Write to file instead of stdout",
                          "shorthand": "o",
                          "global": false
                        },
                        "quiet": {
                          "description": "Disable explanatory output (default $WERF_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "status-progress-period": {
                          "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                          "shorthand": "",
                          "global": true
                        },
                        "tmp-dir": {
                          "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                          "shorthand": "",
                          "global": false
                        },
                        "verbose": {
                          "description": "Enable verbose output (default $WERF_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        }
                      },
                      "subcommands": null
                    },
                    {
                      "name": "edit",
                      "description": "Edit or create new secret values file",
                      "aliases": null,
                      "flags": {
                        "debug": {
                          "description": "Enable debug (default $WERF_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "dev": {
                          "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-branch": {
                          "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-ignore": {
                          "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                          "shorthand": "",
                          "global": false
                        },
                        "dir": {
                          "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                          "shorthand": "",
                          "global": false
                        },
                        "home-dir": {
                          "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                          "shorthand": "",
                          "global": false
                        },
                        "hooks-status-progress-period": {
                          "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config": {
                          "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config-base64": {
                          "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-context": {
                          "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                          "shorthand": "",
                          "global": true
                        },
                        "log-color-mode": {
                          "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                          "shorthand": "",
                          "global": false
                        },
                        "log-debug": {
                          "description": "Enable debug (default $WERF_LOG_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-pretty": {
                          "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-quiet": {
                          "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-terminal-width": {
                          "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time": {
                          "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time-format": {
                          "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-verbose": {
                          "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        },
                        "loose-giterminism": {
                          "description": "Loose werf giterminism mode restrictions",
                          "shorthand": "",
                          "global": false
                        },
                        "namespace": {
                          "description": "namespace scope for this request",
                          "shorthand": "n",
                          "global": true
                        },
                        "quiet": {
                          "description": "Disable explanatory output (default $WERF_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "status-progress-period": {
                          "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                          "shorthand": "",
                          "global": true
                        },
                        "tmp-dir": {
                          "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                          "shorthand": "",
                          "global": false
                        },
                        "verbose": {
                          "description": "Enable verbose output (default $WERF_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        }
                      },
                      "subcommands": null
                    },
                    {
                      "name": "encrypt",
                      "description": "Encrypt values file data",
                      "aliases": null,
                      "flags": {
                        "debug": {
                          "description": "Enable debug (default $WERF_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "dev": {
                          "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-branch": {
                          "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                          "shorthand": "",
                          "global": false
                        },
                        "dev-ignore": {
                          "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                          "shorthand": "",
                          "global": false
                        },
                        "dir": {
                          "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                          "shorthand": "",
                          "global": false
                        },
                        "home-dir": {
                          "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                          "shorthand": "",
                          "global": false
                        },
                        "hooks-status-progress-period": {
                          "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config": {
                          "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-config-base64": {
                          "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                          "shorthand": "",
                          "global": true
                        },
                        "kube-context": {
                          "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                          "shorthand": "",
                          "global": true
                        },
                        "log-color-mode": {
                          "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                          "shorthand": "",
                          "global": false
                        },
                        "log-debug": {
                          "description": "Enable debug (default $WERF_LOG_DEBUG).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-pretty": {
                          "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-quiet": {
                          "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-terminal-width": {
                          "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time": {
                          "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-time-format": {
                          "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                          "shorthand": "",
                          "global": false
                        },
                        "log-verbose": {
                          "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        },
                        "loose-giterminism": {
                          "description": "Loose werf giterminism mode restrictions",
                          "shorthand": "",
                          "global": false
                        },
                        "namespace": {
                          "description": "namespace scope for this request",
                          "shorthand": "n",
                          "global": true
                        },
                        "output-file-path": {
                          "description": "Write to file instead of stdout",
                          "shorthand": "o",
                          "global": false
                        },
                        "quiet": {
                          "description": "Disable explanatory output (default $WERF_QUIET).",
                          "shorthand": "",
                          "global": false
                        },
                        "status-progress-period": {
                          "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                          "shorthand": "",
                          "global": true
                        },
                        "tmp-dir": {
                          "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                          "shorthand": "",
                          "global": false
                        },
                        "verbose": {
                          "description": "Enable verbose output (default $WERF_VERBOSE).",
                          "shorthand": "",
                          "global": false
                        }
                      },
                      "subcommands": null
                    }
                  ]
                }
              ]
            },
            {
              "name": "show",
              "description": "show information of a chart",
              "aliases": [
                "inspect"
              ],
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "all",
                  "description": "show all information of the chart",
                  "aliases": null,
                  "flags": {
                    "ca-file": {
                      "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                      "shorthand": "",
                      "global": false
                    },
                    "cert-file": {
                      "description": "identify HTTPS client using this SSL certificate file",
                      "shorthand": "",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "devel": {
                      "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "insecure-skip-tls-verify": {
                      "description": "skip tls certificate checks for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "key-file": {
                      "description": "identify HTTPS client using this SSL key file",
                      "shorthand": "",
                      "global": false
                    },
                    "keyring": {
                      "description": "location of public keys used for verification",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "pass-credentials": {
                      "description": "pass credentials to all domains",
                      "shorthand": "",
                      "global": false
                    },
                    "password": {
                      "description": "chart repository password where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "plain-http": {
                      "description": "use insecure HTTP connections for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "repo": {
                      "description": "chart repository url where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "chart repository username where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "verify": {
                      "description": "verify the package before using it",
                      "shorthand": "",
                      "global": false
                    },
                    "version": {
                      "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "chart",
                  "description": "show the chart's definition",
                  "aliases": null,
                  "flags": {
                    "ca-file": {
                      "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                      "shorthand": "",
                      "global": false
                    },
                    "cert-file": {
                      "description": "identify HTTPS client using this SSL certificate file",
                      "shorthand": "",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "devel": {
                      "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "insecure-skip-tls-verify": {
                      "description": "skip tls certificate checks for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "key-file": {
                      "description": "identify HTTPS client using this SSL key file",
                      "shorthand": "",
                      "global": false
                    },
                    "keyring": {
                      "description": "location of public keys used for verification",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "pass-credentials": {
                      "description": "pass credentials to all domains",
                      "shorthand": "",
                      "global": false
                    },
                    "password": {
                      "description": "chart repository password where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "plain-http": {
                      "description": "use insecure HTTP connections for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "repo": {
                      "description": "chart repository url where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "chart repository username where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "verify": {
                      "description": "verify the package before using it",
                      "shorthand": "",
                      "global": false
                    },
                    "version": {
                      "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "crds",
                  "description": "show the chart's CRDs",
                  "aliases": null,
                  "flags": {
                    "ca-file": {
                      "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                      "shorthand": "",
                      "global": false
                    },
                    "cert-file": {
                      "description": "identify HTTPS client using this SSL certificate file",
                      "shorthand": "",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "devel": {
                      "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "insecure-skip-tls-verify": {
                      "description": "skip tls certificate checks for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "key-file": {
                      "description": "identify HTTPS client using this SSL key file",
                      "shorthand": "",
                      "global": false
                    },
                    "keyring": {
                      "description": "location of public keys used for verification",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "pass-credentials": {
                      "description": "pass credentials to all domains",
                      "shorthand": "",
                      "global": false
                    },
                    "password": {
                      "description": "chart repository password where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "plain-http": {
                      "description": "use insecure HTTP connections for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "repo": {
                      "description": "chart repository url where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "chart repository username where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "verify": {
                      "description": "verify the package before using it",
                      "shorthand": "",
                      "global": false
                    },
                    "version": {
                      "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "readme",
                  "description": "show the chart's README",
                  "aliases": null,
                  "flags": {
                    "ca-file": {
                      "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                      "shorthand": "",
                      "global": false
                    },
                    "cert-file": {
                      "description": "identify HTTPS client using this SSL certificate file",
                      "shorthand": "",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "devel": {
                      "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "insecure-skip-tls-verify": {
                      "description": "skip tls certificate checks for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "key-file": {
                      "description": "identify HTTPS client using this SSL key file",
                      "shorthand": "",
                      "global": false
                    },
                    "keyring": {
                      "description": "location of public keys used for verification",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "pass-credentials": {
                      "description": "pass credentials to all domains",
                      "shorthand": "",
                      "global": false
                    },
                    "password": {
                      "description": "chart repository password where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "plain-http": {
                      "description": "use insecure HTTP connections for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "repo": {
                      "description": "chart repository url where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "chart repository username where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "verify": {
                      "description": "verify the package before using it",
                      "shorthand": "",
                      "global": false
                    },
                    "version": {
                      "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "values",
                  "description": "show the chart's values",
                  "aliases": null,
                  "flags": {
                    "ca-file": {
                      "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                      "shorthand": "",
                      "global": false
                    },
                    "cert-file": {
                      "description": "identify HTTPS client using this SSL certificate file",
                      "shorthand": "",
                      "global": false
                    },
                    "debug": {
                      "description": "Enable debug (default $WERF_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "devel": {
                      "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                      "shorthand": "",
                      "global": false
                    },
                    "hooks-status-progress-period": {
                      "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                      "shorthand": "",
                      "global": true
                    },
                    "insecure-skip-tls-verify": {
                      "description": "skip tls certificate checks for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "jsonpath": {
                      "description": "supply a JSONPath expression to filter the output",
                      "shorthand": "",
                      "global": false
                    },
                    "key-file": {
                      "description": "identify HTTPS client using this SSL key file",
                      "shorthand": "",
                      "global": false
                    },
                    "keyring": {
                      "description": "location of public keys used for verification",
                      "shorthand": "",
                      "global": false
                    },
                    "kube-config": {
                      "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-config-base64": {
                      "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                      "shorthand": "",
                      "global": true
                    },
                    "kube-context": {
                      "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                      "shorthand": "",
                      "global": true
                    },
                    "log-color-mode": {
                      "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-debug": {
                      "description": "Enable debug (default $WERF_LOG_DEBUG).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-pretty": {
                      "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-quiet": {
                      "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-terminal-width": {
                      "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time": {
                      "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-time-format": {
                      "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                      "shorthand": "",
                      "global": true
                    },
                    "log-verbose": {
                      "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "namespace scope for this request",
                      "shorthand": "n",
                      "global": true
                    },
                    "pass-credentials": {
                      "description": "pass credentials to all domains",
                      "shorthand": "",
                      "global": false
                    },
                    "password": {
                      "description": "chart repository password where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "plain-http": {
                      "description": "use insecure HTTP connections for the chart download",
                      "shorthand": "",
                      "global": false
                    },
                    "quiet": {
                      "description": "Disable explanatory output (default $WERF_QUIET).",
                      "shorthand": "",
                      "global": true
                    },
                    "repo": {
                      "description": "chart repository url where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "status-progress-period": {
                      "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "chart repository username where to locate the requested chart",
                      "shorthand": "",
                      "global": false
                    },
                    "verbose": {
                      "description": "Enable verbose output (default $WERF_VERBOSE).",
                      "shorthand": "",
                      "global": true
                    },
                    "verify": {
                      "description": "verify the package before using it",
                      "shorthand": "",
                      "global": false
                    },
                    "version": {
                      "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                      "shorthand": "",
                      "global": false
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "status",
              "description": "display the status of the named release",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                  "shorthand": "o",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "revision": {
                  "description": "if set, display the status of the named release with revision",
                  "shorthand": "",
                  "global": false
                },
                "show-desc": {
                  "description": "if set, display the description message of the named release",
                  "shorthand": "",
                  "global": false
                },
                "show-resources": {
                  "description": "if set, display the resources of the named release",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "template",
              "description": "locally render templates",
              "aliases": null,
              "flags": {
                "add-annotation": {
                  "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
                  "shorthand": "",
                  "global": false
                },
                "add-label": {
                  "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
                  "shorthand": "",
                  "global": false
                },
                "api-versions": {
                  "description": "Kubernetes api versions used for Capabilities.APIVersions",
                  "shorthand": "a",
                  "global": false
                },
                "atomic": {
                  "description": "if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used",
                  "shorthand": "",
                  "global": false
                },
                "ca-file": {
                  "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                  "shorthand": "",
                  "global": false
                },
                "cert-file": {
                  "description": "identify HTTPS client using this SSL certificate file",
                  "shorthand": "",
                  "global": false
                },
                "cleanup-on-fail": {
                  "description": "allow deletion of new resources created in this installation when install fails",
                  "shorthand": "",
                  "global": false
                },
                "create-namespace": {
                  "description": "create the release namespace if not present",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "dependency-update": {
                  "description": "update dependencies if they are missing before installing the chart",
                  "shorthand": "",
                  "global": false
                },
                "deploy-report-path": {
                  "description": "save deploy report in JSON to the specified path",
                  "shorthand": "",
                  "global": false
                },
                "description": {
                  "description": "add a custom description",
                  "shorthand": "",
                  "global": false
                },
                "devel": {
                  "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                  "shorthand": "",
                  "global": false
                },
                "disable-openapi-validation": {
                  "description": "if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.",
                  "shorthand": "",
                  "global": false
                },
                "enable-dns": {
                  "description": "enable DNS lookups when rendering templates",
                  "shorthand": "",
                  "global": false
                },
                "force": {
                  "description": "force resource updates through a replacement strategy",
                  "shorthand": "",
                  "global": false
                },
                "generate-name": {
                  "description": "generate the name (and omit the NAME parameter)",
                  "shorthand": "g",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "ignore-secret-key": {
                  "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
                  "shorthand": "",
                  "global": false
                },
                "include-crds": {
                  "description": "include CRDs in the templated output",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "skip tls certificate checks for the chart download",
                  "shorthand": "",
                  "global": false
                },
                "is-upgrade": {
                  "description": "set .Release.IsUpgrade instead of .Release.IsInstall",
                  "shorthand": "",
                  "global": false
                },
                "key-file": {
                  "description": "identify HTTPS client using this SSL key file",
                  "shorthand": "",
                  "global": false
                },
                "keyring": {
                  "description": "location of public keys used for verification",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "kube-version": {
                  "description": "Kubernetes version used for Capabilities.KubeVersion",
                  "shorthand": "",
                  "global": false
                },
                "labels": {
                  "description": "Labels that would be added to release metadata. Should be divided by comma.",
                  "shorthand": "l",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "name-template": {
                  "description": "specify template used to name the release",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "no-hooks": {
                  "description": "prevent hooks from running during install",
                  "shorthand": "",
                  "global": false
                },
                "output-dir": {
                  "description": "writes the executed templates to files in output-dir instead of stdout",
                  "shorthand": "",
                  "global": false
                },
                "pass-credentials": {
                  "description": "pass credentials to all domains",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "chart repository password where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "plain-http": {
                  "description": "use insecure HTTP connections for the chart download",
                  "shorthand": "",
                  "global": false
                },
                "post-renderer": {
                  "description": "the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path",
                  "shorthand": "",
                  "global": false
                },
                "post-renderer-args": {
                  "description": "an argument to the post-renderer (can specify multiple)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "release-name": {
                  "description": "use release name in the output-dir path.",
                  "shorthand": "",
                  "global": false
                },
                "render-subchart-notes": {
                  "description": "if set, render subchart notes along with the parent",
                  "shorthand": "",
                  "global": false
                },
                "replace": {
                  "description": "re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "chart repository url where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "secret-values": {
                  "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=.helm/secret_values_test.yaml, $WERF_SECRET_VALUES_DB=.helm/secret_values_db.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "set": {
                  "description": "set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-file": {
                  "description": "set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)",
                  "shorthand": "",
                  "global": false
                },
                "set-json": {
                  "description": "set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)",
                  "shorthand": "",
                  "global": false
                },
                "set-literal": {
                  "description": "set a literal STRING value on the command line",
                  "shorthand": "",
                  "global": false
                },
                "set-string": {
                  "description": "set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "show-only": {
                  "description": "only show manifests rendered from the given templates",
                  "shorthand": "s",
                  "global": false
                },
                "skip-crds": {
                  "description": "if set, no CRDs will be installed. By default, CRDs are installed if not already present",
                  "shorthand": "",
                  "global": false
                },
                "skip-tests": {
                  "description": "skip tests from templated output",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "timeout": {
                  "description": "time to wait for any individual Kubernetes operation (like Jobs for hooks)",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "chart repository username where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "validate": {
                  "description": "validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install",
                  "shorthand": "",
                  "global": false
                },
                "values": {
                  "description": "specify values in a YAML file or a URL (can specify multiple)",
                  "shorthand": "f",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "verify": {
                  "description": "verify the package before using it",
                  "shorthand": "",
                  "global": false
                },
                "version": {
                  "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                  "shorthand": "",
                  "global": false
                },
                "wait": {
                  "description": "if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                },
                "wait-for-jobs": {
                  "description": "if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "test",
              "description": "run tests for a release",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "filter": {
                  "description": "specify tests by attribute (currently \"name\") using attribute=value syntax or '!attribute=value' to exclude a test (can specify multiple or separate values with commas: name=test1,name=test2)",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "logs": {
                  "description": "dump the logs from test pods (this runs after all tests are complete, but before any cleanup)",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "timeout": {
                  "description": "time to wait for any individual Kubernetes operation (like Jobs for hooks)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "uninstall",
              "description": "uninstall a release",
              "aliases": [
                "del",
                "delete",
                "un"
              ],
              "flags": {
                "cascade": {
                  "description": "Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents. Defaults to background.",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "description": {
                  "description": "add a custom description",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "simulate a uninstall",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "ignore-not-found": {
                  "description": "Treat \"release not found\" as a successful uninstall",
                  "shorthand": "",
                  "global": false
                },
                "keep-history": {
                  "description": "remove all associated resources and mark the release as deleted, but retain the release history",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "no-hooks": {
                  "description": "prevent hooks from running during uninstallation",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "timeout": {
                  "description": "time to wait for any individual Kubernetes operation (like Jobs for hooks)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "wait": {
                  "description": "if set, will wait until all the resources are deleted before returning. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "upgrade",
              "description": "upgrade a release",
              "aliases": null,
              "flags": {
                "add-annotation": {
                  "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
                  "shorthand": "",
                  "global": false
                },
                "add-label": {
                  "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
                  "shorthand": "",
                  "global": false
                },
                "atomic": {
                  "description": "if set, upgrade process rolls back changes made in case of failed upgrade. The --wait flag will be set automatically if --atomic is used",
                  "shorthand": "",
                  "global": false
                },
                "ca-file": {
                  "description": "verify certificates of HTTPS-enabled servers using this CA bundle",
                  "shorthand": "",
                  "global": false
                },
                "cert-file": {
                  "description": "identify HTTPS client using this SSL certificate file",
                  "shorthand": "",
                  "global": false
                },
                "cleanup-on-fail": {
                  "description": "allow deletion of new resources created in this upgrade when upgrade fails",
                  "shorthand": "",
                  "global": false
                },
                "create-namespace": {
                  "description": "if --install is set, create the release namespace if not present",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "dependency-update": {
                  "description": "update dependencies if they are missing before installing the chart",
                  "shorthand": "",
                  "global": false
                },
                "deploy-report-path": {
                  "description": "save deploy report in JSON to the specified path",
                  "shorthand": "",
                  "global": false
                },
                "description": {
                  "description": "add a custom description",
                  "shorthand": "",
                  "global": false
                },
                "devel": {
                  "description": "use development versions, too. Equivalent to version '\u003e0.0.0-0'. If --version is set, this is ignored",
                  "shorthand": "",
                  "global": false
                },
                "disable-openapi-validation": {
                  "description": "if set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.",
                  "shorthand": "",
                  "global": false
                },
                "enable-dns": {
                  "description": "enable DNS lookups when rendering templates",
                  "shorthand": "",
                  "global": false
                },
                "force": {
                  "description": "force resource updates through a replacement strategy",
                  "shorthand": "",
                  "global": false
                },
                "history-max": {
                  "description": "limit the maximum number of revisions saved per release. Use 0 for no limit",
                  "shorthand": "",
                  "global": false
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "ignore-secret-key": {
                  "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "skip tls certificate checks for the chart download",
                  "shorthand": "",
                  "global": false
                },
                "install": {
                  "description": "if a release by this name doesn't already exist, run an install",
                  "shorthand": "i",
                  "global": false
                },
                "key-file": {
                  "description": "identify HTTPS client using this SSL key file",
                  "shorthand": "",
                  "global": false
                },
                "keyring": {
                  "description": "location of public keys used for verification",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "labels": {
                  "description": "Labels that would be added to release metadata. Should be separated by comma. Original release labels will be merged with upgrade labels. You can unset label using null.",
                  "shorthand": "l",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "no-hooks": {
                  "description": "disable pre/post upgrade hooks",
                  "shorthand": "",
                  "global": false
                },
                "output": {
                  "description": "prints the output in the specified format. Allowed values: table, json, yaml",
                  "shorthand": "o",
                  "global": false
                },
                "pass-credentials": {
                  "description": "pass credentials to all domains",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "chart repository password where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "plain-http": {
                  "description": "use insecure HTTP connections for the chart download",
                  "shorthand": "",
                  "global": false
                },
                "post-renderer": {
                  "description": "the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path",
                  "shorthand": "",
                  "global": false
                },
                "post-renderer-args": {
                  "description": "an argument to the post-renderer (can specify multiple)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "recreate-pods": {
                  "description": "performs pods restart for the resource if applicable",
                  "shorthand": "",
                  "global": false
                },
                "render-subchart-notes": {
                  "description": "if set, render subchart notes along with the parent",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "chart repository url where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "reset-then-reuse-values": {
                  "description": "when upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored",
                  "shorthand": "",
                  "global": false
                },
                "reset-values": {
                  "description": "when upgrading, reset the values to the ones built into the chart",
                  "shorthand": "",
                  "global": false
                },
                "reuse-values": {
                  "description": "when upgrading, reuse the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' is specified, this is ignored",
                  "shorthand": "",
                  "global": false
                },
                "secret-values": {
                  "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=.helm/secret_values_test.yaml, $WERF_SECRET_VALUES_DB=.helm/secret_values_db.yaml)",
                  "shorthand": "",
                  "global": false
                },
                "set": {
                  "description": "set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "set-file": {
                  "description": "set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)",
                  "shorthand": "",
                  "global": false
                },
                "set-json": {
                  "description": "set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)",
                  "shorthand": "",
                  "global": false
                },
                "set-literal": {
                  "description": "set a literal STRING value on the command line",
                  "shorthand": "",
                  "global": false
                },
                "set-string": {
                  "description": "set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)",
                  "shorthand": "",
                  "global": false
                },
                "skip-crds": {
                  "description": "if set, no CRDs will be installed when an upgrade is performed with install flag enabled. By default, CRDs are installed if not already present, when an upgrade is performed with install flag enabled",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "timeout": {
                  "description": "time to wait for any individual Kubernetes operation (like Jobs for hooks)",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "chart repository username where to locate the requested chart",
                  "shorthand": "",
                  "global": false
                },
                "values": {
                  "description": "specify values in a YAML file or a URL (can specify multiple)",
                  "shorthand": "f",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "verify": {
                  "description": "verify the package before using it",
                  "shorthand": "",
                  "global": false
                },
                "version": {
                  "description": "specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used",
                  "shorthand": "",
                  "global": false
                },
                "wait": {
                  "description": "if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                },
                "wait-for-jobs": {
                  "description": "if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "verify",
              "description": "verify that a chart at the given path has been signed and is valid",
              "aliases": null,
              "flags": {
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "keyring": {
                  "description": "keyring containing public keys",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "version",
              "description": "print the client version information",
              "aliases": null,
              "flags": {
                "client": {
                  "description": "display client version information",
                  "shorthand": "c",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "hooks-status-progress-period": {
                  "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
                  "shorthand": "",
                  "global": true
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": true
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": true
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": true
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": true
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": true
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": true
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": true
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": true
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": true
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace scope for this request",
                  "shorthand": "n",
                  "global": true
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": true
                },
                "short": {
                  "description": "print the version number",
                  "shorthand": "",
                  "global": false
                },
                "status-progress-period": {
                  "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
                  "shorthand": "",
                  "global": true
                },
                "template": {
                  "description": "template for version string format",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "host",
          "description": "Work with werf cache and data of all projects on the host machine",
          "aliases": null,
          "flags": {},
          "subcommands": [
            {
              "name": "cleanup",
              "description": "Cleanup old unused werf cache and data of all projects on host machine.",
              "aliases": null,
              "flags": {
                "allowed-docker-storage-volume-usage": {
                  "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-docker-storage-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage": {
                  "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
                  "shorthand": "",
                  "global": false
                },
                "allowed-local-cache-volume-usage-margin": {
                  "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "disable-auto-host-cleanup": {
                  "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)",
                  "shorthand": "",
                  "global": false
                },
                "docker-server-storage-path": {
                  "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
                  "shorthand": "",
                  "global": false
                },
                "force": {
                  "description": "Force deletion of images which are being used by some containers (default $WERF_FORCE)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "project-name": {
                  "description": "Set a specific project name (default $WERF_PROJECT_NAME)",
                  "shorthand": "N",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "purge",
              "description": "Purge werf images, cache and other data for all projects on host machine",
              "aliases": null,
              "flags": {
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)",
                  "shorthand": "",
                  "global": false
                },
                "dry-run": {
                  "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
                  "shorthand": "",
                  "global": false
                },
                "force": {
                  "description": "First remove containers that use werf docker images which are going to be deleted",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "project-name": {
                  "description": "Set a specific project name (default $WERF_PROJECT_NAME)",
                  "shorthand": "N",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "kube-run",
          "description": "Run container for project image in Kubernetes",
          "aliases": null,
          "flags": {
            "add-annotation": {
              "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
              "shorthand": "",
              "global": false
            },
            "add-label": {
              "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
              "shorthand": "",
              "global": false
            },
            "auto-pull-secret": {
              "description": "Automatically create docker config secret in the namespace and plug it via pod's imagePullSecrets for private registry access (default $WERF_AUTO_PULL_SECRET or true if not specified)",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "copy-from": {
              "description": "Copy file/dir from container to local machine after user command execution. Example: \"/from/file:to\". Can be specified multiple times. Can also be defined with \"$WERF_COPY_FROM_*\", e.g. \"WERF_COPY_FROM_1=from:to\".",
              "shorthand": "",
              "global": false
            },
            "copy-to": {
              "description": "Copy file/dir from local machine to container before user command execution. Example: \"from:/to/file\". Can be specified multiple times. Can also be defined with \"$WERF_COPY_TO_*\", e.g. \"WERF_COPY_TO_1=from:to\".",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and pull images from the specified repo",
              "shorthand": "",
              "global": false
            },
            "dry-run": {
              "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "extra-options": {
              "description": "Pass extra options to \"kubectl run\" command, which will create a Pod (default $WERF_EXTRA_OPTIONS)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "follow": {
              "description": "Enable follow mode (default $WERF_FOLLOW).\nThe mode allows restarting the command on a new commit.\nIn development mode (--dev), werf restarts the command on any changes (including untracked files) in the git repository worktree",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "interactive": {
              "description": "Enable interactive mode (default $WERF_INTERACTIVE or false if not specified)",
              "shorthand": "i",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "Use specified Kubernetes namespace (default [[ project ]]-[[ env ]] template or deploy.namespace custom template from werf.yaml or $WERF_NAMESPACE)",
              "shorthand": "",
              "global": false
            },
            "overrides": {
              "description": "Inline JSON to override/extend any fields in created Pod, e.g. to add imagePullSecrets field (default $WERF_OVERRIDES). %pod_name% and %container_name% will be replaced with names of a created pod and a container.",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "pod": {
              "description": "Set created pod name (default $WERF_POD or autogenerated if not specified)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "require-built-images": {
              "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
              "shorthand": "Z",
              "global": false
            },
            "rm": {
              "description": "Remove pod and other created resources after command completion (default $WERF_RM or true if not specified)",
              "shorthand": "",
              "global": false
            },
            "rm-with-namespace": {
              "description": "Remove also a namespace after command completion (default $WERF_RM_WITH_NAMESPACE or false if not specified)",
              "shorthand": "",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "ssh-key": {
              "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "tty": {
              "description": "Allocate a TTY (default $WERF_TTY or false if not specified)",
              "shorthand": "t",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "virtual-merge": {
              "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "managed-images",
          "description": "Work with managed images which will be preserved during cleanup procedure",
          "aliases": null,
          "flags": {},
          "subcommands": [
            {
              "name": "add",
              "description": "Add image record to the list of managed images which will be preserved during cleanup procedure.",
              "aliases": null,
              "flags": {
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and write images to the specified repo",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "ls",
              "description": "List managed images which will be preserved during cleanup procedure.",
              "aliases": null,
              "flags": {
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read images from the specified repo",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "rm",
              "description": "Remove image record from the list of managed images which will be preserved during cleanup procedure.",
              "aliases": null,
              "flags": {
                "cache-repo": {
                  "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "config": {
                  "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "config-templates-dir": {
                  "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "container-registry-mirror": {
                  "description": "(Buildah-only) Use specified mirrors for docker.io",
                  "shorthand": "",
                  "global": false
                },
                "debug": {
                  "description": "Enable debug (default $WERF_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "dev": {
                  "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
                  "shorthand": "",
                  "global": false
                },
                "dev-branch": {
                  "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
                  "shorthand": "",
                  "global": false
                },
                "dev-ignore": {
                  "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
                  "shorthand": "",
                  "global": false
                },
                "dir": {
                  "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
                  "shorthand": "",
                  "global": false
                },
                "docker-config": {
                  "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and write images to the specified repo",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Use specified environment (default $WERF_ENV)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo": {
                  "description": "Container registry storage address (default $WERF_FINAL_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-container-registry": {
                  "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-password": {
                  "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-token": {
                  "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-docker-hub-username": {
                  "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-github-token": {
                  "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-password": {
                  "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-harbor-username": {
                  "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "final-repo-quay-token": {
                  "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "git-work-tree": {
                  "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
                  "shorthand": "",
                  "global": false
                },
                "giterminism-config": {
                  "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
                  "shorthand": "",
                  "global": false
                },
                "home-dir": {
                  "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-helm-dependencies": {
                  "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-registry": {
                  "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config": {
                  "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
                  "shorthand": "",
                  "global": false
                },
                "kube-config-base64": {
                  "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
                  "shorthand": "",
                  "global": false
                },
                "kube-context": {
                  "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
                  "shorthand": "",
                  "global": false
                },
                "log-color-mode": {
                  "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
                  "shorthand": "",
                  "global": false
                },
                "log-debug": {
                  "description": "Enable debug (default $WERF_LOG_DEBUG).",
                  "shorthand": "",
                  "global": false
                },
                "log-pretty": {
                  "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
                  "shorthand": "",
                  "global": false
                },
                "log-project-dir": {
                  "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
                  "shorthand": "",
                  "global": false
                },
                "log-quiet": {
                  "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "log-terminal-width": {
                  "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
                  "shorthand": "",
                  "global": false
                },
                "log-time": {
                  "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
                  "shorthand": "",
                  "global": false
                },
                "log-time-format": {
                  "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
                  "shorthand": "",
                  "global": false
                },
                "log-verbose": {
                  "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
                  "shorthand": "",
                  "global": false
                },
                "loose-giterminism": {
                  "description": "Loose werf giterminism mode restrictions",
                  "shorthand": "",
                  "global": false
                },
                "platform": {
                  "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
                  "shorthand": "",
                  "global": false
                },
                "quiet": {
                  "description": "Disable explanatory output (default $WERF_QUIET).",
                  "shorthand": "",
                  "global": false
                },
                "repo": {
                  "description": "Container registry storage address (default $WERF_REPO)",
                  "shorthand": "",
                  "global": false
                },
                "repo-container-registry": {
                  "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-password": {
                  "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-token": {
                  "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-docker-hub-username": {
                  "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-github-token": {
                  "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-password": {
                  "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
                  "shorthand": "",
                  "global": false
                },
                "repo-harbor-username": {
                  "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
                  "shorthand": "",
                  "global": false
                },
                "repo-quay-token": {
                  "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
                  "shorthand": "",
                  "global": false
                },
                "secondary-repo": {
                  "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
                  "shorthand": "",
                  "global": false
                },
                "skip-tls-verify-registry": {
                  "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
                  "shorthand": "",
                  "global": false
                },
                "ssh-key": {
                  "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
                  "shorthand": "",
                  "global": false
                },
                "synchronization": {
                  "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
                  "shorthand": "S",
                  "global": false
                },
                "tmp-dir": {
                  "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
                  "shorthand": "",
                  "global": false
                },
                "verbose": {
                  "description": "Enable verbose output (default $WERF_VERBOSE).",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "plan",
          "description": "Prepare deploy plan and show how resources in a Kubernetes cluster would change on next deploy",
          "aliases": null,
          "flags": {
            "add-annotation": {
              "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
              "shorthand": "",
              "global": false
            },
            "add-custom-tag": {
              "description": "Set tag alias for the content-based tag.\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso can be defined with $WERF_ADD_CUSTOM_TAG_* (e.g. $WERF_ADD_CUSTOM_TAG_1=\"%image%-tag1\", $WERF_ADD_CUSTOM_TAG_2=\"%image%-tag2\")",
              "shorthand": "",
              "global": false
            },
            "add-label": {
              "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage": {
              "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage": {
              "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "build-report-path": {
              "description": "Change build report path and format (by default $WERF_BUILD_REPORT_PATH or \".werf-build-report.json\" if not set). Extension must be either .json for JSON format or .env for env-file format. If extension not specified, then .json is used",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "disable-auto-host-cleanup": {
              "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
              "shorthand": "",
              "global": false
            },
            "disable-default-secret-values": {
              "description": "Do not use secret values from the default .helm/secret-values.yaml file (default $WERF_DISABLE_DEFAULT_SECRET_VALUES or false)",
              "shorthand": "",
              "global": false
            },
            "disable-default-values": {
              "description": "Do not use values from the default .helm/values.yaml file (default $WERF_DISABLE_DEFAULT_VALUES or false)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and push images into the specified repo, to pull base images",
              "shorthand": "",
              "global": false
            },
            "docker-server-storage-path": {
              "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "exit-code": {
              "description": "If true, returns exit code 0 if no changes, exit code 2 if any changes planned or exit code 1 in case of an error (default $WERF_EXIT_CODE or false)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "follow": {
              "description": "Enable follow mode (default $WERF_FOLLOW).\nThe mode allows restarting the command on a new commit.\nIn development mode (--dev), werf restarts the command on any changes (including untracked files) in the git repository worktree",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "hooks-status-progress-period": {
              "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
              "shorthand": "",
              "global": false
            },
            "ignore-secret-key": {
              "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "introspect-before-error": {
              "description": "Introspect failed stage in the clean state, before running all assembly instructions of the stage",
              "shorthand": "",
              "global": false
            },
            "introspect-error": {
              "description": "Introspect failed stage in the state, right after running failed assembly instruction",
              "shorthand": "",
              "global": false
            },
            "introspect-stage": {
              "description": "Introspect a specific stage. The option can be used multiple times to introspect several stages.\n\nThere are the following formats to use:\n* specify IMAGE_NAME/STAGE_NAME to introspect stage STAGE_NAME of either image or artifact IMAGE_NAME\n* specify STAGE_NAME or */STAGE_NAME for the introspection of all existing stages with name STAGE_NAME\n\nIMAGE_NAME is the name of an image or artifact described in werf.yaml, the nameless image specified with ~.\nSTAGE_NAME should be one of the following: from, beforeInstall, dependenciesBeforeInstall, gitArchive, install, dependenciesAfterInstall, beforeSetup, dependenciesBeforeSetup, setup, dependenciesAfterSetup, gitCache, gitLatestPatch, dockerInstructions, dockerfile",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "Use specified Kubernetes namespace (default [[ project ]]-[[ env ]] template or deploy.namespace custom template from werf.yaml or $WERF_NAMESPACE)",
              "shorthand": "",
              "global": false
            },
            "network-parallelism": {
              "description": "Parallelize some network operations (default $WERF_NETWORK_PARALLELISM or 30)",
              "shorthand": "",
              "global": false
            },
            "parallel": {
              "description": "Run in parallel (default $WERF_PARALLEL or true)",
              "shorthand": "p",
              "global": false
            },
            "parallel-tasks-limit": {
              "description": "Parallel tasks limit, set -1 to remove the limitation (default $WERF_PARALLEL_TASKS_LIMIT or 5)",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "release": {
              "description": "Use specified Helm release name (default [[ project ]]-[[ env ]] template or deploy.helmRelease custom template from werf.yaml or $WERF_RELEASE)",
              "shorthand": "",
              "global": false
            },
            "releases-history-max": {
              "description": "Max releases to keep in release storage ($WERF_RELEASES_HISTORY_MAX or 5 by default)",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "require-built-images": {
              "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
              "shorthand": "Z",
              "global": false
            },
            "save-build-report": {
              "description": "Save build report (by default $WERF_SAVE_BUILD_REPORT or false). Its path and format configured with --build-report-path",
              "shorthand": "",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "secret-values": {
              "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=.helm/secret_values_test.yaml, $WERF_SECRET_VALUES_DB=.helm/secret_values_db.yaml)",
              "shorthand": "",
              "global": false
            },
            "set": {
              "description": "Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_* (e.g. $WERF_SET_1=key1=val1, $WERF_SET_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "set-docker-config-json-value": {
              "description": "Shortcut to set current docker config into the .Values.dockerconfigjson",
              "shorthand": "",
              "global": false
            },
            "set-file": {
              "description": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2).\nAlso, can be defined with $WERF_SET_FILE_* (e.g. $WERF_SET_FILE_1=key1=path1, $WERF_SET_FILE_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "set-string": {
              "description": "Set STRING helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_STRING_* (e.g. $WERF_SET_STRING_1=key1=val1, $WERF_SET_STRING_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "skip-dependencies-repo-refresh": {
              "description": "Do not refresh helm chart repositories locally cached index",
              "shorthand": "L",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "ssh-key": {
              "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
              "shorthand": "",
              "global": false
            },
            "status-progress-period": {
              "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "timeout": {
              "description": "Resources tracking timeout in seconds ($WERF_TIMEOUT by default)",
              "shorthand": "t",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "use-custom-tag": {
              "description": "Use a tag alias in helm templates instead of an image content-based tag (NOT RECOMMENDED).\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso, can be defined with $WERF_USE_CUSTOM_TAG (e.g. $WERF_USE_CUSTOM_TAG=\"%image%-tag\")",
              "shorthand": "",
              "global": false
            },
            "values": {
              "description": "Specify helm values in a YAML file or a URL (can specify multiple). Also, can be defined with $WERF_VALUES_* (e.g. $WERF_VALUES_1=.helm/values_1.yaml, $WERF_VALUES_2=.helm/values_2.yaml)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "virtual-merge": {
              "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "purge",
          "description": "Purge all project images in the container registry",
          "aliases": null,
          "flags": {
            "allowed-docker-storage-volume-usage": {
              "description": "Set allowed percentage of docker storage volume usage which will cause cleanup of least recently used local docker images (default 70% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-docker-storage-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_DOCKER_STORAGE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage": {
              "description": "Set allowed percentage of local cache (~/.werf/local_cache by default) volume usage which will cause cleanup of least recently used data from the local cache (default 70% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE)",
              "shorthand": "",
              "global": false
            },
            "allowed-local-cache-volume-usage-margin": {
              "description": "During cleanup of least recently used local docker images werf would delete images until volume usage becomes below \"allowed-docker-storage-volume-usage - allowed-docker-storage-volume-usage-margin\" level (default 5% or $WERF_ALLOWED_LOCAL_CACHE_VOLUME_USAGE_MARGIN)",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "disable-auto-host-cleanup": {
              "description": "Disable auto host cleanup procedure in main werf commands like werf-build, werf-converge and other (default disabled or WERF_DISABLE_AUTO_HOST_CLEANUP)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to delete images from the specified repo",
              "shorthand": "",
              "global": false
            },
            "docker-server-storage-path": {
              "description": "Use specified path to the local docker server storage to check docker storage volume usage while performing garbage collection of local docker images (detect local docker server storage path by default or use $WERF_DOCKER_SERVER_STORAGE_PATH)",
              "shorthand": "",
              "global": false
            },
            "dry-run": {
              "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "parallel": {
              "description": "Run in parallel (default $WERF_PARALLEL or true)",
              "shorthand": "p",
              "global": false
            },
            "parallel-tasks-limit": {
              "description": "Parallel tasks limit, set -1 to remove the limitation (default $WERF_PARALLEL_TASKS_LIMIT or 5)",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "render",
          "description": "Render Kubernetes templates",
          "aliases": null,
          "flags": {
            "add-annotation": {
              "description": "Add annotation to deploying resources (can specify multiple).\nFormat: annoName=annoValue.\nAlso, can be specified with $WERF_ADD_ANNOTATION_* (e.g. $WERF_ADD_ANNOTATION_1=annoName1=annoValue1, $WERF_ADD_ANNOTATION_2=annoName2=annoValue2)",
              "shorthand": "",
              "global": false
            },
            "add-label": {
              "description": "Add label to deploying resources (can specify multiple).\nFormat: labelName=labelValue.\nAlso, can be specified with $WERF_ADD_LABEL_* (e.g. $WERF_ADD_LABEL_1=labelName1=labelValue1, $WERF_ADD_LABEL_2=labelName2=labelValue2)",
              "shorthand": "",
              "global": false
            },
            "build-report-path": {
              "description": "Change build report path and format (by default $WERF_BUILD_REPORT_PATH or \".werf-build-report.json\" if not set). Extension must be either .json for JSON format or .env for env-file format. If extension not specified, then .json is used",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "disable-default-secret-values": {
              "description": "Do not use secret values from the default .helm/secret-values.yaml file (default $WERF_DISABLE_DEFAULT_SECRET_VALUES or false)",
              "shorthand": "",
              "global": false
            },
            "disable-default-values": {
              "description": "Do not use values from the default .helm/values.yaml file (default $WERF_DISABLE_DEFAULT_VALUES or false)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read, pull and push images into the specified repo and to pull base images",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "hooks-status-progress-period": {
              "description": "Hooks status progress period in seconds. Set 0 to stop showing hooks status progress. Defaults to $WERF_HOOKS_STATUS_PROGRESS_PERIOD_SECONDS or status progress period value",
              "shorthand": "",
              "global": false
            },
            "ignore-secret-key": {
              "description": "Disable secrets decryption (default $WERF_IGNORE_SECRET_KEY)",
              "shorthand": "",
              "global": false
            },
            "include-crds": {
              "description": "Include CRDs in the templated output (default $WERF_INCLUDE_CRDS)",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "introspect-before-error": {
              "description": "Introspect failed stage in the clean state, before running all assembly instructions of the stage",
              "shorthand": "",
              "global": false
            },
            "introspect-error": {
              "description": "Introspect failed stage in the state, right after running failed assembly instruction",
              "shorthand": "",
              "global": false
            },
            "introspect-stage": {
              "description": "Introspect a specific stage. The option can be used multiple times to introspect several stages.\n\nThere are the following formats to use:\n* specify IMAGE_NAME/STAGE_NAME to introspect stage STAGE_NAME of either image or artifact IMAGE_NAME\n* specify STAGE_NAME or */STAGE_NAME for the introspection of all existing stages with name STAGE_NAME\n\nIMAGE_NAME is the name of an image or artifact described in werf.yaml, the nameless image specified with ~.\nSTAGE_NAME should be one of the following: from, beforeInstall, dependenciesBeforeInstall, gitArchive, install, dependenciesAfterInstall, beforeSetup, dependenciesBeforeSetup, setup, dependenciesAfterSetup, gitCache, gitLatestPatch, dockerInstructions, dockerfile",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "kube-version": {
              "description": "Set specific Capabilities.KubeVersion (default $WERF_KUBE_VERSION)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "Use specified Kubernetes namespace (default [[ project ]]-[[ env ]] template or deploy.namespace custom template from werf.yaml or $WERF_NAMESPACE)",
              "shorthand": "",
              "global": false
            },
            "network-parallelism": {
              "description": "Parallelize some network operations (default $WERF_NETWORK_PARALLELISM or 30)",
              "shorthand": "",
              "global": false
            },
            "output": {
              "description": "Write render output to the specified file instead of stdout ($WERF_RENDER_OUTPUT by default)",
              "shorthand": "",
              "global": false
            },
            "parallel": {
              "description": "Run in parallel (default $WERF_PARALLEL or true)",
              "shorthand": "p",
              "global": false
            },
            "parallel-tasks-limit": {
              "description": "Parallel tasks limit, set -1 to remove the limitation (default $WERF_PARALLEL_TASKS_LIMIT or 5)",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "release": {
              "description": "Use specified Helm release name (default [[ project ]]-[[ env ]] template or deploy.helmRelease custom template from werf.yaml or $WERF_RELEASE)",
              "shorthand": "",
              "global": false
            },
            "releases-history-max": {
              "description": "Max releases to keep in release storage ($WERF_RELEASES_HISTORY_MAX or 5 by default)",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "require-built-images": {
              "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
              "shorthand": "Z",
              "global": false
            },
            "save-build-report": {
              "description": "Save build report (by default $WERF_SAVE_BUILD_REPORT or false). Its path and format configured with --build-report-path",
              "shorthand": "",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "secret-values": {
              "description": "Specify helm secret values in a YAML file (can specify multiple). Also, can be defined with $WERF_SECRET_VALUES_* (e.g. $WERF_SECRET_VALUES_ENV=.helm/secret_values_test.yaml, $WERF_SECRET_VALUES_DB=.helm/secret_values_db.yaml)",
              "shorthand": "",
              "global": false
            },
            "set": {
              "description": "Set helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_* (e.g. $WERF_SET_1=key1=val1, $WERF_SET_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "set-docker-config-json-value": {
              "description": "Shortcut to set current docker config into the .Values.dockerconfigjson",
              "shorthand": "",
              "global": false
            },
            "set-file": {
              "description": "Set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2).\nAlso, can be defined with $WERF_SET_FILE_* (e.g. $WERF_SET_FILE_1=key1=path1, $WERF_SET_FILE_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "set-string": {
              "description": "Set STRING helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2).\nAlso, can be defined with $WERF_SET_STRING_* (e.g. $WERF_SET_STRING_1=key1=val1, $WERF_SET_STRING_2=key2=val2)",
              "shorthand": "",
              "global": false
            },
            "show-only": {
              "description": "only show manifests rendered from the given templates",
              "shorthand": "s",
              "global": false
            },
            "skip-dependencies-repo-refresh": {
              "description": "Do not refresh helm chart repositories locally cached index",
              "shorthand": "L",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "ssh-key": {
              "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
              "shorthand": "",
              "global": false
            },
            "status-progress-period": {
              "description": "Status progress period in seconds. Set -1 to stop showing status progress. Defaults to $WERF_STATUS_PROGRESS_PERIOD_SECONDS or 5 seconds",
              "shorthand": "",
              "global": false
            },
            "stub-tags": {
              "description": "Use stubs instead of real tags (default $WERF_STUB_TAGS)",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "use-custom-tag": {
              "description": "Use a tag alias in helm templates instead of an image content-based tag (NOT RECOMMENDED).\nThe alias may contain the following shortcuts:\n- %image%, %image_slug% or %image_safe_slug% to use the image name (necessary if there is more than one image in the werf config);\n- %image_content_based_tag% to use a content-based tag.\nFor cleaning custom tags and associated content-based tag are treated as one.\nAlso, can be defined with $WERF_USE_CUSTOM_TAG (e.g. $WERF_USE_CUSTOM_TAG=\"%image%-tag\")",
              "shorthand": "",
              "global": false
            },
            "validate": {
              "description": "Validate your manifests against the Kubernetes cluster you are currently pointing at (default $WERF_VALIDATE)",
              "shorthand": "",
              "global": false
            },
            "values": {
              "description": "Specify helm values in a YAML file or a URL (can specify multiple). Also, can be defined with $WERF_VALUES_* (e.g. $WERF_VALUES_1=.helm/values_1.yaml, $WERF_VALUES_2=.helm/values_2.yaml)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "virtual-merge": {
              "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
              "shorthand": "",
              "global": false
            },
            "without-images": {
              "description": "Disable building of images defined in the werf.yaml (if any) and usage of such images in the .helm/templates ($WERF_WITHOUT_IMAGES or false by default — e.g. enable all images defined in the werf.yaml by default)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "run",
          "description": "Run container for project image",
          "aliases": null,
          "flags": {
            "bash": {
              "description": "Use predefined docker options and command for debug",
              "shorthand": "",
              "global": false
            },
            "cache-repo": {
              "description": "Specify one or multiple cache repos with images that will be used as a cache. Cache will be populated when pushing newly built images into the primary repo and when pulling existing images from the primary repo. Cache repo will be used to pull images and to get manifests before making requests to the primary repo.\nAlso, can be specified with $WERF_CACHE_REPO_* (e.g. $WERF_CACHE_REPO_1=..., $WERF_CACHE_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "config": {
              "description": "Use custom configuration file (default $WERF_CONFIG or werf.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "config-templates-dir": {
              "description": "Custom configuration templates directory (default $WERF_CONFIG_TEMPLATES_DIR or .werf in working directory)",
              "shorthand": "",
              "global": false
            },
            "container-registry-mirror": {
              "description": "(Buildah-only) Use specified mirrors for docker.io",
              "shorthand": "",
              "global": false
            },
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "dir": {
              "description": "Use specified project directory where project’s werf.yaml and other configuration files should reside (default $WERF_DIR or current working directory)",
              "shorthand": "",
              "global": false
            },
            "docker-config": {
              "description": "Specify docker config directory path. Default $WERF_DOCKER_CONFIG or $DOCKER_CONFIG or ~/.docker (in the order of priority)\nCommand needs granted permissions to read and pull images from the specified repo",
              "shorthand": "",
              "global": false
            },
            "docker-options": {
              "description": "Define docker run options (default $WERF_DOCKER_OPTIONS)",
              "shorthand": "",
              "global": false
            },
            "dry-run": {
              "description": "Indicate what the command would do without actually doing that (default $WERF_DRY_RUN)",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Use specified environment (default $WERF_ENV)",
              "shorthand": "",
              "global": false
            },
            "final-repo": {
              "description": "Container registry storage address (default $WERF_FINAL_REPO)",
              "shorthand": "",
              "global": false
            },
            "final-repo-container-registry": {
              "description": "Choose final-repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_FINAL_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-password": {
              "description": "final-repo Docker Hub password (default $WERF_FINAL_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-token": {
              "description": "final-repo Docker Hub token (default $WERF_FINAL_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-docker-hub-username": {
              "description": "final-repo Docker Hub username (default $WERF_FINAL_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-github-token": {
              "description": "final-repo GitHub token (default $WERF_FINAL_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-password": {
              "description": "final-repo Harbor password (default $WERF_FINAL_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "final-repo-harbor-username": {
              "description": "final-repo Harbor username (default $WERF_FINAL_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "final-repo-quay-token": {
              "description": "final-repo quay.io token (default $WERF_FINAL_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "follow": {
              "description": "Enable follow mode (default $WERF_FOLLOW).\nThe mode allows restarting the command on a new commit.\nIn development mode (--dev), werf restarts the command on any changes (including untracked files) in the git repository worktree",
              "shorthand": "",
              "global": false
            },
            "git-work-tree": {
              "description": "Use specified git work tree dir (default $WERF_WORK_TREE or lookup for directory that contains .git in the current or parent directories)",
              "shorthand": "",
              "global": false
            },
            "giterminism-config": {
              "description": "Custom path to the giterminism configuration file relative to working directory (default $WERF_GITERMINISM_CONFIG or werf-giterminism.yaml in working directory)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "insecure-helm-dependencies": {
              "description": "Allow insecure oci registries to be used in the .helm/Chart.yaml dependencies configuration (default $WERF_INSECURE_HELM_DEPENDENCIES)",
              "shorthand": "",
              "global": false
            },
            "insecure-registry": {
              "description": "Use plain HTTP requests when accessing a registry (default $WERF_INSECURE_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-project-dir": {
              "description": "Print current project directory path (default $WERF_LOG_PROJECT_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "platform": {
              "description": "Enable platform emulation when building images with werf, format: OS/ARCH[/VARIANT] ($WERF_PLATFORM or $DOCKER_DEFAULT_PLATFORM by default)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "repo": {
              "description": "Container registry storage address (default $WERF_REPO)",
              "shorthand": "",
              "global": false
            },
            "repo-container-registry": {
              "description": "Choose repo container registry implementation.\nThe following container registries are supported: ecr, acr, default, dockerhub, gcr, github, gitlab, harbor, quay.\nDefault $WERF_REPO_CONTAINER_REGISTRY or auto mode (detect container registry by repo address).",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-password": {
              "description": "repo Docker Hub password (default $WERF_REPO_DOCKER_HUB_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-token": {
              "description": "repo Docker Hub token (default $WERF_REPO_DOCKER_HUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-docker-hub-username": {
              "description": "repo Docker Hub username (default $WERF_REPO_DOCKER_HUB_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-github-token": {
              "description": "repo GitHub token (default $WERF_REPO_GITHUB_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-password": {
              "description": "repo Harbor password (default $WERF_REPO_HARBOR_PASSWORD)",
              "shorthand": "",
              "global": false
            },
            "repo-harbor-username": {
              "description": "repo Harbor username (default $WERF_REPO_HARBOR_USERNAME)",
              "shorthand": "",
              "global": false
            },
            "repo-quay-token": {
              "description": "repo quay.io token (default $WERF_REPO_QUAY_TOKEN)",
              "shorthand": "",
              "global": false
            },
            "require-built-images": {
              "description": "Requires all used images to be previously built and exist in repo. Exits with error if needed images are not cached and so require to run build instructions (default $WERF_REQUIRE_BUILT_IMAGES)",
              "shorthand": "Z",
              "global": false
            },
            "secondary-repo": {
              "description": "Specify one or multiple secondary read-only repos with images that will be used as a cache.\nAlso, can be specified with $WERF_SECONDARY_REPO_* (e.g. $WERF_SECONDARY_REPO_1=..., $WERF_SECONDARY_REPO_2=...)",
              "shorthand": "",
              "global": false
            },
            "shell": {
              "description": "Use predefined docker options and command for debug",
              "shorthand": "",
              "global": false
            },
            "skip-tls-verify-registry": {
              "description": "Skip TLS certificate validation when accessing a registry (default $WERF_SKIP_TLS_VERIFY_REGISTRY)",
              "shorthand": "",
              "global": false
            },
            "ssh-key": {
              "description": "Use only specific ssh key(s).\nCan be specified with $WERF_SSH_KEY_* (e.g. $WERF_SSH_KEY_REPO=~/.ssh/repo_rsa, $WERF_SSH_KEY_NODEJS=~/.ssh/nodejs_rsa).\nDefaults to $WERF_SSH_KEY_*, system ssh-agent or ~/.ssh/{id_rsa|id_dsa}",
              "shorthand": "",
              "global": false
            },
            "synchronization": {
              "description": "Address of synchronizer for multiple werf processes to work with a single repo.\n\nDefault:\n - $WERF_SYNCHRONIZATION, or\n - :local if --repo is not specified, or\n - https://delivery-sync.deckhouse.ru if --repo has been specified.\n\nThe same address should be specified for all werf processes that work with a single repo. :local address allows execution of werf processes from a single host only",
              "shorthand": "S",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "virtual-merge": {
              "description": "Enable virtual/ephemeral merge commit mode when building current application state ($WERF_VIRTUAL_MERGE by default)",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "slugify",
          "description": "Print slugged string by specified format.",
          "aliases": null,
          "flags": {
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "format": {
              "description": "  r|helm-release:         suitable for Helm Release\n ns|kubernetes-namespace: suitable for Kubernetes Namespace\ntag|docker-tag:           suitable for Docker Tag",
              "shorthand": "f",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "synchronization",
          "description": "Run synchronization server",
          "aliases": null,
          "flags": {
            "debug": {
              "description": "Enable debug (default $WERF_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "dev": {
              "description": "Enable development mode (default $WERF_DEV).\nThe mode allows working with project files without doing redundant commits during debugging and development",
              "shorthand": "",
              "global": false
            },
            "dev-branch": {
              "description": "Set dev git branch name (default $WERF_DEV_BRANCH or \"_werf-dev\")",
              "shorthand": "",
              "global": false
            },
            "dev-ignore": {
              "description": "Add rules to ignore tracked and untracked changes in development mode (can specify multiple).\nAlso, can be specified with $WERF_DEV_IGNORE_* (e.g. $WERF_DEV_IGNORE_TESTS=*_test.go, $WERF_DEV_IGNORE_DOCS=path/to/docs)",
              "shorthand": "",
              "global": false
            },
            "home-dir": {
              "description": "Use specified dir to store werf cache files and dirs (default $WERF_HOME or ~/.werf)",
              "shorthand": "",
              "global": false
            },
            "host": {
              "description": "Bind synchronization server to the specified host (default localhost or $WERF_HOST)",
              "shorthand": "",
              "global": false
            },
            "kube-config": {
              "description": "Kubernetes config file path (default $WERF_KUBE_CONFIG, or $WERF_KUBECONFIG, or $KUBECONFIG)",
              "shorthand": "",
              "global": false
            },
            "kube-config-base64": {
              "description": "Kubernetes config data as base64 string (default $WERF_KUBE_CONFIG_BASE64 or $WERF_KUBECONFIG_BASE64 or $KUBECONFIG_BASE64)",
              "shorthand": "",
              "global": false
            },
            "kube-context": {
              "description": "Kubernetes config context (default $WERF_KUBE_CONTEXT)",
              "shorthand": "",
              "global": false
            },
            "kubernetes": {
              "description": "Use kubernetes lock-manager stages-storage-cache (default $WERF_KUBERNETES)",
              "shorthand": "",
              "global": false
            },
            "kubernetes-namespace-prefix": {
              "description": "Use specified prefix for namespaces created for lock-manager and stages-storage-cache (defaults to 'werf-synchronization-' when --kubernetes option is used or $WERF_KUBERNETES_NAMESPACE_PREFIX)",
              "shorthand": "",
              "global": false
            },
            "local": {
              "description": "Use file lock-manager and file stages-storage-cache (true by default or $WERF_LOCAL)",
              "shorthand": "",
              "global": false
            },
            "local-lock-manager-base-dir": {
              "description": "Use specified directory as base for file lock-manager (~/.werf/synchronization_server/lock_manager by default or $WERF_LOCAL_LOCK_MANAGER_BASE_DIR)",
              "shorthand": "",
              "global": false
            },
            "local-stages-storage-cache-base-dir": {
              "description": "Use specified directory as base for file stages-storage-cache (~/.werf/synchronization_server/stages_storage_cache by default or $WERF_LOCAL_STAGES_STORAGE_CACHE_BASE_DIR)",
              "shorthand": "",
              "global": false
            },
            "log-color-mode": {
              "description": "Set log color mode.\nSupported on, off and auto (based on the stdout’s file descriptor referring to a terminal) modes.\nDefault $WERF_LOG_COLOR_MODE or auto mode.",
              "shorthand": "",
              "global": false
            },
            "log-debug": {
              "description": "Enable debug (default $WERF_LOG_DEBUG).",
              "shorthand": "",
              "global": false
            },
            "log-pretty": {
              "description": "Enable emojis, auto line wrapping and log process border (default $WERF_LOG_PRETTY or true).",
              "shorthand": "",
              "global": false
            },
            "log-quiet": {
              "description": "Disable explanatory output (default $WERF_LOG_QUIET).",
              "shorthand": "",
              "global": false
            },
            "log-terminal-width": {
              "description": "Set log terminal width.\nDefaults to:\n* $WERF_LOG_TERMINAL_WIDTH\n* interactive terminal width or 140",
              "shorthand": "",
              "global": false
            },
            "log-time": {
              "description": "Add time to log entries for precise event time tracking (default $WERF_LOG_TIME or false).",
              "shorthand": "",
              "global": false
            },
            "log-time-format": {
              "description": "Specify custom log time format (default $WERF_LOG_TIME_FORMAT or RFC3339 format).",
              "shorthand": "",
              "global": false
            },
            "log-verbose": {
              "description": "Enable verbose output (default $WERF_LOG_VERBOSE).",
              "shorthand": "",
              "global": false
            },
            "loose-giterminism": {
              "description": "Loose werf giterminism mode restrictions",
              "shorthand": "",
              "global": false
            },
            "port": {
              "description": "Bind synchronization server to the specified port (default 55581 or $WERF_PORT)",
              "shorthand": "",
              "global": false
            },
            "quiet": {
              "description": "Disable explanatory output (default $WERF_QUIET).",
              "shorthand": "",
              "global": false
            },
            "tmp-dir": {
              "description": "Use specified dir to store tmp files and dirs (default $WERF_TMP_DIR or system tmp dir)",
              "shorthand": "",
              "global": false
            },
            "ttl": {
              "description": "Time to live for lock-manager locks and stages-storage-cache records (default $WERF_TTL)",
              "shorthand": "",
              "global": false
            },
            "verbose": {
              "description": "Enable verbose output (default $WERF_VERBOSE).",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "version",
          "description": "Print version",
          "aliases": null,
          "flags": {},
          "subcommands": null
        }
      ]
    },
    {
      "name": "help",
      "description": "Help about any command",
      "aliases": null,
      "flags": {},
      "subcommands": null
    },
    {
      "name": "k",
      "description": "kubectl controls the Kubernetes cluster manager",
      "aliases": [
        "kubectl"
      ],
      "flags": {
        "as": {
          "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
          "shorthand": "",
          "global": false
        },
        "as-group": {
          "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
          "shorthand": "",
          "global": false
        },
        "as-uid": {
          "description": "UID to impersonate for the operation.",
          "shorthand": "",
          "global": false
        },
        "cache-dir": {
          "description": "Default cache directory",
          "shorthand": "",
          "global": false
        },
        "certificate-authority": {
          "description": "Path to a cert file for the certificate authority",
          "shorthand": "",
          "global": false
        },
        "client-certificate": {
          "description": "Path to a client certificate file for TLS",
          "shorthand": "",
          "global": false
        },
        "client-key": {
          "description": "Path to a client key file for TLS",
          "shorthand": "",
          "global": false
        },
        "cluster": {
          "description": "The name of the kubeconfig cluster to use",
          "shorthand": "",
          "global": false
        },
        "context": {
          "description": "The name of the kubeconfig context to use",
          "shorthand": "",
          "global": false
        },
        "disable-compression": {
          "description": "If true, opt-out of response compression for all requests to the server",
          "shorthand": "",
          "global": false
        },
        "insecure-skip-tls-verify": {
          "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
          "shorthand": "",
          "global": false
        },
        "kubeconfig": {
          "description": "Path to the kubeconfig file to use for CLI requests.",
          "shorthand": "",
          "global": false
        },
        "log-flush-frequency": {
          "description": "Maximum number of seconds between log flushes",
          "shorthand": "",
          "global": false
        },
        "match-server-version": {
          "description": "Require server version to match client version",
          "shorthand": "",
          "global": false
        },
        "namespace": {
          "description": "If present, the namespace scope for this CLI request",
          "shorthand": "n",
          "global": false
        },
        "password": {
          "description": "Password for basic authentication to the API server",
          "shorthand": "",
          "global": false
        },
        "profile": {
          "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
          "shorthand": "",
          "global": false
        },
        "profile-output": {
          "description": "Name of the file to write the profile to",
          "shorthand": "",
          "global": false
        },
        "request-timeout": {
          "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
          "shorthand": "",
          "global": false
        },
        "server": {
          "description": "The address and port of the Kubernetes API server",
          "shorthand": "s",
          "global": false
        },
        "tls-server-name": {
          "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
          "shorthand": "",
          "global": false
        },
        "token": {
          "description": "Bearer token for authentication to the API server",
          "shorthand": "",
          "global": false
        },
        "user": {
          "description": "The name of the kubeconfig user to use",
          "shorthand": "",
          "global": false
        },
        "username": {
          "description": "Username for basic authentication to the API server",
          "shorthand": "",
          "global": false
        },
        "v": {
          "description": "number for the log level verbosity",
          "shorthand": "v",
          "global": false
        },
        "vmodule": {
          "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
          "shorthand": "",
          "global": false
        },
        "warnings-as-errors": {
          "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
          "shorthand": "",
          "global": false
        }
      },
      "subcommands": [
        {
          "name": "alpha",
          "description": "Commands for features in alpha",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "annotate",
          "description": "Update the annotations on a resource",
          "aliases": null,
          "flags": {
            "all": {
              "description": "Select all resources, in the namespace of the specified resource types.",
              "shorthand": "",
              "global": false
            },
            "all-namespaces": {
              "description": "If true, check the specified action in all namespaces.",
              "shorthand": "A",
              "global": false
            },
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "field-selector": {
              "description": "Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files identifying the resource to update the annotation",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "list": {
              "description": "If true, display the annotations for a given resource.",
              "shorthand": "",
              "global": false
            },
            "local": {
              "description": "If true, annotation will NOT contact api-server but run locally.",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "overwrite": {
              "description": "If true, allow annotations to be overwritten, otherwise reject annotation updates that overwrite existing annotations.",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "resource-version": {
              "description": "If non-empty, the annotation update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.",
              "shorthand": "",
              "global": false
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "api-resources",
          "description": "Print the supported API resources on the server",
          "aliases": null,
          "flags": {
            "api-group": {
              "description": "Limit to resources in the specified API group.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "cached": {
              "description": "Use the cached list of resources if available.",
              "shorthand": "",
              "global": false
            },
            "categories": {
              "description": "Limit to resources that belong to the specified categories.",
              "shorthand": "",
              "global": false
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "namespaced": {
              "description": "If false, non-namespaced resources will be returned, otherwise returning namespaced resources by default.",
              "shorthand": "",
              "global": false
            },
            "no-headers": {
              "description": "When using the default or custom-column output format, don't print headers (default print headers).",
              "shorthand": "",
              "global": false
            },
            "output": {
              "description": "Output format. One of: (wide, name).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "sort-by": {
              "description": "If non-empty, sort list of resources using specified field. The field can be either 'name' or 'kind'.",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "verbs": {
              "description": "Limit to resources that support the specified verbs.",
              "shorthand": "",
              "global": false
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "api-versions",
          "description": "Print the supported API versions on the server, in the form of \"group/version\"",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "apply",
          "description": "Apply a configuration to a resource by file name or stdin",
          "aliases": null,
          "flags": {
            "all": {
              "description": "Select all resources in the namespace of the specified resource types.",
              "shorthand": "",
              "global": false
            },
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "cascade": {
              "description": "Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background.",
              "shorthand": "",
              "global": false
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "The files that contain the configurations to apply.",
              "shorthand": "f",
              "global": false
            },
            "force": {
              "description": "If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.",
              "shorthand": "",
              "global": false
            },
            "force-conflicts": {
              "description": "If true, server-side apply will force the changes against conflicts.",
              "shorthand": "",
              "global": false
            },
            "grace-period": {
              "description": "Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process a kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "openapi-patch": {
              "description": "If true, use openapi to calculate diff when the openapi presents and the resource can be found in the openapi spec. Otherwise, fall back to use baked-in types.",
              "shorthand": "",
              "global": false
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "overwrite": {
              "description": "Automatically resolve conflicts between the modified and live configuration by using values from the modified configuration",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "prune": {
              "description": "Automatically delete resource objects, that do not appear in the configs and are created by either apply or create --save-config. Should be used with either -l or --all.",
              "shorthand": "",
              "global": false
            },
            "prune-allowlist": {
              "description": "Overwrite the default allowlist with \u003cgroup/version/kind\u003e for --prune",
              "shorthand": "",
              "global": false
            },
            "prune-whitelist": {
              "description": "Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune",
              "shorthand": "",
              "global": false
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "server-side": {
              "description": "If true, apply runs in the server instead of the client.",
              "shorthand": "",
              "global": false
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "timeout": {
              "description": "The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "validate": {
              "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
              "shorthand": "",
              "global": false
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "wait": {
              "description": "If true, wait for resources to be gone before returning. This waits for finalizers.",
              "shorthand": "",
              "global": false
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "edit-last-applied",
              "description": "Edit latest last-applied-configuration annotations of a resource/object",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files to use to edit the resource",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "record": {
                  "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
                  "shorthand": "",
                  "global": false
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                },
                "windows-line-endings": {
                  "description": "Defaults to the line ending native to your platform.",
                  "shorthand": "",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "set-last-applied",
              "description": "Set the last-applied-configuration annotation on a live object to match the contents of a file",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "create-annotation": {
                  "description": "Will create 'last-applied-configuration' annotations if current objects doesn't have one",
                  "shorthand": "",
                  "global": false
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files that contains the last-applied-configuration annotations",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "view-last-applied",
              "description": "View the latest last-applied-configuration annotations of a resource/object",
              "aliases": null,
              "flags": {
                "all": {
                  "description": "Select all resources in the namespace of the specified resource types",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "filename": {
                  "description": "Filename, directory, or URL to files that contains the last-applied-configuration annotations",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. Must be one of (yaml, json)",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "attach",
          "description": "Attach to a running container",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "container": {
              "description": "Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen",
              "shorthand": "c",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "pod-running-timeout": {
              "description": "The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running",
              "shorthand": "",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "quiet": {
              "description": "Only print output from the remote session",
              "shorthand": "q",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "stdin": {
              "description": "Pass stdin to the container",
              "shorthand": "i",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "tty": {
              "description": "Stdin is a TTY",
              "shorthand": "t",
              "global": false
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "auth",
          "description": "Inspect authorization",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "can-i",
              "description": "Check whether an action is allowed",
              "aliases": null,
              "flags": {
                "all-namespaces": {
                  "description": "If true, check the specified action in all namespaces.",
                  "shorthand": "A",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "list": {
                  "description": "If true, prints all allowed actions.",
                  "shorthand": "",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "no-headers": {
                  "description": "If true, prints allowed actions without headers",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "quiet": {
                  "description": "If true, suppress output and just return the exit code.",
                  "shorthand": "q",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "subresource": {
                  "description": "SubResource such as pod/log or deployment/scale",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "reconcile",
              "description": "Reconciles rules for RBAC role, role binding, cluster role, and cluster role binding objects",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to reconcile.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "remove-extra-permissions": {
                  "description": "If true, removes extra permissions added to roles",
                  "shorthand": "",
                  "global": false
                },
                "remove-extra-subjects": {
                  "description": "If true, removes extra subjects added to rolebindings",
                  "shorthand": "",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "whoami",
              "description": "Experimental: Check self subject attributes",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "autoscale",
          "description": "Auto-scale a deployment, replica set, stateful set, or replication controller",
          "aliases": null,
          "flags": {
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "cpu-percent": {
              "description": "The target average CPU utilization (represented as a percent of requested CPU) over all the pods. If it's not specified or negative, a default autoscaling policy will be used.",
              "shorthand": "",
              "global": false
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files identifying the resource to autoscale.",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "max": {
              "description": "The upper limit for the number of pods that can be set by the autoscaler. Required.",
              "shorthand": "",
              "global": false
            },
            "min": {
              "description": "The lower limit for the number of pods that can be set by the autoscaler. If it's not specified or negative, the server will apply a default value.",
              "shorthand": "",
              "global": false
            },
            "name": {
              "description": "The name for the newly created object. If not specified, the name of the input resource will be used.",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "save-config": {
              "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
              "shorthand": "",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "certificate",
          "description": "Modify certificate resources",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "approve",
              "description": "Approve a certificate signing request",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to update",
                  "shorthand": "f",
                  "global": false
                },
                "force": {
                  "description": "Update the CSR even if it is already approved.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "deny",
              "description": "Deny a certificate signing request",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to update",
                  "shorthand": "f",
                  "global": false
                },
                "force": {
                  "description": "Update the CSR even if it is already denied.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "cluster-info",
          "description": "Display cluster information",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "dump",
              "description": "Dump relevant information for debugging and diagnosis",
              "aliases": null,
              "flags": {
                "all-namespaces": {
                  "description": "If true, dump all namespaces.  If true, --namespaces is ignored.",
                  "shorthand": "A",
                  "global": false
                },
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "namespaces": {
                  "description": "A comma separated list of namespaces to dump.",
                  "shorthand": "",
                  "global": false
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "output-directory": {
                  "description": "Where to output the files.  If empty or '-' uses stdout, otherwise creates a directory hierarchy in that directory",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "pod-running-timeout": {
                  "description": "The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running",
                  "shorthand": "",
                  "global": false
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "completion",
          "description": "Output shell completion code for the specified shell (bash, zsh, fish, or powershell)",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "config",
          "description": "Modify kubeconfig files",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "use a particular kubeconfig file",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "current-context",
              "description": "Display the current-context",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "delete-cluster",
              "description": "Delete the specified cluster from the kubeconfig",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "delete-context",
              "description": "Delete the specified context from the kubeconfig",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "delete-user",
              "description": "Delete the specified user from the kubeconfig",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "get-clusters",
              "description": "Display clusters defined in the kubeconfig",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "get-contexts",
              "description": "Describe one or many contexts",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "no-headers": {
                  "description": "When using the default or custom-column output format, don't print headers (default print headers).",
                  "shorthand": "",
                  "global": false
                },
                "output": {
                  "description": "Output format. One of: (name).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "get-users",
              "description": "Display users defined in the kubeconfig",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "rename-context",
              "description": "Rename a context from the kubeconfig file",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "set",
              "description": "Set an individual value in a kubeconfig file",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "set-raw-bytes": {
                  "description": "When writing a []byte PROPERTY_VALUE, write the given string directly without base64 decoding.",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "set-cluster",
              "description": "Set a cluster entry in kubeconfig",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to certificate-authority file for the cluster entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "embed-certs": {
                  "description": "embed-certs for the cluster entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "insecure-skip-tls-verify for the cluster entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "proxy-url": {
                  "description": "proxy-url for the cluster entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "server for the cluster entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "tls-server-name for the cluster entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "set-context",
              "description": "Set a context entry in kubeconfig",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "cluster for the context entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "current": {
                  "description": "Modify the current context",
                  "shorthand": "",
                  "global": false
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "namespace for the context entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "user for the context entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "set-credentials",
              "description": "Set a user entry in kubeconfig",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "auth-provider": {
                  "description": "Auth provider for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "auth-provider-arg": {
                  "description": "'key=value' arguments for the auth provider",
                  "shorthand": "",
                  "global": false
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to client-certificate file for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "client-key": {
                  "description": "Path to client-key file for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "embed-certs": {
                  "description": "Embed client cert/key for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "exec-api-version": {
                  "description": "API version of the exec credential plugin for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "exec-arg": {
                  "description": "New arguments for the exec credential plugin command for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "exec-command": {
                  "description": "Command for the exec credential plugin for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "exec-env": {
                  "description": "'key=value' environment values for the exec credential plugin",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "password for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "token for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "username for the user entry in kubeconfig",
                  "shorthand": "",
                  "global": false
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "unset",
              "description": "Unset an individual value in a kubeconfig file",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "use-context",
              "description": "Set the current-context in a kubeconfig file",
              "aliases": [
                "use"
              ],
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "view",
              "description": "Display merged kubeconfig settings or a specified kubeconfig file",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "flatten": {
                  "description": "Flatten the resulting kubeconfig file into self-contained output (useful for creating portable kubeconfig files)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "use a particular kubeconfig file",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "merge": {
                  "description": "Merge the full hierarchy of kubeconfig files",
                  "shorthand": "",
                  "global": false
                },
                "minify": {
                  "description": "Remove all information not used by current-context from the output",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "raw": {
                  "description": "Display raw byte data and sensitive data",
                  "shorthand": "",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "cordon",
          "description": "Mark node as unschedulable",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "cp",
          "description": "Copy files and directories to and from containers",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "container": {
              "description": "Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen",
              "shorthand": "c",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "no-preserve": {
              "description": "The copied file/directory's ownership and permissions will not be preserved in the container",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "retries": {
              "description": "Set number of retries to complete a copy operation from a container. Specify 0 to disable or any negative value for infinite retrying. The default is 0 (no retry).",
              "shorthand": "",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "create",
          "description": "Create a resource from a file or from stdin",
          "aliases": null,
          "flags": {
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "edit": {
              "description": "Edit the API resource before creating",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files to use to create the resource",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "raw": {
              "description": "Raw URI to POST to the server.  Uses the transport specified by the kubeconfig file.",
              "shorthand": "",
              "global": false
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "save-config": {
              "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
              "shorthand": "",
              "global": false
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "validate": {
              "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
              "shorthand": "",
              "global": false
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            },
            "windows-line-endings": {
              "description": "Only relevant if --edit=true. Defaults to the line ending native to your platform.",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": [
            {
              "name": "clusterrole",
              "description": "Create a cluster role",
              "aliases": null,
              "flags": {
                "aggregation-rule": {
                  "description": "An aggregation label selector for combining ClusterRoles.",
                  "shorthand": "",
                  "global": false
                },
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "non-resource-url": {
                  "description": "A partial url that user should have access to.",
                  "shorthand": "",
                  "global": false
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "resource": {
                  "description": "Resource that the rule applies to",
                  "shorthand": "",
                  "global": false
                },
                "resource-name": {
                  "description": "Resource in the white list that the rule applies to, repeat this flag for multiple items",
                  "shorthand": "",
                  "global": false
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "verb": {
                  "description": "Verb that applies to the resources contained in the rule",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "clusterrolebinding",
              "description": "Create a cluster role binding for a particular cluster role",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "clusterrole": {
                  "description": "ClusterRole this ClusterRoleBinding should reference",
                  "shorthand": "",
                  "global": false
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "group": {
                  "description": "Groups to bind to the clusterrole. The flag can be repeated to add multiple groups.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "serviceaccount": {
                  "description": "Service accounts to bind to the clusterrole, in the format \u003cnamespace\u003e:\u003cname\u003e. The flag can be repeated to add multiple service accounts.",
                  "shorthand": "",
                  "global": false
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "Usernames to bind to the clusterrole. The flag can be repeated to add multiple users.",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "configmap",
              "description": "Create a config map from a local file, directory or literal value",
              "aliases": [
                "cm"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "append-hash": {
                  "description": "Append a hash of the configmap to its name.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "from-env-file": {
                  "description": "Specify the path to a file to read lines of key=val pairs to create a configmap.",
                  "shorthand": "",
                  "global": false
                },
                "from-file": {
                  "description": "Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key.",
                  "shorthand": "",
                  "global": false
                },
                "from-literal": {
                  "description": "Specify a key and literal value to insert in configmap (i.e. mykey=somevalue)",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "cronjob",
              "description": "Create a cron job with the specified name",
              "aliases": [
                "cj"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "image": {
                  "description": "Image name to run.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "restart": {
                  "description": "job's restart policy. supported values: OnFailure, Never",
                  "shorthand": "",
                  "global": false
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "schedule": {
                  "description": "A schedule in the Cron format the job should be run with.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "deployment",
              "description": "Create a deployment with the specified name",
              "aliases": [
                "deploy"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "image": {
                  "description": "Image names to run.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "port": {
                  "description": "The port that this container exposes.",
                  "shorthand": "",
                  "global": false
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "replicas": {
                  "description": "Number of replicas to create. Default is 1.",
                  "shorthand": "r",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "ingress",
              "description": "Create an ingress with the specified name",
              "aliases": [
                "ing"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "annotation": {
                  "description": "Annotation to insert in the ingress object, in the format annotation=value",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "class": {
                  "description": "Ingress Class to be used",
                  "shorthand": "",
                  "global": false
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "default-backend": {
                  "description": "Default service for backend, in format of svcname:port",
                  "shorthand": "",
                  "global": false
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "rule": {
                  "description": "Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional.",
                  "shorthand": "",
                  "global": false
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "job",
              "description": "Create a job with the specified name",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "from": {
                  "description": "The name of the resource to create a Job from (only cronjob is supported).",
                  "shorthand": "",
                  "global": false
                },
                "image": {
                  "description": "Image name to run.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "namespace",
              "description": "Create a namespace with the specified name",
              "aliases": [
                "ns"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "poddisruptionbudget",
              "description": "Create a pod disruption budget with the specified name",
              "aliases": [
                "pdb"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "max-unavailable": {
                  "description": "The maximum number or percentage of unavailable pods this budget requires.",
                  "shorthand": "",
                  "global": false
                },
                "min-available": {
                  "description": "The minimum number or percentage of available pods this budget requires.",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "selector": {
                  "description": "A label selector to use for this budget. Only equality-based selector requirements are supported.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "priorityclass",
              "description": "Create a priority class with the specified name",
              "aliases": [
                "pc"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "description": {
                  "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used.",
                  "shorthand": "",
                  "global": false
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "global-default": {
                  "description": "global-default specifies whether this PriorityClass should be considered as the default priority.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "preemption-policy": {
                  "description": "preemption-policy is the policy for preempting pods with lower priority.",
                  "shorthand": "",
                  "global": false
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "value": {
                  "description": "the value of this priority class.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "quota",
              "description": "Create a quota with the specified name",
              "aliases": [
                "resourcequota"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "hard": {
                  "description": "A comma-delimited set of resource=quantity pairs that define a hard limit.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "scopes": {
                  "description": "A comma-delimited set of quota scopes that must all match each object tracked by the quota.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "role",
              "description": "Create a role with single rule",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "resource": {
                  "description": "Resource that the rule applies to",
                  "shorthand": "",
                  "global": false
                },
                "resource-name": {
                  "description": "Resource in the white list that the rule applies to, repeat this flag for multiple items",
                  "shorthand": "",
                  "global": false
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "verb": {
                  "description": "Verb that applies to the resources contained in the rule",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "rolebinding",
              "description": "Create a role binding for a particular role or cluster role",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "clusterrole": {
                  "description": "ClusterRole this RoleBinding should reference",
                  "shorthand": "",
                  "global": false
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "group": {
                  "description": "Groups to bind to the role. The flag can be repeated to add multiple groups.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "role": {
                  "description": "Role this RoleBinding should reference",
                  "shorthand": "",
                  "global": false
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "serviceaccount": {
                  "description": "Service accounts to bind to the role, in the format \u003cnamespace\u003e:\u003cname\u003e. The flag can be repeated to add multiple service accounts.",
                  "shorthand": "",
                  "global": false
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "Usernames to bind to the role. The flag can be repeated to add multiple users.",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "secret",
              "description": "Create a secret using a specified subcommand",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "docker-registry",
                  "description": "Create a secret for use with a Docker registry",
                  "aliases": null,
                  "flags": {
                    "allow-missing-template-keys": {
                      "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                      "shorthand": "",
                      "global": false
                    },
                    "append-hash": {
                      "description": "Append a hash of the secret to its name.",
                      "shorthand": "",
                      "global": false
                    },
                    "as": {
                      "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-group": {
                      "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-uid": {
                      "description": "UID to impersonate for the operation.",
                      "shorthand": "",
                      "global": true
                    },
                    "cache-dir": {
                      "description": "Default cache directory",
                      "shorthand": "",
                      "global": true
                    },
                    "certificate-authority": {
                      "description": "Path to a cert file for the certificate authority",
                      "shorthand": "",
                      "global": true
                    },
                    "client-certificate": {
                      "description": "Path to a client certificate file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "client-key": {
                      "description": "Path to a client key file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "cluster": {
                      "description": "The name of the kubeconfig cluster to use",
                      "shorthand": "",
                      "global": true
                    },
                    "context": {
                      "description": "The name of the kubeconfig context to use",
                      "shorthand": "",
                      "global": true
                    },
                    "disable-compression": {
                      "description": "If true, opt-out of response compression for all requests to the server",
                      "shorthand": "",
                      "global": true
                    },
                    "docker-email": {
                      "description": "Email for Docker registry",
                      "shorthand": "",
                      "global": false
                    },
                    "docker-password": {
                      "description": "Password for Docker registry authentication",
                      "shorthand": "",
                      "global": false
                    },
                    "docker-server": {
                      "description": "Server location for Docker registry",
                      "shorthand": "",
                      "global": false
                    },
                    "docker-username": {
                      "description": "Username for Docker registry authentication",
                      "shorthand": "",
                      "global": false
                    },
                    "dry-run": {
                      "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                      "shorthand": "",
                      "global": false
                    },
                    "field-manager": {
                      "description": "Name of the manager used to track field ownership.",
                      "shorthand": "",
                      "global": false
                    },
                    "from-file": {
                      "description": "Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.",
                      "shorthand": "",
                      "global": false
                    },
                    "insecure-skip-tls-verify": {
                      "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                      "shorthand": "",
                      "global": true
                    },
                    "kubeconfig": {
                      "description": "Path to the kubeconfig file to use for CLI requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-flush-frequency": {
                      "description": "Maximum number of seconds between log flushes",
                      "shorthand": "",
                      "global": true
                    },
                    "match-server-version": {
                      "description": "Require server version to match client version",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "If present, the namespace scope for this CLI request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                      "shorthand": "o",
                      "global": false
                    },
                    "password": {
                      "description": "Password for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "profile": {
                      "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                      "shorthand": "",
                      "global": true
                    },
                    "profile-output": {
                      "description": "Name of the file to write the profile to",
                      "shorthand": "",
                      "global": true
                    },
                    "request-timeout": {
                      "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "save-config": {
                      "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                      "shorthand": "",
                      "global": false
                    },
                    "server": {
                      "description": "The address and port of the Kubernetes API server",
                      "shorthand": "s",
                      "global": true
                    },
                    "show-managed-fields": {
                      "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                      "shorthand": "",
                      "global": false
                    },
                    "template": {
                      "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                      "shorthand": "",
                      "global": false
                    },
                    "tls-server-name": {
                      "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                      "shorthand": "",
                      "global": true
                    },
                    "token": {
                      "description": "Bearer token for authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "user": {
                      "description": "The name of the kubeconfig user to use",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "Username for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "v": {
                      "description": "number for the log level verbosity",
                      "shorthand": "v",
                      "global": true
                    },
                    "validate": {
                      "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                      "shorthand": "",
                      "global": false
                    },
                    "vmodule": {
                      "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                      "shorthand": "",
                      "global": true
                    },
                    "warnings-as-errors": {
                      "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "generic",
                  "description": "Create a secret from a local file, directory, or literal value",
                  "aliases": null,
                  "flags": {
                    "allow-missing-template-keys": {
                      "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                      "shorthand": "",
                      "global": false
                    },
                    "append-hash": {
                      "description": "Append a hash of the secret to its name.",
                      "shorthand": "",
                      "global": false
                    },
                    "as": {
                      "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-group": {
                      "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-uid": {
                      "description": "UID to impersonate for the operation.",
                      "shorthand": "",
                      "global": true
                    },
                    "cache-dir": {
                      "description": "Default cache directory",
                      "shorthand": "",
                      "global": true
                    },
                    "certificate-authority": {
                      "description": "Path to a cert file for the certificate authority",
                      "shorthand": "",
                      "global": true
                    },
                    "client-certificate": {
                      "description": "Path to a client certificate file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "client-key": {
                      "description": "Path to a client key file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "cluster": {
                      "description": "The name of the kubeconfig cluster to use",
                      "shorthand": "",
                      "global": true
                    },
                    "context": {
                      "description": "The name of the kubeconfig context to use",
                      "shorthand": "",
                      "global": true
                    },
                    "disable-compression": {
                      "description": "If true, opt-out of response compression for all requests to the server",
                      "shorthand": "",
                      "global": true
                    },
                    "dry-run": {
                      "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                      "shorthand": "",
                      "global": false
                    },
                    "field-manager": {
                      "description": "Name of the manager used to track field ownership.",
                      "shorthand": "",
                      "global": false
                    },
                    "from-env-file": {
                      "description": "Specify the path to a file to read lines of key=val pairs to create a secret.",
                      "shorthand": "",
                      "global": false
                    },
                    "from-file": {
                      "description": "Key files can be specified using their file path, in which case a default name will be given to them, or optionally with a name and file path, in which case the given name will be used.  Specifying a directory will iterate each named file in the directory that is a valid secret key.",
                      "shorthand": "",
                      "global": false
                    },
                    "from-literal": {
                      "description": "Specify a key and literal value to insert in secret (i.e. mykey=somevalue)",
                      "shorthand": "",
                      "global": false
                    },
                    "insecure-skip-tls-verify": {
                      "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                      "shorthand": "",
                      "global": true
                    },
                    "kubeconfig": {
                      "description": "Path to the kubeconfig file to use for CLI requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-flush-frequency": {
                      "description": "Maximum number of seconds between log flushes",
                      "shorthand": "",
                      "global": true
                    },
                    "match-server-version": {
                      "description": "Require server version to match client version",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "If present, the namespace scope for this CLI request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                      "shorthand": "o",
                      "global": false
                    },
                    "password": {
                      "description": "Password for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "profile": {
                      "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                      "shorthand": "",
                      "global": true
                    },
                    "profile-output": {
                      "description": "Name of the file to write the profile to",
                      "shorthand": "",
                      "global": true
                    },
                    "request-timeout": {
                      "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "save-config": {
                      "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                      "shorthand": "",
                      "global": false
                    },
                    "server": {
                      "description": "The address and port of the Kubernetes API server",
                      "shorthand": "s",
                      "global": true
                    },
                    "show-managed-fields": {
                      "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                      "shorthand": "",
                      "global": false
                    },
                    "template": {
                      "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                      "shorthand": "",
                      "global": false
                    },
                    "tls-server-name": {
                      "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                      "shorthand": "",
                      "global": true
                    },
                    "token": {
                      "description": "Bearer token for authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "type": {
                      "description": "The type of secret to create",
                      "shorthand": "",
                      "global": false
                    },
                    "user": {
                      "description": "The name of the kubeconfig user to use",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "Username for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "v": {
                      "description": "number for the log level verbosity",
                      "shorthand": "v",
                      "global": true
                    },
                    "validate": {
                      "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                      "shorthand": "",
                      "global": false
                    },
                    "vmodule": {
                      "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                      "shorthand": "",
                      "global": true
                    },
                    "warnings-as-errors": {
                      "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "tls",
                  "description": "Create a TLS secret",
                  "aliases": null,
                  "flags": {
                    "allow-missing-template-keys": {
                      "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                      "shorthand": "",
                      "global": false
                    },
                    "append-hash": {
                      "description": "Append a hash of the secret to its name.",
                      "shorthand": "",
                      "global": false
                    },
                    "as": {
                      "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-group": {
                      "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-uid": {
                      "description": "UID to impersonate for the operation.",
                      "shorthand": "",
                      "global": true
                    },
                    "cache-dir": {
                      "description": "Default cache directory",
                      "shorthand": "",
                      "global": true
                    },
                    "cert": {
                      "description": "Path to PEM encoded public key certificate.",
                      "shorthand": "",
                      "global": false
                    },
                    "certificate-authority": {
                      "description": "Path to a cert file for the certificate authority",
                      "shorthand": "",
                      "global": true
                    },
                    "client-certificate": {
                      "description": "Path to a client certificate file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "client-key": {
                      "description": "Path to a client key file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "cluster": {
                      "description": "The name of the kubeconfig cluster to use",
                      "shorthand": "",
                      "global": true
                    },
                    "context": {
                      "description": "The name of the kubeconfig context to use",
                      "shorthand": "",
                      "global": true
                    },
                    "disable-compression": {
                      "description": "If true, opt-out of response compression for all requests to the server",
                      "shorthand": "",
                      "global": true
                    },
                    "dry-run": {
                      "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                      "shorthand": "",
                      "global": false
                    },
                    "field-manager": {
                      "description": "Name of the manager used to track field ownership.",
                      "shorthand": "",
                      "global": false
                    },
                    "insecure-skip-tls-verify": {
                      "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                      "shorthand": "",
                      "global": true
                    },
                    "key": {
                      "description": "Path to private key associated with given certificate.",
                      "shorthand": "",
                      "global": false
                    },
                    "kubeconfig": {
                      "description": "Path to the kubeconfig file to use for CLI requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-flush-frequency": {
                      "description": "Maximum number of seconds between log flushes",
                      "shorthand": "",
                      "global": true
                    },
                    "match-server-version": {
                      "description": "Require server version to match client version",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "If present, the namespace scope for this CLI request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                      "shorthand": "o",
                      "global": false
                    },
                    "password": {
                      "description": "Password for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "profile": {
                      "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                      "shorthand": "",
                      "global": true
                    },
                    "profile-output": {
                      "description": "Name of the file to write the profile to",
                      "shorthand": "",
                      "global": true
                    },
                    "request-timeout": {
                      "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "save-config": {
                      "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                      "shorthand": "",
                      "global": false
                    },
                    "server": {
                      "description": "The address and port of the Kubernetes API server",
                      "shorthand": "s",
                      "global": true
                    },
                    "show-managed-fields": {
                      "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                      "shorthand": "",
                      "global": false
                    },
                    "template": {
                      "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                      "shorthand": "",
                      "global": false
                    },
                    "tls-server-name": {
                      "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                      "shorthand": "",
                      "global": true
                    },
                    "token": {
                      "description": "Bearer token for authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "user": {
                      "description": "The name of the kubeconfig user to use",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "Username for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "v": {
                      "description": "number for the log level verbosity",
                      "shorthand": "v",
                      "global": true
                    },
                    "validate": {
                      "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                      "shorthand": "",
                      "global": false
                    },
                    "vmodule": {
                      "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                      "shorthand": "",
                      "global": true
                    },
                    "warnings-as-errors": {
                      "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "service",
              "description": "Create a service using a specified subcommand",
              "aliases": [
                "svc"
              ],
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": [
                {
                  "name": "clusterip",
                  "description": "Create a ClusterIP service",
                  "aliases": null,
                  "flags": {
                    "allow-missing-template-keys": {
                      "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                      "shorthand": "",
                      "global": false
                    },
                    "as": {
                      "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-group": {
                      "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-uid": {
                      "description": "UID to impersonate for the operation.",
                      "shorthand": "",
                      "global": true
                    },
                    "cache-dir": {
                      "description": "Default cache directory",
                      "shorthand": "",
                      "global": true
                    },
                    "certificate-authority": {
                      "description": "Path to a cert file for the certificate authority",
                      "shorthand": "",
                      "global": true
                    },
                    "client-certificate": {
                      "description": "Path to a client certificate file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "client-key": {
                      "description": "Path to a client key file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "cluster": {
                      "description": "The name of the kubeconfig cluster to use",
                      "shorthand": "",
                      "global": true
                    },
                    "clusterip": {
                      "description": "Assign your own ClusterIP or set to 'None' for a 'headless' service (no loadbalancing).",
                      "shorthand": "",
                      "global": false
                    },
                    "context": {
                      "description": "The name of the kubeconfig context to use",
                      "shorthand": "",
                      "global": true
                    },
                    "disable-compression": {
                      "description": "If true, opt-out of response compression for all requests to the server",
                      "shorthand": "",
                      "global": true
                    },
                    "dry-run": {
                      "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                      "shorthand": "",
                      "global": false
                    },
                    "field-manager": {
                      "description": "Name of the manager used to track field ownership.",
                      "shorthand": "",
                      "global": false
                    },
                    "insecure-skip-tls-verify": {
                      "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                      "shorthand": "",
                      "global": true
                    },
                    "kubeconfig": {
                      "description": "Path to the kubeconfig file to use for CLI requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-flush-frequency": {
                      "description": "Maximum number of seconds between log flushes",
                      "shorthand": "",
                      "global": true
                    },
                    "match-server-version": {
                      "description": "Require server version to match client version",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "If present, the namespace scope for this CLI request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                      "shorthand": "o",
                      "global": false
                    },
                    "password": {
                      "description": "Password for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "profile": {
                      "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                      "shorthand": "",
                      "global": true
                    },
                    "profile-output": {
                      "description": "Name of the file to write the profile to",
                      "shorthand": "",
                      "global": true
                    },
                    "request-timeout": {
                      "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "save-config": {
                      "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                      "shorthand": "",
                      "global": false
                    },
                    "server": {
                      "description": "The address and port of the Kubernetes API server",
                      "shorthand": "s",
                      "global": true
                    },
                    "show-managed-fields": {
                      "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                      "shorthand": "",
                      "global": false
                    },
                    "tcp": {
                      "description": "Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.",
                      "shorthand": "",
                      "global": false
                    },
                    "template": {
                      "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                      "shorthand": "",
                      "global": false
                    },
                    "tls-server-name": {
                      "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                      "shorthand": "",
                      "global": true
                    },
                    "token": {
                      "description": "Bearer token for authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "user": {
                      "description": "The name of the kubeconfig user to use",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "Username for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "v": {
                      "description": "number for the log level verbosity",
                      "shorthand": "v",
                      "global": true
                    },
                    "validate": {
                      "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                      "shorthand": "",
                      "global": false
                    },
                    "vmodule": {
                      "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                      "shorthand": "",
                      "global": true
                    },
                    "warnings-as-errors": {
                      "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "externalname",
                  "description": "Create an ExternalName service",
                  "aliases": null,
                  "flags": {
                    "allow-missing-template-keys": {
                      "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                      "shorthand": "",
                      "global": false
                    },
                    "as": {
                      "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-group": {
                      "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-uid": {
                      "description": "UID to impersonate for the operation.",
                      "shorthand": "",
                      "global": true
                    },
                    "cache-dir": {
                      "description": "Default cache directory",
                      "shorthand": "",
                      "global": true
                    },
                    "certificate-authority": {
                      "description": "Path to a cert file for the certificate authority",
                      "shorthand": "",
                      "global": true
                    },
                    "client-certificate": {
                      "description": "Path to a client certificate file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "client-key": {
                      "description": "Path to a client key file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "cluster": {
                      "description": "The name of the kubeconfig cluster to use",
                      "shorthand": "",
                      "global": true
                    },
                    "context": {
                      "description": "The name of the kubeconfig context to use",
                      "shorthand": "",
                      "global": true
                    },
                    "disable-compression": {
                      "description": "If true, opt-out of response compression for all requests to the server",
                      "shorthand": "",
                      "global": true
                    },
                    "dry-run": {
                      "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                      "shorthand": "",
                      "global": false
                    },
                    "external-name": {
                      "description": "External name of service",
                      "shorthand": "",
                      "global": false
                    },
                    "field-manager": {
                      "description": "Name of the manager used to track field ownership.",
                      "shorthand": "",
                      "global": false
                    },
                    "insecure-skip-tls-verify": {
                      "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                      "shorthand": "",
                      "global": true
                    },
                    "kubeconfig": {
                      "description": "Path to the kubeconfig file to use for CLI requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-flush-frequency": {
                      "description": "Maximum number of seconds between log flushes",
                      "shorthand": "",
                      "global": true
                    },
                    "match-server-version": {
                      "description": "Require server version to match client version",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "If present, the namespace scope for this CLI request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                      "shorthand": "o",
                      "global": false
                    },
                    "password": {
                      "description": "Password for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "profile": {
                      "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                      "shorthand": "",
                      "global": true
                    },
                    "profile-output": {
                      "description": "Name of the file to write the profile to",
                      "shorthand": "",
                      "global": true
                    },
                    "request-timeout": {
                      "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "save-config": {
                      "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                      "shorthand": "",
                      "global": false
                    },
                    "server": {
                      "description": "The address and port of the Kubernetes API server",
                      "shorthand": "s",
                      "global": true
                    },
                    "show-managed-fields": {
                      "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                      "shorthand": "",
                      "global": false
                    },
                    "tcp": {
                      "description": "Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.",
                      "shorthand": "",
                      "global": false
                    },
                    "template": {
                      "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                      "shorthand": "",
                      "global": false
                    },
                    "tls-server-name": {
                      "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                      "shorthand": "",
                      "global": true
                    },
                    "token": {
                      "description": "Bearer token for authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "user": {
                      "description": "The name of the kubeconfig user to use",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "Username for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "v": {
                      "description": "number for the log level verbosity",
                      "shorthand": "v",
                      "global": true
                    },
                    "validate": {
                      "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                      "shorthand": "",
                      "global": false
                    },
                    "vmodule": {
                      "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                      "shorthand": "",
                      "global": true
                    },
                    "warnings-as-errors": {
                      "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "loadbalancer",
                  "description": "Create a LoadBalancer service",
                  "aliases": null,
                  "flags": {
                    "allow-missing-template-keys": {
                      "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                      "shorthand": "",
                      "global": false
                    },
                    "as": {
                      "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-group": {
                      "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-uid": {
                      "description": "UID to impersonate for the operation.",
                      "shorthand": "",
                      "global": true
                    },
                    "cache-dir": {
                      "description": "Default cache directory",
                      "shorthand": "",
                      "global": true
                    },
                    "certificate-authority": {
                      "description": "Path to a cert file for the certificate authority",
                      "shorthand": "",
                      "global": true
                    },
                    "client-certificate": {
                      "description": "Path to a client certificate file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "client-key": {
                      "description": "Path to a client key file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "cluster": {
                      "description": "The name of the kubeconfig cluster to use",
                      "shorthand": "",
                      "global": true
                    },
                    "context": {
                      "description": "The name of the kubeconfig context to use",
                      "shorthand": "",
                      "global": true
                    },
                    "disable-compression": {
                      "description": "If true, opt-out of response compression for all requests to the server",
                      "shorthand": "",
                      "global": true
                    },
                    "dry-run": {
                      "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                      "shorthand": "",
                      "global": false
                    },
                    "field-manager": {
                      "description": "Name of the manager used to track field ownership.",
                      "shorthand": "",
                      "global": false
                    },
                    "insecure-skip-tls-verify": {
                      "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                      "shorthand": "",
                      "global": true
                    },
                    "kubeconfig": {
                      "description": "Path to the kubeconfig file to use for CLI requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-flush-frequency": {
                      "description": "Maximum number of seconds between log flushes",
                      "shorthand": "",
                      "global": true
                    },
                    "match-server-version": {
                      "description": "Require server version to match client version",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "If present, the namespace scope for this CLI request",
                      "shorthand": "n",
                      "global": true
                    },
                    "output": {
                      "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                      "shorthand": "o",
                      "global": false
                    },
                    "password": {
                      "description": "Password for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "profile": {
                      "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                      "shorthand": "",
                      "global": true
                    },
                    "profile-output": {
                      "description": "Name of the file to write the profile to",
                      "shorthand": "",
                      "global": true
                    },
                    "request-timeout": {
                      "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "save-config": {
                      "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                      "shorthand": "",
                      "global": false
                    },
                    "server": {
                      "description": "The address and port of the Kubernetes API server",
                      "shorthand": "s",
                      "global": true
                    },
                    "show-managed-fields": {
                      "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                      "shorthand": "",
                      "global": false
                    },
                    "tcp": {
                      "description": "Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.",
                      "shorthand": "",
                      "global": false
                    },
                    "template": {
                      "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                      "shorthand": "",
                      "global": false
                    },
                    "tls-server-name": {
                      "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                      "shorthand": "",
                      "global": true
                    },
                    "token": {
                      "description": "Bearer token for authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "user": {
                      "description": "The name of the kubeconfig user to use",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "Username for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "v": {
                      "description": "number for the log level verbosity",
                      "shorthand": "v",
                      "global": true
                    },
                    "validate": {
                      "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                      "shorthand": "",
                      "global": false
                    },
                    "vmodule": {
                      "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                      "shorthand": "",
                      "global": true
                    },
                    "warnings-as-errors": {
                      "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                },
                {
                  "name": "nodeport",
                  "description": "Create a NodePort service",
                  "aliases": null,
                  "flags": {
                    "allow-missing-template-keys": {
                      "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                      "shorthand": "",
                      "global": false
                    },
                    "as": {
                      "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-group": {
                      "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                      "shorthand": "",
                      "global": true
                    },
                    "as-uid": {
                      "description": "UID to impersonate for the operation.",
                      "shorthand": "",
                      "global": true
                    },
                    "cache-dir": {
                      "description": "Default cache directory",
                      "shorthand": "",
                      "global": true
                    },
                    "certificate-authority": {
                      "description": "Path to a cert file for the certificate authority",
                      "shorthand": "",
                      "global": true
                    },
                    "client-certificate": {
                      "description": "Path to a client certificate file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "client-key": {
                      "description": "Path to a client key file for TLS",
                      "shorthand": "",
                      "global": true
                    },
                    "cluster": {
                      "description": "The name of the kubeconfig cluster to use",
                      "shorthand": "",
                      "global": true
                    },
                    "context": {
                      "description": "The name of the kubeconfig context to use",
                      "shorthand": "",
                      "global": true
                    },
                    "disable-compression": {
                      "description": "If true, opt-out of response compression for all requests to the server",
                      "shorthand": "",
                      "global": true
                    },
                    "dry-run": {
                      "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                      "shorthand": "",
                      "global": false
                    },
                    "field-manager": {
                      "description": "Name of the manager used to track field ownership.",
                      "shorthand": "",
                      "global": false
                    },
                    "insecure-skip-tls-verify": {
                      "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                      "shorthand": "",
                      "global": true
                    },
                    "kubeconfig": {
                      "description": "Path to the kubeconfig file to use for CLI requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "log-flush-frequency": {
                      "description": "Maximum number of seconds between log flushes",
                      "shorthand": "",
                      "global": true
                    },
                    "match-server-version": {
                      "description": "Require server version to match client version",
                      "shorthand": "",
                      "global": true
                    },
                    "namespace": {
                      "description": "If present, the namespace scope for this CLI request",
                      "shorthand": "n",
                      "global": true
                    },
                    "node-port": {
                      "description": "Port used to expose the service on each node in a cluster.",
                      "shorthand": "",
                      "global": false
                    },
                    "output": {
                      "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                      "shorthand": "o",
                      "global": false
                    },
                    "password": {
                      "description": "Password for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "profile": {
                      "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                      "shorthand": "",
                      "global": true
                    },
                    "profile-output": {
                      "description": "Name of the file to write the profile to",
                      "shorthand": "",
                      "global": true
                    },
                    "request-timeout": {
                      "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                      "shorthand": "",
                      "global": true
                    },
                    "save-config": {
                      "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                      "shorthand": "",
                      "global": false
                    },
                    "server": {
                      "description": "The address and port of the Kubernetes API server",
                      "shorthand": "s",
                      "global": true
                    },
                    "show-managed-fields": {
                      "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                      "shorthand": "",
                      "global": false
                    },
                    "tcp": {
                      "description": "Port pairs can be specified as '\u003cport\u003e:\u003ctargetPort\u003e'.",
                      "shorthand": "",
                      "global": false
                    },
                    "template": {
                      "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                      "shorthand": "",
                      "global": false
                    },
                    "tls-server-name": {
                      "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                      "shorthand": "",
                      "global": true
                    },
                    "token": {
                      "description": "Bearer token for authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "user": {
                      "description": "The name of the kubeconfig user to use",
                      "shorthand": "",
                      "global": true
                    },
                    "username": {
                      "description": "Username for basic authentication to the API server",
                      "shorthand": "",
                      "global": true
                    },
                    "v": {
                      "description": "number for the log level verbosity",
                      "shorthand": "v",
                      "global": true
                    },
                    "validate": {
                      "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                      "shorthand": "",
                      "global": false
                    },
                    "vmodule": {
                      "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                      "shorthand": "",
                      "global": true
                    },
                    "warnings-as-errors": {
                      "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                      "shorthand": "",
                      "global": true
                    }
                  },
                  "subcommands": null
                }
              ]
            },
            {
              "name": "serviceaccount",
              "description": "Create a service account with the specified name",
              "aliases": [
                "sa"
              ],
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "save-config": {
                  "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "validate": {
                  "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
                  "shorthand": "",
                  "global": false
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "token",
              "description": "Request a service account token",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "audience": {
                  "description": "Audience of the requested token. If unset, defaults to requesting a token for use with the Kubernetes API server. May be repeated to request a token valid for multiple audiences.",
                  "shorthand": "",
                  "global": false
                },
                "bound-object-kind": {
                  "description": "Kind of an object to bind the token to. Supported kinds are Pod, Secret. If set, --bound-object-name must be provided.",
                  "shorthand": "",
                  "global": false
                },
                "bound-object-name": {
                  "description": "Name of an object to bind the token to. The token will expire when the object is deleted. Requires --bound-object-kind.",
                  "shorthand": "",
                  "global": false
                },
                "bound-object-uid": {
                  "description": "UID of an object to bind the token to. Requires --bound-object-kind and --bound-object-name. If unset, the UID of the existing object is used.",
                  "shorthand": "",
                  "global": false
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "duration": {
                  "description": "Requested lifetime of the issued token. If not set, the lifetime will be determined by the server automatically. The server may return a token with a longer or shorter lifetime.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "debug",
          "description": "Create debugging sessions for troubleshooting workloads and nodes",
          "aliases": null,
          "flags": {
            "arguments-only": {
              "description": "If specified, everything after -- will be passed to the new container as Args instead of Command.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "attach": {
              "description": "If true, wait for the container to start running, and then attach as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true.",
              "shorthand": "",
              "global": false
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "container": {
              "description": "Container name to use for debug container.",
              "shorthand": "c",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "copy-to": {
              "description": "Create a copy of the target Pod with this name.",
              "shorthand": "",
              "global": false
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "env": {
              "description": "Environment variables to set in the container.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "identifying the resource to debug",
              "shorthand": "f",
              "global": false
            },
            "image": {
              "description": "Container image to use for debug container.",
              "shorthand": "",
              "global": false
            },
            "image-pull-policy": {
              "description": "The image pull policy for the container. If left empty, this value will not be specified by the client and defaulted by the server.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Debugging profile. Options are \"legacy\", \"general\", \"baseline\", \"netadmin\", or \"restricted\".",
              "shorthand": "",
              "global": false
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "quiet": {
              "description": "If true, suppress informational messages.",
              "shorthand": "q",
              "global": false
            },
            "replace": {
              "description": "When used with '--copy-to', delete the original Pod.",
              "shorthand": "",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "same-node": {
              "description": "When used with '--copy-to', schedule the copy of target Pod on the same node.",
              "shorthand": "",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "set-image": {
              "description": "When used with '--copy-to', a list of name=image pairs for changing container images, similar to how 'kubectl set image' works.",
              "shorthand": "",
              "global": false
            },
            "share-processes": {
              "description": "When used with '--copy-to', enable process namespace sharing in the copy.",
              "shorthand": "",
              "global": false
            },
            "stdin": {
              "description": "Keep stdin open on the container(s) in the pod, even if nothing is attached.",
              "shorthand": "i",
              "global": false
            },
            "target": {
              "description": "When using an ephemeral container, target processes in this container name.",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "tty": {
              "description": "Allocate a TTY for the debugging container.",
              "shorthand": "t",
              "global": false
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "delete",
          "description": "Delete resources by file names, stdin, resources and names, or by resources and label selector",
          "aliases": null,
          "flags": {
            "all": {
              "description": "Delete all resources, in the namespace of the specified resource types.",
              "shorthand": "",
              "global": false
            },
            "all-namespaces": {
              "description": "If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.",
              "shorthand": "A",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "cascade": {
              "description": "Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background.",
              "shorthand": "",
              "global": false
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "field-selector": {
              "description": "Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "containing the resource to delete.",
              "shorthand": "f",
              "global": false
            },
            "force": {
              "description": "If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.",
              "shorthand": "",
              "global": false
            },
            "grace-period": {
              "description": "Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).",
              "shorthand": "",
              "global": false
            },
            "ignore-not-found": {
              "description": "Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "interactive": {
              "description": "If true, delete resource only when user confirms. This flag is in Alpha.",
              "shorthand": "i",
              "global": false
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process a kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "now": {
              "description": "If true, resources are signaled for immediate shutdown (same as --grace-period=1).",
              "shorthand": "",
              "global": false
            },
            "output": {
              "description": "Output mode. Use \"-o name\" for shorter output (resource/name).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "raw": {
              "description": "Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "timeout": {
              "description": "The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "wait": {
              "description": "If true, wait for resources to be gone before returning. This waits for finalizers.",
              "shorthand": "",
              "global": false
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "describe",
          "description": "Show details of a specific resource or group of resources",
          "aliases": null,
          "flags": {
            "all-namespaces": {
              "description": "If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.",
              "shorthand": "A",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "chunk-size": {
              "description": "Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.",
              "shorthand": "",
              "global": false
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "filename": {
              "description": "Filename, directory, or URL to files containing the resource to describe",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-events": {
              "description": "If true, display events related to the described object.",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "diff",
          "description": "Diff the live version against a would-be applied version",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "concurrency": {
              "description": "Number of objects to process in parallel when diffing against the live version. Larger number = faster, but more memory, I/O and CPU over that shorter period of time.",
              "shorthand": "",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files contains the configuration to diff",
              "shorthand": "f",
              "global": false
            },
            "force-conflicts": {
              "description": "If true, server-side apply will force the changes against conflicts.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "prune": {
              "description": "Include resources that would be deleted by pruning. Can be used with -l and default shows all resources would be pruned",
              "shorthand": "",
              "global": false
            },
            "prune-allowlist": {
              "description": "Overwrite the default whitelist with \u003cgroup/version/kind\u003e for --prune",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "server-side": {
              "description": "If true, apply runs in the server instead of the client.",
              "shorthand": "",
              "global": false
            },
            "show-managed-fields": {
              "description": "If true, include managed fields in the diff.",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "drain",
          "description": "Drain node in preparation for maintenance",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "chunk-size": {
              "description": "Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.",
              "shorthand": "",
              "global": false
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "delete-emptydir-data": {
              "description": "Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).",
              "shorthand": "",
              "global": false
            },
            "delete-local-data": {
              "description": "Continue even if there are pods using emptyDir (local data that will be deleted when the node is drained).",
              "shorthand": "",
              "global": false
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "disable-eviction": {
              "description": "Force drain to use delete, even if eviction is supported. This will bypass checking PodDisruptionBudgets, use with caution.",
              "shorthand": "",
              "global": false
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "force": {
              "description": "Continue even if there are pods that do not declare a controller.",
              "shorthand": "",
              "global": false
            },
            "grace-period": {
              "description": "Period of time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.",
              "shorthand": "",
              "global": false
            },
            "ignore-daemonsets": {
              "description": "Ignore DaemonSet-managed pods.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "pod-selector": {
              "description": "Label selector to filter pods on the node",
              "shorthand": "",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "skip-wait-for-delete-timeout": {
              "description": "If pod DeletionTimestamp older than N seconds, skip waiting for the pod.  Seconds must be greater than 0 to skip.",
              "shorthand": "",
              "global": false
            },
            "timeout": {
              "description": "The length of time to wait before giving up, zero means infinite",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "edit",
          "description": "Edit a resource on the server",
          "aliases": null,
          "flags": {
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files to use to edit the resource",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "output-patch": {
              "description": "Output the patch if the resource is edited.",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "save-config": {
              "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
              "shorthand": "",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "subresource": {
              "description": "If specified, edit will operate on the subresource of the requested object. Must be one of [status]. This flag is beta and may change in the future.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "validate": {
              "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
              "shorthand": "",
              "global": false
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            },
            "windows-line-endings": {
              "description": "Defaults to the line ending native to your platform.",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "events",
          "description": "List events",
          "aliases": null,
          "flags": {
            "all-namespaces": {
              "description": "If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.",
              "shorthand": "A",
              "global": false
            },
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "chunk-size": {
              "description": "Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.",
              "shorthand": "",
              "global": false
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "for": {
              "description": "Filter events to only those pertaining to the specified resource.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "no-headers": {
              "description": "When using the default output format, don't print headers.",
              "shorthand": "",
              "global": false
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "types": {
              "description": "Output only events of given types.",
              "shorthand": "",
              "global": false
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            },
            "watch": {
              "description": "After listing the requested events, watch for more events.",
              "shorthand": "w",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "exec",
          "description": "Execute a command in a container",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "container": {
              "description": "Container name. If omitted, use the kubectl.kubernetes.io/default-container annotation for selecting the container to be attached or the first container in the pod will be chosen",
              "shorthand": "c",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "filename": {
              "description": "to use to exec into the resource",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "pod-running-timeout": {
              "description": "The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running",
              "shorthand": "",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "quiet": {
              "description": "Only print output from the remote session",
              "shorthand": "q",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "stdin": {
              "description": "Pass stdin to the container",
              "shorthand": "i",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "tty": {
              "description": "Stdin is a TTY",
              "shorthand": "t",
              "global": false
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "explain",
          "description": "Get documentation for a resource",
          "aliases": null,
          "flags": {
            "api-version": {
              "description": "Use given api-version (group/version) of the resource.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Format in which to render the schema. Valid values are: (plaintext, plaintext-openapiv2).",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "recursive": {
              "description": "When true, print the name of all the fields recursively. Otherwise, print the available fields with their description.",
              "shorthand": "",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "expose",
          "description": "Take a replication controller, service, deployment or pod and expose it as a new Kubernetes service",
          "aliases": null,
          "flags": {
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "cluster-ip": {
              "description": "ClusterIP to be assigned to the service. Leave empty to auto-allocate, or set to 'None' to create a headless service.",
              "shorthand": "",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "external-ip": {
              "description": "Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files identifying the resource to expose a service",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "labels": {
              "description": "Labels to apply to the service created by this call.",
              "shorthand": "l",
              "global": false
            },
            "load-balancer-ip": {
              "description": "IP to assign to the LoadBalancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "name": {
              "description": "The name for the newly created object.",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "override-type": {
              "description": "The method used to override the generated object: json, merge, or strategic.",
              "shorthand": "",
              "global": false
            },
            "overrides": {
              "description": "An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "port": {
              "description": "The port that the service should serve on. Copied from the resource being exposed, if unspecified",
              "shorthand": "",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "protocol": {
              "description": "The network protocol for the service to be created. Default is 'TCP'.",
              "shorthand": "",
              "global": false
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "save-config": {
              "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
              "shorthand": "",
              "global": false
            },
            "selector": {
              "description": "A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.)",
              "shorthand": "",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "session-affinity": {
              "description": "If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'",
              "shorthand": "",
              "global": false
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "target-port": {
              "description": "Name or number for the port on the container that the service should direct traffic to. Optional.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "type": {
              "description": "Type for this service: ClusterIP, NodePort, LoadBalancer, or ExternalName. Default is 'ClusterIP'.",
              "shorthand": "",
              "global": false
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "get",
          "description": "Display one or many resources",
          "aliases": null,
          "flags": {
            "all-namespaces": {
              "description": "If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.",
              "shorthand": "A",
              "global": false
            },
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "chunk-size": {
              "description": "Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.",
              "shorthand": "",
              "global": false
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "field-selector": {
              "description": "Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
              "shorthand": "f",
              "global": false
            },
            "ignore-not-found": {
              "description": "If the requested object does not exist the command will return exit code 0.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "label-columns": {
              "description": "Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...",
              "shorthand": "L",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "no-headers": {
              "description": "When using the default or custom-column output format, don't print headers (default print headers).",
              "shorthand": "",
              "global": false
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file, custom-columns, custom-columns-file, wide). See custom columns [https://kubernetes.io/docs/reference/kubectl/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [https://kubernetes.io/docs/reference/kubectl/jsonpath/].",
              "shorthand": "o",
              "global": false
            },
            "output-watch-events": {
              "description": "Output watch event objects when --watch or --watch-only is used. Existing objects are output as initial ADDED events.",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "raw": {
              "description": "Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "server-print": {
              "description": "If true, have the server return the appropriate table output. Supports extension APIs and CRDs.",
              "shorthand": "",
              "global": false
            },
            "show-kind": {
              "description": "If present, list the resource type for the requested object(s).",
              "shorthand": "",
              "global": false
            },
            "show-labels": {
              "description": "When printing, show all labels as the last column (default hide labels column)",
              "shorthand": "",
              "global": false
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "sort-by": {
              "description": "If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.",
              "shorthand": "",
              "global": false
            },
            "subresource": {
              "description": "If specified, gets the subresource of the requested object. Must be one of [status scale]. This flag is beta and may change in the future.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            },
            "watch": {
              "description": "After listing/getting the requested object, watch for changes.",
              "shorthand": "w",
              "global": false
            },
            "watch-only": {
              "description": "Watch for changes to the requested object(s), without listing/getting first.",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "kustomize",
          "description": "Build a kustomization target from a directory or URL",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-current-user": {
              "description": "use the uid and gid of the command executor to run the function in the container",
              "shorthand": "",
              "global": false
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "enable-alpha-plugins": {
              "description": "enable kustomize plugins",
              "shorthand": "",
              "global": false
            },
            "enable-helm": {
              "description": "Enable use of the Helm chart inflator generator.",
              "shorthand": "",
              "global": false
            },
            "enable-managedby-label": {
              "description": "enable adding app.kubernetes.io/managed-by",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "a list of environment variables to be used by functions",
              "shorthand": "e",
              "global": false
            },
            "helm-api-versions": {
              "description": "Kubernetes api versions used by Helm for Capabilities.APIVersions",
              "shorthand": "",
              "global": false
            },
            "helm-command": {
              "description": "helm command (path to executable)",
              "shorthand": "",
              "global": false
            },
            "helm-kube-version": {
              "description": "Kubernetes version used by Helm for Capabilities.KubeVersion",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "load-restrictor": {
              "description": "if set to 'LoadRestrictionsNone', local kustomizations may load files from outside their root. This does, however, break the relocatability of the kustomization.",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "mount": {
              "description": "a list of storage options read from the filesystem",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "network": {
              "description": "enable network access for functions that declare it",
              "shorthand": "",
              "global": false
            },
            "network-name": {
              "description": "the docker network to run the container in",
              "shorthand": "",
              "global": false
            },
            "output": {
              "description": "If specified, write output to this path.",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "reorder": {
              "description": "Reorder the resources just before output. Use 'legacy' to apply a legacy reordering (Namespaces first, Webhooks last, etc). Use 'none' to suppress a final reordering.",
              "shorthand": "",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "label",
          "description": "Update the labels on a resource",
          "aliases": null,
          "flags": {
            "all": {
              "description": "Select all resources, in the namespace of the specified resource types",
              "shorthand": "",
              "global": false
            },
            "all-namespaces": {
              "description": "If true, check the specified action in all namespaces.",
              "shorthand": "A",
              "global": false
            },
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "field-selector": {
              "description": "Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files identifying the resource to update the labels",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "list": {
              "description": "If true, display the labels for a given resource.",
              "shorthand": "",
              "global": false
            },
            "local": {
              "description": "If true, label will NOT contact api-server but run locally.",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "overwrite": {
              "description": "If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "resource-version": {
              "description": "If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.",
              "shorthand": "",
              "global": false
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "logs",
          "description": "Print the logs for a container in a pod",
          "aliases": null,
          "flags": {
            "all-containers": {
              "description": "Get all containers' logs in the pod(s).",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "container": {
              "description": "Print the logs of this container",
              "shorthand": "c",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "follow": {
              "description": "Specify if the logs should be streamed.",
              "shorthand": "f",
              "global": false
            },
            "ignore-errors": {
              "description": "If watching / following pod logs, allow for any errors that occur to be non-fatal",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify-backend": {
              "description": "Skip verifying the identity of the kubelet that logs are requested from.  In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired.",
              "shorthand": "",
              "global": false
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "limit-bytes": {
              "description": "Maximum bytes of logs to return. Defaults to no limit.",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "max-log-requests": {
              "description": "Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5.",
              "shorthand": "",
              "global": false
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "pod-running-timeout": {
              "description": "The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running",
              "shorthand": "",
              "global": false
            },
            "prefix": {
              "description": "Prefix each log line with the log source (pod name and container name)",
              "shorthand": "",
              "global": false
            },
            "previous": {
              "description": "If true, print the logs for the previous instance of the container in a pod if it exists.",
              "shorthand": "p",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "since": {
              "description": "Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used.",
              "shorthand": "",
              "global": false
            },
            "since-time": {
              "description": "Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used.",
              "shorthand": "",
              "global": false
            },
            "tail": {
              "description": "Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided.",
              "shorthand": "",
              "global": false
            },
            "timestamps": {
              "description": "Include timestamps on each line in the log output",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "options",
          "description": "Print the list of flags inherited by all commands",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "patch",
          "description": "Update fields of a resource",
          "aliases": null,
          "flags": {
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files identifying the resource to update",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "local": {
              "description": "If true, patch will operate on the content of the file, not the server-side resource.",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "patch": {
              "description": "The patch to be applied to the resource JSON file.",
              "shorthand": "p",
              "global": false
            },
            "patch-file": {
              "description": "A file containing a patch to be applied to the resource.",
              "shorthand": "",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "subresource": {
              "description": "If specified, patch will operate on the subresource of the requested object. Must be one of [status scale]. This flag is beta and may change in the future.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "type": {
              "description": "The type of patch being provided; one of [json merge strategic]",
              "shorthand": "",
              "global": false
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "plugin",
          "description": "Provides utilities for interacting with plugins",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "list",
              "description": "List all visible plugin executables on a user's PATH",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "name-only": {
                  "description": "If true, display only the binary name of each plugin, rather than its full path",
                  "shorthand": "",
                  "global": false
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "port-forward",
          "description": "Forward one or more local ports to a pod",
          "aliases": null,
          "flags": {
            "address": {
              "description": "Addresses to listen on (comma separated). Only accepts IP addresses or localhost as a value. When localhost is supplied, kubectl will try to bind on both 127.0.0.1 and ::1 and will fail if neither of these addresses are available to bind.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "pod-running-timeout": {
              "description": "The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running",
              "shorthand": "",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "proxy",
          "description": "Run a proxy to the Kubernetes API server",
          "aliases": null,
          "flags": {
            "accept-hosts": {
              "description": "Regular expression for hosts that the proxy should accept.",
              "shorthand": "",
              "global": false
            },
            "accept-paths": {
              "description": "Regular expression for paths that the proxy should accept.",
              "shorthand": "",
              "global": false
            },
            "address": {
              "description": "The IP address on which to serve on.",
              "shorthand": "",
              "global": false
            },
            "api-prefix": {
              "description": "Prefix to serve the proxied API under.",
              "shorthand": "",
              "global": false
            },
            "append-server-path": {
              "description": "If true, enables automatic path appending of the kube context server path to each request.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "disable-filter": {
              "description": "If true, disable request filtering in the proxy. This is dangerous, and can leave you vulnerable to XSRF attacks, when used with an accessible port.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "keepalive": {
              "description": "keepalive specifies the keep-alive period for an active network connection. Set to 0 to disable keepalive.",
              "shorthand": "",
              "global": false
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "port": {
              "description": "The port on which to run the proxy. Set to 0 to pick a random port.",
              "shorthand": "p",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "reject-methods": {
              "description": "Regular expression for HTTP methods that the proxy should reject (example --reject-methods='POST,PUT,PATCH'). ",
              "shorthand": "",
              "global": false
            },
            "reject-paths": {
              "description": "Regular expression for paths that the proxy should reject. Paths specified here will be rejected even accepted by --accept-paths.",
              "shorthand": "",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "unix-socket": {
              "description": "Unix socket on which to run the proxy.",
              "shorthand": "u",
              "global": false
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            },
            "www": {
              "description": "Also serve static files from the given directory under the specified prefix.",
              "shorthand": "w",
              "global": false
            },
            "www-prefix": {
              "description": "Prefix to serve static files under, if static file directory is specified.",
              "shorthand": "P",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "replace",
          "description": "Replace a resource by file name or stdin",
          "aliases": null,
          "flags": {
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "cascade": {
              "description": "Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background.",
              "shorthand": "",
              "global": false
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "The files that contain the configurations to replace.",
              "shorthand": "f",
              "global": false
            },
            "force": {
              "description": "If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.",
              "shorthand": "",
              "global": false
            },
            "grace-period": {
              "description": "Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process a kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "raw": {
              "description": "Raw URI to PUT to the server.  Uses the transport specified by the kubeconfig file.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "save-config": {
              "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
              "shorthand": "",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "subresource": {
              "description": "If specified, replace will operate on the subresource of the requested object. Must be one of [status scale]. This flag is beta and may change in the future.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "timeout": {
              "description": "The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "validate": {
              "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
              "shorthand": "",
              "global": false
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "wait": {
              "description": "If true, wait for resources to be gone before returning. This waits for finalizers.",
              "shorthand": "",
              "global": false
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "rollout",
          "description": "Manage the rollout of a resource",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "history",
              "description": "View rollout history",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "revision": {
                  "description": "See the details, including podTemplate of the revision specified",
                  "shorthand": "",
                  "global": false
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "pause",
              "description": "Mark the provided resource as paused",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "restart",
              "description": "Restart a resource",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "resume",
              "description": "Resume a paused resource",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "status",
              "description": "Show the status of the rollout",
              "aliases": null,
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "revision": {
                  "description": "Pin to a specific revision for showing its status. Defaults to 0 (last revision).",
                  "shorthand": "",
                  "global": false
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "timeout": {
                  "description": "The length of time to wait before ending watch, zero means never. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                },
                "watch": {
                  "description": "Watch the status of the rollout until it's done.",
                  "shorthand": "w",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "undo",
              "description": "Undo a previous rollout",
              "aliases": null,
              "flags": {
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "to-revision": {
                  "description": "The revision to rollback to. Default to 0 (last revision).",
                  "shorthand": "",
                  "global": false
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "run",
          "description": "Run a particular image on the cluster",
          "aliases": null,
          "flags": {
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "annotations": {
              "description": "Annotations to apply to the pod.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "attach": {
              "description": "If true, wait for the Pod to start running, and then attach to the Pod as if 'kubectl attach ...' were called.  Default false, unless '-i/--stdin' is set, in which case the default is true. With '--restart=Never' the exit code of the container process is returned.",
              "shorthand": "",
              "global": false
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "cascade": {
              "description": "Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background.",
              "shorthand": "",
              "global": false
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "command": {
              "description": "If true and extra arguments are present, use them as the 'command' field in the container, rather than the 'args' field which is the default.",
              "shorthand": "",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "env": {
              "description": "Environment variables to set in the container.",
              "shorthand": "",
              "global": false
            },
            "expose": {
              "description": "If true, create a ClusterIP service associated with the pod.  Requires `--port`.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "to use to replace the resource.",
              "shorthand": "f",
              "global": false
            },
            "force": {
              "description": "If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation.",
              "shorthand": "",
              "global": false
            },
            "grace-period": {
              "description": "Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).",
              "shorthand": "",
              "global": false
            },
            "image": {
              "description": "The image for the container to run.",
              "shorthand": "",
              "global": false
            },
            "image-pull-policy": {
              "description": "The image pull policy for the container.  If left empty, this value will not be specified by the client and defaulted by the server.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process a kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "labels": {
              "description": "Comma separated labels to apply to the pod. Will override previous values.",
              "shorthand": "l",
              "global": false
            },
            "leave-stdin-open": {
              "description": "If the pod is started in interactive mode or with stdin, leave stdin open after the first attach completes. By default, stdin will be closed after the first attach completes.",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "override-type": {
              "description": "The method used to override the generated object: json, merge, or strategic.",
              "shorthand": "",
              "global": false
            },
            "overrides": {
              "description": "An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "pod-running-timeout": {
              "description": "The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running",
              "shorthand": "",
              "global": false
            },
            "port": {
              "description": "The port that this container exposes.",
              "shorthand": "",
              "global": false
            },
            "privileged": {
              "description": "If true, run the container in privileged mode.",
              "shorthand": "",
              "global": false
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "quiet": {
              "description": "If true, suppress prompt messages.",
              "shorthand": "q",
              "global": false
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "restart": {
              "description": "The restart policy for this Pod.  Legal values [Always, OnFailure, Never].",
              "shorthand": "",
              "global": false
            },
            "rm": {
              "description": "If true, delete the pod after it exits.  Only valid when attaching to the container, e.g. with '--attach' or with '-i/--stdin'.",
              "shorthand": "",
              "global": false
            },
            "save-config": {
              "description": "If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.",
              "shorthand": "",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "stdin": {
              "description": "Keep stdin open on the container in the pod, even if nothing is attached.",
              "shorthand": "i",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "timeout": {
              "description": "The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "tty": {
              "description": "Allocate a TTY for the container in the pod.",
              "shorthand": "t",
              "global": false
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "wait": {
              "description": "If true, wait for resources to be gone before returning. This waits for finalizers.",
              "shorthand": "",
              "global": false
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "scale",
          "description": "Set a new size for a deployment, replica set, or replication controller",
          "aliases": null,
          "flags": {
            "all": {
              "description": "Select all resources in the namespace of the specified resource types",
              "shorthand": "",
              "global": false
            },
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "current-replicas": {
              "description": "Precondition for current size. Requires that the current size of the resource match this value in order to scale. -1 (default) for no condition.",
              "shorthand": "",
              "global": false
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "Filename, directory, or URL to files identifying the resource to set a new size",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "kustomize": {
              "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
              "shorthand": "k",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "record": {
              "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
              "shorthand": "",
              "global": false
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "replicas": {
              "description": "The new desired number of replicas. Required.",
              "shorthand": "",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "resource-version": {
              "description": "Precondition for resource version. Requires that the current resource version match this value in order to scale.",
              "shorthand": "",
              "global": false
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "timeout": {
              "description": "The length of time to wait before giving up on a scale operation, zero means don't wait. Any other values should contain a corresponding time unit (e.g. 1s, 2m, 3h).",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "set",
          "description": "Set specific features on objects",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "env",
              "description": "Update environment variables on a pod template",
              "aliases": null,
              "flags": {
                "all": {
                  "description": "If true, select all resources in the namespace of the specified resource types",
                  "shorthand": "",
                  "global": false
                },
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "containers": {
                  "description": "The names of containers in the selected pod templates to change - may use wildcards",
                  "shorthand": "c",
                  "global": false
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "env": {
                  "description": "Specify a key-value pair for an environment variable to set into each container.",
                  "shorthand": "e",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files the resource to update the env",
                  "shorthand": "f",
                  "global": false
                },
                "from": {
                  "description": "The name of a resource from which to inject environment variables",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "keys": {
                  "description": "Comma-separated list of keys to import from specified resource",
                  "shorthand": "",
                  "global": false
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "list": {
                  "description": "If true, display the environment and any changes in the standard format. this flag will removed when we have kubectl view env.",
                  "shorthand": "",
                  "global": false
                },
                "local": {
                  "description": "If true, set env will NOT contact api-server but run locally.",
                  "shorthand": "",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "overwrite": {
                  "description": "If true, allow environment to be overwritten, otherwise reject updates that overwrite existing environment.",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "prefix": {
                  "description": "Prefix to append to variable names",
                  "shorthand": "",
                  "global": false
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "resolve": {
                  "description": "If true, show secret or configmap references when listing variables",
                  "shorthand": "",
                  "global": false
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "image",
              "description": "Update the image of a pod template",
              "aliases": null,
              "flags": {
                "all": {
                  "description": "Select all resources, in the namespace of the specified resource types",
                  "shorthand": "",
                  "global": false
                },
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "local": {
                  "description": "If true, set image will NOT contact api-server but run locally.",
                  "shorthand": "",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "record": {
                  "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
                  "shorthand": "",
                  "global": false
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "resources",
              "description": "Update resource requests/limits on objects with pod templates",
              "aliases": null,
              "flags": {
                "all": {
                  "description": "Select all resources, in the namespace of the specified resource types",
                  "shorthand": "",
                  "global": false
                },
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "containers": {
                  "description": "The names of containers in the selected pod templates to change, all containers are selected by default - may use wildcards",
                  "shorthand": "c",
                  "global": false
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "limits": {
                  "description": "The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.",
                  "shorthand": "",
                  "global": false
                },
                "local": {
                  "description": "If true, set resources will NOT contact api-server but run locally.",
                  "shorthand": "",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "record": {
                  "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
                  "shorthand": "",
                  "global": false
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "requests": {
                  "description": "The resource requirement requests for this container.  For example, 'cpu=100m,memory=256Mi'.  Note that server side components may assign requests depending on the server configuration, such as limit ranges.",
                  "shorthand": "",
                  "global": false
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "selector",
              "description": "Set the selector on a resource",
              "aliases": null,
              "flags": {
                "all": {
                  "description": "Select all resources in the namespace of the specified resource types",
                  "shorthand": "",
                  "global": false
                },
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "identifying the resource.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "local": {
                  "description": "If true, annotation will NOT contact api-server but run locally.",
                  "shorthand": "",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "record": {
                  "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
                  "shorthand": "",
                  "global": false
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "resource-version": {
                  "description": "If non-empty, the selectors update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.",
                  "shorthand": "",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "serviceaccount",
              "description": "Update the service account of a resource",
              "aliases": [
                "sa"
              ],
              "flags": {
                "all": {
                  "description": "Select all resources, in the namespace of the specified resource types",
                  "shorthand": "",
                  "global": false
                },
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files identifying the resource to get from a server.",
                  "shorthand": "f",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "local": {
                  "description": "If true, set serviceaccount will NOT contact api-server but run locally.",
                  "shorthand": "",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "record": {
                  "description": "Record current kubectl command in the resource annotation. If set to false, do not record the command. If set to true, record the command. If not set, default to updating the existing annotation value only if one already exists.",
                  "shorthand": "",
                  "global": false
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "subject",
              "description": "Update the user, group, or service account in a role binding or cluster role binding",
              "aliases": null,
              "flags": {
                "all": {
                  "description": "Select all resources, in the namespace of the specified resource types",
                  "shorthand": "",
                  "global": false
                },
                "allow-missing-template-keys": {
                  "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
                  "shorthand": "",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "dry-run": {
                  "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
                  "shorthand": "",
                  "global": false
                },
                "field-manager": {
                  "description": "Name of the manager used to track field ownership.",
                  "shorthand": "",
                  "global": false
                },
                "filename": {
                  "description": "Filename, directory, or URL to files the resource to update the subjects",
                  "shorthand": "f",
                  "global": false
                },
                "group": {
                  "description": "Groups to bind to the role",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "kustomize": {
                  "description": "Process the kustomization directory. This flag can't be used together with -f or -R.",
                  "shorthand": "k",
                  "global": false
                },
                "local": {
                  "description": "If true, set subject will NOT contact api-server but run locally.",
                  "shorthand": "",
                  "global": false
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "output": {
                  "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
                  "shorthand": "o",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "recursive": {
                  "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
                  "shorthand": "R",
                  "global": false
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "serviceaccount": {
                  "description": "Service accounts to bind to the role",
                  "shorthand": "",
                  "global": false
                },
                "show-managed-fields": {
                  "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
                  "shorthand": "",
                  "global": false
                },
                "template": {
                  "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "user": {
                  "description": "Usernames to bind to the role",
                  "shorthand": "",
                  "global": false
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "taint",
          "description": "Update the taints on one or more nodes",
          "aliases": null,
          "flags": {
            "all": {
              "description": "Select all nodes in the cluster",
              "shorthand": "",
              "global": false
            },
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "field-manager": {
              "description": "Name of the manager used to track field ownership.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "overwrite": {
              "description": "If true, allow taints to be overwritten, otherwise reject taint updates that overwrite existing taints.",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "validate": {
              "description": "Must be one of: strict (or true), warn, ignore (or false).\n\t\t\"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.\n\t\t\"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.\n\t\t\"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.",
              "shorthand": "",
              "global": false
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "top",
          "description": "Display resource (CPU/memory) usage",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "node",
              "description": "Display resource (CPU/memory) usage of nodes",
              "aliases": [
                "nodes",
                "no"
              ],
              "flags": {
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "no-headers": {
                  "description": "If present, print output without headers",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "show-capacity": {
                  "description": "Print node resources based on Capacity instead of Allocatable(default) of the nodes.",
                  "shorthand": "",
                  "global": false
                },
                "sort-by": {
                  "description": "If non-empty, sort nodes list using specified field. The field can be either 'cpu' or 'memory'.",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "use-protocol-buffers": {
                  "description": "Enables using protocol-buffers to access Metrics API.",
                  "shorthand": "",
                  "global": false
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "pod",
              "description": "Display resource (CPU/memory) usage of pods",
              "aliases": [
                "pods",
                "po"
              ],
              "flags": {
                "all-namespaces": {
                  "description": "If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.",
                  "shorthand": "A",
                  "global": false
                },
                "as": {
                  "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
                  "shorthand": "",
                  "global": true
                },
                "as-group": {
                  "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
                  "shorthand": "",
                  "global": true
                },
                "as-uid": {
                  "description": "UID to impersonate for the operation.",
                  "shorthand": "",
                  "global": true
                },
                "cache-dir": {
                  "description": "Default cache directory",
                  "shorthand": "",
                  "global": true
                },
                "certificate-authority": {
                  "description": "Path to a cert file for the certificate authority",
                  "shorthand": "",
                  "global": true
                },
                "client-certificate": {
                  "description": "Path to a client certificate file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "client-key": {
                  "description": "Path to a client key file for TLS",
                  "shorthand": "",
                  "global": true
                },
                "cluster": {
                  "description": "The name of the kubeconfig cluster to use",
                  "shorthand": "",
                  "global": true
                },
                "containers": {
                  "description": "If present, print usage of containers within a pod.",
                  "shorthand": "",
                  "global": false
                },
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "disable-compression": {
                  "description": "If true, opt-out of response compression for all requests to the server",
                  "shorthand": "",
                  "global": true
                },
                "field-selector": {
                  "description": "Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.",
                  "shorthand": "",
                  "global": false
                },
                "insecure-skip-tls-verify": {
                  "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "Path to the kubeconfig file to use for CLI requests.",
                  "shorthand": "",
                  "global": true
                },
                "log-flush-frequency": {
                  "description": "Maximum number of seconds between log flushes",
                  "shorthand": "",
                  "global": true
                },
                "match-server-version": {
                  "description": "Require server version to match client version",
                  "shorthand": "",
                  "global": true
                },
                "namespace": {
                  "description": "If present, the namespace scope for this CLI request",
                  "shorthand": "n",
                  "global": true
                },
                "no-headers": {
                  "description": "If present, print output without headers.",
                  "shorthand": "",
                  "global": false
                },
                "password": {
                  "description": "Password for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "profile": {
                  "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
                  "shorthand": "",
                  "global": true
                },
                "profile-output": {
                  "description": "Name of the file to write the profile to",
                  "shorthand": "",
                  "global": true
                },
                "request-timeout": {
                  "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
                  "shorthand": "",
                  "global": true
                },
                "selector": {
                  "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
                  "shorthand": "l",
                  "global": false
                },
                "server": {
                  "description": "The address and port of the Kubernetes API server",
                  "shorthand": "s",
                  "global": true
                },
                "sort-by": {
                  "description": "If non-empty, sort pods list using specified field. The field can be either 'cpu' or 'memory'.",
                  "shorthand": "",
                  "global": false
                },
                "sum": {
                  "description": "Print the sum of the resource usage",
                  "shorthand": "",
                  "global": false
                },
                "tls-server-name": {
                  "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
                  "shorthand": "",
                  "global": true
                },
                "token": {
                  "description": "Bearer token for authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "use-protocol-buffers": {
                  "description": "Enables using protocol-buffers to access Metrics API.",
                  "shorthand": "",
                  "global": false
                },
                "user": {
                  "description": "The name of the kubeconfig user to use",
                  "shorthand": "",
                  "global": true
                },
                "username": {
                  "description": "Username for basic authentication to the API server",
                  "shorthand": "",
                  "global": true
                },
                "v": {
                  "description": "number for the log level verbosity",
                  "shorthand": "v",
                  "global": true
                },
                "vmodule": {
                  "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
                  "shorthand": "",
                  "global": true
                },
                "warnings-as-errors": {
                  "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
                  "shorthand": "",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "uncordon",
          "description": "Mark node as schedulable",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "dry-run": {
              "description": "Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Matching objects must satisfy all of the specified label constraints.",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "version",
          "description": "Print the client and server version information",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client": {
              "description": "If true, shows client version only (no server required).",
              "shorthand": "",
              "global": false
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "One of 'yaml' or 'json'.",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "wait",
          "description": "Experimental: Wait for a specific condition on one or many resources",
          "aliases": null,
          "flags": {
            "all": {
              "description": "Select all resources in the namespace of the specified resource types",
              "shorthand": "",
              "global": false
            },
            "all-namespaces": {
              "description": "If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.",
              "shorthand": "A",
              "global": false
            },
            "allow-missing-template-keys": {
              "description": "If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation. User could be a regular user or a service account in a namespace.",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation.",
              "shorthand": "",
              "global": true
            },
            "cache-dir": {
              "description": "Default cache directory",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "field-selector": {
              "description": "Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.",
              "shorthand": "",
              "global": false
            },
            "filename": {
              "description": "identifying the resource.",
              "shorthand": "f",
              "global": false
            },
            "for": {
              "description": "The condition to wait on: [delete|condition=condition-name[=condition-value]|jsonpath='{JSONPath expression}'=[JSONPath value]]. The default condition-value is true.  Condition values are compared after Unicode simple case folding, which is a more general form of case-insensitivity.",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "local": {
              "description": "If true, annotation will NOT contact api-server but run locally.",
              "shorthand": "",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "match-server-version": {
              "description": "Require server version to match client version",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "output": {
              "description": "Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).",
              "shorthand": "o",
              "global": false
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "profile": {
              "description": "Name of profile to capture. One of (none|cpu|heap|goroutine|threadcreate|block|mutex)",
              "shorthand": "",
              "global": true
            },
            "profile-output": {
              "description": "Name of the file to write the profile to",
              "shorthand": "",
              "global": true
            },
            "recursive": {
              "description": "Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.",
              "shorthand": "R",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "selector": {
              "description": "Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)",
              "shorthand": "l",
              "global": false
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "show-managed-fields": {
              "description": "If true, keep the managedFields when printing objects in JSON or YAML format.",
              "shorthand": "",
              "global": false
            },
            "template": {
              "description": "Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].",
              "shorthand": "",
              "global": false
            },
            "timeout": {
              "description": "The length of time to wait before giving up.  Zero means check once and don't wait, negative means wait for a week.",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "warnings-as-errors": {
              "description": "Treat warnings received from the server as errors and exit with a non-zero exit code",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        }
      ]
    },
    {
      "name": "login",
      "description": "Log in to the Deckhouse Kubernetes Platform",
      "aliases": null,
      "flags": {
        "add-dir-header": {
          "description": "If true, adds the file directory to the header of the log messages",
          "shorthand": "",
          "global": false
        },
        "alsologtostderr": {
          "description": "log to standard error as well as files (no effect when -logtostderr=true)",
          "shorthand": "",
          "global": false
        },
        "log-backtrace-at": {
          "description": "when logging hits line file:N, emit a stack trace",
          "shorthand": "",
          "global": false
        },
        "log-dir": {
          "description": "If non-empty, write log files in this directory (no effect when -logtostderr=true)",
          "shorthand": "",
          "global": false
        },
        "log-file": {
          "description": "If non-empty, use this log file (no effect when -logtostderr=true)",
          "shorthand": "",
          "global": false
        },
        "log-file-max-size": {
          "description": "Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited.",
          "shorthand": "",
          "global": false
        },
        "logtostderr": {
          "description": "log to standard error instead of files",
          "shorthand": "",
          "global": false
        },
        "one-output": {
          "description": "If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)",
          "shorthand": "",
          "global": false
        },
        "skip-headers": {
          "description": "If true, avoid header prefixes in the log messages",
          "shorthand": "",
          "global": false
        },
        "skip-log-headers": {
          "description": "If true, avoid headers when opening log files (no effect when -logtostderr=true)",
          "shorthand": "",
          "global": false
        },
        "stderrthreshold": {
          "description": "logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true)",
          "shorthand": "",
          "global": false
        },
        "v": {
          "description": "number for the log level verbosity",
          "shorthand": "v",
          "global": false
        },
        "vmodule": {
          "description": "comma-separated list of pattern=N settings for file-filtered logging",
          "shorthand": "",
          "global": false
        }
      },
      "subcommands": [
        {
          "name": "get-token",
          "description": "Run as a kubectl credential plugin",
          "aliases": null,
          "flags": {
            "add-dir-header": {
              "description": "If true, adds the file directory to the header of the log messages",
              "shorthand": "",
              "global": true
            },
            "alsologtostderr": {
              "description": "log to standard error as well as files (no effect when -logtostderr=true)",
              "shorthand": "",
              "global": true
            },
            "authentication-timeout-sec": {
              "description": "[authcode] Timeout of authentication in seconds",
              "shorthand": "",
              "global": false
            },
            "browser-command": {
              "description": "[authcode] Command to open the browser",
              "shorthand": "",
              "global": false
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": false
            },
            "certificate-authority-data": {
              "description": "Base64 encoded cert for the certificate authority",
              "shorthand": "",
              "global": false
            },
            "force-refresh": {
              "description": "If set, refresh the ID token regardless of its expiration time",
              "shorthand": "",
              "global": false
            },
            "grant-type": {
              "description": "Authorization grant type to use. One of (auto|authcode|authcode-keyboard|password|device-code)",
              "shorthand": "",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If set, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": false
            },
            "listen-address": {
              "description": "[authcode] Address to bind to the local server. If multiple addresses are set, it will try binding in order",
              "shorthand": "",
              "global": false
            },
            "listen-port": {
              "description": "[authcode] deprecated: port to bind to the local server",
              "shorthand": "",
              "global": false
            },
            "local-server-cert": {
              "description": "[authcode] Certificate path for the local server",
              "shorthand": "",
              "global": false
            },
            "local-server-key": {
              "description": "[authcode] Certificate key path for the local server",
              "shorthand": "",
              "global": false
            },
            "log-backtrace-at": {
              "description": "when logging hits line file:N, emit a stack trace",
              "shorthand": "",
              "global": true
            },
            "log-dir": {
              "description": "If non-empty, write log files in this directory (no effect when -logtostderr=true)",
              "shorthand": "",
              "global": true
            },
            "log-file": {
              "description": "If non-empty, use this log file (no effect when -logtostderr=true)",
              "shorthand": "",
              "global": true
            },
            "log-file-max-size": {
              "description": "Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited.",
              "shorthand": "",
              "global": true
            },
            "logtostderr": {
              "description": "log to standard error instead of files",
              "shorthand": "",
              "global": true
            },
            "oidc-auth-request-extra-params": {
              "description": "[authcode, authcode-keyboard] Extra query parameters to send with an authentication request",
              "shorthand": "",
              "global": false
            },
            "oidc-client-id": {
              "description": "Client ID of the provider (mandatory)",
              "shorthand": "",
              "global": false
            },
            "oidc-client-secret": {
              "description": "Client secret of the provider",
              "shorthand": "",
              "global": false
            },
            "oidc-extra-scope": {
              "description": "Scopes to request to the provider",
              "shorthand": "",
              "global": false
            },
            "oidc-issuer-url": {
              "description": "Issuer URL of the provider (mandatory)",
              "shorthand": "",
              "global": false
            },
            "oidc-redirect-url-authcode-keyboard": {
              "description": "[authcode-keyboard] Redirect URL",
              "shorthand": "",
              "global": false
            },
            "oidc-redirect-url-hostname": {
              "description": "[authcode] Hostname of the redirect URL",
              "shorthand": "",
              "global": false
            },
            "oidc-use-pkce": {
              "description": "Force PKCE usage",
              "shorthand": "",
              "global": false
            },
            "one-output": {
              "description": "If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)",
              "shorthand": "",
              "global": true
            },
            "open-url-after-authentication": {
              "description": "[authcode] If set, open the URL in the browser after authentication",
              "shorthand": "",
              "global": false
            },
            "password": {
              "description": "[password] Password for resource owner password credentials grant",
              "shorthand": "",
              "global": false
            },
            "skip-headers": {
              "description": "If true, avoid header prefixes in the log messages",
              "shorthand": "",
              "global": true
            },
            "skip-log-headers": {
              "description": "If true, avoid headers when opening log files (no effect when -logtostderr=true)",
              "shorthand": "",
              "global": true
            },
            "skip-open-browser": {
              "description": "[authcode] Do not open the browser automatically",
              "shorthand": "",
              "global": false
            },
            "stderrthreshold": {
              "description": "logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=true)",
              "shorthand": "",
              "global": true
            },
            "tls-renegotiation-freely": {
              "description": "If set, allow a remote server to repeatedly request renegotiation",
              "shorthand": "",
              "global": false
            },
            "tls-renegotiation-once": {
              "description": "If set, allow a remote server to request renegotiation once per connection",
              "shorthand": "",
              "global": false
            },
            "token-cache-dir": {
              "description": "Path to a directory for token cache",
              "shorthand": "",
              "global": false
            },
            "username": {
              "description": "[password] Username for resource owner password credentials grant",
              "shorthand": "",
              "global": false
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        }
      ]
    },
    {
      "name": "mirror",
      "description": "Copy Deckhouse Kubernetes Platform distribution to the local filesystem or third-party registry",
      "aliases": null,
      "flags": {},
      "subcommands": [
        {
          "name": "pull",
          "description": "Copy Deckhouse Kubernetes Platform distribution to the local filesystem",
          "aliases": null,
          "flags": {
            "deckhouse-tag": {
              "description": "Specific Deckhouse build tag to pull. Conflicts with --since-version. If registry contains release channel image for specified tag, all release channels in the bundle will be pointed to it.",
              "shorthand": "",
              "global": false
            },
            "exclude-module": {
              "description": "Blacklist specific modules from downloading. Format is \"module-name[@version]\". Use one flag per each module. Overridden by use of --include-module.\"",
              "shorthand": "e",
              "global": false
            },
            "force": {
              "description": "Overwrite existing bundle packages if they are conflicting with current pull operation.",
              "shorthand": "",
              "global": false
            },
            "gost-digest": {
              "description": "Calculate GOST R 34.11-2012 STREEBOG digest for downloaded bundle",
              "shorthand": "",
              "global": false
            },
            "images-bundle-chunk-size": {
              "description": "Split resulting bundle file into chunks of at most N gigabytes",
              "shorthand": "c",
              "global": false
            },
            "include-module": {
              "description": "Whitelist specific modules for downloading. Format is \"module-name[@version]\". Use one flag per each module. Disables blacklisting by --exclude-module.\"",
              "shorthand": "i",
              "global": false
            },
            "insecure": {
              "description": "Interact with registries over HTTP.",
              "shorthand": "",
              "global": false
            },
            "license": {
              "description": "Deckhouse license key. Shortcut for --source-login=license-token --source-password=\u003c\u003e.",
              "shorthand": "l",
              "global": false
            },
            "modules-path-suffix": {
              "description": "Suffix to append to source repo path to locate modules.",
              "shorthand": "",
              "global": false
            },
            "no-modules": {
              "description": "Do not pull Deckhouse modules into bundle.",
              "shorthand": "",
              "global": false
            },
            "no-platform": {
              "description": "Do not pull Deckhouse Kubernetes Platform into bundle.",
              "shorthand": "",
              "global": false
            },
            "no-pull-resume": {
              "description": "Do not continue last unfinished pull operation and start from scratch.",
              "shorthand": "",
              "global": false
            },
            "no-security-db": {
              "description": "Do not pull security databases into bundle.",
              "shorthand": "",
              "global": false
            },
            "since-version": {
              "description": "Minimal Deckhouse release to pull. Ignored if above current Rock Solid release. Conflicts with --deckhouse-tag.",
              "shorthand": "",
              "global": false
            },
            "source": {
              "description": "Source registry to pull Deckhouse images from.",
              "shorthand": "",
              "global": false
            },
            "source-login": {
              "description": "Source registry login.",
              "shorthand": "",
              "global": false
            },
            "source-password": {
              "description": "Source registry password.",
              "shorthand": "",
              "global": false
            },
            "tls-skip-verify": {
              "description": "Disable TLS certificate validation.",
              "shorthand": "",
              "global": false
            },
            "tmp-dir": {
              "description": "Path to a temporary directory to use for image pulling and pushing. All processing is done in this directory, so make sure there is enough free disk space to accommodate the entire bundle you are downloading;",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "push",
          "description": "Copy Deckhouse Kubernetes Platform distribution to the third-party registry",
          "aliases": null,
          "flags": {
            "insecure": {
              "description": "Interact with registries over HTTP.",
              "shorthand": "",
              "global": false
            },
            "modules-path-suffix": {
              "description": "Suffix to append to source repo path to locate modules.",
              "shorthand": "",
              "global": false
            },
            "registry-login": {
              "description": "Username to log into the target registry.",
              "shorthand": "u",
              "global": false
            },
            "registry-password": {
              "description": "Password to log into the target registry.",
              "shorthand": "p",
              "global": false
            },
            "tls-skip-verify": {
              "description": "Disable TLS certificate validation.",
              "shorthand": "",
              "global": false
            },
            "tmp-dir": {
              "description": "Path to a temporary directory to use for image pulling and pushing. All processing is done in this directory, so make sure there is enough free disk space to accommodate the entire bundle you are downloading;",
              "shorthand": "",
              "global": false
            }
          },
          "subcommands": null
        }
      ]
    },
    {
      "name": "stronghold",
      "description": "Deckhouse Stronghold commands",
      "aliases": null,
      "flags": {},
      "subcommands": [
        {
          "name": "auth",
          "description": "Interact with auth methods",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "delete",
          "description": "Delete secrets and configuration",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "kv",
          "description": "Interact with Stronghold's Key-Value storage",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "lease",
          "description": "Interact with leases",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "list",
          "description": "List data or secrets",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "login",
          "description": "Authenticate locally",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "operator",
          "description": "Perform operator-specific tasks",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "patch",
          "description": "Patch data, configuration, and secrets",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "path-help",
          "description": "Retrieve API help for paths",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "pki",
          "description": "Interact with Stronghold's PKI Secrets Engine",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "policy",
          "description": "Interact with policies",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "print",
          "description": "Prints runtime configurations",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "read",
          "description": "Read data and retrieves secrets",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "secrets",
          "description": "Interact with secrets engines",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "status",
          "description": "Print seal and HA status",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "token",
          "description": "Interact with tokens",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "transit",
          "description": "Interact with Stronghold's Transit Secrets Engine",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "unwrap",
          "description": "Unwrap a wrapped secret",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "version",
          "description": "Print version",
          "aliases": null,
          "flags": {},
          "subcommands": null
        },
        {
          "name": "write",
          "description": "Write data, configuration, and secrets",
          "aliases": null,
          "flags": {},
          "subcommands": null
        }
      ]
    },
    {
      "name": "system",
      "description": "Operate system options.",
      "aliases": [
        "s"
      ],
      "flags": {
        "context": {
          "description": "The name of the kubeconfig context to use",
          "shorthand": "",
          "global": false
        },
        "kubeconfig": {
          "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
          "shorthand": "k",
          "global": false
        }
      },
      "subcommands": [
        {
          "name": "collect-debug-info",
          "description": "Collect debug info.",
          "aliases": null,
          "flags": {
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
              "shorthand": "k",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "edit",
          "description": "Edit configuration files",
          "aliases": null,
          "flags": {
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "editor": {
              "description": "Your favourite editor.",
              "shorthand": "e",
              "global": false
            },
            "kubeconfig": {
              "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
              "shorthand": "k",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "cluster-configuration",
              "description": "Edit cluster-configuration.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "editor": {
                  "description": "Your favourite editor.",
                  "shorthand": "e",
                  "global": false
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "provider-cluster-configuration",
              "description": "Edit provider-cluster-configuration.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "editor": {
                  "description": "Your favourite editor.",
                  "shorthand": "e",
                  "global": false
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "static-cluster-configuration",
              "description": "Edit static-cluster-configuration.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "editor": {
                  "description": "Your favourite editor.",
                  "shorthand": "e",
                  "global": false
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "module",
          "description": "Operate the Deckhouse Kubernetes Platform modules",
          "aliases": null,
          "flags": {
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
              "shorthand": "k",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "disable",
              "description": "Disable module.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "enable",
              "description": "Enable module.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "list",
              "description": "List enabled modules.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "editor": {
                  "description": "Your favourite editor.",
                  "shorthand": "e",
                  "global": false
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "snapshots",
              "description": "Dump shapshots.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                }
              },
              "subcommands": null
            },
            {
              "name": "values",
              "description": "Dump values.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                }
              },
              "subcommands": null
            }
          ]
        },
        {
          "name": "queue",
          "description": "Dump queues.",
          "aliases": null,
          "flags": {
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
              "shorthand": "k",
              "global": true
            }
          },
          "subcommands": [
            {
              "name": "list",
              "description": "Dump all queues.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                },
                "output": {
                  "description": "Output format: json|yaml|text.",
                  "shorthand": "o",
                  "global": false
                },
                "show-empty": {
                  "description": "Show empty queues.",
                  "shorthand": "e",
                  "global": false
                }
              },
              "subcommands": null
            },
            {
              "name": "main",
              "description": "Dump main queue.",
              "aliases": null,
              "flags": {
                "context": {
                  "description": "The name of the kubeconfig context to use",
                  "shorthand": "",
                  "global": true
                },
                "kubeconfig": {
                  "description": "KubeConfig of the cluster. (default is $KUBECONFIG when it is set, $HOME/.kube/config otherwise)",
                  "shorthand": "k",
                  "global": true
                },
                "output": {
                  "description": "Output format: json|yaml|text.",
                  "shorthand": "o",
                  "global": false
                }
              },
              "subcommands": null
            }
          ]
        }
      ]
    },
    {
      "name": "v",
      "description": "d8 v controls virtual machine related operations on your kubernetes cluster.",
      "aliases": [
        "virtualization"
      ],
      "flags": {
        "as": {
          "description": "Username to impersonate for the operation",
          "shorthand": "",
          "global": false
        },
        "as-group": {
          "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
          "shorthand": "",
          "global": false
        },
        "as-uid": {
          "description": "UID to impersonate for the operation",
          "shorthand": "",
          "global": false
        },
        "certificate-authority": {
          "description": "Path to a cert file for the certificate authority",
          "shorthand": "",
          "global": false
        },
        "client-certificate": {
          "description": "Path to a client certificate file for TLS",
          "shorthand": "",
          "global": false
        },
        "client-key": {
          "description": "Path to a client key file for TLS",
          "shorthand": "",
          "global": false
        },
        "cluster": {
          "description": "The name of the kubeconfig cluster to use",
          "shorthand": "",
          "global": false
        },
        "context": {
          "description": "The name of the kubeconfig context to use",
          "shorthand": "",
          "global": false
        },
        "disable-compression": {
          "description": "If true, opt-out of response compression for all requests to the server",
          "shorthand": "",
          "global": false
        },
        "insecure-skip-tls-verify": {
          "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
          "shorthand": "",
          "global": false
        },
        "kubeconfig": {
          "description": "Path to the kubeconfig file to use for CLI requests.",
          "shorthand": "",
          "global": false
        },
        "log-flush-frequency": {
          "description": "Maximum number of seconds between log flushes",
          "shorthand": "",
          "global": false
        },
        "namespace": {
          "description": "If present, the namespace scope for this CLI request",
          "shorthand": "n",
          "global": false
        },
        "password": {
          "description": "Password for basic authentication to the API server",
          "shorthand": "",
          "global": false
        },
        "proxy-url": {
          "description": "If provided, this URL will be used to connect via proxy",
          "shorthand": "",
          "global": false
        },
        "request-timeout": {
          "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
          "shorthand": "",
          "global": false
        },
        "server": {
          "description": "The address and port of the Kubernetes API server",
          "shorthand": "s",
          "global": false
        },
        "tls-server-name": {
          "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
          "shorthand": "",
          "global": false
        },
        "token": {
          "description": "Bearer token for authentication to the API server",
          "shorthand": "",
          "global": false
        },
        "user": {
          "description": "The name of the kubeconfig user to use",
          "shorthand": "",
          "global": false
        },
        "username": {
          "description": "Username for basic authentication to the API server",
          "shorthand": "",
          "global": false
        },
        "v": {
          "description": "number for the log level verbosity",
          "shorthand": "v",
          "global": false
        },
        "vmodule": {
          "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
          "shorthand": "",
          "global": false
        }
      },
      "subcommands": [
        {
          "name": "console",
          "description": "Connect to a console of a virtual machine.",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "timeout": {
              "description": "The number of minutes to wait for the virtual machine to be ready.",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "evict",
          "description": "Evict a virtual machine.",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "create-only": {
              "description": "--create-only, -c: Set this flag for create operation only.",
              "shorthand": "c",
              "global": false
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "force": {
              "description": "--force, -f: Set this flag to force the operation.",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "timeout": {
              "description": "--timeout, -t: Set this flag to change the timeout.",
              "shorthand": "t",
              "global": false
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "wait": {
              "description": "--wait, -w: Set this flag to wait for the operation to complete.",
              "shorthand": "w",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "port-forward",
          "description": "Forward local ports to a virtual machine",
          "aliases": null,
          "flags": {
            "address": {
              "description": "--address=: Set this to the address the local ports should be opened on",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "stdio": {
              "description": "--stdio=true: Set this to true to forward the tunnel to stdout/stdin; Only works with a single port",
              "shorthand": "",
              "global": false
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "restart",
          "description": "Restart a virtual machine.",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "create-only": {
              "description": "--create-only, -c: Set this flag for create operation only.",
              "shorthand": "c",
              "global": false
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "force": {
              "description": "--force, -f: Set this flag to force the operation.",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "timeout": {
              "description": "--timeout, -t: Set this flag to change the timeout.",
              "shorthand": "t",
              "global": false
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "wait": {
              "description": "--wait, -w: Set this flag to wait for the operation to complete.",
              "shorthand": "w",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "scp",
          "description": "SCP files from/to a virtual machine.",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "identity-file": {
              "description": "--identity-file=/home/user/.ssh/id_rsa: Set the path to a private key used for authenticating to the server; If not provided, the client will try to use the local ssh-agent at $SSH_AUTH_SOCK",
              "shorthand": "i",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "known-hosts": {
              "description": "--d8virtualization_known_hosts=/home/user/.ssh/known-hosts: Set the path to the known_hosts file.",
              "shorthand": "",
              "global": false
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "local-ssh": {
              "description": "--local-ssh=true: Set this to true to use the SSH/SCP client available on your system by using this command as ProxyCommand; If set to false, this will establish a SSH/SCP connection with limited capabilities provided by this client",
              "shorthand": "",
              "global": false
            },
            "local-ssh-opts": {
              "description": "--local-ssh-opts=\"-o StrictHostKeyChecking=no\" : Additional options to be passed to the local ssh. This is applied only if local-ssh=true",
              "shorthand": "t",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "port": {
              "description": "--port=22: Specify a port on the VM to send SSH traffic to",
              "shorthand": "p",
              "global": false
            },
            "preserve": {
              "description": "Preserves modification times, access times, and modes from the original file.",
              "shorthand": "",
              "global": false
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "recursive": {
              "description": "Recursively copy entire directories",
              "shorthand": "r",
              "global": false
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "--username=root: Set this to the user you want to open the SSH connection as; If unassigned, this will be empty and the SSH default will apply",
              "shorthand": "l",
              "global": false
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "ssh",
          "description": "Open a SSH connection to a virtual machine.",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "command": {
              "description": "--command='ls /': Specify a command to execute in the VM",
              "shorthand": "c",
              "global": false
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "identity-file": {
              "description": "--identity-file=/home/user/.ssh/id_rsa: Set the path to a private key used for authenticating to the server; If not provided, the client will try to use the local ssh-agent at $SSH_AUTH_SOCK",
              "shorthand": "i",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "known-hosts": {
              "description": "--d8virtualization_known_hosts=/home/user/.ssh/known-hosts: Set the path to the known_hosts file.",
              "shorthand": "",
              "global": false
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "local-ssh": {
              "description": "--local-ssh=true: Set this to true to use the SSH/SCP client available on your system by using this command as ProxyCommand; If set to false, this will establish a SSH/SCP connection with limited capabilities provided by this client",
              "shorthand": "",
              "global": false
            },
            "local-ssh-opts": {
              "description": "--local-ssh-opts=\"-o StrictHostKeyChecking=no\" : Additional options to be passed to the local ssh. This is applied only if local-ssh=true",
              "shorthand": "t",
              "global": false
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "port": {
              "description": "--port=22: Specify a port on the VM to send SSH traffic to",
              "shorthand": "p",
              "global": false
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "--username=root: Set this to the user you want to open the SSH connection as; If unassigned, this will be empty and the SSH default will apply",
              "shorthand": "l",
              "global": false
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        },
        {
          "name": "start",
          "description": "Start a virtual machine.",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "create-only": {
              "description": "--create-only, -c: Set this flag for create operation only.",
              "shorthand": "c",
              "global": false
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "force": {
              "description": "--force, -f: Set this flag to force the operation.",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "timeout": {
              "description": "--timeout, -t: Set this flag to change the timeout.",
              "shorthand": "t",
              "global": false
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "wait": {
              "description": "--wait, -w: Set this flag to wait for the operation to complete.",
              "shorthand": "w",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "stop",
          "description": "Stop a virtual machine.",
          "aliases": null,
          "flags": {
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "create-only": {
              "description": "--create-only, -c: Set this flag for create operation only.",
              "shorthand": "c",
              "global": false
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "force": {
              "description": "--force, -f: Set this flag to force the operation.",
              "shorthand": "f",
              "global": false
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "timeout": {
              "description": "--timeout, -t: Set this flag to change the timeout.",
              "shorthand": "t",
              "global": false
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            },
            "wait": {
              "description": "--wait, -w: Set this flag to wait for the operation to complete.",
              "shorthand": "w",
              "global": false
            }
          },
          "subcommands": null
        },
        {
          "name": "vnc",
          "description": "Open a vnc connection to a virtual machine.",
          "aliases": null,
          "flags": {
            "address": {
              "description": "--address=127.0.0.1: Setting this will change the listening address of the VNC server. Example: --address=0.0.0.0 will make the server listen on all interfaces.",
              "shorthand": "",
              "global": false
            },
            "as": {
              "description": "Username to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "as-group": {
              "description": "Group to impersonate for the operation, this flag can be repeated to specify multiple groups.",
              "shorthand": "",
              "global": true
            },
            "as-uid": {
              "description": "UID to impersonate for the operation",
              "shorthand": "",
              "global": true
            },
            "certificate-authority": {
              "description": "Path to a cert file for the certificate authority",
              "shorthand": "",
              "global": true
            },
            "client-certificate": {
              "description": "Path to a client certificate file for TLS",
              "shorthand": "",
              "global": true
            },
            "client-key": {
              "description": "Path to a client key file for TLS",
              "shorthand": "",
              "global": true
            },
            "cluster": {
              "description": "The name of the kubeconfig cluster to use",
              "shorthand": "",
              "global": true
            },
            "context": {
              "description": "The name of the kubeconfig context to use",
              "shorthand": "",
              "global": true
            },
            "disable-compression": {
              "description": "If true, opt-out of response compression for all requests to the server",
              "shorthand": "",
              "global": true
            },
            "insecure-skip-tls-verify": {
              "description": "If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure",
              "shorthand": "",
              "global": true
            },
            "kubeconfig": {
              "description": "Path to the kubeconfig file to use for CLI requests.",
              "shorthand": "",
              "global": true
            },
            "log-flush-frequency": {
              "description": "Maximum number of seconds between log flushes",
              "shorthand": "",
              "global": true
            },
            "namespace": {
              "description": "If present, the namespace scope for this CLI request",
              "shorthand": "n",
              "global": true
            },
            "password": {
              "description": "Password for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "port": {
              "description": "--port=0: Assigning a port value to this will try to run the proxy on the given port if the port is accessible; If unassigned, the proxy will run on a random port",
              "shorthand": "",
              "global": false
            },
            "proxy-only": {
              "description": "--proxy-only=false: Setting this true will run only the vnc proxy and show the port where VNC viewers can connect",
              "shorthand": "",
              "global": false
            },
            "proxy-url": {
              "description": "If provided, this URL will be used to connect via proxy",
              "shorthand": "",
              "global": true
            },
            "request-timeout": {
              "description": "The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.",
              "shorthand": "",
              "global": true
            },
            "server": {
              "description": "The address and port of the Kubernetes API server",
              "shorthand": "s",
              "global": true
            },
            "tls-server-name": {
              "description": "If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.",
              "shorthand": "",
              "global": true
            },
            "token": {
              "description": "Bearer token for authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "user": {
              "description": "The name of the kubeconfig user to use",
              "shorthand": "",
              "global": true
            },
            "username": {
              "description": "Username for basic authentication to the API server",
              "shorthand": "",
              "global": true
            },
            "v": {
              "description": "number for the log level verbosity",
              "shorthand": "v",
              "global": true
            },
            "vmodule": {
              "description": "comma-separated list of pattern=N settings for file-filtered logging (only works for the default text log format)",
              "shorthand": "",
              "global": true
            }
          },
          "subcommands": null
        }
      ]
    }
  ]
}
