#!/usr/bin/env bash

# Copyright 2021 Flant JSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE

source /shell_lib.sh

function __config__(){
  cat <<EOF
configVersion: v1
kubernetesValidating:
- name: d8-authz-multitenancy.deckhouse.io
  group: main
  rules:
  - apiGroups:   ["deckhouse.io"]
    apiVersions: ["*"]
    operations:  ["CREATE", "UPDATE"]
    resources:   ["clusterauthorizationrules"]
    scope:       "Cluster"
EOF
}

function __main__() {
  enableMultiTenancy=$(values::get userAuthz.enableMultiTenancy)
  # don't check ClusterAuthorizationRule if MultiTenancy is enabled
  if [[ "$enableMultiTenancy" == "true" ]]; then
    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":true}
EOF
    return 0;
  fi

  allowAccessToSystemNamespaces=$(context::jq -rc '.review.request.object.spec.allowAccessToSystemNamespaces')
  echo "$allowAccessToSystemNamespaces"
  if [[ "$allowAccessToSystemNamespaces" == "true" ]]; then
    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"You must turn on userAuthz.enableMultiTenancy to use allowAccessToSystemNamespaces flag in your ClusterAuthorizationRule resources."}
EOF
    return 0
  fi


  limitNamespacesEnabled=$(context::jq -rc '.review.request.object.spec.limitNamespaces // [] | length > 0')
  echo "$limitNamespacesEnabled"
  if [[ "$limitNamespacesEnabled" == "true" ]]; then
    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"You must turn on userAuthz.enableMultiTenancy to use limitNamespaces option in your ClusterAuthorizationRule resources."}
EOF
    return 0
  fi


  # allowed response
  cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":true}
EOF
}

hook::run "$@"
