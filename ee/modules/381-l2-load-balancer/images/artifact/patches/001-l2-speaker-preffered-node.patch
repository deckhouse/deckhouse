diff --git a/speaker/layer2_controller.go b/speaker/layer2_controller.go
index 77055934..ce17a703 100644
--- a/speaker/layer2_controller.go
+++ b/speaker/layer2_controller.go
@@ -27,6 +27,7 @@ import (
 	"k8s.io/apimachinery/pkg/types"
 	"k8s.io/apimachinery/pkg/util/sets"
 	"k8s.io/client-go/tools/cache"
+	"k8s.io/utils/strings/slices"

 	"go.universe.tf/metallb/internal/config"
 	"go.universe.tf/metallb/internal/k8s/epslices"
@@ -34,6 +35,10 @@ import (
 	"go.universe.tf/metallb/internal/layer2"
 )

+const (
+	annotationPreferredL2SpeakerNode = "metallb.universe.tf/preferredL2SpeakerNode"
+)
+
 type layer2Controller struct {
 	announcer       *layer2.Announce
 	myNode          string
@@ -121,6 +126,21 @@ func (c *layer2Controller) ShouldAnnounce(l log.Logger, name string, toAnnounce
 		return bytes.Compare(hi[:], hj[:]) < 0
 	})

+	preferredNode, ok := svc.Annotations[annotationPreferredL2SpeakerNode]
+	if ok {
+		// If there is a Service annotation with preferred Node, we are the Node and our Node is available,
+		// then we should announce.
+		if preferredNode == c.myNode && slices.Contains(availableNodes, c.myNode) {
+			return ""
+		}
+
+		// If there is another available preferred Node, we should skip announcing.
+		if slices.Contains(availableNodes, preferredNode) {
+			level.Debug(l).Log("event", "skipping should announce l2", "service", name, "reason", "there is another available preferred node "+preferredNode)
+			return "notOwner"
+		}
+	}
+
 	// Are we first in the list? If so, we win and should announce.
 	if len(availableNodes) > 0 && availableNodes[0] == c.myNode {
 		return ""
