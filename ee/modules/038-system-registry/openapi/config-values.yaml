type: object
x-examples:
  - mode: Direct
  - mode: Proxy
    proxy:
      ca: ""
      host: dev-registry.deckhouse.io
      password: "password"
      path: /sys/deckhouse-oss
      scheme: http
      user: "user"
  - mode: Detached
properties:
  imagesOverride:
    type: object
    default: {}
    description: |
      Images override
    properties:
      registryManager:
        type: string
        description: |
          Registry manager img full path
        x-example:
          - dev-registry.deckhouse.io/registryManager:latest
      mirrorer:
        type: string
        description: |
          Mirroper img full path
        x-example:
          - dev-registry.deckhouse.io/mirrorer:latest
  enableRegistryManager:
    type: boolean
    description: |
      Registry manager enable flag
    default: false
  mode:
    type: string
    description: |
      Registry mode
    enum: [Direct, Proxy, Detached]
    x-doc-default: Direct
    default: Direct
  proxy:
    type: object
    x-example:
      - ca: ""
        host: dev-registry.deckhouse.io
        password: "password"
        path: /sys/deckhouse-oss
        scheme: http
        user: "user"
      - ca: "<CA>"
        host: dev-registry.deckhouse.io
        password: "password"
        path: /sys/deckhouse-oss
        scheme: https
        user: "user"
    description: |
      Proxy mode properties.
    properties:
      host:
        type: string
        description: |
          Host of upstream registry
        x-example:
          - dev-registry.deckhouse.io
      scheme:
        type: string
        description: |
          Registry access scheme (http or https).
        x-example:
          - https
          - http
      ca:
        type: string
        description: |
          CA of upstream registry
        default: ""
        x-example:
          - ""
      path:
        type: string
        description: |
          Path of upstream registry
        x-example:
          - sys/deckhouse-oss
      user:
        type: string
        description: |
          User of upstream registry
        x-example:
          - license-token
      password:
        type: string
        description: |
          Password of upstream registry
        x-example:
          - "123456"
      ttl:
        type: string
        pattern: '(^(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?(?:(\d+)ms)?(?:(\d+)(µs|us))?(?:(\d+)ns)?$)|(^(0)$)'
        description: |
          TTL specifies the expiration time for cached content, after which it will be automatically cleaned up.
          Default: If not set, the TTL defaults to 7 days (168 hours).
          Persistent Cache: If set to 0, the cache will never expire.
        x-example:
          - "168h"
          - "168h10m"
          - "168h10m5s"
        default: 168h
  whitelistSourceRanges:
    type: array
    description: 'An array of CIDRs that are allowed to connect to the embedded registry ingress.'
    items:
      type: string
      pattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))?$'
  https:
    type: object
    x-examples:
      - mode: Disabled
      - mode: OnlyInURI
      - mode: CustomCertificate
        customCertificate:
          secretName: "foobar"
      - mode: CertManager
        certManager:
          clusterIssuerName: letsencrypt
    description: |
      What certificate type to use.

      This parameter completely overrides the `global.modules.https` settings.
    properties:
      mode:
        type: string
        default: "CertManager"
        description: |
          The HTTPS usage mode:
          - `CertManager` — the embedded registry ingress is accessed over HTTPS using a certificate obtained from a clusterIssuer specified in the `certManager.clusterIssuerName` parameter.
          - `CustomCertificate` — the embedded registry ingress is accessed over HTTPS using a certificate from the `d8-system` namespace.
          - `Disabled` — in this mode, the embedded registry ingress can only be accessed over HTTP.
          - `OnlyInURI` — the embedded registry ingress will work over HTTP (thinking that there is an external HTTPS load balancer in front of it that terminates HTTPS traffic). Load balancer should provide a redirect from HTTP to HTTPS.
        enum:
          - "Disabled"
          - "CertManager"
          - "CustomCertificate"
          - "OnlyInURI"
      certManager:
        type: object
        description: |
          Parameters for certmanager.
        properties:
          clusterIssuerName:
            type: string
            default: "letsencrypt"
            x-examples: ["letsencrypt"]
            description: |
              What ClusterIssuer to use for getting an SSL certificate (currently, `letsencrypt`, `letsencrypt-staging`, `selfsigned` are available; also, you can define your own).
      customCertificate:
        type: object
        default: {}
        description: |
          Parameters for custom certificate usage.
        properties:
          secretName:
            type: string
            description: |
              The name of the secret in the `d8-system` namespace to use with the embedded registry ingress.

              This secret must have the [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets) format.
oneOf:
  - required: [mode]
    properties:
      mode:
        enum: [Direct]
    not:
      required: [proxy, detached]
  - required: [mode]
    properties:
      mode:
        enum: [Proxy]
      proxy: {}
    not:
      required: [detached]
  - required: [mode]
    properties:
      mode:
        enum: [Detached]
      detached: {}
    not:
      required: [proxy]
