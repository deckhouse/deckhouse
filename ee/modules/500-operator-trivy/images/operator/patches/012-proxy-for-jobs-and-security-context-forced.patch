diff --git a/pkg/plugins/trivy/image.go b/pkg/plugins/trivy/image.go
index 198c824d..e09ef042 100644
--- a/pkg/plugins/trivy/image.go
+++ b/pkg/plugins/trivy/image.go
@@ -51,7 +51,8 @@ func GetPodSpecForStandaloneMode(ctx trivyoperator.PluginContext,
 	credentials map[string]docker.Auth,
 	securityContext *corev1.SecurityContext,
 	p *plugin,
-	clusterSboms map[string]v1alpha1.SbomReportData) (corev1.PodSpec, []*corev1.Secret, error) {
+	clusterSboms map[string]v1alpha1.SbomReportData,
+) (corev1.PodSpec, []*corev1.Secret, error) {
 	var secret *corev1.Secret
 	var secrets []*corev1.Secret
 	var containersSpec []corev1.Container
@@ -61,6 +62,8 @@ func GetPodSpecForStandaloneMode(ctx trivyoperator.PluginContext,
 		return corev1.PodSpec{}, nil, err
 	}
 
+	applyDeckhouseSecurityContext(securityContext)
+
 	for _, c := range getContainers(spec) {
 		optionalMirroredImage, err := GetMirroredImage(c.Image, config.GetMirrors())
 		if err != nil {
@@ -170,9 +173,9 @@ func GetPodSpecForStandaloneMode(ctx trivyoperator.PluginContext,
 			constructEnvVarSourceFromConfigMap("TRIVY_TIMEOUT", trivyConfigName, keyTrivyTimeout),
 			ConfigWorkloadAnnotationEnvVars(workload, SkipFilesAnnotation, "TRIVY_SKIP_FILES", trivyConfigName, keyTrivySkipFiles),
 			ConfigWorkloadAnnotationEnvVars(workload, SkipDirsAnnotation, "TRIVY_SKIP_DIRS", trivyConfigName, keyTrivySkipDirs),
-			constructEnvVarSourceFromConfigMap("HTTP_PROXY", trivyConfigName, keyTrivyHTTPProxy),
-			constructEnvVarSourceFromConfigMap("HTTPS_PROXY", trivyConfigName, keyTrivyHTTPSProxy),
-			constructEnvVarSourceFromConfigMap("NO_PROXY", trivyConfigName, keyTrivyNoProxy),
+			constructEnvVarFromExistingEnv("HTTP_PROXY"),
+			constructEnvVarFromExistingEnv("HTTPS_PROXY"),
+			constructEnvVarFromExistingEnv("NO_PROXY"),
 		}
 
 		if len(config.GetSslCertDir()) > 0 {
@@ -317,6 +320,8 @@ func GetPodSpecForClientServerMode(ctx trivyoperator.PluginContext, config Confi
 		return corev1.PodSpec{}, nil, err
 	}
 
+	applyDeckhouseSecurityContext(securityContext)
+
 	trivyImageRef, err := config.GetImageRef()
 	if err != nil {
 		return corev1.PodSpec{}, nil, err
@@ -389,9 +394,9 @@ func GetPodSpecForClientServerMode(ctx trivyoperator.PluginContext, config Confi
 
 	for _, container := range containersSpec {
 		env := []corev1.EnvVar{
-			constructEnvVarSourceFromConfigMap("HTTP_PROXY", trivyConfigName, keyTrivyHTTPProxy),
-			constructEnvVarSourceFromConfigMap("HTTPS_PROXY", trivyConfigName, keyTrivyHTTPSProxy),
-			constructEnvVarSourceFromConfigMap("NO_PROXY", trivyConfigName, keyTrivyNoProxy),
+			constructEnvVarFromExistingEnv("HTTP_PROXY"),
+			constructEnvVarFromExistingEnv("HTTPS_PROXY"),
+			constructEnvVarFromExistingEnv("NO_PROXY"),
 			constructEnvVarSourceFromConfigMap("TRIVY_SEVERITY", trivyConfigName, KeyTrivySeverity),
 			constructEnvVarSourceFromConfigMap("TRIVY_IGNORE_UNFIXED", trivyConfigName, keyTrivyIgnoreUnfixed),
 			constructEnvVarSourceFromConfigMap("TRIVY_OFFLINE_SCAN", trivyConfigName, keyTrivyOfflineScan),
@@ -544,9 +549,9 @@ func GetPodSpecForClientServerMode(ctx trivyoperator.PluginContext, config Confi
 
 func initContainerEnvVar(trivyConfigName string, config Config) []corev1.EnvVar {
 	envs := []corev1.EnvVar{
-		constructEnvVarSourceFromConfigMap("HTTP_PROXY", trivyConfigName, keyTrivyHTTPProxy),
-		constructEnvVarSourceFromConfigMap("HTTPS_PROXY", trivyConfigName, keyTrivyHTTPSProxy),
-		constructEnvVarSourceFromConfigMap("NO_PROXY", trivyConfigName, keyTrivyNoProxy),
+		constructEnvVarFromExistingEnv("HTTP_PROXY"),
+		constructEnvVarFromExistingEnv("HTTPS_PROXY"),
+		constructEnvVarFromExistingEnv("NO_PROXY"),
 		constructEnvVarSourceFromSecret("GITHUB_TOKEN", trivyConfigName, keyTrivyGitHubToken),
 	}
 	if config.TrivyDBRepositoryCredentialsSet() {
@@ -806,3 +811,24 @@ func (p *plugin) newSecretWithAggregateImagePullCredentials(obj client.Object, c
 		Data: secretData,
 	}
 }
+
+func applyDeckhouseSecurityContext(securityContext *corev1.SecurityContext) {
+	securityContext.ReadOnlyRootFilesystem = ptr.To(true)
+	securityContext.AllowPrivilegeEscalation = ptr.To(false)
+	securityContext.RunAsUser = ptr.To(int64(64535))
+	securityContext.RunAsGroup = ptr.To(int64(64535))
+	securityContext.RunAsNonRoot = ptr.To(true)
+	securityContext.Capabilities = &corev1.Capabilities{
+		Drop: []corev1.Capability{"ALL"},
+	}
+	securityContext.SeccompProfile = &corev1.SeccompProfile{
+		Type: corev1.SeccompProfileTypeRuntimeDefault,
+	}
+}
+
+func constructEnvVarFromExistingEnv(envKey string) corev1.EnvVar {
+	return corev1.EnvVar{
+		Name:  envKey,
+		Value: os.Getenv(envKey),
+	}
+}
