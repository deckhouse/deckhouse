---
image: {{ .ModuleName }}/{{ .ImageName }}
fromImage: common/distroless
import:
  - image: {{ $.ModuleName }}/{{ $.ImageName }}-artifact
    add: /node-collector
    to: /usr/local/bin/node-collector
    before: setup
  - image: tools/procps
    add: /bin/pgrep
    to: /usr/bin/pgrep
    before: setup
  - image: tools/procps
    add: /bin/ps
    to: /usr/bin/ps
    before: setup
git:
{{- include "image mount points" . }}
imageSpec:
  config:
    entrypoint: [ "/usr/local/bin/node-collector" ]
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /{{ $.ModulePath }}modules/500-{{ $.ModuleName }}/images/{{ $.ImageName }}/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  install:
  - git clone --depth 1 --branch v0.3.1 $(cat /run/secrets/SOURCE_REPO)/aquasecurity/k8s-node-collector.git /src
  - cd /src
  - git apply /patches/*.patch --verbose
  - rm -rf .git
---
image: {{ .ModuleName }}/{{ .ImageName }}-artifact
fromImage: {{ eq $.SVACE_ENABLED "false" | ternary "builder/golang-alpine" "builder/alt-go-svace" }}
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
shell:
  install:
  - export GOPROXY=$(cat /run/secrets/GOPROXY)
  - cd /src
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - |
    {{- include "image-build.build" (set $ "BuildCommand" `go build -ldflags="-s -w" -o /node-collector cmd/node-collector/main.go`) | indent 6 }}
  - chown root:root /node-collector
  - chmod 0700 /node-collector
