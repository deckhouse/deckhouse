{{- $falcoVersion := "0.41.1" }}
{{- $falcoctlVersion := "0.11.2" }}
{{- $pluginsVersion := "plugins/gcpaudit/v0.6.0" }}
---
image: {{ $.ModuleName }}/{{ $.ImageName }}
fromImage: base/distroless
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-artifact
  add: /out
  to: /
  includePaths:
  - usr/bin/falco
  - etc/falco
  - usr/share/falco/plugins/libcontainer.so
  - lib64
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-falcoctl-artifact
  add: /out/falcoctl
  to: /usr/bin/falcoctl
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-plugins-artifact
  add: /out/usr/share/falco/plugins
  to: /usr/share/falco/plugins
  before: install
imageSpec:
  config:
    cmd: ["/usr/bin/falco"]
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
fromImage: builder/src
final: false
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  install:
  - git clone --branch {{ $falcoVersion}} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/falco.git /src/falco
  - git clone --branch {{ $pluginsVersion }} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/plugins.git /src/plugins
  - git clone --branch v{{ $falcoctlVersion }} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/falcoctl.git /src/falcoctl
  - rm -rf shared plugins/cloudtrail plugins/dummy* plugins/gcpaudit plugins/github plugins/k8saudit-* plugins/kafka plugins/okta build docs
  - cd /src/falcoctl
  - git rev-parse HEAD > RELEASE
  - git rev-parse HEAD > COMMIT
  - rm -rf /src/falco/.git
  - rm -rf /src/plugins/.git
  - rm -rf /src/falcoctl/.git
---
image: {{ .ModuleName }}/{{ .ImageName }}-falcoctl-artifact
fromImage: builder/golang-alpine
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/falcoctl
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
shell:
  beforeInstall:
  {{- include "alpine packages proxy" . | nindent 2 }}
  - apk add --no-cache make bash
  install:
  - cd /src
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - GOPROXY=$(cat /run/secrets/GOPROXY) go mod download
  - RELEASE="$(cat RELEASE)" COMMIT="$(cat COMMIT)" make falcoctl
  - mkdir -p /out
  - cp falcoctl /out
  - chown 64535:64535 /out/falcoctl
  - chmod 0755 /out/falcoctl
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-artifact
fromImage: {{ $.ModuleName }}/{{ $.ImageName }}-builder-artifact
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/falco
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
- from: tmp_dir
  to: /src/build
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - apt-get install -y nginx openssl ca-certificates
  - find /var/lib/apt/ /var/cache/apt/ -type f -delete
  install:
  {{- if .DistroPackagesProxy }}
  # build in the closed env
  - |
    set -e
    mkdir -p /etc/nginx/ssl/ca /etc/nginx/ssl/certs /etc/nginx/ssl/private
    openssl genrsa -out /etc/nginx/ssl/ca/rootCA.key 4096
    openssl req -x509 -new -nodes -key /etc/nginx/ssl/ca/rootCA.key -sha256 -days 3650 \
      -subj "/C=RU/ST=Test/L=Test/O=ExampleCA/OU=IT/CN=Example Root CA" \
      -out /etc/nginx/ssl/ca/rootCA.crt
    cat >/etc/nginx/ssl/openssl.cnf <<EOF
    [req]
    default_bits       = 2048
    prompt             = no
    default_md         = sha256
    req_extensions     = req_ext
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    C = RU
    ST = Test
    L = Test
    O = ExampleOrg
    OU = IT
    CN = github.com
    [req_ext]
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = github.com
    DNS.2 = download.falco.org
    EOF
    openssl genrsa -out /etc/nginx/ssl/private/nginx.key 2048
    openssl req -new -key /etc/nginx/ssl/private/nginx.key -out /etc/nginx/ssl/certs/nginx.csr \
      -config /etc/nginx/ssl/openssl.cnf
    openssl x509 -req -in /etc/nginx/ssl/certs/nginx.csr -CA /etc/nginx/ssl/ca/rootCA.crt -CAkey /etc/nginx/ssl/ca/rootCA.key \
      -CAcreateserial -out /etc/nginx/ssl/certs/nginx.crt -days 365 -sha256 \
      -extensions req_ext -extfile /etc/nginx/ssl/openssl.cnf
    cp /etc/nginx/ssl/ca/rootCA.crt /etc/pki/ca-trust/source/anchors/example-root-ca.crt
    update-ca-trust extract
    cat >/etc/nginx/sites-enabled.d/proxy.conf <<EOF
    server {
        listen 443 ssl;
        server_name github.com;

        ssl_certificate /etc/nginx/ssl/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/private/nginx.key;

        location / {
            proxy_pass http://{{ .DistroPackagesProxy }}/repository/github-com/;
        }
    }

    server {
        listen 443 ssl;
        server_name download.falco.org;

        ssl_certificate /etc/nginx/ssl/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/private/nginx.key;

        location / {
            proxy_pass http://{{ .DistroPackagesProxy }}/repository/download-falco-org/;
        }
    }
    EOF
    echo "127.0.1.1 github.com download.falco.org" >> /etc/hosts
    nginx
    sleep 2
  {{- end }}
  - export ALTWRAP_LLVM_VERSION=18.1
  - export GCC_VERSION=12
  - cd /src
  - mkdir -p /src/build
  - cd /src/build
  - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_DRIVER=OFF -DCPACK_GENERATOR=TGZ -DBUILD_BPF=OFF -DBUILD_FALCO_MODERN_BPF=ON -DBUILD_WARNINGS_AS_ERRORS=OFF -DFALCO_VERSION={{ $falcoVersion }} -DUSE_BUNDLED_DEPS=ON /src
  # fix build tbb lib on altlinux (redefine FORTIFY_SOURCE)
  - sed -i 's|cd /src/build/tbb-prefix/src/tbb && /usr/bin/cmake -E touch /src/build/tbb-prefix/src/tbb-stamp/tbb-configure|&\n\tsed -i "s\|-D_FORTIFY_SOURCE=2\|-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2\|g" /src/build/tbb-prefix/src/tbb/src/tbb/CMakeFiles/tbb.dir/flags.make|' CMakeFiles/tbb.dir/build.make
  - make falco -j ${BUILD_THREADS}
  - make install DESTDIR=/out
  - "sed -i 's|time_format_iso_8601: false|time_format_iso_8601: true|' /out/etc/falco/falco.yaml"
  # cleanup to reduce artifact size
  - make clean
  {{- if .DistroPackagesProxy }}
  # build in the closed env
  - nginx -s stop
  {{- end }}
  - cd /out
  - /binary_replace.sh -i usr/bin/falco -o /out
  - chown -R 64535:64535 /out
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-plugins-artifact
fromImage: {{ $.ModuleName }}/{{ $.ImageName }}-builder-artifact
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/plugins
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
- from: tmp_dir
  to: /src/build
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
shell:
  install:
  - export GOPROXY=$(cat /run/secrets/GOPROXY)
  - export CGO_ENABLED=1
  - export ALTWRAP_LLVM_VERSION=18.1
  - export GCC_VERSION=12
  - mkdir -p /out/usr/share/falco/plugins
  {{- if $.DistroPackagesProxy }}
  # build in the closed env
  - sed -i "s|https://raw.githubusercontent.com|http://{{ $.DistroPackagesProxy }}/repository/githubusercontent|g" /src/plugins/k8smeta/test/CMakeLists.txt
  {{- end }}
  - cd /src/plugins/json
  - make
  - cp libjson.so /out/usr/share/falco/plugins
  - make clean
  - cd /src/plugins/k8saudit
  - make
  - cp libk8saudit.so /out/usr/share/falco/plugins
  - make clean
  - cd /src/plugins/k8smeta
  - make
  - cp libk8smeta.so /out/usr/share/falco/plugins
  - make clean
  - cd /out
  - /binary_replace.sh -i "usr/share/falco/plugins/libjson.so usr/share/falco/plugins/libk8saudit.so usr/share/falco/plugins/libk8smeta.so" -o /out
  - chown -R 64535:64535 /out
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-builder-artifact
fromImage: common/relocate-artifact
final: false
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - apt-get install -y git libelf-devel libbpf-devel bpftool cmake clang18.1 build-essential golang gcc12 gcc12-c++ perl-IPC-Cmd
  - git config --global url."$(cat /run/secrets/SOURCE_REPO)".insteadOf https://github.com
  - find /var/lib/apt/ /var/cache/apt/ -type f -delete
