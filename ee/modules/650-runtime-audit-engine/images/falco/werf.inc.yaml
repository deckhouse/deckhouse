{{- $falcoVersion := "0.39.2" }}
{{- $falcoctlVersion := "0.10.1" }}
{{- $pluginsVersion := "plugins/kafka/v0.1.3" }}
---
image: {{ $.ModuleName }}/{{ $.ImageName }}
fromImage: common/alt-p11
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-artifact
  add: /falco-package
  to: /
  includePaths:
  - usr/bin/
  - usr/share/
  - etc/
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-falcoctl-artifact
  add: /src/falcoctl
  to: /usr/bin/falcoctl
  before: install
shell:
  beforeInstall:
  - rm -df /lib/modules
  - ln -s $HOST_ROOT/lib/modules /lib/modules
  install:
  - "sed -i 's/time_format_iso_8601: false/time_format_iso_8601: true/' /etc/falco/falco.yaml"
imageSpec:
  config:
    cmd: ["/usr/bin/falco"]
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /{{ .ModulePath }}modules/{{ .ModulePriority }}-{{ .ModuleName }}/images/{{ .ImageName }}/patches/falcoctl
  to: /patches/falcoctl
  includePaths:
  - '**/*.patch'
  stageDependencies:
    install:
    - '**/*.patch'
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  install:
  - git clone --branch {{ $falcoVersion }} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/falco.git /src/falco
  - git clone --branch {{ $pluginsVersion }} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/plugins.git /src/plugins
  - git clone --branch v{{ $falcoctlVersion }} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/falcoctl.git /src/falcoctl
  - cd /src/plugins
  - rm -rf shared plugins/cloudtrail plugins/dummy* plugins/gcpaudit plugins/github plugins/k8saudit-* plugins/kafka plugins/okta build docs
  - cd /src/falcoctl
  - git apply /patches/falcoctl/*.patch --verbose
  - git rev-parse HEAD > RELEASE
  - git rev-parse HEAD > COMMIT
  - rm -rf /src/falco/.git
  - rm -rf /src/plugins/.git
  - rm -rf /src/falcoctl/.git
---
image: {{ .ModuleName }}/{{ .ImageName }}-falcoctl-artifact
fromImage: builder/golang-alpine
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/falcoctl
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
shell:
  beforeInstall:
  {{- include "alpine packages proxy" . | nindent 2 }}
  - apk add --no-cache make bash
  install:
  - cd /src
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - GOPROXY=$(cat /run/secrets/GOPROXY) go mod download
  - RELEASE="$(cat RELEASE)" COMMIT="$(cat COMMIT)" make falcoctl
  - chown 64535:64535 falcoctl
  - chmod 0755 falcoctl
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-artifact
fromImage: common/relocate-artifact
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
- from: tmp_dir
  to: /src/falco/build
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - apt-get install -y git openssl-devel wget clang cmake libelf-devel libbpf-devel bpftool perl-IPC-Cmd gcc12 gcc12-c++ build-essential golang
  - git config --global url."$(cat /run/secrets/SOURCE_REPO)".insteadOf https://github.com
  - rm -f /usr/bin/clang
  - ln -s /usr/bin/clang-18 /usr/bin/clang
  - rm -f /usr/bin/x86_64-alt-linux-gcc /usr/bin/x86_64-alt-linux-g++
  - ln -s x86_64-alt-linux-gcc-12 /usr/bin/x86_64-alt-linux-gcc
  - ln -s x86_64-alt-linux-g++-12 /usr/bin/x86_64-alt-linux-g++
  - find /var/lib/apt/ /var/cache/apt/ -type f -delete
  install:
  - cd /src/falco
  {{- if $.DistroPackagesProxy }}
  # build in the closed env
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/falcosecurity-libs-repo/CMakeLists.txt
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/cxxopts.cmake
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/njson.cmake
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/driver-repo/CMakeLists.txt
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/yaml-cpp.cmake
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/cpp-httplib.cmake
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/falcoctl.cmake
  - sed -i "s|https://download.falco.org|http://{{ $.DistroPackagesProxy }}/repository/download-falco-org|g" cmake/modules/rules.cmake
  {{- end }}
  - mkdir -p /src/falco/build
  - cd /src/falco/build
  - cmake -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_DRIVER=OFF -DCPACK_GENERATOR=TGZ -DBUILD_BPF=OFF -DBUILD_FALCO_MODERN_BPF=ON -DBUILD_WARNINGS_AS_ERRORS=OFF -DFALCO_VERSION={{ $falcoVersion }} -DUSE_BUNDLED_DEPS=ON /src/falco
  {{- if $.DistroPackagesProxy }}
  # build in the closed env
  - |
    for f in `grep -lari 'URL "https://github.com'`; do
      sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" $f
    done
  {{- end }}
  - make package -j4
  - mkdir -p /falco-package
  - tar -zxvf falco-*-x86_64.tar.gz --strip-components 1 -C /falco-package
  # cleanup to reduce artifact size
  - make clean
  - cd /src/plugins/plugins/json
  - make
  - cp libjson.so /falco-package/usr/share/falco/plugins
  - make clean
  - cd /src/plugins/plugins/k8saudit
  - make
  - cp libk8saudit.so /falco-package/usr/share/falco/plugins
  - make clean
  - cd /src/plugins/plugins/k8smeta
  {{- if $.DistroPackagesProxy }}
  # build in the closed env
  - sed -i "s|https://raw.githubusercontent.com|http://{{ $.DistroPackagesProxy }}/repository/githubusercontent|g" test/CMakeLists.txt
  {{- end }}
  - make
  - cp libk8smeta.so /falco-package/usr/share/falco/plugins
  - make clean
  - /binary_replace.sh -i "/falco-package/usr/bin/falco" -o /falco-package
  - rm -rf /falco-package/falco-package
