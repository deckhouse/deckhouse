{{- $falcoVersion := "0.41.0" }}
{{- $falcoctlVersion := "0.11.2" }}
{{- $pluginsVersion := "plugins/gcpaudit/v0.6.0" }}
---
image: {{ $.ModuleName }}/{{ $.ImageName }}
fromImage: base/distroless
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-artifact
  add: /out
  to: /
  includePaths:
  - usr/bin/falco
  - etc/falco
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-falcoctl-artifact
  add: /src/falcoctl
  to: /usr/bin/falcoctl
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-plugins-artifact
  add: /out/usr/share/falco/plugins
  to: /usr/share/falco/plugins
  before: install
imageSpec:
  config:
    cmd: ["/usr/bin/falco"]
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
fromImage: builder/src
final: false
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  install:
  - git clone --branch {{ $falcoVersion }} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/falco.git /src/falco
  - git clone --branch {{ $pluginsVersion }} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/plugins.git /src/plugins
  - git clone --branch v{{ $falcoctlVersion }} --depth 1 $(cat /run/secrets/SOURCE_REPO)/falcosecurity/falcoctl.git /src/falcoctl
  - rm -rf shared plugins/cloudtrail plugins/dummy* plugins/gcpaudit plugins/github plugins/k8saudit-* plugins/kafka plugins/okta build docs
  - cd /src/falcoctl
  - git rev-parse HEAD > RELEASE
  - git rev-parse HEAD > COMMIT
  - rm -rf /src/falco/.git
  - rm -rf /src/plugins/.git
  - rm -rf /src/falcoctl/.git
---
image: {{ .ModuleName }}/{{ .ImageName }}-falcoctl-artifact
fromImage: builder/golang-alpine
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/falcoctl
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
shell:
  beforeInstall:
  {{- include "alpine packages proxy" . | nindent 2 }}
  - apk add --no-cache make bash
  install:
  - cd /src
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - GOPROXY=$(cat /run/secrets/GOPROXY) go mod download
  - RELEASE="$(cat RELEASE)" COMMIT="$(cat COMMIT)" make falcoctl
  - chown 64535:64535 falcoctl
  - chmod 0755 falcoctl
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-artifact
fromImage: builder/golang-alpine
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/falco
  to: /src
  before: install
git:
- add: /{{ $.ModulePath }}modules/{{ .ModulePriority }}-{{ $.ModuleName }}/images/{{ $.ImageName }}/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
mount:
{{ include "mount points for golang builds" . }}
- from: tmp_dir
  to: /src/build
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  beforeInstall:
  {{- include "alpine packages proxy" . | nindent 2 }}
  - apk add --no-cache g++ gcc cmake make git bash perl linux-headers autoconf automake m4 libtool elfutils-dev libelf-static binutils bpftool clang openssh
  - git config --global url."$(cat /run/secrets/SOURCE_REPO)".insteadOf https://github.com
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  install:
  - cd /src
  - git apply --verbose /patches/*.patch
  {{- if $.DistroPackagesProxy }}
  # build in the closed env
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/falcosecurity-libs-repo/CMakeLists.txt
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/cxxopts.cmake
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/njson.cmake
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/driver-repo/CMakeLists.txt
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/yaml-cpp.cmake
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/cpp-httplib.cmake
  - sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" cmake/modules/falcoctl.cmake
  - sed -i "s|https://download.falco.org|http://{{ $.DistroPackagesProxy }}/repository/download-falco-org|g" cmake/modules/rules.cmake
  {{- end }}
  - mkdir -p /src/build
  - cd /src/build
  - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_DRIVER=OFF -DCPACK_GENERATOR=TGZ -DBUILD_BPF=OFF -DBUILD_FALCO_MODERN_BPF=ON -DBUILD_WARNINGS_AS_ERRORS=OFF -DFALCO_VERSION={{ $falcoVersion }} -DUSE_BUNDLED_DEPS=ON -DMUSL_OPTIMIZED_BUILD=ON /src
  {{- if $.DistroPackagesProxy }}
  # build in the closed env
  - |
    for f in `grep -lari 'URL "https://github.com'`; do
      sed -i "s|https://github.com|http://{{ $.DistroPackagesProxy }}/repository/github-com|g" $f
    done
  {{- end }}
  - make falco -j ${BUILD_THREADS}
  - make install DESTDIR=/out
  - "sed -i 's|time_format_iso_8601: false|time_format_iso_8601: true|' /out/etc/falco/falco.yaml"
  # cleanup to reduce artifact size
  - make clean
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-plugins-artifact
fromImage: {{ $.ModuleName }}/{{ $.ImageName }}-builder-artifact
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/plugins
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
- from: tmp_dir
  to: /src/build
shell:
  install:
  - export CGO_ENABLED=1
  - export ALTWRAP_LLVM_VERSION=18.1
  - export GCC_VERSION=12
  - mkdir -p /out/usr/share/falco/plugins
  {{- if $.DistroPackagesProxy }}
  - # build in the closed env
  - sed -i "s|https://raw.githubusercontent.com|http://{{ $.DistroPackagesProxy }}/repository/githubusercontent|g" src/k8smeta/test/CMakeLists.txt
  {{- end }}
  - cd /src/plugins/json
  - make
  - cp libjson.so /out/usr/share/falco/plugins
  - make clean
  - cd /src/plugins/k8saudit
  - make
  - cp libk8saudit.so /out/usr/share/falco/plugins
  - make clean
  - cd /src/plugins/k8smeta
  - make
  - cp libk8smeta.so /out/usr/share/falco/plugins
  - make clean
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-builder-artifact
fromImage: builder/alt
final: false
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  beforeInstall:
  - apt-get install -y git libelf-devel libbpf-devel bpftool cmake clang18.1 build-essential golang  gcc12 gcc12-c++
  - git config --global url."$(cat /run/secrets/SOURCE_REPO)".insteadOf https://github.com
  - find /var/lib/apt/ /var/cache/apt/ -type f -delete


