/*
Copyright 2023 Flant JSC
Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE
*/

package hooks

import (
	"context"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	"github.com/deckhouse/deckhouse/go_lib/dependency"
	. "github.com/deckhouse/deckhouse/testing/hooks"
)

var _ = Describe("Multitenancy Manager hooks :: migrate projects ::", func() {
	f := HookExecutionConfigInit(`{"multitenancyManager":{}}`, `{}`)
	f.RegisterCRD("deckhouse.io", "v1alpha1", "Project", false)
	f.RegisterCRD("deckhouse.io", "v1alpha1", "ProjectType", false)

	Context("Adopt resources", func() {
		BeforeEach(func() {
			var sec *v1.Secret

			f.KubeStateSet(`
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    meta.helm.sh/release-name: multitenancy-manager
    meta.helm.sh/release-namespace: d8-system
  labels:
    app.kubernetes.io/managed-by: Helm
    created-from-project-type: test-project-type
    kubernetes.io/metadata.name: test-project
  name: test-project
spec:
  finalizers:
  - kubernetes
---
apiVersion: v1
kind: ResourceQuota
metadata:
  annotations:
    meta.helm.sh/release-name: multitenancy-manager
    meta.helm.sh/release-namespace: d8-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: test-project-all-pods
  namespace: test-project
spec:
  hard:
    limits.cpu: "5"
    limits.memory: 5Gi
    requests.cpu: "5"
    requests.memory: 5Gi
    requests.storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: multitenancy-manager
    meta.helm.sh/release-namespace: d8-system
  labels:
    app.kubernetes.io/managed-by: Helm
    foo: bar
  name: test-project-foo
  namespace: test-project
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  annotations:
    meta.helm.sh/release-name: multitenancy-manager
    meta.helm.sh/release-namespace: d8-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: test-project-deny-all-except-current-namespace
  namespace: test-project
spec:
  egress: {}
`)
			f.BindingContexts.Set(f.GenerateOnStartupContext())

			err := yaml.Unmarshal([]byte(`
apiVersion: v1
data:
  release: 
kind: Secret
metadata:
  creationTimestamp: "2023-11-27T09:12:53Z"
  labels:
    modifiedAt: "1701076373"
    name: multitenancy-manager
    owner: helm
    status: deployed
    version: "2"
  name: sh.helm.release.v1.multitenancy-manager.v2
  namespace: d8-system
  resourceVersion: "12238414"
  uid: 1e845b21-47d6-4f51-9ae4-47792a5ecc79
type: helm.sh/release.v1
`), &sec)
			if err != nil {
				Fail(err.Error())
			}
			_, err = dependency.TestDC.K8sClient.CoreV1().Secrets("d8-system").Create(context.TODO(), sec, metav1.CreateOptions{})
			if err != nil {
				Fail(err.Error())
			}

			f.RunHook()
		})

		It("must adopt", func() {
			Expect(f).To(ExecuteSuccessfully())
			quota := f.KubernetesResource("ResourceQuota", "test-project", "test-project-all-pods")
			Expect(quota.ToYaml()).To(MatchYAML(`
apiVersion: v1
kind: ResourceQuota
metadata:
  annotations:
    meta.helm.sh/release-name: test-project
    meta.helm.sh/release-namespace: d8-multitenancy-manager
  labels:
    app.kubernetes.io/managed-by: Helm
  name: test-project-all-pods
  namespace: test-project
spec:
  hard:
    limits.cpu: "5"
    limits.memory: 5Gi
    requests.cpu: "5"
    requests.memory: 5Gi
    requests.storage: 1Gi
`))

			cm := f.KubernetesResource("ConfigMap", "test-project", "test-project-foo")
			Expect(cm.ToYaml()).To(MatchYAML(`
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: test-project
    meta.helm.sh/release-namespace: d8-multitenancy-manager
  labels:
    app.kubernetes.io/managed-by: Helm
    foo: bar
  name: test-project-foo
  namespace: test-project
`))

			nt := f.KubernetesResource("NetworkPolicy", "test-project", "test-project-deny-all-except-current-namespace")
			Expect(nt.ToYaml()).To(MatchYAML(`
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  annotations:
    meta.helm.sh/release-name: test-project
    meta.helm.sh/release-namespace: d8-multitenancy-manager
  labels:
    app.kubernetes.io/managed-by: Helm
  name: test-project-deny-all-except-current-namespace
  namespace: test-project
spec:
  egress: {}
`))

			ns := f.KubernetesGlobalResource("Namespace", "test-project")
			Expect(ns.ToYaml()).To(MatchYAML(
				`apiVersion: v1
kind: Namespace
metadata:
  annotations:
    meta.helm.sh/release-name: test-project
    meta.helm.sh/release-namespace: d8-multitenancy-manager
  labels:
    app.kubernetes.io/managed-by: Helm
    created-from-project-type: test-project-type
    kubernetes.io/metadata.name: test-project
  name: test-project
spec:
  finalizers:
  - kubernetes
`))

		})
	})
})
