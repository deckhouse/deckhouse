spec:
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Модуль ServiceWithHealthchecks
          properties:
            spec:
              description: ServiceWithHealthchecks — схема для API `servicewithhealthchecks`
              properties:
                healthcheck:
                  properties:
                    initialDelaySeconds:
                      description: |-
                        Время в секундах после страта пода, по истечении которого запускаются пробы.
                    periodSeconds:
                      description: |-
                        Период в секундах для повторных запусков проб.
                    probes:
                      items:
                        properties:
                          failureThreshold:
                            description: |-
                              Минимальное количество последовательных неудач, после которых проба будет считаться неудачной.
                          timeoutSeconds:
                            description: Число секунд, по истечении которых проверка завершится по таймауту.
                          successThreshold:
                            description: |-
                              Минимальное количество последовательных успешных проверок, после которых проверка считается успешной после предыдущих неудач.
                          mode:
                            description: |-
                              Режим для проверки.
                          http:
                            properties:
                              host:
                                description: |-
                                  Имя хоста для подключения, по умолчанию используется IP-адрес пода.
                              httpHeaders:
                                description: Пользовательские заголовки, которые будут добавлены к HTTP-запросу и использованы при выполнении пробы. Разрешены повторяющиеся заголовки.
                                items:
                                  description:
                                  properties:
                                    name:
                                      description: |-
                                        Имя заголовка.

                                        При выводе будет приведено к стандартному виду (lowercase), так что заголовки с разным регистром будут распознаваться как одинаковые.
                                    value:
                                      description: Значение заголовка.
                              method:
                                description: Метод, который будет использоваться для запроса.
                              path:
                                description: Путь для доступа к HTTP-серверу.
                              scheme:
                                description: |-
                                  Схема, используемая для подключения к хосту.
                              targetPort:
                                description: |-
                                  Номер порта для доступа к контейнеру.
                              insecureSkipTLSVerify:
                                description: |-
                                  Указывает, следует ли клиенту пропустить проверку цепочки сертификатов TLS сервера и имени хоста.
                              caCert:
                                description: |-
                                  CA-сертификат для HTTPS соединения.
                          postgreSQL:
                            properties:
                              authSecretName:
                                description: |-
                                  Имя секрета (Secret), расположенного в том же пространстве имен, что и этот ресурс. Секрет может содержать следующие поля аутентификации: `tlsMode`, `clientCert`, `clientKey`, `aCert`, `password`, `user`.
                              dbName:
                                description: Имя базы данных, используемое при подключении. Если не указать, то будет использовано имя пользователя.
                              query:
                                description: |-
                                  Запрос к PostgreSQL для тестирования.

                                  Чтобы считаться успешным, запрос должен возвращать одно из следующих значений: `TRUE`, `t`, `true`, `y`, `yes`, `1`.

                                  > **Внимание.** Привилегии для пользователя, под которым выполняются запросы, должны быть минимальными.
                              targetPort:
                                description: |-
                                  Номер порта для доступа к контейнеру.
                          tcp:
                            properties:
                              targetPort:
                                description: |-
                                  Номер порта для доступа к контейнеру.
                allocateLoadBalancerNodePorts:
                  description: |-
                     Определяет, следует ли автоматически выделять NodePort для сервисов типа LoadBalancer.
                     Значение по умолчанию — `true`. Значение можно установить в `false`, если балансировщик нагрузки кластера не зависит от NodePorts.

                     Если запрашивающая сторона указывает конкретные значения NodePort, эти запросы будут выполнены независимо от значения этого параметра.
                     Данный параметр может быть установлен только для сервисов типа LoadBalancer и автоматически сбрасывается при изменении типа на другой.
                clusterIP:
                  description: |-
                     IP-адрес сервиса.

                     Обычно, IP-адрес назначается сервису случайным образом.
                     Если IP-адрес указывается вручную, он должен находиться в допустимом диапазоне (заданном конфигурацией системы) и быть свободным для назначения; в противном случае создание сервиса завершится ошибкой.

                     Поле не подлежит изменению при обновлении, за исключением случаев, когда тип сервиса также изменяется на `ExternalName` (в этом случае поле должно быть пустым), или когда тип меняется с `ExternalName`, позволяя задать это поле дополнительно, как указано выше.

                     Допустимые значения: `None`, пустая строка (""), или действительный IP-адрес. Установка этого значения в `None` создает сервис без виртуального IP, что полезно, когда предпочтительнее прямое подключение к конечным точкам,
                     и проксирование не требуется. Применимо только к типам ClusterIP, NodePort и LoadBalancer. Если это поле указано при создании сервиса типа `ExternalName`, создание завершится неудачей.
                     [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                clusterIPs:
                  description: |-
                    Список IP-адресов, назначенных сервису, обычно выделяемых случайным образом.
                    Если IP-адрес указывается вручную, он должен находиться в допустимом диапазоне (заданном конфигурацией системы) и быть свободным для назначения;
                    в противном случае создание сервиса завершится ошибкой. Поле не подлежит изменению при обновлении, за исключением случаев, когда тип сервиса также изменяется на `ExternalName` (в этом случае поле должно быть пустым)
                    или когда тип меняется с `ExternalName`, позволяя задать это поле дополнительно, как указано выше.

                    Допустимые значения: `None`, пустая строка (""), или действительный IP-адрес.
                    Установка этого значения в `None` создает сервис без виртуального IP, что полезно, когда предпочтительнее прямое подключение к конечным точкам, и проксирование не требуется.
                    Применимо только к типам ClusterIP, NodePort и LoadBalancer. Если это поле указано при создании сервиса типа `ExternalName`, создание завершится неудачей.

                    Поле будет очищено при обновлении сервиса на тип `ExternalName`. Если поле не указано, оно будет инициализировано из поля `clusterIP`.

                    Если поле указано, необходимо убедиться, что значения `clusterIPs[0]` и `clusterIP` совпадают. Поле может содержать максимум два значения.

                    IP-адреса должны соответствовать значениям поля `ipFamilies`. Оба поля `clusterIPs` и `ipFamilies` подчиняются полю `ipFamilyPolicy`.
                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                externalIPs:
                  description: |-
                    Список IP-адресов, по которым узлы в кластере также будут принимать трафик для этого сервиса.
                    Эти IP-адреса не управляются Kubernetes. Пользователь несет ответственность за обеспечение доставки трафика на узел с этим IP-адресом.

                    Общий пример — внешние балансировщики нагрузки, которые не являются частью системы Kubernetes.
                externalName:
                  description: |-
                    Внешняя ссылка, которую механизмы обнаружения будут возвращать в качестве псевдонима для этого сервиса (например, DNS-запись CNAME). Проксирование не будет использоваться.
                    Имя должно быть в нижнем регистре и соответствовать стандарту [RFC-1123](https://tools.ietf.org/html/rfc1123) и требует, чтобы поле `type` было установлено в `ExternalName`.
                externalTrafficPolicy:
                  description: |-
                     Описывает, как узлы распределяют трафик сервиса, который они получают через один из его "внешне направленных" адресов (NodePorts, ExternalIPs и LoadBalancer IPs).
                     Если установлено значение `Local`, прокси настроит сервис таким образом, что внешние балансировщики нагрузки будут управлять распределением трафика между узлами, и каждый узел будет передавать
                     трафик только локальным конечным точкам сервиса, не маскируя исходный IP-адрес клиента.
                     Трафик, ошибочно отправленный на узел без конечных точек, будет отброшен.

                     Значение по умолчанию — `Cluster`, при котором используется стандартное поведение равномерной маршрутизации ко всем конечным точкам (возможно, с модификациями на основе топологии и других особенностей).

                     Обратите внимание, что трафик, отправленный на External IP или LoadBalancer IP изнутри кластера, всегда будет использовать семантику `Cluster`, но клиенты, отправляющие трафик на NodePort внутри кластера, могут учитывать политику трафика при выборе узла.
                healthCheckNodePort:
                  description: |-
                      Указывает NodePort для проверки состояния сервиса. Это применимо только тогда, когда тип сервиса установлен на LoadBalancer,
                      а параметр `externalTrafficPolicy` установлен на `Local`. Если указано значение, оно находится в допустимом диапазоне и не используется, то оно будет применено.

                      Если не указано, значение будет назначено автоматически. Внешние системы (например, балансировщики нагрузки) могут использовать этот порт, чтобы определить, содержит ли узел конечные точки для этого сервиса.

                      Если это поле указано при создании сервиса, который в этом не нуждается, создание завершится ошибкой. Это поле будет очищено при изменении параметров сервиса, например, при изменении типа.

                      Это поле не может быть обновлено после установки.
                internalTrafficPolicy:
                  description: |-
                      Описывает, как узлы распределяют трафик сервиса, который они получают через ClusterIP.

                      Если параметр установлен на `Local`, прокси предполагает, что поды взаимодействуют только с конечными точками сервиса,
                      находящимися на том же узле, что и под. Трафик будет отброшен, если на узле нет локальных конечных точек.

                      Значение по умолчанию — `Cluster`, при котором используется стандартное поведение маршрутизации ко всем конечным точкам равномерно
                      (возможны изменения в зависимости от топологии и других функций).
                ipFamilies:
                  description: |-
                      Семейство IP-адресов (например, IPv4, IPv6), назначенных сервису.
                      Это поле обычно назначается автоматически на основе конфигурации кластера и поля `ipFamilyPolicy`.

                      Если поле указано вручную и запрашиваемое семейство доступно в кластере, а `ipFamilyPolicy` это позволяет, оно будет использовано;
                      в противном случае создание сервиса завершится ошибкой. Это поле можно изменять условно: допускается добавление или удаление вторичного IP-семейства,
                      но нельзя изменить основное семейство IP-адресов сервиса.

                      Допустимые значения — `IPv4` и `IPv6`. Это поле применяется только к сервисам типов ClusterIP, NodePort и LoadBalancer.

                      Это поле будет удалено при обновлении сервиса до типа `ExternalName`.

                      Эти семейства должны соответствовать значениям поля `clusterIPs`, если оно указано. Поля `clusterIPs` и `ipFamilies` управляются полем `ipFamilyPolicy`. Поле может содержать максимум два значения.
                  items:
                    description: |-
                      `IPFamily` представляет семейство IP-адресов (IPv4 или IPv6).

                       Этот тип используется для указания семейства IP-адресов, выраженного типом, например `service.spec.ipFamilies`.
                ipFamilyPolicy:
                  description: |-
                    Требуемая или запрашиваемая поддержка двух стеков для сервиса.

                    Если значение не указано, это поле будет установлено в `SingleStack`. Сервисы могут быть `SingleStack` (одно IP-семейство), `PreferDualStack` (два IP-семейства на кластерах с двойным стеком или одно IP-семейство на кластерах с одним стеком)
                    или `RequireDualStack` (два семейства IP-адресов на кластерах с двойным стеком, в противном случае возникнет ошибка).

                    Поля `ipFamilies` и `clusterIPs` зависят от значения этого поля. Это поле будет очищено при обновлении сервиса до типа `ExternalName`.
                loadBalancerClass:
                  description: |-
                    Класс реализации балансировщика нагрузки, к которому принадлежит этот сервис.
                    Если указано, значение этого поля должно быть идентификатором в стиле метки с необязательным префиксом, например, `internal-vip` или `example.com/internal-vip`. Имена без префикса зарезервированы для конечных пользователей.

                    Это поле может быть установлено только тогда, когда тип сервиса — `LoadBalancer`.

                    Если тип не указан, используется реализация балансировщика нагрузки по умолчанию, которая обычно осуществляется через интеграцию с облачным провайдером,
                    но должна применяться для любой реализации по умолчанию.

                    Если тип указан, предполагается, что реализация балансировщика нагрузки отслеживает сервисы с соответствующим классом.
                    Любая реализация балансировщика нагрузки по умолчанию (например, облачные провайдеры) должна игнорировать сервисы, устанавливающие это поле. Это поле может быть установлено только при создании или обновлении сервиса до типа `LoadBalancer`.

                    После установки его нельзя изменить. Это поле будет очищено, когда сервис будет обновлен до типа, отличного от `LoadBalancer`.
                loadBalancerIP:
                  description: |-
                    Применяется только для типа сервиса LoadBalancer. Эта функция зависит от того, поддерживает ли облачный провайдер возможность указания `loadBalancerIP` при создании балансировщика нагрузки.

                    Это поле будет игнорироваться, если облачный провайдер не поддерживает данную функцию.
                loadBalancerSourceRanges:
                  description: |-
                    Если указано и поддерживается платформой, это ограничит трафик через облачный балансировщик нагрузки только для указанных клиентских IP-адресов.

                    Это поле будет игнорироваться, если облачный провайдер не поддерживает данную функцию.
                    [Подробнее.](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/)
                ports:
                  description: |-
                    Список портов, которые открыты этим сервисом.
                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                  items:
                    description: ServicePort содержит информацию о порте сервиса.
                    properties:
                      appProtocol:
                        description: |-
                          Протокол приложения для данного порта. Служит подсказкой для реализаций, позволяя предложить более расширенное поведение для поддерживаемых протоколов.
                          Это поле следует стандартному синтаксису меток Kubernetes.
                          Допустимые значения:
                          * Именования протоколов без префиксов — зарезервированы для стандартных имён служб IANA, в соответствии с
                          [RFC-6335](https://www.iana.org/assignments/service-names).
                          * Именования с префиксом, определенные Kubernetes:
                            * `kubernetes.io/h2c` — HTTP/2 с предварительным знанием в открытом виде, как описано в [RFC](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-);
                            * `kubernetes.io/ws`  — WebSocket в открытом виде, как описано в [RFC](https://www.rfc-editor.org/rfc/rfc6455);
                            * `kubernetes.io/wss` — WebSocket через TLS, как описано в [RFC](https://www.rfc-editor.org/rfc/rfc6455).
                          * Другие протоколы должны использовать имена с определенными реализациями, например с такими как
                          `mycompany.com/my-custom-protocol`.
                      name:
                        description: |-
                          Имя этого порта внутри службы соответствует стандарту `DNS_LABEL`.

                          Все порты внутри ServiceSpec должны иметь уникальные имена. При рассмотрении конечных точек для службы имя должно совпадать с полем `name` в `EndpointPort`.
                          Имя не должно совпадать с полем `name`, если в этой службе определен только один `ServicePort`.
                      nodePort:
                        description: |-
                          Порт на каждом узле, на котором эта служба открыта, когда тип равен
                          NodePort или LoadBalancer. Обычно назначается системой. Если указано значение,
                          оно должно быть в диапазоне и не должно использоваться, иначе операция завершится
                          с ошибкой.

                          Если не указано, порт будет выделен, если этой службе это требуется.

                          Если это поле указано при создании службы, которая в этом не нуждается,
                          создание завершится с ошибкой.

                          Это поле будет очищено при обновлении службы, например, при изменении типа с NodePort на ClusterIP.
                          [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
                      port:
                        description: Порт, который будет открыт этой службой.
                      protocol:
                        description: |-
                          IP-протокол для этого порта. Поддерживает `TCP`, `UDP` и `SCTP`.
                      targetPort:
                        description: |-
                          Номер порта для доступа к подам, на которые нацелен сервис.

                          Это поле игнорируется для сервисов с `clusterIP=None` и должно быть установлено равным полю `port`.
                          [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
                publishNotReadyAddresses:
                  description: |-
                    Указывает, что любые агенты, занимающиеся обработкой конечных точек данного сервиса, должны игнорировать статусы готовности или неготовности.
                    Основное применение этого поля заключается в том, чтобы сервисы `StatefulSet` могли распространять записи SRV DNS для своих подов с целью обнаружения пиров.

                    Контроллеры Kubernetes, которые генерируют ресурсы `Endpoints` и `EndpointSlice` для сервисов, трактуют это как указание, что все конечные точки следует считать "готовыми", даже если поды не прошли пробы и не готовы.
                selector:
                  description: |-
                    Маршрутизирует трафик сервиса к подам, у которых ключи и значения меток соответствуют этому селектору.
                    Если параметр не определен, предполагается, что у сервиса есть внешний процесс, управляющий его конечными точками, которые Kubernetes не будет изменять.

                    Применимо только к типам ClusterIP, NodePort и LoadBalancer.

                    Игнорируется, если тип — ExternalName.
                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/)
                sessionAffinity:
                  description: |-
                    Используется для поддержания сессий с привязкой к клиенту.
                    Должно быть указано значение либо `ClientIP`, либо `None`.
                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                sessionAffinityConfig:
                  description: Содержит конфигурацию привязки сессий.
                  properties:
                    clientIP:
                      description: Содержит конфигурацию привязки сессий на основе IP-адреса клиента.
                      properties:
                        timeoutSeconds:
                          description: |-
                            Указывает время удержания сессии для типа `ClientIP` в секундах.

                            Значение должно быть `>0 && <=86400` (для 1 дня), если `ServiceAffinity == ClientIP`.
                trafficDistribution:
                  description: |-
                    Позволяет задать предпочтения по распределению трафика между конечными точками сервиса. Реализации могут учитывать это поле как рекомендацию, но не обязаны строго его соблюдать.

                    Если поле не задано, реализация применяет стратегию маршрутизации по умолчанию. Если установлено значение `PreferClose`, реализации должны приоритизировать конечные точки, которые топологически близки (например, в той же зоне).
                type:
                  description: |-
                    Определяет доступность сервиса.

                    По умолчанию используется ClusterIP. Допустимые варианты: ExternalName, ClusterIP, NodePort и LoadBalancer.

                    ClusterIP выделяет внутренний IP-адрес для балансировки нагрузки между конечными точками. Конечные точки определяются `selector` или, если он не указан, вручную с помощью объектов `Endpoints` или `EndpointSlice`.

                    Если значение `clusterIP` установлено на `None`, виртуальный IP не выделяется, и конечные точки публикуются как набор конечных точек, а не как виртуальный IP.

                    NodePort расширяет ClusterIP и выделяет порт на каждом узле, который маршрутизируется к тем же конечным точкам, что и `clusterIP`.

                    LoadBalancer расширяет NodePort и создает внешний балансировщик нагрузки (если поддерживается текущим облаком), который маршрутизируется к тем же конечным точкам, что и `clusterIP`.

                    ExternalName создает алиас этому сервису на указанный `externalName`. Некоторые другие поля не применяются к сервисам типа ExternalName.

                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
            status:
              description: Определяет наблюдаемое состояние `ServiceWithHealthchecks`.
              properties:
                conditions:
                  description: Текущее состояние сервиса
                  items:
                    description:
                    properties:
                      lastTransitionTime:
                        description: |-
                           Последнее время изменения, когда условие перешло из одного состояния в другое.
                           Это должно соответствовать времени изменения основного условия.

                           Если время неизвестно, можно использовать время изменения поля API.
                      message:
                        description: |-
                          Понятное человеку сообщение, указывающее детали перехода.

                          Это может быть пустая строка.
                      observedGeneration:
                        description: |-
                          Значение `.metadata.generation`, на основе которого было установлено состояние.

                          Например, если `.metadata.generation` равно 12, а `.status.conditions[x].observedGeneration` равно 9, то состояние устарело
                          по отношению к текущему состоянию экземпляра.
                      reason:
                        description: |-
                          Программный идентификатор, указывающий причину последнего перехода состояния.
                          Производители конкретных типов состояний могут определить ожидаемые значения и их значения для этого поля,
                          а также то, считаются ли эти значения гарантированным API.

                          Значение должно быть строкой в `CamelCase`.

                          Это поле не может быть пустым.
                      status:
                        description: Состояние условия, одно из значений `True`, `False`, `Unknown`.
                      type:
                        description: |-
                          Тип условия в формате `CamelCase` или в виде `foo.example.com/CamelCase`.

                          Многие значения `.condition.type` последовательны для различных ресурсов,
                          таких как `Available`, но поскольку произвольные условия могут быть полезными (см. `.node.status.conditions`),
                          важна возможность разрешения конфликтов. Регулярное выражение, которому оно соответствует: (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                endpointStatuses:
                  description: Текущие состояние службы
                loadBalancer:
                  description: |-
                    Содержит текущее состояние балансировщика нагрузки, если он присутствует.
                  properties:
                    ingress:
                      description: |-
                        Список, содержащий точки входа для балансировщика нагрузки.
                        Трафик, предназначенный для сервиса, должен направляться на эти точки входа.
                      items:
                        description: |-
                          Представляет состояние точки входа балансировщика нагрузки: трафик, предназначенный для сервиса, должен направляться на эту точку входа.
                        properties:
                          hostname:
                            description: |-
                              Устанавливается для точек входа балансировщика нагрузки, которые основаны на DNS (обычно балансировщики нагрузки AWS).
                          ip:
                            description: |-
                              Устанавливается для точек входа балансировщика нагрузки, которые основаны на IP-адресах (обычно балансировщики нагрузки GCE или OpenStack).
                          ipMode:
                            description: |-
                              Указывает, как ведет себя IP-адрес балансировщика нагрузки и может быть указан только при указании поля `ip`.
                              Установка значения `VIP` означает, что трафик доставляется на узел с назначением, установленным на IP-адрес и порт балансировщика нагрузки.
                              Установка значения `Proxy` указывает, что трафик доставляется на узел или под с назначением, установленным на IP-адрес узла и порт узла или IP-адрес пода и порт.

                              Реализации сервиса могут использовать эту информацию для настройки маршрутизации трафика.
                          ports:
                            description: |-
                              Список записей портов сервиса.

                              Если используется, каждый порт, определенный в сервисе, должен иметь соответствующую запись в этом списке.
                            items:
                              properties:
                                error:
                                  description: |-
                                    Запись проблемы с портом сервиса.
                                    Формат ошибки должен соответствовать следующим правилам:
                                    - Встроенные значения ошибок должны быть указаны в этом файле и использовать имена в формате CamelCase.
                                    - Специфические для облачного провайдера значения ошибок должны иметь имена,
                                      соответствующие формату `foo.example.com/CamelCase`.
                                    ---
                                    Регулярное выражение, с которым это соответствует: (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                                port:
                                  description: Номер порта сервиса, статус которого указан.
                                protocol:
                                  description: |-
                                    Протокол порта сервиса, статус которого здесь записан. Поддерживаемые значения: `TCP`, `UDP`, `SCTP`.
