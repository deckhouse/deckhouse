spec:
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Модуль ServiceWithHealthchecks
          properties:
            spec:
              description: ServiceWithHealthchecks — схема для API `servicewithhealthchecks`
              properties:
                healthcheck:
                  properties:
                    initialDelaySeconds:
                      description: |-
                        Время в секундах после страта пода, по истечении которого запускаются пробы. По умолчанию 10.
                    periodSeconds:
                      description: |-
                        Период в секундах для повторных запусков проб. По умолчанию 10.
                    probes:
                      items:
                        properties:
                          failureThreshold:
                            description: |-
                              Минимальное количество последовательных неудач, после которых проба будет считаться неудачной.
                              
                              По умолчанию равно 3. Минимальное значение - 1.
                          timeoutSeconds:
                            description: Число секунд, по истечении которых проверка завершится по таймауту. По умолчанию — 1 секунда. Минимальное значение — 1.
                          successThreshold:
                            description: |-
                              Минимальное количество последовательных успешных проверок, после которых проверка считается успешной после предыдущих неудач. По умолчанию — 1. Должно быть 1 для проверки живучести (liveness) и запуска (startup). Минимальное значение — 1.
                          mode:
                            description: |-
                              Режим для проверки. Принимает одно из значений: HTTP, TCP, PostgreSQL.
                          http:
                            properties:
                              host:
                                description: |-
                                  Имя хоста для подключения, по умолчанию используется IP-адрес пода. Скорее всего, вам нужно задать `Host` в http-заголовках.
                              httpHeaders:
                                description: Пользовательские заголовки для установки в запросе. В HTTP допускаются повторяющиеся заголовки.
                                items:
                                  description: HTTPHeader описывает пользовательский заголовок, который будет использоваться в HTTP-проверках.
                                  properties:
                                    name:
                                      description: |-
                                        Имя поля заголовка.
                                        
                                        При выводе будет приведено к каноническому виду, так что заголовки с разным регистром будут распознаваться как одинаковые.
                                    value:
                                      description: Значение поля заголовка.
                              method:
                                description: Метод, который будет использоваться для запроса. По умолчанию — GET.
                              path:
                                description: Путь для доступа к HTTP-серверу.
                              scheme:
                                description: |-
                                  Схема, используемая для подключения к хосту. По умолчанию — HTTP.
                              targetPort:
                                description: |-
                                  Имя или NTCNe порт для доступа к контейнеру. Номер должен быть в диапазоне от 1 до 65535. Имя должно соответствовать `IANA_SVC_NAME`
                          postgreSQL:
                            properties:
                              authSecretName:
                                description: |-
                                  Имя Secret, расположенного в том же пространстве имен, что и этот ресурс. Секрет может содержать следующие поля аутентификации: tlsMode, clientCert, clientKey, caCert, password, user.
                              dbName:
                                description: Имя БД используемое при подключении. Если не указать, то как имя БД будет использовано имя пользователя.
                              query:
                                description: Имя базы данных (необязательно)
                              query:
                                description: |-
                                  Запрос к PostgreSQL для тестирования.

                                  Должен возвращать одно из значений TRUE, `t`, `true`, `y`, `yes`, `1`, чтобы считаться успешным. По умолчанию: `select 1`

                                  > **Внимание.** Привилегии для пользователя, под которым выполняются запросы, должны быть минимальными.
                              targetPort:
                                description: |-
                                  Имя или номер порта для доступа к контейнеру.
                                  Номер должен быть в диапазоне от 1 до 65535.
                                  Имя должно соответствовать `IANA_SVC_NAME`.
                          tcp:
                            properties:
                              targetPort:
                                description: |-
                                  Имя или номер порта для доступа к контейнеру.
                                  Номер должен находиться в диапазоне от 1 до 65535.
                                  Имя должно быть именем `IANA_SVC_NAME`.
                allocateLoadBalancerNodePorts:
                  description: |-
                    `allocateLoadBalancerNodePorts` определяет, будут ли автоматически выделяться NodePorts для сервисов с типом LoadBalancer.
                     Значение по умолчанию — `true`. Значение можно установить в `false`, если балансировщик нагрузки кластера не зависит от NodePorts.
                     
                     Если вызывающий запросит конкретные NodePorts (указав значение), эти запросы будут соблюдены независимо от этого поля.
                     Это поле может быть установлено только для сервисов с типом LoadBalancer и будет очищено, если тип изменится на любой другой.
                clusterIP:
                  description: |-
                    `clusterIP` — это IP-адрес сервиса, который обычно назначается случайным образом.
                     Если адрес указан вручную, он должен быть в пределах допустимого диапазона (в соответствии с конфигурацией системы) и не быть занятым, чтобы быть выделенным для сервиса;
                     в противном случае создание сервиса завершится неудачей. Это поле нельзя изменять через обновления, если поле типа также не изменяется на ExternalName (что требует, чтобы это поле было пустым)
                     или если поле типа изменяется с ExternalName (в этом случае это поле может быть указано дополнительно, как описано выше). 
                     
                     Допустимые значения: `None`, пустая строка (""), или действительный IP-адрес. Установка этого значения в `None` создает сервис без виртуального IP, что полезно, когда предпочтительнее прямое подключение к конечным точкам,
                     и проксирование не требуется. Это применяется только к типам ClusterIP, NodePort и LoadBalancer. Если это поле указано при создании сервиса типа ExternalName, создание завершится неудачей. 
                     
                     Это поле будет очищено при обновлении сервиса на тип ExternalName. [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                clusterIPs:
                  description: |-
                    ClusterIPs — это список IP-адресов, назначенных сервису, которые обычно назначаются случайным образом.
                    Если адрес указан вручную, он должен быть в пределах допустимого диапазона (в соответствии с конфигурацией системы) и не быть занятым,
                    чтобы быть выделенным для сервиса; в противном случае создание сервиса завершится неудачей. Это поле нельзя изменять через обновления,
                    если поле типа также не изменяется на ExternalName (что требует, чтобы это поле было пустым) или если поле типа изменяется с ExternalName
                    (в этом случае это поле может быть указано дополнительно, как описано выше). Допустимые значения: `None`, пустая строка (""), или действительный IP-адрес.
                    
                    Установка этого значения в `None` создает сервис без виртуального IP, что полезно, когда предпочтительнее прямое подключение к конечным точкам, и проксирование не требуется.
                    Это применяется только к типам ClusterIP, NodePort и LoadBalancer. Если это поле указано при создании сервиса типа ExternalName, создание завершится неудачей.
                    
                    Это поле будет очищено при обновлении сервиса на тип ExternalName. Если это поле не указано, оно будет инициализировано из поля `clusterIP`.
                    
                    Если это поле указано, клиенты должны убедиться, что значения `clusterIPs[0]` и `clusterIP` совпадают. Это поле может содержать максимум два значения (двойные стековые IP-адреса, в любом порядке).
                    
                    Эти IP-адреса должны соответствовать значениям поля `ipFamilies`. Оба поля `clusterIPs` и `ipFamilies` подчиняются полю `ipFamilyPolicy`. [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                externalIPs:
                  description: |-
                    `externalIPs` — это список IP-адресов, по которым узлы в кластере также будут принимать трафик для этого сервиса.
                    Эти IP-адреса не управляются Kubernetes. Пользователь несет ответственность за обеспечение доставки трафика на узел с этим IP-адресом.
                    
                    Общий пример — внешние балансировщики нагрузки, которые не являются частью системы Kubernetes.
                externalName:
                  description: |-
                    `externalName` — это внешняя ссылка, которую механизмы обнаружения будут возвращать в качестве псевдонима для этого сервиса (например, DNS-запись CNAME). Проксирование не будет использоваться.
                    Имя должно быть в нижнем регистре и соответствовать стандарту [RFC-1123](https://tools.ietf.org/html/rfc1123) и требует, чтобы поле `type` было установлено в `ExternalName`.
                externalTrafficPolicy:
                  description: |-
                    `externalTrafficPolicy` описывает, как узлы распределяют трафик сервиса, который они получают через один из его "внешне направленных" адресов (NodePorts, ExternalIPs и LoadBalancer IPs).
                     Если установлено значение `Local`, прокси настроит сервис таким образом, что внешние балансировщики нагрузки будут управлять распределением трафика между узлами, и каждый узел будет передавать
                     трафик только локальным конечным точкам сервиса, не маскируя исходный IP-адрес клиента.
                     Трафик, ошибочно отправленный на узел без конечных точек, будет отброшен.
                     
                     Значение по умолчанию — `Cluster`, при котором используется стандартное поведение равномерной маршрутизации ко всем конечным точкам (возможно, с модификациями на основе топологии и других особенностей).
                     
                     Обратите внимание, что трафик, отправленный на External IP или LoadBalancer IP изнутри кластера, всегда будет использовать семантику `Cluster`, но клиенты, отправляющие трафик на NodePort внутри кластера, могут учитывать политику трафика при выборе узла.
                healthCheckNodePort:
                  description: |-
                     `healthCheckNodePort` указывает NodePort для проверки состояния сервиса. Это применимо только тогда, когда тип сервиса установлен на LoadBalancer,
                      а параметр `externalTrafficPolicy` установлен на `Local`. Если указано значение, оно находится в допустимом диапазоне и не используется, то оно будет применено.
                      
                      Если не указано, значение будет назначено автоматически. Внешние системы (например, балансировщики нагрузки) могут использовать этот порт, чтобы определить, содержит ли узел конечные точки для этого сервиса.
                      
                      Если это поле указано при создании сервиса, который в этом не нуждается, создание завершится ошибкой. Это поле будет очищено при изменении параметров сервиса, когда оно станет ненужным (например, при изменении типа).
                      
                      Это поле не может быть обновлено после установки.
                internalTrafficPolicy:
                  description: |-
                      `InternalTrafficPolicy` описывает, как узлы распределяют трафик сервиса, который они получают через ClusterIP.
                      
                      Если параметр установлен на `Local`, прокси предполагает, что поды хотят общаться только с конечными точками сервиса,
                      находящимися на том же узле, что и под. Трафик будет отброшен, если на узле нет локальных конечных точек.
                      
                      Значение по умолчанию — `Cluster`, при котором используется стандартное поведение маршрутизации ко всем конечным точкам равномерно
                      (возможны изменения в зависимости от топологии и других функций).
                ipFamilies:
                  description: |-
                      `IPFamilies` — это список IP-семейств (например, IPv4, IPv6), назначенных этому сервису.
                      Это поле обычно назначается автоматически на основе конфигурации кластера и поля `ipFamilyPolicy`.
                      
                      Если поле указано вручную и запрашиваемое семейство доступно в кластере, а `pFamilyPolicy` это позволяет, оно будет использовано;
                      в противном случае создание сервиса завершится неудачей. Это поле можно изменять условно: допускается добавление или удаление вторичного IP-семейства,
                      но нельзя изменить основное IP-семейство сервиса. Допустимые значения — `IPv4` и `IPv6`. Это поле применяется только к сервисам типов ClusterIP, NodePort и LoadBalancer.
                      
                      Это поле будет удалено при обновлении сервиса до типа ExternalName. В это поле можно записать максимум два значения (двойной стек IP-семейств, в любом порядке).
                      
                      Эти семейства должны соответствовать значениям поля `clusterIPs`, если оно указано. Поля `clusterIPs` и `ipFamilies` управляются полем `ipFamilyPolicy`.
                  items:
                    description: |-
                      `IPFamily` представляет IP-семейство (IPv4 или IPv6).
                       
                       Этот тип используется для указания семейства IP, выраженного типом, например `service.spec.ipFamilies`).
                ipFamilyPolicy:
                  description: |-
                    `IPFamilyPolicy` представляет собой требуемую или запрашиваемую поддержку двух стеков для этого сервиса.
                    
                    Если значение не указано, это поле будет установлено в `SingleStack`. Сервисы могут быть `SingleStack` (одно IP-семейство), `PreferDualStack` (два IP-семейства на кластерах с двойным стеком или одно IP-семейство на кластерах с одним стеком)
                    или `RequireDualStack` (два IP-семейства на кластерах с двойным стеком, в противном случае возникнет ошибка).
                    
                    Поля `ipFamilies` и `clusterIPs` зависят от значения этого поля. Это поле будет очищено при обновлении сервиса до типа `ExternalName`.
                loadBalancerClass:
                  description: |-
                    `loadBalancerClass` — это класс реализации балансировщика нагрузки, к которому принадлежит этот сервис.
                    Если указано, значение этого поля должно быть идентификатором в стиле метки с необязательным префиксом, например, `internal-vip` или `example.com/internal-vip`. Имена без префикса зарезервированы для конечных пользователей.
                    
                    Это поле может быть установлено только тогда, когда тип сервиса — LoadBalancer. Если тип не указан, используется реализация балансировщика нагрузки по умолчанию, которая обычно осуществляется через интеграцию с облачным провайдером,
                    но должна применяться для любой реализации по умолчанию. Если указано, предполагается, что реализация балансировщика нагрузки отслеживает сервисы с соответствующим классом.
                    Любая реализация балансировщика нагрузки по умолчанию (например, облачные провайдеры) должна игнорировать сервисы, устанавливающие это поле. Это поле может быть установлено только при создании или обновлении сервиса до типа LoadBalancer.
                    
                    После установки его нельзя изменить. Это поле будет очищено, когда сервис будет обновлен до типа, отличного от LoadBalancer.
                loadBalancerIP:
                  description: |-
                    Применяется только для типа сервиса LoadBalancer. Эта функция зависит от того, поддерживает ли облачный провайдер возможность указания `loadBalancerIP` при создании балансировщика нагрузки.
                    
                    Это поле будет игнорироваться, если облачный провайдер не поддерживает данную функцию.
                loadBalancerSourceRanges:
                  description: |-
                    Если указано и поддерживается платформой, это ограничит трафик через облачный балансировщик нагрузки только для указанных клиентских IP-адресов.
                    
                    Это поле будет игнорироваться, если облачный провайдер не поддерживает данную функцию.
                    [Подробнее.](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/)
                ports:
                  description: |-
                    Список портов, которые открыты этим сервисом.
                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                  items:
                    description: ServicePort содержит информацию о порте сервиса.
                    properties:
                      appProtocol:
                        description: |-
                          Приложенческий протокол для этого порта.
                          Используется в качестве подсказки для реализаций, чтобы предложить более обширное поведение для протоколов, которые они понимают.
                          Это поле следует стандартному синтаксису меток Kubernetes.
                          Допустимые значения:
                          * Именования протоколов без префиксов — зарезервированы для стандартных имён служб IANA, в соответствии с
                          [RFC-6335](https://www.iana.org/assignments/service-names).
                          * Именования с префиксом, определенные Kubernetes:
                            * 'kubernetes.io/h2c' - HTTP/2 с предварительным знанием в открытом виде, как описано в [rfc-editor.org](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-)
                            * 'kubernetes.io/ws'  - WebSocket в открытом виде, как описано в https://www.rfc-editor.org/rfc/rfc6455
                            * 'kubernetes.io/wss' - WebSocket через TLS, как описано в  [rfc-editor.org](https://www.rfc-editor.org/rfc/rfc6455)
                          * Другие протоколы должны использовать имена с определенными реализациями, такими как
                          mycompany.com/my-custom-protocol.
                      name:
                        description: |-
                          Имя этого порта внутри службы — DNS_LABEL.
                          
                          Все порты внутри `ServiceSpec` должны иметь уникальные имена. При рассмотрении
                          конечных точек для службы это должно совпадать с полем 'name' в
                          EndpointPort.
                          Необязательно, если на этой службе определен только один `ServicePort`.
                      nodePort:
                        description: |-
                          Порт на каждом узле, на котором эта служба открыта, когда тип равен
                          NodePort или LoadBalancer. Обычно назначается системой. Если указано значение,
                          оно должно быть в диапазоне и не должно использоваться, иначе операция завершится
                          с ошибкой. 
                          
                          Если не указано, порт будет выделен, если этой службе это требуется.
                          
                          Если это поле указано при создании службы, которая в этом не нуждается,
                          создание завершится с ошибкой. 
                          
                          Это поле будет очищено при обновлении службы,
                          чтобы больше не нуждаться в нем (например, изменение типа
                          с NodePort на ClusterIP).
                          [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
                      port:
                        description: Порт, который будет открыт этой службой.
                      protocol:
                        description: |-
                          IP-протокол для этого порта. Поддерживает `TCP`, `UDP` и `SCTP`. 
                          
                          По умолчанию используется TCP.
                      targetPort:
                        description: |-
                          Номер или имя порта для доступа к подам, на которые нацелен сервис. 
                          Номер должен быть в диапазоне от 1 до 65535. Имя должно соответствовать `IANA_SVC_NAME`. 
                          
                          Если это строка, она будет рассматриваться как именованный порт в портах контейнера целевого пода. 
                          
                          Если не указано, будет использоваться значение поля `port`. 
                          
                          Это поле игнорируется для сервисов с `clusterIP=None` и должно быть установлено равным полю `port`.
                          [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
                publishNotReadyAddresses:
                  description: |-
                    `publishNotReadyAddresses` указывает, что любой агент, который обрабатывает конечные точки для этого сервиса, должен игнорировать любые указания на готовность/неготовность. 
                    Основной случай использования установки этого поля — это сервис `StatefulSet` для распространения SRV DNS-записей для его подов с целью обнаружения пиров. 
                    
                    Контроллеры Kubernetes, которые генерируют ресурсы `Endpoints` и `EndpointSlice` для сервисов, интерпретируют это как указание на то, что все конечные точки считаются "готовыми", даже если сами поды не готовы. 
                    Агенты, которые потребляют только конечные точки, созданные Kubernetes, через ресурсы `Endpoints` или `EndpointSlice`, могут с уверенностью предполагать это поведение.
                selector:
                  description: |-
                    Маршрутизировать трафик сервиса к подам с ключами и значениями меток, соответствующими этому селектору.
                    Если селектор пуст или отсутствует, предполагается, что у сервиса есть внешний процесс, управляющий его конечными точками, которые Kubernetes не будет изменять.
                    
                    Это применяется только к типам ClusterIP, NodePort и LoadBalancer.
                    
                    Игнорируется, если тип — ExternalName.
                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/)
                sessionAffinity:
                  description: |-
                    Поддерживает `ClientIP` и `None`. Используется для поддержания сессий с привязкой к клиенту.
                    Включает сессию с привязкой к IP-адресу клиента.
                    Должно быть либо `ClientIP`, либо `None`.
                    
                    По умолчанию — `None`.
                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                sessionAffinityConfig:
                  description: sessionAffinityConfig содержит конфигурации привязки сессий.
                  properties:
                    clientIP:
                      description: clientIP содержит конфигурации привязки сессий на основе IP-адреса клиента.
                      properties:
                        timeoutSeconds:
                          description: |-
                            `timeoutSeconds` указывает время удержания сессии для типа `ClientIP` в секундах. 
                            
                            Значение должно быть >0 && <=86400 (для 1 дня), `если ServiceAffinity` == `ClientIP`. 
                            
                            Значение по умолчанию — 10800 (для 3 часов).
                trafficDistribution:
                  description: |-
                    `TrafficDistribution` предоставляет возможность выразить предпочтения относительно того,
                    как трафик распределяется между конечными точками сервиса. Реализации могут использовать это поле как подсказку, но не обязаны строго ей следовать.
                    
                    Если поле не задано, реализация применяет стратегию маршрутизации по умолчанию. Если установлено значение `PreferClose`, реализации должны приоритизировать конечные точки, которые топологически близки (например, в той же зоне).
                type:
                  description: |-
                    `type` определяет, как сервис будет доступен. По умолчанию используется `ClusterIP`. Допустимые варианты: ExternalName, ClusterIP, NodePort и LoadBalancer. 
                    ClusterIP выделяет внутренний IP-адрес для балансировки нагрузки между конечными точками. Конечные точки определяются селектором или, если он не указан, вручную с помощью объектов `Endpoints` или `EndpointSlice`.
                    Если значение `clusterIP` установлено на `None`, виртуальный IP не выделяется, и конечные точки публикуются как набор конечных точек, а не как виртуальный IP.
                    NodePort расширяет ClusterIP и выделяет порт на каждом узле, который маршрутизируется к тем же конечным точкам, что и `clusterIP`.
                    LoadBalancer расширяет NodePort и создает внешний балансировщик нагрузки (если поддерживается текущим облаком), который маршрутизируется к тем же конечным точкам, что и `clusterIP`.
                    ExternalName создает алиас этому сервису на указанный `externalName`. Некоторые другие поля не применяются к сервисам типа ExternalName.
                    [Подробнее.](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
            status:
              description: ServiceWithHealthchecksStatus определяет наблюдаемое состояние `ServiceWithHealthchecks`.
              properties:
                conditions:
                  description: Текущее состояние сервиса
                  items:
                    description:
                    properties:
                      lastTransitionTime:
                        description: |-
                           `lastTransitionTime` — это последнее время, когда условие перешло из одного состояния в другое.  
                           Это должно соответствовать времени изменения основного условия. 
                           
                           Если неизвестно, можно использовать время изменения поля API.
                      message:
                        description: |-
                          `message` — это понятное человеку сообщение, указывающее детали перехода.  
                          
                          Это может быть пустая строка.
                      observedGeneration:
                        description: |-
                          `observedGeneration` — это значение `.metadata.generation`, на основе которого было установлено состояние.  
                          
                          Например, если `.metadata.generation` равно 12, а `.status.conditions[x].observedGeneration` равно 9, то состояние устарело  
                          по отношению к текущему состоянию экземпляра.
                      reason:
                        description: |-
                          `reason` — это программный идентификатор, указывающий причину последнего перехода состояния.  
                          Производители конкретных типов состояний могут определить ожидаемые значения и их значения для этого поля,  
                          а также то, считаются ли эти значения гарантированным API.  
                          
                          Значение должно быть строкой в `CamelCase`.  
                          
                          Это поле не может быть пустым.
                      status:
                        description: status — состояние условия, одно из значений `True`, `False`, `Unknown`.
                      type:
                        description: |-
                          type — тип условия в формате `CamelCase` или в виде `foo.example.com/CamelCase`.
                          ---
                          Многие значения `.condition.type` последовательны для различных ресурсов,
                          таких как `Available`, но поскольку произвольные условия могут быть полезными (см. `.node.status.conditions`),
                          важна возможность разрешения конфликтов. Регулярное выражение, которому оно соответствует: (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                endpointStatuses:
                  description: Текущие состояние службы
                loadBalancer:
                  description: |-
                    LoadBalancer содержит текущее состояние балансировщика нагрузки, если он присутствует.
                  properties:
                    ingress:
                      description: |-
                        Ingress — это список, содержащий точки входа для балансировщика нагрузки.
                        Трафик, предназначенный для сервиса, должен направляться на эти точки входа.
                      items:
                        description: |-
                          LoadBalancerIngress представляет состояние точки входа балансировщика нагрузки: трафик, предназначенный для сервиса, должен направляться на эту точку входа.
                        properties:
                          hostname:
                            description: |-
                              Hostname устанавливается для точек входа балансировщика нагрузки, которые основаны на DNS (обычно балансировщики нагрузки AWS).
                          ip:
                            description: |-
                              IP устанавливается для точек входа балансировщика нагрузки, которые основаны на IP-адресах (обычно балансировщики нагрузки GCE или OpenStack).
                          ipMode:
                            description: |-
                              IPMode указывает, как ведет себя IP-адрес балансировщика нагрузки и может быть указан только при указании поля `ip`.
                              Установка значения `VIP` означает, что трафик доставляется на узел с назначением, установленным на IP-адрес и порт балансировщика нагрузки.
                              Установка значения `Proxy` указывает, что трафик доставляется на узел или под с назначением, установленным на IP-адрес узла и порт узла или IP-адрес пода и порт.
                              
                              Реализации сервиса могут использовать эту информацию для настройки маршрутизации трафика.
                          ports:
                            description: |-
                              Ports — это список записей портов сервиса.
                              
                              Если используется, каждый порт, определенный в сервисе, должен иметь соответствующую запись в этом списке.
                            items:
                              properties:
                                error:
                                  description: |-
                                    Error — это запись проблемы с портом сервиса.
                                    Формат ошибки должен соответствовать следующим правилам:
                                    - Встроенные значения ошибок должны быть указаны в этом файле и использовать имена в формате CamelCase.
                                    - Специфические для облачного провайдера значения ошибок должны иметь имена,
                                      соответствующие формату `foo.example.com/CamelCase`.
                                    ---
                                    Регулярное выражение, с которым это соответствует: (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                                port:
                                  description: Port — это номер порта сервиса, статус которого указан.
                                protocol:
                                  description: |-
                                    Protocol — это протокол порта сервиса, статус которого здесь записан. Поддерживаемые значения: `TCP`, `UDP`, `SCTP`.