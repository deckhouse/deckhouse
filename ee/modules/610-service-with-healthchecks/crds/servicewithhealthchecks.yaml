apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    heritage: deckhouse
    module: service-with-healthchecks
  name: servicewithhealthchecks.network.deckhouse.io
spec:
  group: network.deckhouse.io
  names:
    kind: ServiceWithHealthchecks
    listKind: ServiceWithHealthchecksList
    plural: servicewithhealthchecks
    singular: servicewithhealthcheck
    shortNames:
    - swh
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServiceWithHealthchecks is the schema for the
          `servicewithhealthchecks` API.
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            description: Defines the desired state of `servicewithHealthchecks`.
            properties:
              healthcheck:
                properties:
                  initialDelaySeconds:
                    format: int32
                    type: integer
                    description: Number of seconds after the container has started before liveness
                      probes are initiated.
                    minimum: 0
                    maximum: 108000
                    default: 10
                  periodSeconds:
                    format: int32
                    type: integer
                    minimum: 1
                    maximum: 108000
                    default: 10
                    description: How often (in seconds) to perform the probe.
                  probes:
                    items:
                      properties:
                        failureThreshold:
                          format: int32
                          type: integer
                          minimum: 1
                          default: 3
                          description: |-
                            Minimum consecutive failures for the probe to be considered failed after having succeeded.
                        timeoutSeconds:
                          format: int32
                          type: integer
                          minimum: 1
                          default: 1
                          description: Number of seconds after which the probe times out.
                        successThreshold:
                          format: int32
                          type: integer
                          minimum: 1
                          default: 1
                          description: |-
                            Minimum consecutive successes for the probe to be considered successful after having failed.
                        mode:
                          enum:
                          - HTTP
                          - TCP
                          - PostgreSQL
                          type: string
                          description: |-
                            The mode for the probe.
                        http:
                          properties:
                            host:
                              description: |-
                                Hostname to connect to, defaults to the pod's IP address.
                              type: string
                              format: hostname
                            httpHeaders:
                              description: Custom headers that will be added to the HTTP request and used when
                                performing the probe. Duplicate headers are
                                allowed.
                              items:
                                description:
                                properties:
                                  name:
                                    description: |-
                                      The header name.

                                      This will be canonicalized upon output, so case-variant names will be understood as the same header.
                                    type: string
                                  value:
                                    description: The header value.
                                    type: string
                                required:
                                - name
                                - value
                                type: object
                              type: array
                            method:
                              description: Method to use for the request.
                              type: string
                              default: GET
                              enum:
                              - GET
                              - HEAD
                            path:
                              description: Path to access on the HTTP server.
                              type: string
                            scheme:
                              description: |-
                                Scheme to use for connecting to the host.
                              type: string
                              default: HTTP
                              enum:
                              - HTTP
                              - HTTPS
                            targetPort:
                              type: integer
                              description: |-
                                Number of the port to access on the container.
                              minimum: 1
                              maximum: 65535
                            insecureSkipTLSVerify:
                              type: boolean
                              default: false
                              description: |-
                                Indicates if the client should skip
                                verifying the server's TLS certificate chain and hostname.
                            caCert:
                              type: string
                              description: |-
                                CA certificate for HTTPS connection.
                          required:
                          - targetPort
                          type: object
                        postgreSQL:
                          properties:
                            authSecretName:
                              type: string
                              description: |-
                                The name of the secret located in the same namespace as this resource.

                                The secret can contain the following authentication fields:
                                `tlsMode`, `clientCert`, `clientKey`, `caCert`, `password`, `user`.
                            dbName:
                              type: string
                              description: Optional Database Name.
                            query:
                              type: string
                              default: select 1
                              description: |-
                                Query to PostgreSQL for testing.

                                Must return one of the values `TRUE`: `t`, `true`, `y`, `yes`,`1`.
                                to be considered successful.

                                > **Warining.** The privileges for the user under whom the requests are executed should be minimal.
                            targetPort:
                              type: integer
                              description: |-
                                Number of the port to access on the container.
                              minimum: 1
                              maximum: 65535
                          required:
                          - targetPort
                          type: object
                        tcp:
                          properties:
                            targetPort:
                              type: integer
                              description: |-
                                Number of the port to access on the container.
                              minimum: 1
                              maximum: 65535
                          required:
                          - targetPort
                          type: object
                      type: object
                    type: array
                type: object
              allocateLoadBalancerNodePorts:
                description: |-
                  Determines whether NodePort should be automatically allocated for services of LoadBalancer type.
                  Default is `true`. It may be set to `false` if the cluster load-balancer does not rely on
                  NodePorts.

                  If the caller requests specific NodePorts (by specifying a
                  value), those requests will be respected, regardless of this field.
                  This parameter can be set only for services of LoadBalancer type and is automatically reset when the type is changed to another.
                type: boolean
              clusterIP:
                description: |-
                  The IP address of the service.

                  Normally, the IP address is randomly assigned to the service.
                  If the IP address is manually specified, it must be within the valid range (specified by the system configuration) and free for assignment; otherwise, service creation will fail.

                  This field may not be changed through updates unless the type field is also being changed
                  to `ExternalName` (which requires this field to be blank) or the type
                  field is being changed from `ExternalName` (in which case this field may
                  optionally be specified, as describe above).

                  Valid values are `None`,
                  empty string (""), or a valid IP address. Setting this to `None` makes a
                  "headless service" (no virtual IP), which is useful when direct endpoint
                  connections are preferred and proxying is not required.  Only applies to
                  types ClusterIP, NodePort, and LoadBalancer. If this field is specified
                  when creating a Service of type ExternalName, creation will fail.
                  This field will be wiped when updating a Service to type ExternalName.
                  [More info.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                type: string
              externalIPs:
                description: |-
                  A list of IP addresses where nodes in the cluster will also accept traffic for this service.
                  These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives
                  at a node with this IP.

                  A common example is external load-balancers that are not part of the Kubernetes system.
                items:
                  type: string
                type: array
                x-kubernetes-list-type: atomic
              externalName:
                description: |-
                  An external reference that discovery mechanisms will return as an alias for this service (e.g., a DNS record CNAME).

                  Must be a lowercase [RFC-1123 hostname](https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
                type: string
              externalTrafficPolicy:
                description: |-
                  Describes how nodes distribute service traffic they
                  receive on one of the Service's "externally-facing" addresses (NodePorts,
                  ExternalIPs, and LoadBalancer IPs).
                  If set to `Local`, the proxy will configure
                  the service in a way that assumes that external load balancers will take care
                  of balancing the service traffic between nodes, and so each node will deliver
                  traffic only to the node-local endpoints of the service, without masquerading
                  the client source IP. Traffic mistakenly sent to a node with no endpoints will
                  be dropped.

                  The default value, `Cluster`, uses the standard behavior of
                  routing to all endpoints evenly (possibly modified by topology and other
                  features).

                  Note that traffic sent to an External IP or LoadBalancer IP from
                  within the cluster will always get `Cluster` semantics, but clients sending to
                  a NodePort from within the cluster may need to take traffic policy into account
                  when picking a node.
                type: string
              healthCheckNodePort:
                description: |-
                  Specifies the healthcheck nodePort for the service.
                  This only applies when type is set to LoadBalancer and
                  `externalTrafficPolicy` is set to `Local`. If a value is specified, is
                  in-range, and is not in use, it will be used.

                  If not specified, a value
                  will be automatically allocated.  External systems (e.g. load-balancers)
                  can use this port to determine if a given node holds endpoints for this
                  service or not.

                  If this field is specified when creating a Service
                  which does not need it, creation will fail. This field will be wiped
                  when updating a Service to no longer need it (e.g. changing type).

                  This field cannot be updated once set.
                format: int32
                type: integer
              internalTrafficPolicy:
                description: |-
                  Describes how nodes distribute service traffic they
                  receive on the ClusterIP.

                  If set to `Local`, the proxy will assume that pods
                  only want to talk to endpoints of the service on the same node as the pod,
                  dropping the traffic if there are no local endpoints.

                  The default value,
                  `Cluster`, uses the standard behavior of routing to all endpoints evenly
                  (possibly modified by topology and other features).
                type: string
              ipFamilies:
                description: |-
                  A family of IP addresses (e.g., IPv4, IPv6) assigned to a service. This field is usually assigned automatically based on cluster
                  configuration and the `ipFamilyPolicy` field.

                  If this field is specified
                  manually, the requested family is available in the cluster,
                  and `ipFamilyPolicy` allows it, it will be used; otherwise creation of
                  the service will fail. This field is conditionally mutable: it allows
                  for adding or removing a secondary IP family, but it does not allow
                  changing the primary IP family of the Service.

                  Valid values are `IPv4`
                  and `IPv6`.This field only applies to Services of types ClusterIP,
                  NodePort, and LoadBalancer, and does apply to "headless" services.

                  This field will be wiped when updating a Service to type `ExternalName`.

                  This field may hold a maximum of two entries (dual-stack families, in
                  either order).
                  These families must correspond to the values of the
                  `clusterIPs` field, if specified. Both `clusterIPs` and `ipFamilies` are
                  governed by the `ipFamilyPolicy` field.
                items:
                  description: |-
                    Represents the IP Family (IPv4 or IPv6).

                    This type is used
                    to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
                  type: string
                type: array
                x-kubernetes-list-type: atomic
              ipFamilyPolicy:
                description: |-
                  Required or requested dual stack support for the service.

                  If there is no value provided, then this field will be set
                  to `SingleStack`. Services can be `SingleStack` (a single IP family),
                  `PreferDualStack` (two IP families on dual-stack configured clusters or
                  a single IP family on single-stack clusters), or `RequireDualStack`
                  (two IP families on dual-stack configured clusters, otherwise fail).

                  The
                  `ipFamilies` and `clusterIPs` fields depend on the value of this field. This
                  field will be wiped when updating a service to type `ExternalName`.
                type: string
              loadBalancerClass:
                description: |-
                  The class of the load balancer implementation this Service belongs to.
                  If specified, the value of this field must be a label-style identifier, with an optional prefix,
                  e.g. `internal-vip` or `example.com/internal-vip`. Unprefixed names are reserved for end-users.

                  This field can only be set when the Service type is `LoadBalancer`.

                  If not set, the default load
                  balancer implementation is used, today this is typically done through the cloud provider integration,
                  but should apply for any default implementation.

                  If set, it is assumed that a load balancer
                  implementation is watching for Services with a matching class.
                  Any default load balancer
                  implementation (e.g. cloud providers) should ignore Services that set this field.
                  This field can only be set when creating or updating a Service to type `LoadBalancer`.

                  Once set, it can not be changed. This field will be wiped when a service is updated to a non `LoadBalancer` type.
                type: string
              loadBalancerIP:
                description: |-
                  Only applies to Service Type: LoadBalancer.
                  This feature depends on whether the underlying cloud-provider supports specifying
                  the loadBalancerIP when a load balancer is created.

                  This field will be ignored if the cloud-provider does not support the feature.
                type: string
              loadBalancerSourceRanges:
                description: |-
                  If specified and supported by the platform, this will restrict traffic through the cloud-provider
                  load-balancer will be restricted to the specified client IPs.

                  This field will be ignored if the
                  cloud-provider does not support the feature.
                  [More info.](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/)
                items:
                  type: string
                type: array
                x-kubernetes-list-type: atomic
              ports:
                description: |-
                  The list of ports that are exposed by this service.
                  [More info.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                items:
                  description: ServicePort contains information on service's port.
                  properties:
                    appProtocol:
                      description: |-
                        The application protocol for this port.
                        This is used as a hint for implementations to offer richer behavior for protocols that they understand.
                        This field follows standard Kubernetes label syntax.
                        Valid values are either:
                        * Un-prefixed protocol names - reserved for IANA standard service names as
                        [RFC-6335](https://www.iana.org/assignments/service-names).
                        * Kubernetes-defined prefixed names:
                          * `kubernetes.io/h2c` — HTTP/2 prior knowledge over cleartext as described in [RFC](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-);
                          * `kubernetes.io/ws`  — WebSocket over cleartext as described in [RFC](https://www.rfc-editor.org/rfc/rfc6455);
                          * `kubernetes.io/wss` — WebSocket over TLS as described in [RFC](https://www.rfc-editor.org/rfc/rfc6455).
                        * Other protocols should use implementation-defined prefixed names such as
                        `mycompany.com/my-custom-protocol`.
                      type: string
                    name:
                      description: |-
                        The name of this port within the service. This must be a `DNS_LABEL`.

                        All ports within a ServiceSpec must have unique names. When considering
                        the endpoints for a Service, this must match the 'name' field in the
                        `EndpointPort`.
                        Optional if only one `ServicePort` is defined on this service.
                      type: string
                    nodePort:
                      description: |-
                        The port on each node on which this service is exposed when type is
                        NodePort or LoadBalancer.  Usually assigned by the system. If a value is
                        specified, in-range, and not in use it will be used, otherwise the
                        operation will fail.

                        If not specified, a port will be allocated if this
                        Service requires one.

                        If this field is specified when creating a
                        Service which does not need it, creation will fail.

                        This field will be
                        wiped when updating a Service to no longer need it (e.g. changing type
                        from NodePort to ClusterIP).
                        [More info.](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
                      format: int32
                      type: integer
                    port:
                      description: The port that will be exposed by this service.
                      format: int32
                      type: integer
                    protocol:
                      default: TCP
                      description: |-
                        The IP protocol for this port. Supports `TCP`, `UDP`, and `SCTP`.
                      type: string
                    targetPort:
                      type: integer
                      description: |-
                        Number of the port to access on the pods targeted by the service.

                        If this is not specified, the value
                        of the `port` field is used (an identity map).

                        This field is ignored for services with `clusterIP=None`, and should be
                        omitted or set equal to the `port` field.
                        [More info.](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
                  required:
                  - port
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - port
                - protocol
                x-kubernetes-list-type: map
              publishNotReadyAddresses:
                description: |-
                  Indicates that any agent which deals with endpoints for this
                  Service should disregard any indications of ready/not-ready.
                  The primary use case for setting this field is for a StatefulSet's Headless Service to
                  propagate SRV DNS records for its Pods for the purpose of peer discovery.

                  The Kubernetes controllers that generate `Endpoints` and `EndpointSlice` resources for
                  Services interpret this to mean that all endpoints are considered "ready" even if the
                  Pods themselves are not.
                  Agents which consume only Kubernetes generated endpoints
                  through the `Endpoints` or `EndpointSlice` resources can safely assume this behavior.
                type: boolean
              selector:
                additionalProperties:
                  type: string
                description: |-
                  Route service traffic to pods with label keys and values matching this
                  selector. If empty or not present, the service is assumed to have an
                  external process managing its endpoints, which Kubernetes will not
                  modify.

                  Only applies to types ClusterIP, NodePort, and LoadBalancer.

                  Ignored if type is `ExternalName`.
                  [More info.](https://kubernetes.io/docs/concepts/services-networking/service/)
                type: object
                x-kubernetes-map-type: atomic
              sessionAffinity:
                description: |-
                  Used to maintain session affinity.
                  Enable client IP based session affinity.
                  Must be `ClientIP` or `None`.
                  [More info.](https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies)
                type: string
              sessionAffinityConfig:
                description: Contains the configurations of session affinity.
                properties:
                  clientIP:
                    description: Contains the configurations of `ClientIP` based session affinity.
                    properties:
                      timeoutSeconds:
                        description: |-
                          Specifies the seconds of `ClientIP` type session sticky time.
                          The value must be `>0 && <=86400` (for 1 day) if `ServiceAffinity == ClientIP`.
                        format: int32
                        type: integer
                    type: object
                type: object
              trafficDistribution:
                description: |-
                  Offers a way to express preferences for how traffic is
                  distributed to Service endpoints. Implementations can use this field as a
                  hint, but are not required to guarantee strict adherence.

                  If the field is
                  not set, the implementation will apply its default routing strategy.
                  If set
                  to `PreferClose`, implementations should prioritize endpoints that are
                  topologically close (e.g., same zone).
                type: string
              type:
                description: |-
                  Determines how the Service is exposed.

                  Defaults to ClusterIP. Valid
                  options are ExternalName, ClusterIP, NodePort, and LoadBalancer.

                  ClusterIP allocates a cluster-internal IP address for load-balancing
                  to endpoints. Endpoints are determined by the `selector` or if that is not
                  specified, by manual construction of an `Endpoints` object or
                  `EndpointSlice` objects.

                  If `clusterIP` is `None`, no virtual IP is
                  allocated and the endpoints are published as a set of endpoints rather
                  than a virtual IP.

                  NodePort builds on ClusterIP and allocates a port on every node which
                  routes to the same endpoints as the `clusterIP`.

                  LoadBalancer builds on NodePort and creates an external load-balancer
                  (if supported in the current cloud) which routes to the same endpoints
                  as the `clusterIP`.

                  ExternalName aliases this service to the specified `externalName`.
                  Several other fields do not apply to ExternalName services.
                  [More info.](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
                type: string
            required:
            - healthcheck
            type: object
          status:
            description: Defines the observed state of ServiceWithHealthchecks
            properties:
              conditions:
                description: Current service state
                items:
                  description: Condition contains details for one aspect of the current state of
                    this API Resource. This struct is intended for direct use as
                    an array at the field path `.status.conditions`.
                  properties:
                    lastTransitionTime:
                      description: |-
                        Is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.

                        If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        Is a human readable message indicating details about the transition.

                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        Represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        Contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.

                        The value should be a CamelCase string.

                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of `True`, `False`, `Unknown`.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        Condition in CamelCase or in `foo.example.com/CamelCase`.
                        ---
                        Many `.condition.type` values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is `(dns1123SubdomainFmt/)?(qualifiedNameFmt)`.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              endpointStatuses:
                description: Current service state
                items:
                  properties:
                    failedProbes:
                      items:
                        type: string
                      type: array
                    nodeName:
                      type: string
                    podName:
                      type: string
                    probesSuccessful:
                      type: boolean
                    ready:
                      type: boolean
                    lastProbeTime:
                      type: string
                      format: date-time
                  required:
                  - podName
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - podName
                x-kubernetes-list-type: map
              healthcheckCondition:
                properties:
                  activeNodeName:
                    type: string
                  endpoints:
                    format: int32
                    type: integer
                  observedGeneration:
                    format: int64
                    type: integer
                  readyEndpoints:
                    format: int32
                    type: integer
                type: object
              loadBalancer:
                description: |-
                  Contains the current status of the load-balancer,
                  if one is present.
                properties:
                  ingress:
                    description: |-
                      Is a list containing ingress points for the load-balancer.
                      Traffic intended for the service should be sent to these ingress points.
                    items:
                      description: |-
                        LoadBalancerIngress represents the status of a load-balancer ingress point:
                        traffic intended for the service should be sent to an ingress point.
                      properties:
                        hostname:
                          description: |-
                            Is set for load-balancer ingress points that are DNS based
                            (typically AWS load-balancers)
                          type: string
                        ip:
                          description: |-
                            Is set for load-balancer ingress points that are IP based
                            (typically GCE or OpenStack load-balancers)
                          type: string
                        ipMode:
                          description: |-
                            Specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified.
                            Setting this to `VIP` indicates that traffic is delivered to the node with
                            the destination set to the load-balancer's IP and port.

                            Setting this to `Proxy` indicates that traffic is delivered to the node or pod with
                            the destination set to the node's IP and node port or the pod's IP and port.

                            Service implementations may use this information to adjust traffic routing.
                          type: string
                        ports:
                          description: |-
                            Is a list of records of service ports

                            If used, every port defined in the service should have an entry in it
                          items:
                            properties:
                              error:
                                description: |-
                                  Error is to record the problem with the service port
                                  The format of the error shall comply with the following rules:
                                  - built-in error values shall be specified in this file and those shall use
                                    CamelCase names
                                  - cloud provider specific error values must have names that comply with the
                                    format `foo.example.com/CamelCase`.
                                  ---
                                  The regex it matches is `(dns1123SubdomainFmt/)?(qualifiedNameFmt)`.
                                maxLength: 316
                                pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                type: string
                              port:
                                description: Is the port number of the service port of which status is recorded
                                  here
                                format: int32
                                type: integer
                              protocol:
                                default: TCP
                                description: |-
                                  Is the protocol of the service port of which status is recorded here

                                  The supported values are: `TCP`, `UDP`, `SCTP`
                                type: string
                            required:
                            - port
                            - protocol
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
    additionalPrinterColumns:
    - jsonPath: .spec.type
      name: Type
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.loadBalancer.ingress[0].ip
      name: ExternalIP
      type: string
    - jsonPath: .spec.ports[].port
      name: Ports
      type: string
