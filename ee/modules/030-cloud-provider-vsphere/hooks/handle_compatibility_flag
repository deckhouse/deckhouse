#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 20
    kubernetes:
    - name: module_storageclasses
      group: main
      keepFullObjectsInMemory: false
      apiVersion: storage.k8s.io/v1
      kind: Storageclass
      labelSelector:
        matchExpressions:
        - key: heritage
          operator: In
          values: ["deckhouse"]
      jqFilter: |
        {
          "name": .metadata.name,
          "isLegacy": (.provisioner == "vsphere.csi.vmware.com"),
          "isModern": (.provisioner == "csi.vsphere.vmware.com")
        }
EOF
}

function __main__() {
  compatibility_flag="none"
  if values::has cloudProviderVsphere.storageClass.compatibilityFlag; then
      compatibility_flag="$(values::get cloudProviderVsphere.storageClass.compatibilityFlag)"
  fi
  # For Kubernetes 1.16 we run CSI only in `legacy` mode.
  cluster_version="$(semver::majmin "$(values::get global.discovery.kubernetesVersion)")"
  if [[ "$cluster_version" == "1.16" ]]; then
    compatibility_flag="legacy"
  fi
  values::set cloudProviderVsphere.internal.compatibilityFlag "$compatibility_flag"

  if [[ "$compatibility_flag" == "legacy" ]]; then
    # Legacy CSI StorageClasses will be rolled out. Delete modern ones.
    for sc in $(context::jq -r '.snapshots.module_storageclasses[].filterResult | select(.isModern == true) | .name'); do
      kubernetes::delete_if_exists "" "storageclass/$sc"
    done
  else
    # Empty or `migration` - modern CSI StorageClasses will be rolled out. Delete legacy ones.
    for sc in $(context::jq -r '.snapshots.module_storageclasses[].filterResult | select(.isLegacy == true) | .name'); do
      kubernetes::delete_if_exists "" "storageclass/$sc"
    done
  fi
}

hook::run "$@"
