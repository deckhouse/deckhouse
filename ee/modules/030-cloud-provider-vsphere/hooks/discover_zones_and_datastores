#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 20
    schedule:
    - crontab: "53 * * * *"
      queue: /modules/$(module::name::kebab_case)
EOF
}

function __main__() {
  GOVC_URL="$(values::get --required cloudProviderVsphere.internal.server)"
  export GOVC_URL
  GOVC_USERNAME="$(values::get --required cloudProviderVsphere.internal.username)"
  export GOVC_USERNAME
  GOVC_PASSWORD="$(values::get --required cloudProviderVsphere.internal.password)"
  export GOVC_PASSWORD
  GOVC_INSECURE="$(values::get --required cloudProviderVsphere.internal.insecure)"
  export GOVC_INSECURE

  VSPHERE_REGION_TAG_NAME="$(values::get --required cloudProviderVsphere.internal.region)"
  export VSPHERE_REGION_TAG_NAME
  VSPHERE_REGION_TAG_CATEGORY_NAME="$(values::get --required cloudProviderVsphere.internal.regionTagCategory)"
  export VSPHERE_REGION_TAG_CATEGORY_NAME
  VSPHERE_ZONE_TAG_CATEGORY_NAME="$(values::get --required cloudProviderVsphere.internal.zoneTagCategory)"
  export VSPHERE_ZONE_TAG_CATEGORY_NAME

  if [ -n "${D8_IS_TESTS_ENVIRONMENT-}" ]; then
    result='{"datacenter":"DCTEST","zones":["ZONE-TEST"],"datastores":[{"zones":["ZONE-TEST"],"path":"/DCTEST/datastore/test_1_Lun102","name":"test-1-lun102-0403073a","datastoreType":"Datastore","datastoreURL":"ds:///vmfs/volumes/55832249-30a68048-496f-33f77fed3c5c/"},{"zones":["ZONE-TEST"],"path":"/DCTEST/datastore/test_1_Lun101","name":"test-1-lun101-b39d82fa","datastoreType":"Datastore","datastoreURL":"ds:///vmfs/volumes/503a9af1-291d17b0-52e0-1d01842f428c/"},{"zones":["ZONE-TEST"],"path":"/DCTEST/datastore/test_1_k8s","name":"test-1-k8s-3cf5ce84","datastoreType":"DatastoreCluster"}]}'
  else
    if values::get --required cloudProviderVsphere.internal.datacenter >/dev/null 2>&1 ||
       values::get --required cloudProviderVsphere.internal.zones >/dev/null 2>&1 ||
       values::get --required cloudProviderVsphere.internal.storage_classes >/dev/null 2>&1 ; then
      result="$(timeout -s ABRT -k 5 30 deckhouse-controller helper vsphere get-zones-datastores)" || { echo 'vsphere-cli-helper exited by timeout, preserving old discovery information' && exit 0; }
    else
      result="$(timeout -s ABRT -k 5 30 deckhouse-controller helper vsphere get-zones-datastores)"
    fi
  fi

  datacenter="$(echo "$result" | jq -re '.datacenter')"
  storage_classes="$(echo "$result" | jq -re '.datastores')"
  zones="$(echo "$result" | jq -re '.zones')"

  values::set cloudProviderVsphere.internal.datacenter "$datacenter"
  values::set cloudProviderVsphere.internal.zones "$zones"

  if values::has cloudProviderVsphere.storageClass.exclude; then
    storage_classes="$(jq --arg exclude "$(values::get cloudProviderVsphere.storageClass.exclude | jq -r 'join("|")')" '
      map(select(.name | test("^(\($exclude))$") | not))
      ' <<< "$storage_classes")"
  fi
  storage_classes="$(jq 'sort_by(.name)' <<< "$storage_classes")"
  values::set cloudProviderVsphere.internal.storageClasses "$storage_classes"

  if values::has cloudProviderVsphere.storageClass.default; then
    values::set cloudProviderVsphere.internal.defaultStorageClass "$(values::get cloudProviderVsphere.storageClass.default)"
  else
    values::unset cloudProviderVsphere.internal.defaultStorageClass
  fi
}

hook::run "$@"
