#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 1
    kubernetes:
    - name: provider_cluster_configuration
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-provider-cluster-configuration]
      jqFilter: |
        .data."cloud-provider-cluster-configuration.yaml" //= "" | .data."cloud-provider-discovery-data.json" //= "" |
        {
          "provider_cluster_configuration": (.data."cloud-provider-cluster-configuration.yaml" | @base64d),
          "provider_discovery_data": (.data."cloud-provider-discovery-data.json" | @base64d)
        }
EOF
}

function set_values_from_provider_cluster_configuration_yaml() {
  provider_cluster_configuration_yaml=$(echo "$1" | jq -r .provider_cluster_configuration)
  provider_cluster_configuration='{}'
  if [[ "$provider_cluster_configuration_yaml" != "null" ]]; then
    provider_cluster_configuration=$(echo "$provider_cluster_configuration_yaml" | deckhouse-controller helper cluster-configuration | jq '.providerClusterConfiguration | . //= {}')
  fi

  provider_discovery_data=$(echo "$1" | jq -r '
    if (.provider_discovery_data=="" or .provider_discovery_data==null) then .provider_discovery_data={} end | .provider_discovery_data')

  #values from cloudProviderVsphere in deckhouse config can override discovery data and cluster configuration from provider
  cloudProviderVsphere=$(values::get cloudProviderVsphere)

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.host // $provider.provider.server')
  values::set cloudProviderVsphere.internal.server "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.username // $provider.provider.username')
  values::set cloudProviderVsphere.internal.username "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.password // $provider.provider.password')
  values::set cloudProviderVsphere.internal.password "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.insecure // $provider.provider.insecure // false')
  values::set cloudProviderVsphere.internal.insecure "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.regionTagCategory // $provider.regionTagCategory')
  values::set cloudProviderVsphere.internal.regionTagCategory "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.zoneTagCategory // $provider.zoneTagCategory')
  values::set cloudProviderVsphere.internal.zoneTagCategory "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.disableTimesync // $provider.disableTimesync // true')
  values::set cloudProviderVsphere.internal.disableTimesync "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.externalNetworkNames // $provider.externalNetworkNames')
  values::set cloudProviderVsphere.internal.externalNetworkNames "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.internalNetworkNames // $provider.internalNetworkNames')
  values::set cloudProviderVsphere.internal.internalNetworkNames "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.region // $provider.region')
  values::set cloudProviderVsphere.internal.region "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.zones // $provider.zones')
  values::set cloudProviderVsphere.internal.zones "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.vmFolderPath // $provider.vmFolderPath')
  values::set cloudProviderVsphere.internal.vmFolderPath "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson  provider "$provider_cluster_configuration" '.sshKeys[0] // $provider.sshPublicKey')
  values::set cloudProviderVsphere.internal.sshKey "$i"

  i=$(echo "$cloudProviderVsphere" | jq -r --argjson data "$provider_discovery_data" '$data.resourcePoolPath')
  values::set cloudProviderVsphere.internal.defaultResourcePoolPath "$i"

  i=$(jq -rn --argjson  provider "$provider_cluster_configuration" '$provider.masterNodeGroup.instanceClass')
  values::set cloudProviderVsphere.internal.masterInstanceClass "$i"
}

function __main__() {
  if context::has snapshots.provider_cluster_configuration.0; then
    set_values_from_provider_cluster_configuration_yaml "$(context::get snapshots.provider_cluster_configuration.0.filterResult)"
  else
    set_values_from_provider_cluster_configuration_yaml "{}"
  fi
}

hook::run "$@"
