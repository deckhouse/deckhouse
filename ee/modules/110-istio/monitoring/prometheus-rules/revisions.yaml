- name: d8.istio.revisions
  rules:
  - alert: D8IstioDesiredRevisionIsNotInstalled
    expr: max by (namespace, desired_revision) (d8_istio_desired_revision_is_not_installed == 1)
    for: 5m
    labels:
      severity_level: "4"
      tier: cluster
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      summary: Desired control-plane version isn't installed
      description: |
        There is desired istio control plane revision `{{$labels.desired_revision}}` configured for pods in namespace `{{$labels.namespace}}`, but the revision isn't installed. Consider installing it or change the Namespace or Pod configuration.
        Impact — Pods won't be able to re-create in the `{{$labels.namespace}}` Namespace.
        Cheat sheet:
        ```
        ### namespace-wide configuration
        # istio.io/rev=vXYZ — use specific revision
        # istio-injection=enabled — use global revision
        kubectl get ns {{$labels.namespace}} --show-labels

        ### pod-wide configuration
        kubectl -n {{$labels.namespace}} get pods -l istio.io/rev={{$labels.desired_revision}}
        ```
  - alert: D8IstioDataPlaneWithoutDesiredRevision
    expr: max by (namespace, actual_revision) (d8_istio_data_plane_without_desired_revision == 1)
    for: 5m
    labels:
      severity_level: "6"
      tier: cluster
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      summary: There are Pods with istio sidecars, but without istio-injection configured
      description: |
        There are Pods in `{{$labels.namespace}}` Namespace with istio sidecars, but the istio-injection isn't configured.
        Impact — Pods will lose their istio sidecars after re-creation.
        Getting affected Pods:
        ```
        kubectl -n {{$labels.namespace}} get pods -o json | jq -r --arg revision {{$labels.actual_revision}} '.items[] | select(.metadata.annotations."sidecar.istio.io/status" | fromjson | .revision == $revision) | .metadata.name'
        ```
  - alert: D8IstioActualDataPlaneRevisionNeDesired
    expr: max by (namespace, actual_revision, desired_revision) (d8_istio_actual_data_plane_revision_ne_desired == 1)
    for: 5m
    labels:
      severity_level: "6"
      tier: cluster
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      summary: There are Pods with istio data-plane revision `{{$labels.actual_revision}}`, but desired revision is `{{$labels.desired_revision}}`
      description: |
        There are Pods in Namespace `{{$labels.namespace}}` with istio data-plane revision `{{$labels.actual_revision}}`, but the desired one is `{{$labels.desired_revision}}`.
        Impact — revision is to change after Pod restarting.
        Cheat sheet:
        ```
        ### namespace-wide configuration
        # istio.io/rev=vXYZ — use specific revision
        # istio-injection=enabled — use global revision
        kubectl get ns {{$labels.namespace}} --show-labels

        ### pod-wide configuration
        kubectl -n {{$labels.namespace}} get pods -l istio.io/rev={{$labels.desired_revision}}
        ```
  - alert: D8IstioDataPlaneVersionMismatch
    expr: |
      ( # join d8_istio_pod_revision and istio_build metrics to get every Pod's istio version
        max by (namespace, pod, revision, tag)
        (
          label_replace(
            d8_istio_pod_revision, "pod", "$1", "dataplane_pod", "(.+)"
          )
          + on (pod,namespace) group_left (tag) istio_build{component="proxy"}
        )
      )
      # enrich the metric above with control-plane istio version (will come in handy for the alert description)
      + on (revision) group_left (istiod_tag)
      (
        max by (istiod_tag, revision)
        ( # get istiod revision from Pod's label `istio.io/rev`
          label_replace(
            istio_build{component="pilot"}, "istiod_tag", "$1", "tag", "(.+)"
          )
          + on (pod,namespace) group_left(revision)
          (
            label_replace(kube_pod_labels, "revision", "$1", "label_istio_io_rev", "(.+)")
          )
        )
      )
      # exclude Pod's with an actual istio version, so only the inappropriate ones left
      unless on (tag)
      (
        istio_build{component="pilot"}
      )
    for: 5m
    labels:
      severity_level: "8"
      tier: cluster
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      summary: There are Pods with data-plane version different from control-plane one.
      description: |
        There are Pods in `{{$labels.namespace}}` namespace with istio revision `{{$labels.revision}}` and data-plane version `{{$labels.tag}}` which differ from control-plane one `{{$labels.istiod_tag}}`.
        Consider restarting affected Pods, use PromQL query to get the list:
        ```
        max by (namespace, pod) (istio_build{component="proxy", tag="{{$labels.tag}}"})
        ```
