- name: d8.istio.revisions
  rules:
  - alert: D8IstioActualRevisionIsNotInstalled
    annotations:
      description: |
        There are pods with injected sidecar of revision `{{$labels.revision}}` in namespace `{{$labels.namespace}}`, but the control-plane revision isn't installed. Consider installing it or change the Namespace or Pod configuration.
        Impact — Pods have lost their sync with k8s state.
        Getting orphaned pods:
        ```
        kubectl -n {{ $labels.namespace }} get pods -l 'service.istio.io/canonical-name' -o json | jq --arg revision {{ $labels.revision }} '.items[] | select(.metadata.annotations."sidecar.istio.io/status" // "{}" | fromjson | .revision == $revision) | .metadata.name'
        ```
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_markup_format: markdown
      plk_protocol_version: "1"
      summary: Desired control-plane version isn't installed
    expr: |
      (
        d8_istio_pod_revision{revision!="absent"}
      )
      unless on (revision)
      (
        istio_build{component="pilot"}
        * on (pod,namespace) group_left(revision)
          (
            label_replace(kube_pod_labels, "revision", "$1", "label_istio_io_rev", "(.+)")
          )
      )
    for: 5m
    labels:
      severity_level: "4"
      tier: cluster
  - alert: D8IstioDesiredRevisionIsNotInstalled
    annotations:
      description: |
        There is desired istio control plane revision `{{$labels.revision}}` configured for pods in namespace `{{$labels.namespace}}`, but the revision isn't installed. Consider installing it or change the Namespace or Pod configuration.
        Impact — Pods won't be able to re-create in the `{{$labels.namespace}}` Namespace.
        Cheat sheet:
        ```
        ### namespace-wide configuration
        # istio.io/rev=vXYZ — use specific revision
        # istio-injection=enabled — use global revision
        kubectl get ns {{$labels.namespace}} --show-labels

        ### pod-wide configuration
        kubectl -n {{$labels.namespace}} get pods -l istio.io/rev={{$labels.revision}}
        ```
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_markup_format: markdown
      plk_protocol_version: "1"
      summary: Desired control-plane version isn't installed
    expr: |
      (
        label_replace(d8_istio_pod_revision{desired_revision!="absent"}, "revision", "$1", "desired_revision", "(.+)")
      )
      unless on (revision)
      (
        istio_build{component="pilot"}
        * on (pod,namespace) group_left(revision)
          (
            label_replace(kube_pod_labels, "revision", "$1", "label_istio_io_rev", "(.+)")
          )
      )
    for: 5m
    labels:
      severity_level: "6"
      tier: cluster
  - alert: D8IstioDataPlaneWithoutIstioInjectionConfigured
    annotations:
      description: |
        There are Pods in `{{$labels.namespace}}` Namespace with istio sidecars, but the istio-injection isn't configured.
        Impact — Pods will lose their istio sidecars after re-creation.
        Getting affected Pods:
        ```
        kubectl -n {{$labels.namespace}} get pods -o json | jq -r --arg revision {{$labels.revision}} '.items[] | select(.metadata.annotations."sidecar.istio.io/status" | fromjson | .revision == $revision) | .metadata.name'
        ```
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_markup_format: markdown
      plk_protocol_version: "1"
      summary: There are Pods with istio sidecars, but without istio-injection configured
    expr: |
      d8_istio_pod_revision{revision!="absent", desired_revision="absent"}
    for: 5m
    labels:
      severity_level: "4"
      tier: cluster
  - alert: D8IstioPodsWithoutIstioSidecar
    annotations:
      description: |
        There are pods `{{$labels.dataplane_pod}}` in `{{$labels.namespace}}` Namespace without istio sidecars, but the istio-injection is configured.
        Getting affected Pods:
        ```
        kubectl -n {{$labels.namespace}} get pods -l '!service.istio.io/canonical-name' -o json | jq -r '.items[] | select(.metadata.annotations."sidecar.istio.io/inject" != "false") | .metadata.name'
        ```
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_markup_format: markdown
      plk_protocol_version: "1"
      summary: There are Pods without istio sidecars, but with istio-injection configured
    expr: |
      d8_istio_pod_revision{revision="absent", desired_revision!=""}
    for: 5m
    labels:
      severity_level: "4"
      tier: cluster
  - alert: D8IstioActualDataPlaneRevisionNeDesired
    annotations:
      description: |
        There are Pods in Namespace `{{$labels.namespace}}` with istio data-plane revision `{{$labels.revision}}`, but the desired one is `{{$labels.desired_revision}}`.
        Impact — revision is to change after Pod restarting.
        Cheat sheet:
        ```
        ### namespace-wide configuration
        # istio.io/rev=vXYZ — use specific revision
        # istio-injection=enabled — use global revision
        kubectl get ns {{$labels.namespace}} --show-labels

        ### pod-wide configuration
        kubectl -n {{$labels.namespace}} get pods -l istio.io/rev={{$labels.desired_revision}}
        ```
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_markup_format: markdown
      plk_protocol_version: "1"
      summary:
        There are Pods with istio data-plane revision `{{$labels.revision}}`,
        but desired revision is `{{$labels.desired_revision}}`
    expr: |
      d8_istio_pod_revision{desired_revision!="absent"}
      unless on (revision, dataplane_pod, namespace) label_replace(d8_istio_pod_revision{}, "revision", "$1", "desired_revision", "(.+)")
    for: 5m
    labels:
      severity_level: "8"
      tier: cluster
  - alert: D8IstioDataPlaneVersionMismatch
    annotations:
      description: |
        There are Pods in `{{$labels.namespace}}` namespace with istio revision `{{$labels.revision}}` and data-plane version `{{$labels.tag}}` which differ from control-plane one `{{$labels.istiod_tag}}`.
        Consider restarting affected Pods, use PromQL query to get the list:
        ```
        max by (namespace, pod) (istio_build{component="proxy", tag="{{$labels.tag}}"})
        ```
      plk_create_group_if_not_exists__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_grouped_by__d8_istio_revisions_misconfigurations: D8IstioRevisionsMisconfigurations,tier=~tier,prometheus=deckhouse,kubernetes=~kubernetes
      plk_markup_format: markdown
      plk_protocol_version: "1"
      summary:
        There are Pods with data-plane version different from control-plane
        one.
    expr: |
      ( # join d8_istio_pod_revision and istio_build metrics to get every Pod's istio version
        max by (namespace, pod, revision, tag)
        (
          label_replace(
            d8_istio_pod_revision, "pod", "$1", "dataplane_pod", "(.+)"
          )
          + on (pod,namespace) group_left (tag) istio_build{component="proxy"}
        )
      )
      # enrich the metric above with control-plane istio version (will come in handy for the alert description)
      + on (revision) group_left (istiod_tag)
      (
        max by (istiod_tag, revision)
        ( # get istiod revision from Pod's label `istio.io/rev`
          label_replace(
            istio_build{component="pilot"}, "istiod_tag", "$1", "tag", "(.+)"
          )
          + on (pod,namespace) group_left(revision)
          (
            label_replace(kube_pod_labels, "revision", "$1", "label_istio_io_rev", "(.+)")
          )
        )
      )
      # exclude Pod's with an actual istio version, so only the inappropriate ones left
      unless on (tag)
      (
        istio_build{component="pilot"}
      )
    for: 5m
    labels:
      severity_level: "8"
      tier: cluster
