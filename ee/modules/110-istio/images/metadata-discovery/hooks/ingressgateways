#!/bin/bash -e

# Copyright 2021 Flant JSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


for f in $(find /frameworks/shell/ -type f -iname "*.sh"); do
  source $f
done

function __config__() {
  if [ "$INLET" == "LoadBalancer" ]; then
    cat << EOF
      configVersion: v1
      kubernetes:
      - name: ingressgateway_service
        group: main
        apiVersion: v1
        kind: Service
        keepFullObjectsInMemory: false
        namespace:
          nameSelector:
            matchNames: [d8-istio]
        nameSelector:
          matchNames: [ingressgateway]
        jqFilter: |
          {
            "address": (.status.loadBalancer.ingress[0].ip // .status.loadBalancer.ingress[0].hostname // null),
            "port": (.spec.ports[] | select(.name == "tls") | .port)
          }
EOF
  elif [ "$INLET" == "NodePort" ]; then
    cat << EOF
      configVersion: v1
      kubernetes:
      - name: ingressgateway_service
        group: main
        apiVersion: v1
        kind: Service
        keepFullObjectsInMemory: false
        namespace:
          nameSelector:
            matchNames: [d8-istio]
        nameSelector:
          matchNames: [ingressgateway]
        jqFilter: |
          {
            "port": (.spec.ports[] | select(.name == "tls") | .nodePort)
          }
      - name: pods
        group: main
        apiVersion: v1
        kind: Pod
        keepFullObjectsInMemory: false
        namespace:
          nameSelector:
            matchNames: [d8-istio]
        labelSelector:
          matchLabels:
            app: ingressgateway
        jqFilter: |
          {
            "nodeName": .spec.nodeName
          }
      - name: nodes
        group: main
        apiVersion: v1
        kind: Node
        keepFullObjectsInMemory: false
        jqFilter: |
          {
            "name": .metadata.name,
            "address": ((.status.addresses[] | select(.type == "ExternalIP") | .address) // (.status.addresses[] | select(.type == "InternalIP") | .address)),
            "isActive": (
              all((.spec.taints // [])[] ; .key != "node.kubernetes.io/unschedulable")
              and
              ((.status.conditions // [])[] | select(.type == "Ready") | .status == "True")
            )
          }
EOF
  fi

  if [ -n "$INLET" ]; then
    cat << EOF
      - name: ingressgateway_advertise
        group: main
        apiVersion: v1
        kind: ConfigMap
        keepFullObjectsInMemory: false
        namespace:
          nameSelector:
            matchNames: [d8-istio]
        nameSelector:
          matchNames: [metadata-exporter-ingressgateway-advertise]
        jqFilter: |
          {
            "ingressGatewaysArray": (.data."ingressgateways-array.json" | fromjson)
          }
EOF
  fi
}

function __main__() {
  if context::jq -e '.snapshots.ingressgateway_advertise | length == 1' > /dev/null; then
    context::jq '.snapshots.ingressgateway_advertise[0].filterResult.ingressGatewaysArray' > /metadata/ingressgateways-array.json
  elif [ "$INLET" == "LoadBalancer" ]; then
    context::jq '
      [
        .snapshots.ingressgateway_service[].filterResult | select(.address and .port) | {"address": .address, "port": .port}
      ]' > /metadata/ingressgateways-array.json
  elif [ "$INLET" == "NodePort" ]; then
    context::jq '
      .snapshots.ingressgateway_service[0].filterResult.port as $port |
      [.snapshots.pods[].filterResult.nodeName] as $pod_nodes |
      [
        .snapshots.nodes[].filterResult | select(.isActive) | .name as $name | select($pod_nodes | index($name)) | {"address": .address, "port": $port}
      ]' > /metadata/ingressgateways-array.json
  fi
}

hook::run "$@"
