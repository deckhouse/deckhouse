#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
    configVersion: v1
    schedule:
    - name: multiclusters
      group: main
      queue: /modules/$(module::name::kebab_case)/remote-clusters
      crontab: "* * * * *"
EOF
}

function __main__() {
  if values::is_true istio.multicluster.enabled; then
    for i in $(values::jq -r '.istio.internal.multiclusters | keys[]'); do
      multiclusterSpec="$(values::get istio.internal.multiclusters.$i)"
      multiclusterName="$(jq -r '.name'    <<< "$multiclusterSpec")"
      apiHost="$(jq          -r '.apiHost' <<< "$multiclusterSpec")"
      apiJWT="$(jq           -r '.apiJWT'  <<< "$multiclusterSpec")"

      # try to fetch kubernetes version from apiHost and try to unmarshal response
      if curl \
          -f -s -m 5 --show-error \
          --header "Authorization: Bearer ${apiJWT}" \
          "https://${apiHost}/version" | jq -e .major >/dev/null
      then
        isError=0
      else
        isError=1
        echo >&2 "ERROR: Cannot fetch api host metadata endpoint $apiHostEndpoint for IstioMulticluster $multiclusterName."
      fi

      jq -n --argjson isError "$isError" --arg multiclusterName "$multiclusterName" --arg apiHost "$apiHost" '
        {
          "group":"multicluster_check_api_host",
          "name": "d8_istio_multicluster_api_host_check_error_count",
          "set": $isError,
          "labels": {"multicluster_name": $multiclusterName, "api_host": $apiHost}
        }
      ' >> "$METRICS_PATH"
    done
  fi
}

hook::run "$@"
