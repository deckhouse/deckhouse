#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
  configVersion: v1
  kubernetes:
  - name: secret_ca
    group: main
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Secret
    nameSelector:
      matchNames: ["cacerts"]
    namespace:
      nameSelector:
        matchNames: ["d8-istio"]
    jqFilter: |
      {
        "cert":  (.data."ca-cert.pem"    | @base64d),
        "key":   (.data."ca-key.pem"     | @base64d),
        "chain": (.data."cert-chain.pem" | @base64d),
        "root":  (.data."root-cert.pem"  | @base64d)
      }
  - name: secret_api_proxy
    group: main
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Secret
    nameSelector:
      matchNames: ["api-proxy-listen-cert"]
    namespace:
      nameSelector:
        matchNames: ["d8-istio"]
    jqFilter: |
      {
        "cert": (.data."tls.crt" | @base64d),
        "key":  (.data."tls.key" | @base64d)
      }
EOF
}

function __main__() {
  if values::has istio.ca; then
    values::set istio.internal.ca.cert  "$(values::get --required istio.ca.cert)"
    values::set istio.internal.ca.key   "$(values::get --required istio.ca.key)"
    values::set istio.internal.ca.chain "$(values::jq -c '.istio.ca.chain // .istio.ca.cert')"
    values::set istio.internal.ca.root  "$(values::jq -c '.istio.ca.root  // .istio.ca.cert')"
  elif context::has snapshots.secret_ca.0; then
    values::set istio.internal.ca "$(context::get snapshots.secret_ca.0.filterResult)"
  else
    ca="$(
      jo \
        names="[$(jo O="d8-istio")]" \
        key="$(jo algo=rsa size=2048)" \
        ca="$(jo expiry=87600h)" | cfssl gencert -initca -
    )"
    values::set istio.internal.ca.cert  "$(jq '.cert' <<< "${ca}")"
    values::set istio.internal.ca.key   "$(jq '.key'  <<< "${ca}")"
    values::set istio.internal.ca.chain "$(jq '.cert' <<< "${ca}")"
    values::set istio.internal.ca.root  "$(jq '.cert' <<< "${ca}")"
  fi

  if values::is_true istio.multicluster.enabled; then
    if context::has snapshots.secret_api_proxy.0; then
      values::set istio.internal.apiProxyListenCertificate "$(context::get snapshots.secret_api_proxy.0.filterResult)"
    else
      cert="$(
        jo \
          CN=api-proxy \
          hosts="$(jo -a api-proxy api-proxy.d8-istio api-proxy.d8-istio.svc)" \
          key="$(jo algo=rsa size=2048)" \
          expiry="87600h" | cfssl gencert -ca <(values::get istio.internal.ca.cert) -ca-key <(values::get istio.internal.ca.key) -
      )"
      values::set istio.internal.apiProxyListenCertificate.cert "$(jq '.cert' <<< "${cert}")"
      values::set istio.internal.apiProxyListenCertificate.key  "$(jq '.key'  <<< "${cert}")"
    fi
  fi
}

hook::run "$@"
