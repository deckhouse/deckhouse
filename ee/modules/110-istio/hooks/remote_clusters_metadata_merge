#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
    configVersion: v1
    kubernetes:
    - name: federations
      group: main
      queue: /modules/$(module::name::kebab_case)/remote-clusters
      apiVersion: deckhouse.io/v1alpha1
      kind: IstioFederation
      keepFullObjectsInMemory: false
      jqFilter: |
        {
          "name": .metadata.name,
          "trustDomain": .spec.trustDomain,
          "spiffeEndpoint": ((.spec.metadataEndpoint | sub("/*$"; "")) + "/public/spiffe-bundle-endpoint"),
          "ingressGateways": .status.metadataCache.ingressGateways,
          "publicServices": .status.metadataCache.publicServices,
          "public": .status.metadataCache.public
        }
    - name: multiclusters
      group: main
      queue: /modules/$(module::name::kebab_case)/remote-clusters
      apiVersion: deckhouse.io/v1alpha1
      kind: IstioMulticluster
      keepFullObjectsInMemory: false
      jqFilter: |
        {
          "name": .metadata.name,
          "spiffeEndpoint": ((.spec.metadataEndpoint | sub("/*$"; "")) + "/public/spiffe-bundle-endpoint"),
          "apiHost": .status.metadataCache.apiHost,
          "public": .status.metadataCache.public
        }
    beforeHelm: 10
EOF
}

function _ip_address_iterator() {
  octet_3="$(cat $octet_3_store)"
  octet_4="$(cat $octet_4_store)"
  octet_4=$((octet_4 + 1))
  if [[ $octet_4 == "256" ]]; then
    octet_3=$((octet_3 + 1))
    octet_4=0
  fi
  if [[ $octet_3 == "256" ]]; then
    echo 1>&2 "ERROR: IP pool for ServiceEntries is over. Too many remote public services."
    return 1
  fi
  echo $octet_3 > $octet_3_store
  echo $octet_4 > $octet_4_store

  echo "169.254.${octet_3}.${octet_4}"
}

function __main__() {
  export octet_3_store="$(mktemp)"
  export octet_4_store="$(mktemp)"
  echo 0 > $octet_3_store
  echo 0 > $octet_4_store

  # The `| .publicServices = [.publicServices[] | select(.ports)]` section is Migration until new crd status spec will be filled
  federations="$(context::jq -c '[
    .snapshots.federations[].filterResult | select(.ingressGateways and .publicServices and .public) | del(.public)
    | .publicServices = [.publicServices[] | select(.ports)]
  ] | sort')"

  for idx_f in $(jq -r '. | keys[]' <<< "$federations"); do
    for idx_s in $(jq -r --argjson idx_f $idx_f '.[$idx_f].publicServices | keys[]' <<< "$federations"); do
      ip="$(_ip_address_iterator)"
      federations="$(jq -c --argjson idx_f $idx_f --argjson idx_s $idx_s --arg ip $ip '.[$idx_f].publicServices[$idx_s].virtualIP = $ip' <<< "$federations")"
    done
  done

  multiclusters="$(context::jq -c '[.snapshots.multiclusters[].filterResult | select(.apiHost and .public)]')"
  remotePublicMetadata="$(context::jq -c '
    [.snapshots.federations[].filterResult | select(.public) | .public] +
    [.snapshots.multiclusters[].filterResult | select(.public) | .public] |
    map({(.clusterUUID): (. | del(.clusterUUID))}) | add
  ')"

  # The fastest solution to generate api JWT tokens for multicluster remote api.
  # Without deckhouse restart, the token will expire in one year.
  # TODO: reorganize this
  for i in $(jq -r 'keys[]' <<< "$multiclusters"); do
    multiclusterName="$(jq -r --argjson i "$i" -c '.[$i].name'               <<< "$multiclusters")"
    clusterUUID="$(jq      -r --argjson i "$i" -c '.[$i].public.clusterUUID' <<< "$multiclusters")"

    token="$(
      deckhouse-controller helper crypto gen-jwt \
        --private-key-path <(values::get istio.internal.remoteAuthnKeypair.priv) \
        --claim iss=d8-istio \
        --claim aud="$clusterUUID" \
        --claim sub="$(values::get global.discovery.clusterUUID)" \
        --claim scope=api \
        --ttl 8760h
    )"
    if [ -n "${D8_IS_TESTS_ENVIRONMENT-}" ]; then
      echo $token > "/tmp/jwt-api-$multiclusterName"
    fi

    multiclusters="$(jq --argjson i "$i" --arg token "$token" '.[$i].apiJWT = $token | del(.[$i].public)' <<< "$multiclusters")"
  done

  values::set istio.internal.federations "$federations"
  values::set istio.internal.multiclusters "$multiclusters"
  values::set istio.internal.remotePublicMetadata "$remotePublicMetadata"

  rm $octet_3_store $octet_4_store
}

hook::run "$@"
