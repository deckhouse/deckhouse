#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
    configVersion: v1
    kubernetes:
    - name: federations
      group: main
      queue: /modules/$(module::name::kebab_case)/remote-clusters
      apiVersion: deckhouse.io/v1alpha1
      kind: IstioFederation
      keepFullObjectsInMemory: false
      jqFilter: |
        {
          "name": .metadata.name,
          "publicEndpoint": ((.spec.metadataEndpoint | sub("/*$"; "")) + "/public/public.json"),
          "trustDomain": .spec.trustDomain
        }
    - name: multiclusters
      group: main
      queue: /modules/$(module::name::kebab_case)/remote-clusters
      apiVersion: deckhouse.io/v1alpha1
      kind: IstioMulticluster
      keepFullObjectsInMemory: false
      jqFilter: |
        {
          "name": .metadata.name,
          "publicEndpoint": ((.spec.metadataEndpoint | sub("/*$"; "")) + "/public/public.json")
        }
    schedule:
    - name: remote
      group: main
      queue: /modules/$(module::name::kebab_case)/remote-clusters
      crontab: "* * * * *"
EOF
}

function __main__() {
  if values::is_true istio.federation.enabled; then
    for i in $(context::jq -r '.snapshots.federations | keys[]'); do
      federationSpec="$(context::jq --argjson i "$i" -c '.snapshots.federations[$i] | .filterResult')"
      federationName="$(jq -r '.name'           <<< "$federationSpec")"
      trustDomain="$(jq    -r '.trustDomain'    <<< "$federationSpec")"
      publicEndpoint="$(jq -r '.publicEndpoint' <<< "$federationSpec")"

      if [[ "$trustDomain" == "$(values::get global.discovery.clusterDomain)" ]]; then continue; fi

      isError=0
      # try to fetch endpoint
      if public="$(curl -f -s -m 3 --show-error "$publicEndpoint" | jq -e .)"; then
        patch="$(jq -n --argjson p "$public" '{"metadataCache":{"public": $p, "publicLastFetchTimestamp": (now | todateiso8601)}}')"
        kubernetes::status::merge_patch "" "deckhouse.io/v1alpha1" "istiofederations" "$federationName" "$patch"
      else
        isError=1
        echo >&2 "ERROR: Cannot fetch public metadata endpoint $publicEndpoint for IstioFederation $federationName."
      fi

      jq -n --argjson isError "$isError" --arg federationName "$federationName" --arg endpoint "$publicEndpoint" '
        {
          "group":"federation_fetch_public",
          "name": "d8_istio_federation_metadata_endpoints_fetch_error_count",
          "set": $isError,
          "labels": {"federation_name": $federationName, "endpoint": $endpoint}
        }
      ' >> "$METRICS_PATH"
    done
  fi

  if values::is_true istio.multicluster.enabled; then
    for i in $(context::jq -r '.snapshots.multiclusters | keys[]'); do
      multiclusterSpec="$(context::jq --argjson i "$i" -c '.snapshots.multiclusters[$i] | .filterResult')"
      multiclusterName="$(jq -r '.name'           <<< "$multiclusterSpec")"
      publicEndpoint="$(jq   -r '.publicEndpoint' <<< "$multiclusterSpec")"

      isError=0
      # try to fetch endpoint
      if public="$(curl -f -s -m 3 --show-error "$publicEndpoint" | jq -e .)"; then
        patch="$(jq -n --argjson p "$public" '{"metadataCache":{"public": $p, "publicLastFetchTimestamp": (now | todateiso8601)}}')"
        kubernetes::status::merge_patch "" "deckhouse.io/v1alpha1" "istiomulticlusters" "$multiclusterName" "$patch"
      else
        isError=1
        echo >&2 "ERROR: Cannot fetch public metadata endpoint $publicEndpoint for IstioMulticluster $multiclusterName."
      fi

      jq -n --argjson isError "$isError" --arg multiclusterName "$multiclusterName" --arg endpoint "$publicEndpoint" '
        {
          "group":"multicluster_fetch_public",
          "name": "d8_istio_multicluster_metadata_endpoints_fetch_error_count",
          "set": $isError,
          "labels": {"multicluster_name": $multiclusterName, "endpoint": $endpoint}
        }
      ' >> "$METRICS_PATH"
    done
  fi
}

hook::run "$@"
