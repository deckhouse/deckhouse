#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat <<EOF
  configVersion: v1
  kubernetes:
  - name: namespaces_global_revision
    group: main
    queue: /modules/$(module::name::kebab_case)/revision-discovery
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Namespace
    labelSelector:
      matchLabels:
        istio-injection: enabled
    jqFilter: |
      {
        "name": .metadata.name
      }
  - name: namespaces_definite_revision
    group: main
    queue: /modules/$(module::name::kebab_case)/revision-discovery
    keepFullObjectsInMemory: false
    apiVersion: v1
    kind: Namespace
    labelSelector:
      matchExpressions:
      - key: "istio.io/rev"
        operator: Exists
    jqFilter: |
      {
        "name": .metadata.name,
        "revision": .metadata.labels."istio.io/rev"
      }
  - name: istiooperators
    group: main
    queue: /modules/$(module::name::kebab_case)/revision-discovery
    keepFullObjectsInMemory: false
    apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    namespace:
      nameSelector:
        matchNames: ["d8-istio"]
    jqFilter: |
      {
        "revision": .spec.revision
      }
EOF
}

function _version_to_revision() {
  version="v${1}"

  # v1.2.3-alpha.4 -> v1.2.3-alpha4
  # v1.2.3-alpha4 -> v1x2x3-alpha4
  # v1x2x3-alpha4 -> v1x2x3alpha4
  sed -E \
    -e 's/([a-z])\.([0-9])/\1\2/g' \
    -e 's/\./x/g' \
    -e 's/-//g' \
  <<< "$version"
}

function __main__() {
  supported_revisions="[]"
  for version in $(values::jq -r '.istio.internal.supportedVersions[]'); do
    revision="$(_version_to_revision $version)"
    supported_revisions="$(jq -c --arg revision "$revision" '. + [$revision]' <<< "$supported_revisions")"
  done

  global_version=""
  if values::has istio.globalVersion; then
    global_version="$(values::get istio.globalVersion)"
  else
    global_version="$(values::jq -r '.istio.internal.supportedVersions | last')"
  fi
  global_revision="$(_version_to_revision "$global_version")"

  revisions_to_install="$(context::jq -rc --arg global_revision "$global_revision" '
    [.snapshots.namespaces_definite_revision[].filterResult.revision] + [$global_revision] | unique
  ')"

  ### HACK until we decide to force replace default istiod during update or subscribe to all pods
  if [ -z "${D8_IS_TESTS_ENVIRONMENT-}" ]; then
    pod_revisions="$(
      kubectl get pods -A -l 'istio.io/rev' -o json | jq -c '[.items[].metadata | select(.namespace != "d8-istio") | .labels."istio.io/rev"] | unique'
    )"
    revisions_to_install="$(jq -nc --argjson rti "$revisions_to_install" --argjson pr "$pod_revisions" '$rti + $pr | unique')"
  fi
  ### /HACK

  operator_revisions_to_install="$(context::jq -rc --argjson revisions_to_install "$revisions_to_install" '
    [.snapshots.istiooperators[].filterResult | select(.revision != null) | .revision] + $revisions_to_install | unique
  ')"

  is_error="false"
  for revision in $(jq -r '.[]' <<< "$operator_revisions_to_install"); do
    # $revision not in $supported_revisions
    if jq -e --arg revision "$revision" 'index($revision) | not' <<< "$supported_revisions" >/dev/null; then
      >&2 echo "ERROR: Unsupported revision $revision."
      is_error="true"
    fi
  done
  if [[ "$is_error" == "true" ]]; then return 1; fi

  application_namespaces="$(context::jq -r '
    [
      (.snapshots.namespaces_global_revision + .snapshots.namespaces_definite_revision)[] | .filterResult.name
    ] | unique
  ')"

  values::set istio.internal.globalRevision "$global_revision"
  values::set istio.internal.revisionsToInstall "$revisions_to_install"
  values::set istio.internal.operatorRevisionsToInstall "$operator_revisions_to_install"
  values::set istio.internal.applicationNamespaces "$application_namespaces"
}

hook::run "$@"
