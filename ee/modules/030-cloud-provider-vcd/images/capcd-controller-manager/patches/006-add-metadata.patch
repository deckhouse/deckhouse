diff --git a/api/v1beta2/vcdmachine_types.go b/api/v1beta2/vcdmachine_types.go
index d85ff63b..b6e8a253 100644
--- a/api/v1beta2/vcdmachine_types.go
+++ b/api/v1beta2/vcdmachine_types.go
@@ -29,6 +29,48 @@ const (
 	VCDProviderID    = "vmware-cloud-director"
 )
 
+const (
+	VCDMachineMetadataTypeString   string = "String"
+	VCDMachineMetadataTypeNumber   string = "Number"
+	VCDMachineMetadataTypeBoolean  string = "Boolean"
+	VCDMachineMetadataTypeDateTime string = "DateTime"
+)
+
+// VCDMachineMetadata defines metadata for the VCDMachine
+// useful for organizing and categorizing your virtualization inventory
+type VCDMachineMetadata struct {
+	// INSERT METADATA FIELDS - metadata for the VCDMachine
+	// Important: Run "make" to regenerate code after modifying this file
+
+	// The key of the metadata item
+	// +kubebuilder:validation:MaxLength=256
+	// +kubebuilder:validation:MinLength=1
+	Key string `json:"key,omitempty"`
+
+	// The value of the metadata item
+	// +kubebuilder:validation:MaxLength=256
+	// +kubebuilder:validation:MinLength=1
+	Value string `json:"value,omitempty"`
+
+	// The type of the metadata. Can be one of `String`, `Number`, `Boolean` or `DateTime`.
+	// Default value is `String`.
+	// +kubebuilder:validation:Enum=String;Number;Boolean;DateTime
+	// +kubebuilder:default=String
+	// +optional
+	Type string `json:"type,omitempty"` // Type can be "string", "int", "bool", etc.
+
+	// The user access level for the metadata. Can be one of `READONLY`, `READWRITE` or `PRIVATE`.
+	// Default value is `READWRITE`.
+	// +kubebuilder:validation:Enum=READONLY;READWRITE;PRIVATE
+	// +kubebuilder:default=READWRITE
+	// +optional
+	UserAccess string `json:"userAccess,omitempty"` // UserAccess can be "read", "write", etc.
+
+	// Whether the metadata is a system metadata or not.
+	// +optional
+	IsSystem bool `json:"isSystem,omitempty"` // IsSystem indicates if the metadata is system-level or user-defined
+}
+
 // VCDMachineSpec defines the desired state of VCDMachine
 type VCDMachineSpec struct {
 	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
@@ -87,6 +129,10 @@ type VCDMachineSpec struct {
 	// Immutable field. machine.Name is used as VM name when this field is empty.
 	// +optional
 	VmNamingTemplate string `json:"vmNamingTemplate,omitempty"`
+
+	// Metadata for the VCDMachine
+	// +optional
+	Metadata []VCDMachineMetadata `json:"metadata,omitempty"`
 }
 
 // VCDMachineStatus defines the observed state of VCDMachine
diff --git a/api/v1beta2/zz_generated.deepcopy.go b/api/v1beta2/zz_generated.deepcopy.go
index 96b5b9e1..8c293673 100644
--- a/api/v1beta2/zz_generated.deepcopy.go
+++ b/api/v1beta2/zz_generated.deepcopy.go
@@ -358,6 +358,21 @@ func (in *VCDMachineList) DeepCopyObject() runtime.Object {
 	return nil
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *VCDMachineMetadata) DeepCopyInto(out *VCDMachineMetadata) {
+	*out = *in
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VCDMachineMetadata.
+func (in *VCDMachineMetadata) DeepCopy() *VCDMachineMetadata {
+	if in == nil {
+		return nil
+	}
+	out := new(VCDMachineMetadata)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *VCDMachineSpec) DeepCopyInto(out *VCDMachineSpec) {
 	*out = *in
@@ -372,6 +387,11 @@ func (in *VCDMachineSpec) DeepCopyInto(out *VCDMachineSpec) {
 		*out = make([]string, len(*in))
 		copy(*out, *in)
 	}
+	if in.Metadata != nil {
+		in, out := &in.Metadata, &out.Metadata
+		*out = make([]VCDMachineMetadata, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VCDMachineSpec.
diff --git a/config/crd/bases/infrastructure.cluster.x-k8s.io_vcdmachines.yaml b/config/crd/bases/infrastructure.cluster.x-k8s.io_vcdmachines.yaml
index d2e9fbcb..66a972f2 100644
--- a/config/crd/bases/infrastructure.cluster.x-k8s.io_vcdmachines.yaml
+++ b/config/crd/bases/infrastructure.cluster.x-k8s.io_vcdmachines.yaml
@@ -240,6 +240,49 @@ spec:
                 items:
                   type: string
                 type: array
+              metadata:
+                description: Metadata for the VCDMachine
+                items:
+                  description: |-
+                    VCDMachineMetadata defines metadata for the VCDMachine
+                    useful for organizing and categorizing your virtualization inventory
+                  properties:
+                    isSystem:
+                      description: Whether the metadata is a system metadata or not.
+                      type: boolean
+                    key:
+                      description: The key of the metadata item
+                      maxLength: 256
+                      minLength: 1
+                      type: string
+                    type:
+                      default: String
+                      description: |-
+                        The type of the metadata. Can be one of `String`, `Number`, `Boolean` or `DateTime`.
+                        Default value is `String`.
+                      enum:
+                      - String
+                      - Number
+                      - Boolean
+                      - DateTime
+                      type: string
+                    userAccess:
+                      default: READWRITE
+                      description: |-
+                        The user access level for the metadata. Can be one of `READONLY`, `READWRITE` or `PRIVATE`.
+                        Default value is `READWRITE`.
+                      enum:
+                      - READONLY
+                      - READWRITE
+                      - PRIVATE
+                      type: string
+                    value:
+                      description: The value of the metadata item
+                      maxLength: 256
+                      minLength: 1
+                      type: string
+                  type: object
+                type: array
               placementPolicy:
                 description: PlacementPolicy is the placement policy to be used on
                   this machine.
@@ -261,6 +304,10 @@ spec:
                 description: TemplatePath is the path of the template OVA that is
                   to be used
                 type: string
+              templateOrg:
+                description: TemplateOrg is the organization of the template OVA that
+                  is to be used
+                type: string
               vmNamingTemplate:
                 description: |-
                   VmNamingTemplate is go template to generate VM names based on Machine and VCDMachine CRs.
diff --git a/config/crd/bases/infrastructure.cluster.x-k8s.io_vcdmachinetemplates.yaml b/config/crd/bases/infrastructure.cluster.x-k8s.io_vcdmachinetemplates.yaml
index 759ccccf..e89f4fa8 100644
--- a/config/crd/bases/infrastructure.cluster.x-k8s.io_vcdmachinetemplates.yaml
+++ b/config/crd/bases/infrastructure.cluster.x-k8s.io_vcdmachinetemplates.yaml
@@ -187,6 +187,50 @@ spec:
                         items:
                           type: string
                         type: array
+                      metadata:
+                        description: Metadata for the VCDMachine
+                        items:
+                          description: |-
+                            VCDMachineMetadata defines metadata for the VCDMachine
+                            useful for organizing and categorizing your virtualization inventory
+                          properties:
+                            isSystem:
+                              description: Whether the metadata is a system metadata
+                                or not.
+                              type: boolean
+                            key:
+                              description: The key of the metadata item
+                              maxLength: 256
+                              minLength: 1
+                              type: string
+                            type:
+                              default: String
+                              description: |-
+                                The type of the metadata. Can be one of `String`, `Number`, `Boolean` or `DateTime`.
+                                Default value is `String`.
+                              enum:
+                              - String
+                              - Number
+                              - Boolean
+                              - DateTime
+                              type: string
+                            userAccess:
+                              default: READWRITE
+                              description: |-
+                                The user access level for the metadata. Can be one of `READONLY`, `READWRITE` or `PRIVATE`.
+                                Default value is `READWRITE`.
+                              enum:
+                              - READONLY
+                              - READWRITE
+                              - PRIVATE
+                              type: string
+                            value:
+                              description: The value of the metadata item
+                              maxLength: 256
+                              minLength: 1
+                              type: string
+                          type: object
+                        type: array
                       placementPolicy:
                         description: PlacementPolicy is the placement policy to be
                           used on this machine.
@@ -208,6 +252,10 @@ spec:
                         description: TemplatePath is the path of the template OVA
                           that is to be used
                         type: string
+                      templateOrg:
+                        description: TemplateOrg is the organization of the template
+                          OVA that is to be used
+                        type: string
                       vmNamingTemplate:
                         description: |-
                           VmNamingTemplate is go template to generate VM names based on Machine and VCDMachine CRs.
diff --git a/controllers/vcdmachine_controller.go b/controllers/vcdmachine_controller.go
index 5534025c..a27c207d 100644
--- a/controllers/vcdmachine_controller.go
+++ b/controllers/vcdmachine_controller.go
@@ -584,6 +584,34 @@ shutdown -r now
 		// 	VCDResourceSet can get bloated with VMs if the cluster contains a large number of worker nodes
 	}
 
+	if vcdMachine.Spec.Metadata != nil {
+		for _, metadataEntry := range vcdMachine.Spec.Metadata {
+			typedValue, err := convertMetadataType(metadataEntry.Type)
+			if err != nil {
+				err1 := capvcdRdeManager.AddToErrorSet(ctx, capisdk.VCDMachineCreationError, "", machine.Name, fmt.Sprintf("%v", err))
+				if err1 != nil {
+					log.Error(err1, "failed to add VCDMachineCreationError into RDE", "rdeID", vcdCluster.Status.InfraId)
+				}
+				return ctrl.Result{}, errors.Wrapf(err, "Failed to convert metadata type %s for key %s", metadataEntry.Type, metadataEntry.Key)
+			}
+			err = vm.AddMetadataEntryWithVisibility(
+				metadataEntry.Key,
+				metadataEntry.Value,
+				typedValue,
+				metadataEntry.UserAccess,
+				metadataEntry.IsSystem,
+			)
+
+			if err != nil {
+				err1 := capvcdRdeManager.AddToErrorSet(ctx, capisdk.VCDMachineCreationError, "", machine.Name, fmt.Sprintf("%v", err))
+				if err1 != nil {
+					log.Error(err1, "failed to add VCDMachineCreationError into RDE", "rdeID", vcdCluster.Status.InfraId)
+				}
+				return ctrl.Result{}, errors.Wrapf(err, "Failed to add metadata entry for key %s", metadataEntry.Key)
+			}
+		}
+	}
+
 	// only resize hard disk if the user has requested so by specifying such in the VCDMachineTemplate spec
 	// check isn't strictly required as we ensure that specified number is larger than what's in the template and left
 	// empty this will just be 0. However, this makes it clear from a standpoint of inspecting the code what we are doing
@@ -1573,3 +1601,18 @@ func MergeJinjaToCloudInitScript(cloudInitConfig CloudInitScriptInput, jinjaConf
 
 	return out, nil
 }
+
+func convertMetadataType(typedValue string) (string, error) {
+	switch typedValue {
+	case infrav1.VCDMachineMetadataTypeString:
+		return types.MetadataStringValue, nil
+	case infrav1.VCDMachineMetadataTypeNumber:
+		return types.MetadataNumberValue, nil
+	case infrav1.VCDMachineMetadataTypeBoolean:
+		return types.MetadataBooleanValue, nil
+	case infrav1.VCDMachineMetadataTypeDateTime:
+		return types.MetadataDateTimeValue, nil
+	default:
+		return "", fmt.Errorf("unsupported type %v", typedValue)
+	}
+}
