---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: egressgatewayinstances.network.deckhouse.io
  labels:
    heritage: deckhouse
    module: cni-cilium
spec:
  group: network.deckhouse.io
  names:
    kind: EgressGatewayInstance
    listKind: EgressGatewayInstanceList
    plural: egressgatewayinstances
    singular: egressgatewayinstance
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      subresources:
        status: {}
      schema:
        openAPIV3Schema:
          type: object
          description: EgressGatewayInstance is the Schema for the egressgatewayinstances API.
          properties:
            spec:
              type: object
              description: EgressGatewayInstanceSpec defines the desired state of EgressGatewayInstance.
              properties:
                nodeName:
                  type: string
                  description: Name of the active node.
                sourceIP:
                  properties:
                    mode:
                      type: string
                      description: |-
                        Method of determining the source IP address that will be assigned to outgoing requests through this gateway. Possible options:
                        * `PrimaryIPFromEgressGatewayNodeInterface` — the primary IP address on the "public" network interface of the node will be used as the IP address. Features:
                          * When the active node fails and a new one is assigned, the sender's IP address in network packets will change.
                          * The network subsystem must be configured in advance on all egress nodes:
                            * "public" interfaces must have the same name (e.g., eth1),
                            * all necessary routes must be configured to access all external public services.
                        * `VirtualIPAddress` — explicit indication of the source IP address. Features:
                          * When the active node fails, the sender's IP address in network packets will not change.
                          * The network subsystem must be configured in advance on all egress nodes:
                            * all necessary routes must be configured to access all external public services,
                            * the "public" interface must be prepared for automatic configuration of the "virtual" IP as a secondary IP address (when assigning an egress node as active, the address will not be displayed in the list of IPs on the "public" interface, but the node will emulate its presence using ARP responses).
                    primaryIPFromEgressGatewayNodeInterface:
                      properties:
                        interfaceName:
                          description: |
                            Name of the "public" network interface.
                          type: string
                      type: object
                    virtualIPAddress:
                      properties:
                        ip:
                          type: string
                          description: |-
                            "Virtual" IP address that will be assigned to outgoing requests through the egress gateway.
                        routingTableName:
                          type: string
                          description: |-
                            Name of the routing table.
                      type: object
                  required:
                    - mode
                  type: object
            status:
              type: object
              description: EgressGatewayInstanceStatus defines the observed state of
                EgressGatewayInstance
              properties:
                conditions:
                  items:
                    properties:
                      lastHeartbeatTime:
                        format: date-time
                        type: string
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: |-
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          ---
                          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                          useful (see .node.status.conditions), the ability to deconflict is important.
                          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                observedGeneration:
                  format: int64
                  type: integer
      additionalPrinterColumns:
        - jsonPath: .spec.sourceIP.virtualIPAddress.ip
          name: IP
          type: string
        - jsonPath: .spec.nodeName
          name: Node
          type: string
