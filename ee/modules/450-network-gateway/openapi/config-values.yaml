type: object
required: [nodeSelector, subnet, publicAddress]
properties:
  nodeSelector:
    type: object
    additionalProperties:
      type: string
    x-examples: [{"type":"network-gateway"}]
    description: |
      selects nodes that will be used to configure iptables rules and to run the DHCP server.
      * Format — a [dictionary](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector) of label-value pairs. The instance's pods inherit this field as-is;
  tolerations:
    type: array
    description: |
      tolerations for DHCP pods and iptables managers;
      * Format — a [regular list](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/) of tolerations. The instance's pods inherit this field as-is;
    items:
      type: object
      properties:
        effect:
          type: string
        key:
          type: string
        operator:
          type: string
        tolerationSeconds:
          type: integer
          format: int64
        value:
          type: string
  subnet:
    type: string
    x-examples: ["192.168.42.0/24"]
    pattern: "^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))$"
    description: |
      the address of a local subnet that our gateway serves;
      * The DHCP options to pass to clients are generated based on this address:
          * Address pool — numbers starting with 50 and up to the last one;
          * Router — the subnet's first address;
  publicAddress:
    type: string
    pattern: "^([0-9]{1,3}\.){3}[0-9]{1,3}$"
    x-examples: ["10.220.203.240"]
    description: replaces the src of the packets outgoing from the LAN;
  disableDHCP:
    type: boolean
    default: false
    description: parameter disables the DHCP server;
  dns:
    type: object
    description: optional settings to pass to clients via DHCP
    properties:
      servers:
        type: array
        description: an array of DNS servers;
        x-examples:
          - ['4.2.2.2', '8.8.8.8']
        items:
          type: string
      search:
        type: array
        description: an array of search domains;
        x-examples:
          - ['office.example.com', 'srv.example.com']
        items:
          type: string
  storageClass:
    type: string
    description: |
      the name of the storage class to use for storing the DHCP lease;
      If omitted, either `global.storageClass` or `global.discovery.defaultStorageClass` is used. If the latter two are not specified, the emptyDir is used for storing the data. Dnsmasq (underlies our DHCP server) has its own mechanisms for protecting against the duplication of IP addresses if the lease database is lost (but it is better not to lose it).
