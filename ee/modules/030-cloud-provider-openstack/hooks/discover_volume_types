#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 20
    schedule:
    - crontab: "45 * * * *"
      queue: /modules/$(module::name::kebab_case)/discover_volume_types
EOF
}

function __main__() {
  OS_AUTH_URL="$(values::get --required cloudProviderOpenstack.internal.connection.authURL)"
  export OS_AUTH_URL

  OS_USERNAME="$(values::get --required cloudProviderOpenstack.internal.connection.username)"
  export OS_USERNAME

  OS_PASSWORD="$(values::get --required cloudProviderOpenstack.internal.connection.password)"
  export OS_PASSWORD

  OS_DOMAIN_NAME="$(values::get --required cloudProviderOpenstack.internal.connection.domainName)"
  export OS_DOMAIN_NAME

  OS_PROJECT_NAME="$(values::get cloudProviderOpenstack.internal.connection.tenantName)"
  if [[ -n $OS_PROJECT_NAME && $OS_PROJECT_NAME != null ]]; then
    export OS_PROJECT_NAME
  fi

  OS_PROJECT_ID="$(values::get cloudProviderOpenstack.internal.connection.tenantID)"
  if [[ -n $OS_PROJECT_ID && $OS_PROJECT_ID != null ]]; then
    export OS_PROJECT_ID
  fi

  OS_REGION_NAME="$(values::get --required cloudProviderOpenstack.internal.connection.region)"
  export OS_REGION_NAME

  OS_CACERT="$(values::get cloudProviderOpenstack.internal.connection.caCert)"
  if [[ -n $OS_CACERT && $OS_CACERT != null ]]; then
    export OS_CACERT
  fi

  if [ -n "${D8_IS_TESTS_ENVIRONMENT-}" ]; then
    openstack_volume_types='["__DEFAULT__","some-foo","bar","other-bar"]'
  else
    openstack_volume_types="$(deckhouse-controller helper openstack get-volume-types)"
  fi
  storage_classes="$(jq '
    [.[] |
      {
        "type": .,
        # Rewrite Openstack volume type to RFC 1123 compatible StorageClass name.
        "name": (. | gsub("(\\s|_)"; "") | . |= ascii_downcase)
      }
    ]
    ' <<< "$openstack_volume_types")"
  if values::has cloudProviderOpenstack.storageClass.exclude; then
    storage_classes="$(jq --arg exclude "$(values::get cloudProviderOpenstack.storageClass.exclude | jq -r 'join("|")')" '
      map(select(.name | test("^(\($exclude))$") | not))
      ' <<< "$storage_classes")"
  fi
  values::set cloudProviderOpenstack.internal.storageClasses "$storage_classes"

  if values::has cloudProviderOpenstack.storageClass.default; then
    values::set cloudProviderOpenstack.internal.defaultStorageClass "$(values::get cloudProviderOpenstack.storageClass.default)"
  else
    values::unset cloudProviderOpenstack.internal.defaultStorageClass
  fi
}

hook::run "$@"
