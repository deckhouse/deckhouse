#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 20
    kubernetes:
    - name: provider_cluster_configuration
      group: main
      keepFullObjectsInMemory: false
      apiVersion: v1
      kind: Secret
      namespace:
        nameSelector:
          matchNames: [kube-system]
      nameSelector:
        matchNames: [d8-provider-cluster-configuration]
      jqFilter: |
        .data."cloud-provider-cluster-configuration.yaml" //= "" | .data."cloud-provider-discovery-data.json" //= "" |
        {
          "provider_cluster_configuration": (.data."cloud-provider-cluster-configuration.yaml" | @base64d),
          "provider_discovery_data": (.data."cloud-provider-discovery-data.json" | @base64d)
        }
EOF
}

function set_values_from_provider_cluster_configuration_yaml() {
  values::unset cloudProviderOpenstack.internal.connection
  provider='{}'
  tags='{}'
  provider_cluster_configuration_yaml=$(echo "$1" | jq -r .provider_cluster_configuration)
  if [[ "$provider_cluster_configuration_yaml" != "null" ]]; then
    provider_cluster_configuration=$(echo "$provider_cluster_configuration_yaml" | deckhouse-controller helper cluster-configuration | jq '.providerClusterConfiguration')
    provider=$(echo "$provider_cluster_configuration" | jq '.provider | . //= {}')
    tags=$(echo "$provider_cluster_configuration" | jq '.tags | . //= {}')
  fi

  provider_discovery_data=$(echo "$1" | jq -r '
    if (.provider_discovery_data=="" or .provider_discovery_data==null) then .provider_discovery_data={
      "instances": {},
      "loadBalancer": {}
    } end | .provider_discovery_data')

  #values from cloudProviderOpenstack in deckhouse config can override discovery data and cluster configuration from provider
  cloudProviderOpenstack=$(values::get cloudProviderOpenstack)
  connection=$(echo "$cloudProviderOpenstack" | jq -r --argjson provider "$provider" '.connection //= $provider | .connection')
  values::set cloudProviderOpenstack.internal.connection "$connection"

  i=$(echo "$cloudProviderOpenstack" | jq -r --argjson data "$provider_discovery_data" '.internalNetworkNames //= $data.internalNetworkNames | .internalNetworkNames | . //= [] | unique')
  values::set cloudProviderOpenstack.internal.internalNetworkNames "$i"

  i=$(echo "$cloudProviderOpenstack" | jq -r --argjson data "$provider_discovery_data" '.externalNetworkNames //= $data.externalNetworkNames | .externalNetworkNames + .additionalExternalNetworkNames | . //= [] | unique')
  values::set cloudProviderOpenstack.internal.externalNetworkNames "$i"

  i=$(echo "$cloudProviderOpenstack" | jq -r --argjson data "$provider_discovery_data" '.zones //= $data.zones | .zones | . //= [] | unique')
  values::set cloudProviderOpenstack.internal.zones "$i"

  i=$(echo "$cloudProviderOpenstack" | jq -r --argjson data "$provider_discovery_data" 'if (.instances == null or .instances == {}) then $data.instances else .instances end | . //= {}')
  values::set cloudProviderOpenstack.internal.instances "$i"

  i=$(echo "$cloudProviderOpenstack" | jq -r --argjson data "$provider_discovery_data" 'if .podNetworkMode == null then $data.podNetworkMode else .podNetworkMode end')
  values::set cloudProviderOpenstack.internal.podNetworkMode "$i"

  i=$(echo "$cloudProviderOpenstack" | jq -r --argjson data "$provider_discovery_data" 'if (.loadBalancer == null or .loadBalancer == {}) then $data.loadBalancer else .loadBalancer end | . //= {}')
  values::set cloudProviderOpenstack.internal.loadBalancer "$i"

  i=$(echo "$cloudProviderOpenstack" | jq -r --argjson tags "$tags" '.tags //= $tags | .tags')
  values::set cloudProviderOpenstack.internal.tags "$i"
}

function __main__() {
  if context::has snapshots.provider_cluster_configuration.0; then
    set_values_from_provider_cluster_configuration_yaml "$(context::get snapshots.provider_cluster_configuration.0.filterResult)"
  else
    set_values_from_provider_cluster_configuration_yaml "{}"
  fi
}

hook::run "$@"
