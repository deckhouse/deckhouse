diff --git a/cmd/ovirt-csi-driver/ovirt-csi-driver.go b/cmd/ovirt-csi-driver/ovirt-csi-driver.go
index ac4b09a..d348c76 100644
--- a/cmd/ovirt-csi-driver/ovirt-csi-driver.go
+++ b/cmd/ovirt-csi-driver/ovirt-csi-driver.go
@@ -7,15 +7,16 @@ import (
 	"os"
 	"time"
 
-	"github.com/ovirt/csi-driver/internal/ovirt"
-	"github.com/ovirt/csi-driver/pkg/service"
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/client-go/kubernetes"
 	"k8s.io/klog"
 	"sigs.k8s.io/controller-runtime/pkg/client/config"
 	"sigs.k8s.io/controller-runtime/pkg/manager"
 	"sigs.k8s.io/controller-runtime/pkg/manager/signals"
+
+	"github.com/ovirt/csi-driver/internal/ovirt"
+	"github.com/ovirt/csi-driver/pkg/service"
 )
 
 var (
@@ -26,8 +27,8 @@ var (
 )
 
 func init() {
-	flag.Set("logtostderr", "true")
 	klog.InitFlags(flag.CommandLine)
+	flag.Set("logtostderr", "true")
 }
 
 func main() {
diff --git a/internal/ovirt/ovirt.go b/internal/ovirt/ovirt.go
index df687ae..8a11545 100644
--- a/internal/ovirt/ovirt.go
+++ b/internal/ovirt/ovirt.go
@@ -6,7 +6,7 @@ import (
 	"path/filepath"
 
 	kloglogger "github.com/ovirt/go-ovirt-client-log-klog/v2"
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 	"gopkg.in/yaml.v2"
 )
 
@@ -23,6 +23,9 @@ type Config struct {
 
 func NewClient() (ovirtclient.Client, error) {
 	ovirtConfig, err := GetOvirtConfig()
+	if err != nil {
+		return nil, err
+	}
 	tls := ovirtclient.TLS()
 	if ovirtConfig.Insecure {
 		tls.Insecure()
@@ -31,7 +34,7 @@ func NewClient() (ovirtclient.Client, error) {
 		tls.CACertsFromFile(ovirtConfig.CAFile)
 	}
 	logger := kloglogger.New()
-	//TODO: HANDLE VERBUSE
+	// TODO: HANDLE VERBUSE
 	client, err := ovirtclient.New(
 		ovirtConfig.URL,
 		ovirtConfig.Username,
diff --git a/pkg/service/controller.go b/pkg/service/controller.go
index d522cef..3760c51 100644
--- a/pkg/service/controller.go
+++ b/pkg/service/controller.go
@@ -5,7 +5,7 @@ import (
 	"strconv"
 
 	"github.com/container-storage-interface/spec/lib/go/csi"
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 	"golang.org/x/net/context"
 	"google.golang.org/grpc/codes"
 	"google.golang.org/grpc/status"
@@ -60,7 +60,7 @@ func (c *ControllerService) CreateVolume(ctx context.Context, req *csi.CreateVol
 	}
 	requiredSize := req.CapacityRange.GetRequiredBytes()
 	// Check if a disk with the same name already exist
-	disks, err := c.ovirtClient.ListDisksByAlias(diskName, ovirtclient.ContextStrategy(ctx))
+	disks, err := c.ovirtClient.WithContext(ctx).ListDisksByAlias(diskName)
 	if err != nil {
 		msg := fmt.Errorf("error while finding disk %s by name, error: %w", diskName, err)
 		klog.Errorf(msg.Error())
@@ -94,7 +94,8 @@ func (c *ControllerService) CreateVolume(ctx context.Context, req *csi.CreateVol
 
 func (c *ControllerService) createDisk(
 	ctx context.Context, diskName string, storageDomainName string,
-	size int64, thinProvisioning bool) (ovirtclient.Disk, error) {
+	size int64, thinProvisioning bool,
+) (ovirtclient.Disk, error) {
 	var err error
 	params := ovirtclient.CreateDiskParams()
 	params, err = params.WithSparse(thinProvisioning)
@@ -117,23 +118,23 @@ func (c *ControllerService) createDisk(
 	}
 	imageFormat := handleCreateVolumeImageFormat(sd.StorageType(), thinProvisioning)
 
-	disk, err := c.ovirtClient.CreateDisk(
+	disk, err := c.ovirtClient.WithContext(ctx).CreateDisk(
 		sd.ID(),
 		imageFormat,
 		uint64(provisionedSize),
 		params,
-		ovirtclient.ContextStrategy(ctx))
+	)
 	if err != nil {
 		return nil, fmt.Errorf("creating oVirt disk %s, error: %w", diskName, err)
 	}
 	klog.Infof("Finished creating disk %s", diskName)
 	return disk, nil
-
 }
 
 func handleCreateVolumeImageFormat(
 	storageType ovirtclient.StorageDomainType,
-	thinProvisioning bool) ovirtclient.ImageFormat {
+	thinProvisioning bool,
+) ovirtclient.ImageFormat {
 	// Use COW diskformat only when thin provisioning is requested and storage domain
 	// is a non file storage type (for example ISCSI)
 	if !isFileDomain(storageType) && thinProvisioning {
@@ -153,7 +154,7 @@ func (c *ControllerService) DeleteVolume(ctx context.Context, req *csi.DeleteVol
 
 	// idempotence first - see if disk already exists, ovirt creates disk by name(alias in ovirt as well)
 	// Check if a disk with the same name already exist
-	_, err := c.ovirtClient.GetDisk(vId, ovirtclient.ContextStrategy(ctx))
+	_, err := c.ovirtClient.WithContext(ctx).GetDisk(vId)
 	if err != nil {
 		if isNotFound(err) {
 			// if disk doesn't exist we're done
@@ -164,7 +165,7 @@ func (c *ControllerService) DeleteVolume(ctx context.Context, req *csi.DeleteVol
 		return nil, msg
 	}
 
-	err = c.ovirtClient.RemoveDisk(vId, ovirtclient.ContextStrategy(ctx))
+	err = c.ovirtClient.WithContext(ctx).RemoveDisk(vId)
 	if err != nil {
 		msg := fmt.Errorf("failed removing disk %s by id, error: %w", vId, err)
 		klog.Errorf(msg.Error())
@@ -176,7 +177,8 @@ func (c *ControllerService) DeleteVolume(ctx context.Context, req *csi.DeleteVol
 
 // ControllerPublishVolume takes a volume, which is an oVirt disk, and attaches it to a node, which is an oVirt VM.
 func (c *ControllerService) ControllerPublishVolume(
-	ctx context.Context, req *csi.ControllerPublishVolumeRequest) (*csi.ControllerPublishVolumeResponse, error) {
+	ctx context.Context, req *csi.ControllerPublishVolumeRequest,
+) (*csi.ControllerPublishVolumeResponse, error) {
 	vId := ovirtclient.DiskID(req.VolumeId)
 	if len(vId) == 0 {
 		return nil, fmt.Errorf("error required request paramater VolumeId wasn't set")
@@ -205,12 +207,12 @@ func (c *ControllerService) ControllerPublishVolume(
 	if err != nil {
 		return nil, err
 	}
-	_, err = c.ovirtClient.CreateDiskAttachment(
+	_, err = c.ovirtClient.WithContext(ctx).CreateDiskAttachment(
 		nId,
 		vId,
 		ovirtclient.DiskInterfaceVirtIOSCSI,
 		params,
-		ovirtclient.ContextStrategy(ctx))
+	)
 	if err != nil {
 		msg := fmt.Errorf("failed creating disk attachment, error: %w", err)
 		klog.Errorf(msg.Error())
@@ -241,7 +243,7 @@ func (c *ControllerService) ControllerUnpublishVolume(ctx context.Context, req *
 		klog.Infof("Disk attachment %s for VM %s already detached, returning OK", vId, nId)
 		return &csi.ControllerUnpublishVolumeResponse{}, nil
 	}
-	err = c.ovirtClient.RemoveDiskAttachment(nId, attachment.ID(), ovirtclient.ContextStrategy(ctx))
+	err = c.ovirtClient.WithContext(ctx).RemoveDiskAttachment(nId, attachment.ID())
 	if err != nil {
 		msg := fmt.Errorf("failed removing disk attachment %s, error: %w", attachment.ID(), err)
 		klog.Errorf(msg.Error())
@@ -293,7 +295,7 @@ func (c *ControllerService) ControllerExpandVolume(ctx context.Context, req *csi
 	newSize := capRange.GetRequiredBytes()
 
 	klog.Infof("Expanding volume %v to %v bytes.", volumeID, newSize)
-	disk, err := c.ovirtClient.GetDisk(volumeID, ovirtclient.ContextStrategy(ctx))
+	disk, err := c.ovirtClient.WithContext(ctx).GetDisk(volumeID)
 	if err != nil {
 		if isNotFound(err) {
 			msg := fmt.Errorf("disk %s wasn't found", volumeID)
@@ -312,7 +314,8 @@ func (c *ControllerService) ControllerExpandVolume(ctx context.Context, req *csi
 			volumeID, diskSize, newSize)
 		return &csi.ControllerExpandVolumeResponse{
 			CapacityBytes:         diskSize,
-			NodeExpansionRequired: false}, nil
+			NodeExpansionRequired: false,
+		}, nil
 	}
 
 	params := ovirtclient.UpdateDiskParams()
@@ -320,7 +323,7 @@ func (c *ControllerService) ControllerExpandVolume(ctx context.Context, req *csi
 	if err != nil {
 		return nil, err
 	}
-	disk, err = c.ovirtClient.UpdateDisk(volumeID, params, ovirtclient.ContextStrategy(ctx))
+	disk, err = c.ovirtClient.WithContext(ctx).UpdateDisk(volumeID, params)
 	if err != nil {
 		return nil, status.Errorf(codes.ResourceExhausted, "failed to expand volume %s: %v", volumeID, err)
 	}
@@ -331,7 +334,8 @@ func (c *ControllerService) ControllerExpandVolume(ctx context.Context, req *csi
 	}
 	return &csi.ControllerExpandVolumeResponse{
 		CapacityBytes:         newSize,
-		NodeExpansionRequired: nodeExpansionRequired}, nil
+		NodeExpansionRequired: nodeExpansionRequired,
+	}, nil
 }
 
 func (c *ControllerService) isNodeExpansionRequired(
diff --git a/pkg/service/controller_test.go b/pkg/service/controller_test.go
index fb55c28..976a48e 100644
--- a/pkg/service/controller_test.go
+++ b/pkg/service/controller_test.go
@@ -6,7 +6,7 @@ import (
 
 	"github.com/container-storage-interface/spec/lib/go/csi"
 	"github.com/ovirt/csi-driver/pkg/service"
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 )
 
 func TestVolumeCreation(t *testing.T) {
diff --git a/pkg/service/driver.go b/pkg/service/driver.go
index 16a3a53..a5791f4 100644
--- a/pkg/service/driver.go
+++ b/pkg/service/driver.go
@@ -1,7 +1,7 @@
 package service
 
 import (
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 	"k8s.io/klog"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 )
diff --git a/pkg/service/helper.go b/pkg/service/helper.go
index ed6de01..d773551 100644
--- a/pkg/service/helper.go
+++ b/pkg/service/helper.go
@@ -3,7 +3,7 @@ package service
 import (
 	"fmt"
 
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 	"github.com/pkg/errors"
 	"golang.org/x/net/context"
 )
@@ -23,7 +23,7 @@ func diskAttachmentByVmAndDisk(
 	ctx context.Context, ovirtClient ovirtclient.Client,
 	vmId ovirtclient.VMID, diskId ovirtclient.DiskID,
 ) (ovirtclient.DiskAttachment, error) {
-	attachments, err := ovirtClient.ListDiskAttachments(vmId, ovirtclient.ContextStrategy(ctx))
+	attachments, err := ovirtClient.WithContext(ctx).ListDiskAttachments(vmId)
 	if err != nil {
 		return nil, fmt.Errorf("failed to get disk attachment by disk %s for VM %s, error: %w", diskId, vmId, err)
 	}
@@ -63,7 +63,7 @@ func findDiskAttachmentByDiskInCluster(
 	ovirtClient ovirtclient.Client,
 	diskId ovirtclient.DiskID,
 ) (ovirtclient.DiskAttachment, error) {
-	vms, err := ovirtClient.ListVMs(ovirtclient.ContextStrategy(ctx))
+	vms, err := ovirtClient.WithContext(ctx).ListVMs()
 	if err != nil {
 		return nil, fmt.Errorf("error while listing VMs %w", err)
 	}
@@ -76,8 +76,9 @@ func findDiskAttachmentByDiskInCluster(
 func getStorageDomainByName(
 	ctx context.Context,
 	ovirtClient ovirtclient.Client,
-	storageDomainName string) (ovirtclient.StorageDomain, error) {
-	sds, err := ovirtClient.ListStorageDomains(ovirtclient.ContextStrategy(ctx))
+	storageDomainName string,
+) (ovirtclient.StorageDomain, error) {
+	sds, err := ovirtClient.WithContext(ctx).ListStorageDomains()
 	if err != nil {
 		return nil, err
 	}
diff --git a/pkg/service/helper_test.go b/pkg/service/helper_test.go
index 3bb32ad..7327bf0 100644
--- a/pkg/service/helper_test.go
+++ b/pkg/service/helper_test.go
@@ -4,7 +4,7 @@ import (
 	"testing"
 
 	ovirtclientlog "github.com/ovirt/go-ovirt-client-log/v3"
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 )
 
 func getMockHelper(t *testing.T) ovirtclient.TestHelper {
diff --git a/pkg/service/identity.go b/pkg/service/identity.go
index 42c5f56..054c067 100644
--- a/pkg/service/identity.go
+++ b/pkg/service/identity.go
@@ -3,7 +3,7 @@ package service
 import (
 	"github.com/container-storage-interface/spec/lib/go/csi"
 	"github.com/golang/protobuf/ptypes/wrappers"
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 	"golang.org/x/net/context"
 	"google.golang.org/grpc/codes"
 	"google.golang.org/grpc/status"
@@ -46,8 +46,8 @@ func (i *IdentityService) GetPluginCapabilities(context.Context, *csi.GetPluginC
 }
 
 // Probe checks the state of the connection to ovirt-engine
-func (i *IdentityService) Probe(_ context.Context, _ *csi.ProbeRequest) (*csi.ProbeResponse, error) {
-	err := i.ovirtClient.Test()
+func (i *IdentityService) Probe(ctx context.Context, _ *csi.ProbeRequest) (*csi.ProbeResponse, error) {
+	err := i.ovirtClient.WithContext(ctx).Test()
 	if err != nil {
 		klog.Errorf("Could not get connection %v", err)
 		return nil, status.Error(codes.FailedPrecondition, "Could not get connection to ovirt-engine")
diff --git a/pkg/service/node.go b/pkg/service/node.go
index 115b5c7..8d6a1c6 100644
--- a/pkg/service/node.go
+++ b/pkg/service/node.go
@@ -12,7 +12,7 @@ import (
 
 	"github.com/container-storage-interface/spec/lib/go/csi"
 	volumemanager "github.com/ovirt/csi-driver/pkg/utils"
-	ovirtclient "github.com/ovirt/go-ovirt-client/v2"
+	ovirtclient "github.com/ovirt/go-ovirt-client/v3"
 	"golang.org/x/net/context"
 	"google.golang.org/grpc/codes"
 	"google.golang.org/grpc/status"
@@ -174,7 +174,6 @@ func (n *NodeService) NodeGetVolumeStats(_ context.Context, req *csi.NodeGetVolu
 	}
 
 	isBlock, err := volumemanager.IsBlockDevice(req.VolumePath)
-
 	if err != nil {
 		return nil, status.Errorf(codes.Internal, "Failed to determine whether %s is block device: %v", req.VolumePath, err)
 	}
@@ -197,7 +196,6 @@ func (n *NodeService) NodeGetVolumeStats(_ context.Context, req *csi.NodeGetVolu
 
 	// We assume filesystem presence on volume as raw block device is ruled out and try to get fs stats
 	available, capacity, used, inodesFree, inodes, inodesUsed, err := volumemanager.StatFS(req.VolumePath)
-
 	if err != nil {
 		return nil, status.Errorf(codes.Internal, "failed to get fs info on path %s: %v", req.VolumePath, err)
 	}
