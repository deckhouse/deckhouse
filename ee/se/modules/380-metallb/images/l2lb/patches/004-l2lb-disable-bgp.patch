diff --git a/speaker/main.go b/speaker/main.go
index 8b67055a..95797797 100644
--- a/speaker/main.go
+++ b/speaker/main.go
@@ -17,7 +17,6 @@ package main
 import (
 	"flag"
 	"fmt"
-	"go.universe.tf/metallb/api/v1alpha1"
 	"net"
 	"os"
 	"os/signal"
@@ -26,6 +25,8 @@ import (
 	"strings"
 	"syscall"
 
+	"go.universe.tf/metallb/api/v1alpha1"
+
 	"github.com/go-kit/log"
 	"github.com/go-kit/log/level"
 	"github.com/prometheus/client_golang/prometheus"
@@ -35,7 +36,6 @@ import (
 	"sigs.k8s.io/controller-runtime/pkg/event"
 	"sigs.k8s.io/yaml"
 
-	"go.universe.tf/metallb/internal/bgp"
 	"go.universe.tf/metallb/internal/config"
 	"go.universe.tf/metallb/internal/k8s"
 	"go.universe.tf/metallb/internal/k8s/controllers"
@@ -219,7 +219,6 @@ func main() {
 		os.Exit(1)
 	}
 	ctrl.client = client
-	ctrl.protocolHandlers[config.BGP].SetEventCallback(client.BGPEventCallback)
 
 	sList.Start(client)
 	defer sList.Stop()
@@ -268,25 +267,8 @@ type controllerConfig struct {
 }
 
 func newController(cfg controllerConfig) (*controller, error) {
-	secretHandling := SecretPassThrough
-	// FrrK8s mode and frr-k8s deployed in a separate namespace, we don't have
-	// permissions to write secrets there.
-	if cfg.Namespace != cfg.FRRK8sNamespace && cfg.bgpType == bgpFrrK8s {
-		secretHandling = SecretConvert
-	}
-
-	handlers := map[config.Proto]Protocol{
-		config.BGP: &bgpController{
-			logger:          cfg.Logger,
-			myNode:          cfg.MyNode,
-			svcAds:          make(map[string][]*bgp.Advertisement),
-			bgpType:         cfg.bgpType,
-			sessionManager:  newBGP(cfg),
-			ignoreExcludeLB: cfg.IgnoreExcludeLB,
-			secretHandling:  secretHandling,
-		},
-	}
-	protocols := []config.Proto{config.BGP}
+	handlers := make(map[config.Proto]Protocol)
+	protocols := []config.Proto{}
 
 	layer2StatusFetcher := func(types.NamespacedName) []layer2.IPAdvertisement { return nil }
 	if !cfg.DisableLayer2 {
@@ -314,7 +296,6 @@ func newController(cfg controllerConfig) (*controller, error) {
 		protocols:             protocols,
 		layer2StatusFetchFunc: layer2StatusFetcher,
 	}
-	ret.announced[config.BGP] = map[string]bool{}
 	ret.announced[config.Layer2] = map[string]bool{}
 
 	ret.nodes = make(map[string]*v1.Node)
