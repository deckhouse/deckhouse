type: object
properties:
  inlet:
    description: |
      Способы подключения из внешнего мира.
          * Поддерживаются следующие inlet'ы
            * `ExternalIP` — когда имеются узлы с публичными IP. Используется в комбинации с параметром `externalIP`.
            * `LoadBalancer` — для всех облачных провайдеров и их схем размещения, в которых поддерживается заказ LoadBalancer'ов.
            * `HostPort` — порт сервера openvpn будет доступен на ноде, на которой находится под. За выбор порта отвечает параметр `hostPort`.
            * `Direct` — для нестандартных случаев. В namespace `d8-openvpn` необходимо создать сервис с именем `openvpn-external`, который отправляет трафик в под с лейблом `app: openvpn` на порт с именем `ovpn-tcp` (или просто 1194). Из этого сервиса парсится externalIP, ip балансера или host балансера. Если ничего этого нет, то необходимо указать параметр `externalHost`.
  loadBalancer:
    description: |
      Секция опциональных настроек для inlet'а `LoadBalancer`.
    properties:
      annotations:
        description: |
          Аннотации, которые будут проставлены сервису для гибкой настройки балансировщика.
              * **Внимание!** модуль не учитывает особенности указания аннотаций в различных облаках. Если аннотации для заказа load balancer'а применяются только при создании сервиса, то для обновления подобных параметров вам необходимо будет выключить и включить модуль.
      sourceRanges:
        description: |
          Список CIDR, которым разрешен доступ на балансировщик.
              * Формат — массив строк.
              * Облачный провайдер может не поддерживать данную опцию и игнорировать её.
  hostPort:
    description: |
      Порт для подключения к openvpn-серверу, который будет доступен на ноде, на которой запущен под openvpn.
        * Параметр доступен при выборе inlet `HostPort`.
        * По умолчанию — `5416`.
  externalIP:
    description: |
      IP одного из узлов кластера, который будет использоваться для подключения клиентов OpenVPN.
        * Требуется только при использовании inlet `ExternalIP`.
  externalPort:
    description: |
      Порт, который вывешивается наружу на `externalIP` или балансере.
        * По умолчанию — `5416`.
  tunnelNetwork:
    description: |
      Подсеть используемая для туннеля.
        * По умолчанию — `172.25.175.0/255.255.255.0`.
  pushToClientRoutes:
    description: |
      Список роутов, которые отправляются клиентам при подключении.
        * По умолчанию — генерируется автоматически из локальной сети кластера, сервисной подсети и подсети подов.
  pushToClientDNS:
    description: |
      Адрес dns-сервера, который отправляется клиентам при подключении.
        * По умолчанию — IP сервиса kube-system/kube-dns.
  pushToClientSearchDomains:
    description: |
      Список доменов поиска, которые отправляются клиентам при подключении.
        * По умолчанию — `global.discovery.clusterDomain`.
  auth:
    description: |
      Опции, связанные с аутентификацией или авторизацией в приложении:
    default: { }
    properties:
      externalAuthentication:
        description: |
          Параметры для подключения внешней аутентификации (используется механизм Nginx Ingress [external-auth](https://kubernetes.github.io/ingress-nginx/examples/auth/external-auth/), работающей на основе модуля Nginx [auth_request](http://nginx.org/en/docs/http/ngx_http_auth_request_module.html) **(если включен модуль user-authn, параметры externalAuthentication настраиваются автоматически)**.
        properties:
          authURL:
            description: |
              URL сервиса аутентификации. Если пользователь прошел аутентификацию, сервис должен возвращать код ответа HTTP 200.
          authSignInURL:
            description: |
              URL, куда будет перенаправлен пользователь для прохождения аутентификации (если сервис аутентификации вернул код ответа HTTP отличный от 200).
      password:
        description: |
          Пароль для http-авторизации для пользователя `admin` (генерируется автоматически, но можно менять)
              * Используется если не включен параметр `externalAuthentication`.
      allowedUserGroups:
        description: |
          Массив групп, пользователям которых позволен доступ в панель администрирования openvpn.
              * Используется если включен модуль `user-authn` или параметр `externalAuthentication`.
              * **Внимание!** При использовании совместно с модулем user-authn необходимо так же добавить разрешенные группы в соответствующее поле в настройках DexProvider.
      whitelistSourceRanges:
        description: |
          Массив CIDR, которым разрешено проходить аутентификацию для доступа в openvpn.
  externalHost:
    description: |
      IP или домен по которому клиенты подключаются к OpenVPN серверу.
        * По умолчанию — используются данные из сервиса с именем `openvpn-external`.
  ingressClass:
    description: |
      Класс ingress контроллера, который используется для админки openvpn.
          * По умолчанию — глобальное значение `modules.ingressClass`.
  https:
    description: |
      Выбираем, какой типа сертификата использовать для админки openvpn.
          * При использовании этого параметра полностью переопределяются глобальные настройки `global.modules.https`.
    properties:
      mode:
        description: |
          Режим работы HTTPS:
              * `Disabled` — в данном режиме админка openvpn будет работать только по http;
              * `CertManager` — админка openvpn будет работать по https и заказывать сертификат с помощью clusterissuer заданном в параметре `certManager.clusterIssuerName`;
              * `CustomCertificate` — админка openvpn будет работать по https используя сертификат из namespace `d8-system`;
              * `OnlyInURI` — админка openvpn будет работать по http (подразумевая, что перед ними стоит внешний https балансер, который терминирует https) и все ссылки в `user-authn` будут генерироваться с https схемой.
      certManager:
        properties:
          clusterIssuerName:
            description: |
               указываем, какой ClusterIssuer использовать для админки openvpn (в данный момент доступны `letsencrypt`, `letsencrypt-staging`, `selfsigned`, но вы можете определить свои).
                * По умолчанию `letsencrypt`.
      customCertificate:
        properties:
          secretName:
            description: |
              Указываем имя secret'а в namespace `d8-system`, который будет использоваться для админки openvpn (данный секрет должен быть в формате [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets)).
                * По умолчанию `false`.
  nodeSelector:
    description: |
      Как в Kubernetes в `spec.nodeSelector` у pod'ов.
          * Если ничего не указано или указано `false` — будет [использоваться автоматика](../../#выделение-узлов-под-определенный-вид-нагрузки).
  tolerations:
    description: |
      Как в Kubernetes в `spec.tolerations` у pod'ов.
          * Если ничего не указано или указано `false` — будет [использоваться автоматика](../../#выделение-узлов-под-определенный-вид-нагрузки).
