#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 5
EOF
}

function __main__() {
  if ! kubectl -n d8-system get secret ingress-conversion-webhook > /dev/null 2> /dev/null ; then
    ca=$(jo CN=ingress-conversion-webhook key="$(jo algo=ecdsa size=256)" ca="$(jo expiry=87600h)" | cfssl gencert -initca -)
    ca_cert=$(echo "$ca" | jq .cert -r)

    # Создадим конфиг для cfssl gencert
    config='{"signing":{"default":{"expiry":"87600h","usages":["signing","key encipherment","requestheader-client"]}}}'

    cert=$(jo CN=ingress-conversion-webhook hosts="$(jo -a ingress-conversion-webhook.d8-system ingress-conversion-webhook.d8-system.svc)" key="$(jo algo=ecdsa size=256)" | cfssl gencert -ca=<(echo "$ca" | jq .cert -r) -ca-key=<(echo "$ca" | jq .key -r) -config=<(echo "$config") -)
    cert_pem=$(echo "$cert" | jq .cert -r)
    cert_key=$(echo "$cert" | jq .key -r)
  else
    cert=$(kubectl -n d8-system get secret ingress-conversion-webhook -o json)
    ca_cert=$(echo "$cert" | jq -r '.data."webhook-ca.crt"' | base64 -d)
    cert_pem=$(echo "$cert" | jq -r '.data."tls.crt"' | base64 -d)
    cert_key=$(echo "$cert" | jq -r '.data."tls.key"' | base64 -d)
  fi

  values::set nginxIngress.internal.ingressConversionWebhookCA "$ca_cert"
  values::set nginxIngress.internal.ingressConversionWebhookPem "$cert_pem"
  values::set nginxIngress.internal.ingressConversionWebhookKey "$cert_key"
}

hook::run "$@"
