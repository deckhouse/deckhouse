#!/bin/bash

# Copyright 2021 Flant CJSC
# Licensed under the Deckhouse Platform Enterprise Edition (EE) license. See https://github.com/deckhouse/deckhouse/blob/main/ee/LICENSE


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    beforeHelm: 10
    kubernetes:
    - name: ingress
      keepFullObjectsInMemory: true
      queue: /modules/$(module::name::kebab_case)/remove-superfluous-rwr-ingresses
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      executeHookOnEvent: ["Deleted"]
EOF
}

function __on_kubernetes::ingress::synchronization() {
  # Старая логика не подразумевала наличие synchronization
  return 0
}

function __on_kubernetes::ingress::deleted() {
  resource_namespace="$(context::get object.metadata.namespace)"
  resource_name="$(context::get object.metadata.name)"

  if [[ $resource_name == *-rwr ]]; then
    return 0
  fi

  if ! kubectl -n "$resource_namespace" get ingress "${resource_name}" 2>/dev/null 1>&2; then
    kubectl -n "$resource_namespace" delete ingress "${resource_name}-rwr" 2>/dev/null 1>&2 || true
  fi
}

function __on_before_helm() {
  non_rwr=$(kubectl get ing --all-namespaces -o json | jq -r '.items[] | "-n \(.metadata.namespace) \(.metadata.name)"' | (grep -Pv '^.*-rwr$' || true) | sort -u)
  rwr=$(kubectl get ing --all-namespaces -o json | jq -r '.items[] | "-n \(.metadata.namespace) \(.metadata.name)"' | (grep -P '^.*-rwr$' || true) | sed s/-rwr//g | sort -u)
  kill_list=$(comm -13 <(echo "$non_rwr") <(echo "$rwr"))

  IFS=$'\n'
  for i in $kill_list; do
    unset IFS
    kubectl delete ingress $i-rwr
  done
  unset IFS
}

hook::run "$@"
