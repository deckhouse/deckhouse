.base_deploy_template:
  stage: deploy
  before_script:
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  # Variables
  #   1. CE/EE/FE -> ce/ee/fe
  - REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')
  - echo "Registry suffix - ${REGISTRY_SUFFIX}"
  #   2. alpha: [EE] -> alpha , beta: [CE] -> beta
  - RELEASE_CHANNEL=$(cut -d ":" -f1 <<< ${CI_JOB_NAME})
  - echo "Release channel - ${RELEASE_CHANNEL}"
  #   3. Source images
  - if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
      SOURCE_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}:${CI_COMMIT_TAG};
      SOURCE_INSTALL_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/install:${CI_COMMIT_TAG};
      SOURCE_RELEASE_VERSION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${CI_COMMIT_TAG};
    else
      SOURCE_IMAGE=${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG};
      SOURCE_INSTALL_IMAGE=${CI_REGISTRY_IMAGE}/install:${CI_COMMIT_TAG};
      SOURCE_RELEASE_VERSION_IMAGE=${CI_REGISTRY_IMAGE}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${CI_COMMIT_TAG};
    fi
  script:
  - if [[ -n "${DECKHOUSE_DEV_REGISTRY_HOST}" ]]; then echo ${DECKHOUSE_DEV_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_DEV_REGISTRY_USER}" --password-stdin ${DECKHOUSE_DEV_REGISTRY_HOST} 2>/dev/null; fi
  - if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then echo ${DECKHOUSE_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_REGISTRY_USER}" --password-stdin ${DECKHOUSE_REGISTRY_HOST} 2>/dev/null; fi
  - docker image pull ${SOURCE_IMAGE}
  - docker image pull ${SOURCE_INSTALL_IMAGE}
  - docker image pull ${SOURCE_RELEASE_VERSION_IMAGE}
# dev images
  - if [[ -n "${DEV_REGISTRY_PATH}" ]]; then
      DEV_DESTINATION_IMAGE=${DEV_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${RELEASE_CHANNEL}
      DEV_DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${RELEASE_CHANNEL}

      echo "Push 'dev' image ${SOURCE_IMAGE} to ${DEV_DESTINATION_IMAGE}"
      docker image tag ${SOURCE_IMAGE} ${DEV_DESTINATION_IMAGE}
      docker image push ${DEV_DESTINATION_IMAGE}

      echo "Delete local 'dev' image ${DEV_DESTINATION_IMAGE}"
      docker image rmi ${DEV_DESTINATION_IMAGE} || true;

      echo "Push 'dev install' ${SOURCE_INSTALL_IMAGE} to image ${DEV_DESTINATION_INSTALL_IMAGE}"
      docker image tag ${SOURCE_INSTALL_IMAGE} ${DEV_DESTINATION_INSTALL_IMAGE}
      docker image push ${DEV_DESTINATION_INSTALL_IMAGE}

      echo "Delete local 'dev install' image ${DEV_DESTINATION_INSTALL_IMAGE}"
      docker image rmi ${DEV_DESTINATION_INSTALL_IMAGE} || true;
    fi
# prod images
  - if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
      DECKHOUSE_DESTINATION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}:${RELEASE_CHANNEL};
      DECKHOUSE_DESTINATION_INSTALL_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/install:${RELEASE_CHANNEL};
      DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};
    else
      DECKHOUSE_DESTINATION_IMAGE=${CI_REGISTRY_IMAGE}:${RELEASE_CHANNEL};
      DECKHOUSE_DESTINATION_INSTALL_IMAGE=${CI_REGISTRY_IMAGE}/install:${RELEASE_CHANNEL};
      DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE=${CI_REGISTRY_IMAGE}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${RELEASE_CHANNEL};
    fi

  - echo "Push 'prod' ${SOURCE_IMAGE} to ${DECKHOUSE_DESTINATION_IMAGE}"
    docker image tag ${SOURCE_IMAGE} ${DECKHOUSE_DESTINATION_IMAGE}
    docker image push ${DECKHOUSE_DESTINATION_IMAGE}
  - echo "Delete local 'prod' image ${DECKHOUSE_DESTINATION_IMAGE}"
    docker image rmi ${DECKHOUSE_DESTINATION_IMAGE} || true;

  - echo "Push 'prod install' image ${SOURCE_INSTALL_IMAGE} to ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}"
    docker image tag ${SOURCE_INSTALL_IMAGE} ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}
    docker image push ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}
  - echo "Delete local 'prod install' image ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}"
    docker image rmi ${DECKHOUSE_DESTINATION_INSTALL_IMAGE} || true;

  - echo "Push 'release version'  ${SOURCE_RELEASE_VERSION_IMAGE} to ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"
    docker image tag ${SOURCE_RELEASE_VERSION_IMAGE} ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}
    docker image push ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}
  - echo "Delete local 'release version' image ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"
    docker image rmi ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE} || true

  - echo "Delete local source image ${SOURCE_IMAGE}"
    docker image rmi ${SOURCE_IMAGE} || true
  - echo "Delete local 'install' source image ${SOURCE_INSTALL_IMAGE}"
    docker image rmi ${SOURCE_INSTALL_IMAGE} || true
  - echo "Delete local 'release version' source image ${SOURCE_RELEASE_VERSION_IMAGE}"
    docker image rmi ${SOURCE_RELEASE_VERSION_IMAGE} || true

  - |
    echo "Deckhouse images published:"
    echo "  Source: ${SOURCE_IMAGE}"
    echo "  Prod: ${DECKHOUSE_DESTINATION_IMAGE}"
    echo "  Dev: ${DEV_DESTINATION_IMAGE}"
    echo "Install images published:"
    echo "  Source: ${SOURCE_INSTALL_IMAGE}"
    echo "  Prod: ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}"
    echo "  Dev: ${DEV_DESTINATION_INSTALL_IMAGE}"
    echo "Release version image: ${DECKHOUSE_DESTINATION_RELEASE_VERSION_IMAGE}"

  when: manual
  except:
    - schedules
