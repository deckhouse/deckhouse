.Go Generate template:
  stage: go_generate
  script:
  - docker run -v $(pwd):/deckhouse -w /deckhouse/tools ${BASE_GOLANG_16_ALPINE} go generate .
  - docker run -v $(pwd):/deckhouse -w /deckhouse/modules/500-upmeter/hooks/smokemini/internal/snapshot ${BASE_GOLANG_16_ALPINE} go generate .
  - git diff --exit-code
  except:
    variables:
      - $CI_PIPELINE_SOURCE == "schedule" && $CLOUD_LAYOUTS_SCHEDULE != "1"
    refs:
      - alpha
      - beta
      - early-access
      - stable
      - rock-solid
  interruptible: true

.Build template:
  stage: build
  before_script:
  - if [[ -z ${CI_COMMIT_TAG} ]]; then
      export CI_COMMIT_TAG="";
    fi
  script:
  - if [[ -n "${DECKHOUSE_DEV_REGISTRY_HOST}" ]]; then echo ${DECKHOUSE_DEV_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_DEV_REGISTRY_USER}" --password-stdin ${DECKHOUSE_DEV_REGISTRY_HOST} 2>/dev/null; fi
  - if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then echo ${DECKHOUSE_REGISTRY_PASSWORD} | docker login --username="${DECKHOUSE_REGISTRY_USER}" --password-stdin ${DECKHOUSE_REGISTRY_HOST} 2>/dev/null; fi
  - if [[ -n "${DECKHOUSE_REGISTRY_READ_HOST}" ]]; then echo ${DECKHOUSE_REGISTRY_READ_PASSWORD} | docker login --username="${DECKHOUSE_REGISTRY_READ_USER}" --password-stdin ${DECKHOUSE_REGISTRY_READ_HOST} 2>/dev/null; fi
  - type multiwerf && source $(multiwerf use 1.2 ${WERF_CHANNEL:-ea} --as-file)
  - type werf && source $(werf ci-env gitlab --verbose --as-file)
  - if [[ -n "${DEV_REGISTRY_PATH}" ]]; then export WERF_REPO="${DEV_REGISTRY_PATH}"; fi
  - werf build
  - docker pull $(werf stage image dev)
  - docker pull $(werf stage image dev/install)
  - REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]') # CE/EE/FE -> ce/ee/fe
  - if [[ -n "${CI_COMMIT_TAG}" ]]; then
      if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
        werf build --repo ${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX} --secondary-repo $WERF_REPO;
      fi;
      if [[ -n "${DEV_REGISTRY_PATH}" ]]; then
        DESTINATION_IMAGE=${DEV_REGISTRY_PATH}:${CI_COMMIT_TAG};
        DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/install:${CI_COMMIT_TAG};
      else
        DESTINATION_IMAGE=${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG};
        DESTINATION_INSTALL_IMAGE=${CI_REGISTRY_IMAGE}/install:${CI_COMMIT_TAG};
      fi;
      if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
        DECKHOUSE_DESTINATION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}:${CI_COMMIT_TAG};
        DECKHOUSE_DESTINATION_INSTALL_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/install:${CI_COMMIT_TAG};
        DESTINATION_RELEASE_CHANNEL_VERSION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${CI_COMMIT_TAG};
        docker image tag $(werf stage image dev) ${DECKHOUSE_DESTINATION_IMAGE};
        docker image tag $(werf stage image dev/install) ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
        docker image tag $(werf stage image release-channel-version) ${DESTINATION_RELEASE_CHANNEL_VERSION_IMAGE};
        docker image push ${DECKHOUSE_DESTINATION_IMAGE};
        docker image push ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
        docker image push ${DESTINATION_RELEASE_CHANNEL_VERSION_IMAGE};
        docker image rmi ${DECKHOUSE_DESTINATION_IMAGE};
        docker image rmi ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
        docker image rmi ${DESTINATION_RELEASE_CHANNEL_VERSION_IMAGE};
      fi;
      docker image tag $(werf stage image dev) ${DESTINATION_IMAGE};
      docker image tag $(werf stage image dev/install) ${DESTINATION_INSTALL_IMAGE};
      docker image push ${DESTINATION_IMAGE};
      docker image push ${DESTINATION_INSTALL_IMAGE};
      docker image rmi ${DESTINATION_IMAGE};
      docker image rmi ${DESTINATION_INSTALL_IMAGE};
    fi
  - if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
      if [[ -n "${DEV_REGISTRY_PATH}" ]]; then
        DESTINATION_IMAGE=${DEV_REGISTRY_PATH}:${CI_COMMIT_BRANCH};
        DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/install:${CI_COMMIT_BRANCH};
      else
        DESTINATION_IMAGE=${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH};
        DESTINATION_INSTALL_IMAGE=${CI_REGISTRY_IMAGE}/install:${CI_COMMIT_BRANCH};
      fi;
      docker image tag $(werf stage image dev) ${DESTINATION_IMAGE};
      docker image tag $(werf stage image dev/install) ${DESTINATION_INSTALL_IMAGE};
      docker image push ${DESTINATION_IMAGE};
      docker image push ${DESTINATION_INSTALL_IMAGE};
      docker image rmi ${DESTINATION_IMAGE};
      docker image rmi ${DESTINATION_INSTALL_IMAGE};
    fi
  except:
    variables:
    - $CI_PIPELINE_SOURCE == "schedule" && $CLOUD_LAYOUTS_SCHEDULE != "1"
    refs:
    - alpha
    - beta
    - early-access
    - stable
    - rock-solid
  interruptible: true
