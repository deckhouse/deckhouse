---
project: deckhouse
configVersion: 1
gitWorktree:
  forceShallowClone: true
cleanup:
  disableGitHistoryBasedPolicy: {{ env "WERF_DISABLE_META_TAGS" "false" }}
---
{{- $_ := set . "DistroPackagesProxy" (env "DISTRO_PACKAGES_PROXY" "") }}
{{- $_ := set . "CargoProxy" (env "CARGO_PROXY" "") }}
# Templates for distro proxy for packages (deb,rpm,apk)
  {{- define "alt packages proxy" }}
# Replace altlinux repos with our proxy
  {{- if $.DistroPackagesProxy }}
- sed -i "s|ftp.altlinux.org/pub/distributions/ALTLinux|{{ $.DistroPackagesProxy }}/repository/ALT-Linux-APT-Repository|g" /etc/apt/sources.list.d/alt.list
  {{- end }}
- export DEBIAN_FRONTEND=noninteractive
- apt-get update
{{- end }}

{{- define "debian packages proxy" }}
# Replace debian repos with our proxy
  {{- if $.DistroPackagesProxy }}
- sed -i "s|http://deb.debian.org|http://{{ $.DistroPackagesProxy }}/repository|g" /etc/apt/sources.list
  {{- end }}
- export DEBIAN_FRONTEND=noninteractive
- apt-get update
{{- end }}

{{- define "ubuntu packages proxy" }}
  # Replace ubuntu repos with our proxy
  {{- if $.DistroPackagesProxy }}
- sed -i 's|http://archive.ubuntu.com|http://{{ $.DistroPackagesProxy }}/repository/archive-ubuntu|g' /etc/apt/sources.list
- sed -i 's|http://security.ubuntu.com|http://{{ $.DistroPackagesProxy }}/repository/security-ubuntu|g' /etc/apt/sources.list
  {{- end }}
- export DEBIAN_FRONTEND=noninteractive
- apt-get update
{{- end }}

{{- define "alpine packages proxy" }}
# Replace alpine repos with our proxy
  {{- if $.DistroPackagesProxy }}
- sed -i 's|https://dl-cdn.alpinelinux.org|http://{{ $.DistroPackagesProxy }}/repository|g' /etc/apk/repositories
  {{- end }}
- apk update
{{- end }}

{{- define "node packages proxy" }}
  {{- if $.DistroPackagesProxy }}
- npm config set registry http://{{ $.DistroPackagesProxy }}/repository/npmjs/
  {{- end }}
{{- end }}

{{- define "pypi proxy" }}
  {{- if $.DistroPackagesProxy }}
- |
  cat <<"EOD" > /etc/pip.conf
  [global]
  index = http://{{ $.DistroPackagesProxy }}/repository/pypi-proxy/pypi
  index-url = http://{{ $.DistroPackagesProxy }}/repository/pypi-proxy/simple
  trusted-host = {{ $.DistroPackagesProxy }}
  EOD
  {{- end }}
{{- end }}
---
# revisions settings
{{- $editionsSettings := (.Files.Get "editions.yaml" | fromYaml) }}
{{- $_ := set . "Editions" $editionsSettings.editions }}

# checks redactions list
{{- if not $.Editions }}
  {{ fail "Editions list is empty" }}
{{- end }}

{{- $editionsDict := dict }}
{{- range $_, $edition := $.Editions }}
  {{- if not $edition.name }}
     {{ fail printf "Editions name is empty" }}
  {{- end }}
  {{- $_ := set $editionsDict $edition.name "" }}
{{- end }}

{{- if not (hasKey $editionsDict .Env) }}
  {{ fail (printf "Editions name not found %v" .Env) }}
{{- end }}

---
# Base Images
{{- $_ := set . "Images" (.Files.Get "candi/image_versions.yml" | fromYaml) }}
  {{- range $k, $v := .Images }}
    {{ $baseImagePath := (printf "%s%s" $.Images.REGISTRY_PATH (trimSuffix "/" $v)) }}
    {{- if ne $k "REGISTRY_PATH" }}
      {{- $_ := set $.Images $k $baseImagePath }}
    {{- end }}
  {{- end }}
---
# Version Map
{{- $versionMap := dict }}
{{- range $_, $edition := $.Editions }}
 {{- if $edition.versionMapFile }}
   {{- $versionMap = (merge $versionMap ($.Files.Get $edition.versionMapFile | fromYaml) )}}
 {{- end }}
 {{- if eq $.Env $edition.name }}
   {{- break -}}
 {{- end }}
{{- end }}

{{- $_ := set . "CandiVersionMap" $versionMap }}

{{- $_ := set . "kubectlForBaseComponents" (list "1.27" "1.30") }}
---
# Terraform Versions
{{- $_ := set . "TF" (.Files.Get "candi/terraform_versions.yml" | fromYaml) }}

# Source repo  settings
{{- $_ := set . "SOURCE_REPO" (env "SOURCE_REPO" | default "https://github.com") }}

# source repo with protected cloud providers
# use example.com as default because we can fail build without env
{{- $_ := set . "CLOUD_PROVIDERS_SOURCE_REPO" (env "CLOUD_PROVIDERS_SOURCE_REPO" | default "https://example.com") }}

# Source repo with observability private code
{{- $_ := set . "OBSERVABILITY_SOURCE_REPO" (env "OBSERVABILITY_SOURCE_REPO" | default "https://example.com") }}

# Stronghold repo access for building d8 cli
{{- $_ := set . "STRONGHOLD_PULL_TOKEN" (env "STRONGHOLD_PULL_TOKEN") }}
{{- $_ := set . "DECKHOUSE_PRIVATE_REPO" (env "DECKHOUSE_PRIVATE_REPO") }}

# goproxy  settings
{{- $_ := set . "GOPROXY" (env "GOPROXY") }}
---
{{ range $path, $content := .Files.Glob ".werf/werf-**.yaml" }}
{{ tpl $content $ }}
{{ end }}

---
{{ include "dev_alt_artifact" (dict "Images" .Images )}}
---
artifact: golangci-lint-artifact
from: {{ $.Images.BASE_GOLANG_23_ALPINE }}
shell:
  beforeInstall:
  - apk add --no-cache git openssh-client
  - mkdir -p ~/.ssh && echo "StrictHostKeyChecking accept-new" > ~/.ssh/config
  install:
  # Use v1.60.1 for go1.23 - https://github.com/golangci/golangci-lint/issues/4837
  - export GOPROXY={{ .GOPROXY }}
  - git clone --depth 1 {{ .SOURCE_REPO }}/golangci/golangci-lint --branch v1.60.1
  - cd golangci-lint/
  - CGO_ENABLED=0 GOOS=linux go build -ldflags '-s -w -extldflags "-static"' -o /usr/local/bin/golangci-lint cmd/golangci-lint/main.go

---
artifact: deckhouse-controller
fromImage: base-for-go
git:
- add: /
  to: /deckhouse
  includePaths:
    - dhctl
    - deckhouse-controller
    - global-hooks/**/*.go
    - modules/**/*.go
    - ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/**/*.go
    - ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/go.mod
    - ee/se-plus/modules/021-cni-cilium/images/egress-gateway-agent/go.sum
    - go_lib/**/*.go
    - go_lib/**/go.mod
    - go_lib/**/go.sum
    - pkg/**/*.go
    - pkg/**/go.mod
    - pkg/**/go.sum
    - go.mod
    - go.sum
    - tools
    - editions.yaml
  excludePaths:
    {{ .Files.Get (printf "tools/build_includes/modules-excluded-%s.yaml" .Env) | nindent 4}}
    - global-hooks/**/*_test.go
    - modules/**/*_test.go
    - modules/*/images
    - dhctl/development
    - deckhouse-controller/development
    - deckhouse-controller/cmd/deckhouse-controller/register-go-hooks.go
  stageDependencies:
    setup:
      - dhctl/go.mod
      - dhctl/go.sum
      - go.mod
      - go.sum
      - dhctl/**/*.go
      - deckhouse-controller/**/*.go
      - deckhouse-controller/go-build.sh
      - global-hooks/**/*.go
      - go_lib/**/*.go
      - go_lib/**/go.mod
      - go_lib/**/go.sum
      - pkg/**/*.go
      - pkg/**/go.mod
      - pkg/**/go.sum
      - modules/**/*.go
      - editions.yaml
{{ .Files.Get (printf "tools/build_includes/modules-with-dependencies-%s.yaml" .Env) }}
{{ .Files.Get (printf "tools/build_includes/candi-%s.yaml" .Env) }}
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  - mkdir /deckhouse /out

  setup:
  # Migrate internal packages imports
{{- range $_, $edition := $.Editions }}
  {{- if not $edition.skipFixingImports }}
  - find /deckhouse/modules/* -type f -name '*.go' -exec sed -E -i 's|github.com/deckhouse/deckhouse/{{ $edition.modulesDir }}|github.com/deckhouse/deckhouse/modules|g' {} +
  {{- end }}
{{- end }}
  - |
    if [ -z "$CI_COMMIT_TAG" ]; then
        latest_tag=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/deckhouse/deckhouse.git 'v*.*.*' | tail --lines=1 | cut --delimiter='/' --fields=3)
        IFS='.' read -r -a version_parts <<< "$latest_tag"

        major=${version_parts[0]}
        minor=${version_parts[1]}
        new_minor=$((minor + 1))
        new_patch=0
        prerelease={{- env "CI_COMMIT_REF_SLUG" "main" }}

        new_version="${major}.${new_minor}.${new_patch}-${prerelease}+${WERF_COMMIT_HASH::7}"
        export CI_COMMIT_TAG=${new_version}
    fi
  - cd /deckhouse
  # Generate hooks imports for particular edition
  - go generate ./tools/register.go
  # Go modules depend on `register-go-hooks.go` file, hence we cannot split downloading dependencies and building
  # into separate phases.
  - go mod download
  - cd /deckhouse/deckhouse-controller
  - D8_VERSION=${CI_COMMIT_TAG} ./go-build.sh
  - mv deckhouse-controller /out
---
image: dhctl
final: false
fromImage: base-for-go
git:
- add: /dhctl
  to: /dhctl
  stageDependencies:
    install:
    - go.mod
    - go.sum
    setup:
    - "**/*.go"
    - Makefile
- add: /go_lib/registry-packages-proxy
  to: /go_lib/registry-packages-proxy
  stageDependencies:
    install:
      - go.mod
      - go.sum
    setup:
      - "**/*.go"
- add: /go_lib/dependency/k8s/drain
  to: /go_lib/dependency/k8s/drain
  stageDependencies:
    install:
      - go.mod
      - go.sum
    setup:
      - "**/*.go"
- add: /pkg/log
  to: /pkg/log
  stageDependencies:
    install:
      - go.mod
      - go.sum
    setup:
      - "**/*.go"
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
    - cd /dhctl && go mod download
  setup:
    - cd /dhctl && D8_VERSION={{- env "CI_COMMIT_TAG" | default "dev" }} make build

---
# render ssh-static
{{ include "ssh_static_artifact" (dict "Images" .Images "SOURCE_REPO" .SOURCE_REPO) }}
---
image: release-channel-version-prebuild
from: {{ .Images.BASE_ALPINE_DEV }}
dependencies:
- image: dev
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: deckhouseImageDigest
import:
- image: common/yq4-artifact
  add: /usr/local/bin/yq
  to: /usr/local/bin/yq
  before: install
shell:
  install:
  - |
    export version="{{ env "CI_COMMIT_REF_NAME" }}"
    yq eval '.version = env(version)' /deckhouse/release.yaml | yq eval -j > version.json
    # changelog exists only for tags, we have to skip it for branches
    {{- $changelog := index (.Files.Glob "CHANGELOG/CHANGELOG-*") (printf "CHANGELOG/CHANGELOG-%s.yml" (env "CI_COMMIT_REF_NAME")) }}
    {{ if $changelog }}
    cat <<"EOF" > /changelog.yaml
    {{ $changelog | nindent 6 }}
    EOF
    {{ end }}
git:
- add: /
  to: /deckhouse
  includePaths:
  - release.yaml

---
image: release-channel-version
from: {{ .Images.BASE_SCRATCH }}
import:
- image: release-channel-version-prebuild
  add: /
  to: /
  after: install
  includePaths:
  - version.json
  - changelog.yaml
---
artifact: version-map-artifact
from: {{ .Images.BASE_ALPINE }}
import:
- image: common/yq4-artifact
  add: /usr/local/bin/yq
  to: /usr/local/bin/yq
  before: install
git:
- add: /
  to: /
  stageDependencies:
    setup:
    {{- range $_, $edition := $.Editions }}
      {{- if $edition.versionMapFile }}
      - {{ $edition.versionMapFile }}
      {{- end }}
    {{- end }}
  includePaths:
{{- range $_, $edition := $.Editions }}
  {{- if $edition.versionMapFile }}
  - {{ $edition.versionMapFile }}
  {{- end }}
{{- end }}
shell:
  setup:
{{- $previousEditionFile := "" }}
{{- range $_, $edition := $.Editions }}
  {{- $curEditionFile := printf "/version_map_%s.yml" $edition.name }}
  {{- if $edition.versionMapFile }}
    {{- $tmpEditionFile := printf "%s.tmp" $curEditionFile }}

     {{- if $previousEditionFile }}
  - cp {{ $edition.versionMapFile }} {{ $tmpEditionFile }}
  - yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' {{ $previousEditionFile }} {{ $tmpEditionFile }} > {{ $curEditionFile }}

      {{- else }}

  - cp {{ $edition.versionMapFile }} {{ $curEditionFile }}

      {{- end }}

  {{- else }}

  - cp {{ $previousEditionFile }} {{ $curEditionFile }}

  {{- end }}

  {{- $previousEditionFile = $curEditionFile }}
{{- end }}
