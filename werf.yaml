project: deckhouse
configVersion: 1
cleanup:
  keepPolicies:
  - references:
      branch: /.*/
      limit:
        in: 720h
  - references:
      tag: /.*/
      limit:
        in: 720h
gitWorktree:
  forceShallowClone: true
---
{{- define "base components" }}
{{- $CandiVersionMap := .Files.Get "candi/version_map.yml" | fromYaml }}
  - name: "Install jo"
    apk:
      name:
      - jo
      update_cache: yes

  - name: "Install rgxg"
    apk:
      name:
        - rgxg
      repository: http://nl.alpinelinux.org/alpine/edge/testing/
      update_cache: yes

  - name: "install cfssl"
    get_url:
      url: https://github.com/cloudflare/cfssl/releases/download/v1.6.0/cfssl_1.6.0_linux_amd64
      checksum: "sha256:b830b0faf606cb2ae8b45c783edf4776eedb3728efd515e7f1ce63b3a475d667"
      dest: /usr/local/bin/cfssl
      mode: +x

  - name: "Install yq"
    get_url:
      url: https://github.com/mikefarah/yq/releases/download/2.4.1/yq_linux_amd64
      checksum: "sha256:754c6e6a7ef92b00ef73b8b0bb1d76d651e04d26aa6c6625e272201afa889f8b"
      dest: /usr/local/bin/yq
      mode: +x

  - name: "Install kubectl"
    shell: |
{{- range $k8sVersion := tuple "1.20" }}
      curl -L https://storage.googleapis.com/kubernetes-release/release/v{{ $k8sVersion }}.{{ index $CandiVersionMap "k8s" $k8sVersion "patch" }}/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl-{{ $k8sVersion }}
      chmod +x /usr/local/bin/kubectl-{{ $k8sVersion }}
{{- end }}
  - name: "Install kubectl wrapper"
    copy:
      content: |
        {{- .Files.Get "deckhouse-controller/files/kubectl_wrapper.sh" | nindent 8 }}
      dest: /usr/local/bin/kubectl
      mode: +x

  - name: "Install helm 2"
    unarchive:
      extra_opts:
        - linux-amd64/helm
        - --strip-components=1
        - --transform
        - s/helm/helm2/
      src: https://get.helm.sh/helm-v2.16.9-linux-amd64.tar.gz
      remote_src: yes
      dest: /usr/local/bin

  - name: "Install helm 3"
    unarchive:
      extra_opts:
        - linux-amd64/helm
        - --strip-components=1
      src: https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
      remote_src: yes
      dest: /usr/local/bin

  # TODO: checksum
  - name: "Install semver"
    unarchive:
      extra_opts:
        - semver-tool-2.1.0/src
        - --strip-components=2
      src: https://github.com/fsaintjacques/semver-tool/archive/2.1.0.tar.gz
      remote_src: yes
      dest: /usr/local/bin

  - name: "Install registry client"
    get_url:
      url: https://github.com/genuinetools/reg/releases/download/v0.16.0/reg-linux-amd64
      dest: /usr/local/bin/reg
      mode: +x
      checksum: "sha256:0470b6707ac68fa89d0cd92c83df5932c9822df7176fcf02d131d75f74a36a19"

  - name: "Shell comfort: inputrc"
    copy:
      content: |
        {{- .Files.Get "deckhouse-controller/files/inputrc" | nindent 8 }}
      dest: /etc/inputrc

  - name: "Shell comfort: bashrc"
    copy:
      content: |
        {{- .Files.Get "deckhouse-controller/files/bashrc" | nindent 8 }}
      dest: /etc/bashrc

  - name: "Shell comfort: add bashrc for root"
    shell: ln -s /etc/bashrc /root/.bashrc

  - name: "Shell comfort: add bashrc for nobody"
    shell: ln -s /etc/bashrc /.bashrc

  - name: "Shell comfort: vimrc.local"
    copy:
      content: |
        {{- .Files.Get "deckhouse-controller/files/vimrc.local" | nindent 8 }}
      dest: /etc/vim/vimrc.local

  - raw: rm -rf /var/cache/apk/*
{{- end }}

image: common-base
from: {{ env "BASE_ALPINE" }}
ansible:
  beforeInstall:
  - apk: update_cache=yes

  - name: "Install dependencies"
    apk:
      name:
        - bash
        - bash-completion
        - ca-certificates
        - curl
        - pwgen
        - apache2-utils
        - bc
        - grep
        - tar
        - unzip
        - coreutils
        - util-linux
        - sed
        - gawk
        - netcat-openbsd
        - busybox-extras
        - vim
        - tini

{{- include "base components" . }}

---
image: base-for-go
from: {{ env "BASE_GOLANG_16_ALPINE" }}
ansible:
  beforeInstall:
  - name: "Install dependencies"
    apk:
      name:
        - bash
        - bash-completion
        - ca-certificates
        - curl
        - pwgen
        - bc
        - grep
        - tar
        - unzip
        - coreutils
        - util-linux
        - sed
        - gawk
        - netcat-openbsd
        - busybox-extras
        - vim
        - tini
        - git
        - build-base
        - libstdc++
        - libgcc
        - libcurl
        - binutils
        - binutils-dev
        - elfutils-dev

{{- include "base components" . }}

docker:
  ENV:
    PATH: /usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/go/bin
---
image: dev
fromImage: common-base
fromCacheVersion: 2020-05-08.1
git:
- add: /
  to: /deckhouse
  includePaths:
  - candi
  - modules
  - global-hooks
  - shell_lib.sh
  - shell_lib
  - deckhouse-controller/entrypoint.sh
  - jq_lib
  - helm_lib
  excludePaths:
  - docs
  - modules/*/docs
  - modules/*/README.md
  - modules/*/images
  - modules/*/hooks/**/*.go
  - modules/*/template_tests
  - modules/*/.namespace
  - modules/*/values_matrix_test.yaml
  - global-hooks/**/*.go
  - modules/images_tags_*.json
  - ee
- url: https://github.com/flant/shell-operator
  tag: v1.0.1
  add: /frameworks/shell
  to: /deckhouse/shell-operator/frameworks/shell
{{ .Files.Get (printf "tools/build_includes/modules-with-exclude-%s.yaml" .Env) }}
{{ .Files.Get (printf "tools/build_includes/cloud-providers-%s.yaml" .Env) }}
import:
- artifact: deckhouse-controller
  add: /out/deckhouse-controller
  to: /usr/bin/deckhouse-controller
  before: setup
- artifact: jq
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: setup
ansible:
  setup:
  - name: "Add modules images tags.json"
    copy:
      content: |
        {{- .Files.Get (printf "modules/images_tags_%s.json" .Env) | nindent 8 }}
      dest: /deckhouse/modules/images_tags.json

{{- range $key := list "default" "managed" "minimal" }}
  - name: "Add bundle {{ $key }}"
    copy:
      content: |
        {{- $.Files.Get (printf "modules/values-%s.yaml" $key ) | nindent 8 }}
{{- if eq $.Env "EE" }}
        {{- $.Files.Get (printf "ee/modules/values-%s.yaml" $key ) | nindent 8 }}
{{- end }}
{{- if eq $.Env "FE" }}
        {{- $.Files.Get (printf "ee/modules/values-%s.yaml" $key ) | nindent 8 }}
        {{- $.Files.Get (printf "ee/fe/modules/values-%s.yaml" $key ) | nindent 8 }}
{{- end }}
      dest: /deckhouse/modules/values-{{ $key }}.yaml
{{- end }}

  - name: "Add version info"
    copy:
      content: |
        {{- env "CI_COMMIT_TAG" | default "dev" | nindent 8}}
      dest: /deckhouse/version

  - name: "Add edition info"
    copy:
      content: |
        {{- env "WERF_ENV" | default "unknown" | nindent 8}}
      dest: /deckhouse/edition

  # Because of https://github.com/flant/werf/issues/1741 just make symlink for the entry point
  - name: "Make symlink for deckhouse entrypoint in the right location"
    shell: ln -s /deckhouse/deckhouse-controller/entrypoint.sh /deckhouse/deckhouse

  - name: "Run deckhouse from nobody"
    file:
      path: /deckhouse/
      state: directory
      recurse: yes
      owner: 65534
      group: 65534

docker:
  ENV:
    MODULES_DIR: /deckhouse/modules
    GLOBAL_HOOKS_DIR: /deckhouse/global-hooks

---
image: tests
fromImage: base-for-go
fromCacheVersion: "20210413"
git:
- add: /
  to: /deckhouse
  stageDependencies:
    install:
      - go.mod
      - go.sum
  excludePaths:
  - docs
  - modules/images_tags_*.json
  - ee
- url: https://github.com/flant/shell-operator
  tag: v1.0.1
  add: /frameworks/shell
  to: /deckhouse/shell-operator/frameworks/shell
{{ .Files.Get (printf "tools/build_includes/modules-%s.yaml" .Env) }}
{{ .Files.Get (printf "tools/build_includes/cloud-providers-%s.yaml" .Env) }}
import:
- artifact: deckhouse-controller
  add: /out/deckhouse-controller
  to: /usr/bin/deckhouse-controller
  before: setup
- artifact: libjq
  add: /libjq
  to: /libjq
  before: setup
- artifact: jq
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: setup
ansible:
  beforeInstall:
  - name: "Install dumb-init"
    apk:
      name:
        - dumb-init

  - name: "Install ginkgo"
    command: go get github.com/onsi/ginkgo/ginkgo

  - name: "Install dlv"
    command: go get github.com/go-delve/delve/cmd/dlv

  - raw: rm -rf /var/cache/apk/*

  install:
  - name: "Download go modules"
    command: go mod download
    args:
      chdir: /deckhouse

  - name: "Migrate ee/fe internal packages imports"
    shell: |
      find /deckhouse/modules/* -type f -exec sed -i 's/github.com\/deckhouse\/deckhouse\/ee\/modules/github.com\/deckhouse\/deckhouse\/modules/g' {} +
      find /deckhouse/modules/* -type f -exec sed -i 's/github.com\/deckhouse\/deckhouse\/ee\/fe\/modules/github.com\/deckhouse\/deckhouse\/modules/g' {} +

  - name: "Install GolangCI linter"
    shell: |
      curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
        | sh -s -- -b $(go env GOPATH)/bin v1.32.2

  setup:
  - name: "Add modules images tags.json"
    copy:
      content: |
        {{- .Files.Get (printf "modules/images_tags_%s.json" .Env) | nindent 8 }}
      dest: /deckhouse/modules/images_tags.json
docker:
  ENV:
    ADDON_OPERATOR_NAMESPACE: tests
    DECKHOUSE_POD: tests
    MODULES_DIR: /deckhouse/modules
    GLOBAL_HOOKS_DIR: /deckhouse/global-hooks
    CGO_CFLAGS: "-I/libjq/include"
    CGO_LDFLAGS: "-L/libjq/lib"
---
artifact: deckhouse-controller
fromImage: base-for-go
fromCacheVersion: "20210413"
git:
- add: /
  to: /deckhouse
  includePaths:
    - dhctl
    - deckhouse-controller
    - global-hooks/**/*.go
    - go_lib/**/*.go
    - modules/**/*.go
    - go.mod
    - go.sum
    - tools
  excludePaths:
    - deckhouse-controller/cmd/deckhouse-controller/register-go-hooks.go
    - dhctl/development
    - deckhouse-controller/development
    - deckhouse-controller/cmd/deckhouse-controller/register-go-hooks.go
  stageDependencies:
    setup:
      - dhctl/go.mod
      - dhctl/go.sum
      - go.mod
      - go.sum
      - dhctl/**/*.go
      - deckhouse-controller/**/*.go
      - deckhouse-controller/go-build.sh
      - global-hooks/**/*.go
      - go_lib/**/*.go
      - modules/**/*.go
{{ .Files.Get (printf "tools/build_includes/modules-with-dependencies-%s.yaml" .Env) }}
{{ .Files.Get (printf "tools/build_includes/cloud-providers-%s.yaml" .Env) }}
import:
- artifact: libjq
  add: /libjq
  to: /libjq
  before: setup

shell:
  beforeInstall:
  - apk add --no-cache git ca-certificates gcc libc-dev
  - mkdir /deckhouse /out

  setup:
  # Migrate ee/fe internal packages imports
  - find /deckhouse/modules/* -type f -exec sed -i 's/github.com\/deckhouse\/deckhouse\/ee\/modules/github.com\/deckhouse\/deckhouse\/modules/g' {} +
  - find /deckhouse/modules/* -type f -exec sed -i 's/github.com\/deckhouse\/deckhouse\/ee\/fe\/modules/github.com\/deckhouse\/deckhouse\/modules/g' {} +
  - cd /deckhouse
  # Generate hooks imports for particular edition (CE/EE/FE)
  - go generate ./tools/register.go
  # Go modules depend on `register-go-hooks.go` file, hence we cannot split downloading dependencies and building
  # into separate phases.
  - go mod download
  - cd /deckhouse/deckhouse-controller
  - ./go-build.sh /libjq
  - mv deckhouse-controller /out

---
artifact: dhctl
fromImage: base-for-go
git:
  - add: /dhctl
    to: /dhctl
    stageDependencies:
      install:
        - go.mod
        - go.sum
      setup:
        - "**/*.go"
        - Makefile
ansible:
  beforeInstall:
    - apk:
        name: git,ca-certificates,make
        update_cache: yes
    - command: rm -rf /var/cache/apk/*

  install:
    - shell: go mod download
      args:
        chdir: /dhctl

  setup:
    - command: make build
      args:
        chdir: /dhctl
---
image: dhctl-tests
fromCacheVersion: "20220125"
fromImage: base-for-go
git:
- add: /dhctl
  to: /dhctl
  stageDependencies:
    install:
      - go.sum
      - Makefile
ansible:
  beforeInstall:
    - apk:
        name: git,ca-certificates,curl,bash,make
        update_cache: yes
    - command: rm -rf /var/cache/apk/*

  install:
  - shell: make deps
    args:
      chdir: /dhctl
---
artifact: jq
from: {{ env "BASE_ALPINE" }}
fromCacheVersion: "20210527"
git:
- url: https://github.com/stedolan/jq
  add: /
  to: /src
  commit: b6be13d5de6dd7d8aad5fd871eb6b0b30fc7d7f6
  stageDependencies:
    install:
      - "**/*"
ansible:
  install:
  - apk:
      name:
      - oniguruma-dev
      - automake
      - autoconf
      - libtool
      - build-base
      update_cache: yes
  - raw: rm -rf /var/cache/apk/*
  - shell: |
      cd /src
      autoreconf -fi
      ./configure \
        --prefix=/usr \
        --sysconfdir=/etc \
        --mandir=/usr/share/man \
        --localstatedir=/var \
        --disable-docs
      make LDFLAGS=-all-static
      make prefix=/usr install

---
artifact: libjq
from: {{ env "BASE_ALPINE" }}
fromCacheVersion: "20210527"
git:
- url: https://github.com/flant/libjq-go
  tag: v1.6.2
  add: /
  to: /src
  stageDependencies:
    install:
      - "scripts/**"
    setup:
      - "modules/**"
ansible:
  install:
  - shell: /src/scripts/install-libjq-dependencies-alpine.sh
  - raw: rm -rf /var/cache/apk/*
  setup:
  - shell: /src/scripts/build-libjq-static.sh /src /libjq
---
artifact: terraform-provider-vsphere
fromImage: base-for-go
git:
  - url: https://github.com/deckhouse/3p-terraform-provider-vsphere
    add: /
    to: /terraform-provider-vsphere
    tag: v{{ env "TF_VSPHERE_VERSION" }}-flant.1
    stageDependencies:
      install:
        - "**/*"
ansible:
  beforeInstall:
    - apk:
        name:
        - git
        - ca-certificates
        update_cache: yes
    - command: rm -rf /var/cache/apk/*

  install:
    - command: go mod download
      args:
        chdir: /terraform-provider-vsphere

  setup:
    - command: go build -o terraform-provider-vsphere
      args:
        chdir: /terraform-provider-vsphere
      environment:
        CGO_ENABLED: "0"

---
artifact: terraform-provider-gcp
fromImage: base-for-go
fromCacheVersion: "20210527"
git:
  - url: https://github.com/flant/terraform-provider-google
    add: /
    to: /terraform-provider-gcp
    tag: v{{ env "TF_GCP_VERSION" }}-flant.1
    stageDependencies:
      install:
        - "**/*"
ansible:
  beforeInstall:
    - apk:
        name:
        - git
        - ca-certificates
        update_cache: yes
    - command: rm -rf /var/cache/apk/*

  install:
    - command: go mod download
      args:
        chdir: /terraform-provider-gcp

  setup:
    - command: go build -o terraform-provider-gcp
      args:
        chdir: /terraform-provider-gcp
      environment:
        CGO_ENABLED: "0"

---
image: dev/install
from: {{ env "BASE_ALPINE" }}
git:
- add: /
  to: /deckhouse
  includePaths:
  - candi
{{ .Files.Get (printf "tools/build_includes/cloud-providers-%s.yaml" .Env) }}
import:
- artifact: dhctl
  add: /tmp/dhctl
  to: /usr/bin/dhctl
  before: setup
- artifact: terraform-provider-vsphere
  add: /terraform-provider-vsphere/terraform-provider-vsphere
  to: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_VSPHERE_NAMESPACE" }}/{{ env "TF_VSPHERE_TYPE" }}/{{ env "TF_VSPHERE_VERSION" }}/linux_amd64/terraform-provider-vsphere
  before: setup
- artifact: terraform-provider-gcp
  add: /terraform-provider-gcp/terraform-provider-gcp
  to: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_GCP_NAMESPACE" }}/{{ env "TF_GCP_TYPE" }}/{{ env "TF_GCP_VERSION" }}/linux_amd64/terraform-provider-google
  before: setup
- image: dev
  add: /deckhouse/modules/images_tags.json
  to: /deckhouse/candi/images_tags.json
  before: setup
docker:
  ENV:
    EDITOR: vim
    TF_CLI_CONFIG_FILE: /etc/terraformrc
ansible:
  beforeInstall:
  - name: "Install dependencies"
    apk:
      name:
      - openssh-client
      - gettext
      - bash
      - bash-completion
      - coreutils
      - util-linux
      - sed
      - gawk
      - grep
      - ca-certificates
      - vim

  - name: "Install terraform"
    unarchive:
      src: https://releases.hashicorp.com/terraform/{{ env "TF_VERSION" }}/terraform_{{ env "TF_VERSION" }}_linux_amd64.zip
      remote_src: yes
      dest: /bin
      mode: +x

  - raw: rm -rf /var/cache/apk/*

  install:
  - name: "Create a directory for terraform provider aws"
    file:
      path: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_AWS_NAMESPACE" }}/{{ env "TF_AWS_TYPE" }}/{{ env "TF_AWS_VERSION" }}/linux_amd64
      state: directory
  - name: "Install terraform provider aws"
    unarchive:
      src: https://releases.hashicorp.com/terraform-provider-aws/{{ env "TF_AWS_VERSION" }}/terraform-provider-aws_{{ env "TF_AWS_VERSION" }}_linux_amd64.zip
      remote_src: yes
      dest: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_AWS_NAMESPACE" }}/{{ env "TF_AWS_TYPE" }}/{{ env "TF_AWS_VERSION" }}/linux_amd64
      mode: +x

  - name: "Create a directory for terraform provider openstack"
    file:
      path: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_OPENSTACK_NAMESPACE" }}/{{ env "TF_OPENSTACK_TYPE" }}/{{ env "TF_OPENSTACK_VERSION" }}/linux_amd64
      state: directory
  - name: "Install terraform provider openstack"
    unarchive:
      src: https://releases.hashicorp.com/terraform-provider-openstack/{{ env "TF_OPENSTACK_VERSION" }}/terraform-provider-openstack_{{ env "TF_OPENSTACK_VERSION" }}_linux_amd64.zip
      remote_src: yes
      dest: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_OPENSTACK_NAMESPACE" }}/{{ env "TF_OPENSTACK_TYPE" }}/{{ env "TF_OPENSTACK_VERSION" }}/linux_amd64
      mode: +x

  - name: "Create a directory for terraform provider yandex"
    file:
      path: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_YANDEX_NAMESPACE" }}/{{ env "TF_YANDEX_TYPE" }}/{{ env "TF_YANDEX_VERSION" }}/linux_amd64
      state: directory
  - name: "Install terraform provider yandex"
    unarchive:
      src: https://releases.hashicorp.com/terraform-provider-yandex/{{ env "TF_YANDEX_VERSION" }}/terraform-provider-yandex_{{ env "TF_YANDEX_VERSION" }}_linux_amd64.zip
      remote_src: yes
      dest: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_YANDEX_NAMESPACE" }}/{{ env "TF_YANDEX_TYPE" }}/{{ env "TF_YANDEX_VERSION" }}/linux_amd64
      mode: +x

  - name: "Create a directory for terraform provider azurerm"
    file:
      path: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_AZURE_NAMESPACE" }}/{{ env "TF_AZURE_TYPE" }}/{{ env "TF_AZURE_VERSION" }}/linux_amd64
      state: directory
  - name: "Install terraform provider azurerm"
    unarchive:
      src: https://releases.hashicorp.com/terraform-provider-azurerm/{{ env "TF_AZURE_VERSION" }}/terraform-provider-azurerm_{{ env "TF_AZURE_VERSION" }}_linux_amd64.zip
      remote_src: yes
      dest: /usr/local/share/terraform/plugins/registry.terraform.io/{{ env "TF_AZURE_NAMESPACE" }}/{{ env "TF_AZURE_TYPE" }}/{{ env "TF_AZURE_VERSION" }}/linux_amd64
      mode: +x

  setup:
  - name: "Shell comfort: inputrc"
    copy:
      content: |
        {{- .Files.Get "deckhouse-controller/files/inputrc" | nindent 8 }}
      dest: /etc/inputrc

  - name: "Shell comfort: bashrc"
    copy:
      content: |
        PS1='\[\033[01;30m\][deckhouse]\[\033[00m\] \[\033[01;33m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '

        source /etc/profile.d/bash_completion.sh

      dest: /etc/bashrc

  - name: "Shell comfort: add bashrc for root"
    shell: ln -s /etc/bashrc /root/.bashrc

  - name: "Shell comfort: add bashrc for nobody"
    shell: ln -s /etc/bashrc /.bashrc

  - name: "Shell comfort: vimrc.local"
    copy:
      content: |
        {{- .Files.Get "deckhouse-controller/files/vimrc.local" | nindent 8 }}
      dest: /etc/vim/vimrc.local

  - name: "Add dhctl completion"
    shell: |
      echo 'eval "$(dhctl --completion-script-bash)"' >> /etc/bashrc

  - name: "Configure terraform cli"
    copy:
      dest: "/etc/terraformrc"
      content: |
        provider_installation {
          filesystem_mirror {
            path    = "/usr/local/share/terraform/plugins"
            include = ["*/*/*"]
          }
        }

---
image: release-channel-version
from: spotify/scratch
shell:
  install:
  - |
    version="{{ env "CI_COMMIT_REF_NAME" }}"
    canary='{{ .Files.Get "canary.json" | fromJson | toJson }}'
    requirements='{{ .Files.Get "requirements.json" | fromJson | toJson }}'
    json="{\"version\": \"${version}\", \"canary\": ${canary}, \"requirements\": ${requirements}}"
    echo "$json" > /version.json
