apiVersion: deckhouse.io/v1alpha1
kind: NodeGroupConfiguration
metadata:
  name: kubelet-rotator.sh
spec:
  weight: 200
  bundles:
  - "*"
  nodeGroups:
  - "*"
  content: |

    function kubectl_exec() {
      kubectl --request-timeout 60s --kubeconfig=/etc/kubernetes/kubelet.conf ${@}
    }

    LABELS_FROM_ANNOTATION="$(kubectl_exec get no "$D8_NODE_HOSTNAME" -o json | jq -r '.metadata.annotations."node.deckhouse.io/kubelet-rotation-ready"')"
    if [[ $LABELS_FROM_ANNOTATION != "null" ]]
      then
        exit 0
    fi

    CA_CRT="/etc/kubernetes/pki/ca.crt"
    CA_KEY="/etc/kubernetes/pki/ca.key"
    CA_CRT_BUNDLE="/etc/kubernetes/pki/ca-bundle.crt"

    CA_CRT_64=LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJYXhDZ1UzNkNhSm93RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBeE1qa3hNekF5TURGYUZ3MHpOVEF4TWpjeE16QTNNREZhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURMeHpBMEJQWEw3QTFsMlQ5aElDMzUwSHVlREt5cElWbmkyR0hZMnVKRklSYzIxd2JYd2M3bVpGQjUKR2RkRUJIU1Z2cExVY3pGbWxnYnozc2NWY3EwL3JDdEZVVjgrKzJJdlc1RTF1UFpuZE1aZElhdXVPVmg5TktuegpXK1Bwam9ZSWdwenlVZzNsTWJ0UDl0UEdGaThPampZeUFGcnBzV1NNNldoa2FCc1hNMy9Mb2lzc2JBWVg2THRNCm5IV3czbnhWSENpYnU0eDF6cXhZM2l5eUxScWdHZStEcVpMbVdrUUNRTGN5WU51NGpyWlNNRjZHblUxM0FiNUcKTWhJemxjL01STjkxakhycWxuRXREYk91MkI2aDhrMytlcU1oK0dqQXVBZ1VMSHJCV3QyOVQ0ckx6bGpvOXNQZAp5elF1NGRJRUdBVUlncmRTT1RUYTZzOEFFVUZUQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJTdnZnZlhJRGtVSEs0UDBTM1RKV3BuTGwxNzJEQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQnBCUHR2ODdBQgpZaVJ0bFMvM3Z2RUplZWFzajgyMVQvVVJLWWhYcHFRUkxycXcwUGlpeFBxcTdsNGZYR1NNSEE0UTRyK0loSzBECmk4NEN2eUxObkpLTFhrZVVXVGgvZ1dBWC84WWN1Rit4R283MzZXaEYyMUNJTXFSTkdCL1RLU1dkK2tTOUh0NEoKR2xmWmR0dlpHcWhLZTU0UHdxYzdBbG90Mzl0TjE3a2RhU1VKMVlaMVB0dGQrL0dMTkQzdkY5enY4WG15aU5tMgorc1J5UzdBRGEzeFMzc0RsS3VjbzQrN2FlelZVMTh3Z2NFcDVPanhwa0JNaDJiaTlNd29Oa3VzR08xSTZaVmV0Ckk3RkZuZkVKaHdUQWdzNWJxVjNmMUl1R2FvaEZWSjVOT1grVmdoaDFjSWRpMjJMd2xHSkpaSTRIWENhWnZoNWsKYmlZVUlsWkVjWTQvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    CA_KEY_64=LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeThjd05BVDF5K3dOWmRrL1lTQXQrZEI3bmd5c3FTRlo0dGhoMk5yaVJTRVhOdGNHCjE4SE81bVJRZVJuWFJBUjBsYjZTMUhNeFpwWUc4OTdIRlhLdFA2d3JSVkZmUHZ0aUwxdVJOYmoyWjNUR1hTR3IKcmpsWWZUU3A4MXZqNlk2R0NJS2M4bElONVRHN1QvYlR4aFl2RG80Mk1nQmE2YkZrak9sb1pHZ2JGek4veTZJcgpMR3dHRitpN1RKeDFzTjU4VlJ3b203dU1kYzZzV040c3NpMGFvQm52ZzZtUzVscEVBa0MzTW1EYnVJNjJVakJlCmhwMU5kd0crUmpJU001WFB6RVRmZFl4NjZwWnhMUTJ6cnRnZW9mSk4vbnFqSWZob3dMZ0lGQ3g2d1ZyZHZVK0sKeTg1WTZQYkQzY3MwTHVIU0JCZ0ZDSUszVWprMDJ1clBBQkZCVXdJREFRQUJBb0lCQVFDLzFQakV6N0tRVU54Zgo5NzdaY1JDMjdwT2d1cS9EMi9paE96QUpsQ3lVQlUyME80SmVsRDF3MkJpRm1GVDAyL2pnaXZId2U2eVN0VU5BClNvVkI1SjNCcGhOcUF1dFdBQkp6SUpFM2NMTE51N21OTE1oUWovMkVpSkpBM1UxVnJlenhqL3V0aHA4OEZyQU4KMi8rS3A1R084ME9EbUovOUJSanlLand5NFdvM1VINnFLNmlFN0hqV3NlQmJLTWU2ajMzcFVpemE1b0drbDVmTQpyelpJanpwQXFGUklmQU9FcGluZklYdG56VnI2Qk04LzBhMlloTE0rZjZUbzM2czlnWlVvc0N0VkxEdTJNUDRWCk9tOWJtbFBmWG40Szk0S0hmcGNOSWlBVkd1aDhadGxRMWRBZ3BlZWtzeWUvU0Y0Z1RiTjhjOXdFS0RmMmpBTjUKZjJCNWdkMTVBb0dCQU9sT21wU284REthYXhkNmZDWmIxMzNiR29NU254TFBSVkZUeC85bFY1eEU4RXlTY2ZUagpSM1kzS1d2U09WSlFyYjJMemkxSDQycGVWQ1V0dTFmYnhDMEhzQjVyUU1nMUNWT1NpeDB2dUZ2QnpXUTZPWGR6CnVKRUpjOElRWGRLSlpSREwwd0pEbUpQMTU1TisrN2gweUNwZGdQc25zUUhsRFB5ZTV1OGZFdlR2QW9HQkFOK1oKVG9oRUlsZ213cURkd3J4NVBBV2hpYTk1STNYcVpsVWxzbk1IUWhLb1lhTTgxZU8yTFdFQWdFMWR2SDZTL1A3Ngoyb1U0ZmcrMjdRdWxxcisvd1VKa1NyWVdva0I0RkJSUDRWUm9nS3BYVmVJWXR0ZTVsTDMrbjd3UzdIajUweklEClBMeGJVanFxckZCcUtiTG5TdU9RWGtmUkgvLzdBbGZucjhQdzd5SGRBb0dBRHkwTXd4VEdJeFNHV00yZjI4TG4Kbm9rdERVK2R4MVJ5TnRzVFRGcWtPMGNFdG9aa0lVRFRlaTRXWkt3VkRIU3hDSDVhbC9sd0lwQW1PeERoZWRLUwp6VGNOenJ5OVJ3aWtKYXFIb0F0bG01cGNxT05jcjVkNGJ2N0ZaOTgycXlaQ3k3Zm1idVJFdllNbVlDTEhidlV4CnZBZS9CeGRLM1V1djc1TEtoTTFwcDBNQ2dZQlpmQTFGMDU2N0VLZ0xvVFJ5SVVLNExqSGdHK2JwSmVuV1ljUE0KN1Rhd0tOc0tiU3BjZTJnbHpnR0s5TnllKzB4czd3L05DUkxLVHpjRzFrSkRnd1pnLzZvMnZWQXA1T1NFVElPdApPRFZsOXBYVWFuZWlWZzhGQ29YNnlzZ0FrbHJIUlN4bFpWYS9TOWF5U0Fwd0lzaUIwaUVwTkxSTnliTGlZMEtnCmRDZi9zUUtCZ0g0NEo4dFFvcUJsUVZQc2R6WDZndDZISjZjazh1eHVJS3d5MTBVSnNKS09MS0Z4cHJNejQ5dGUKRy9GZGhTMXMvQXQrL3FmMG00WUQ3RytIN0tWWWtybGVxbEJLZ1pnUmhLRUNxN0pTcTZqK0tkclVKTTVUV3hodQp5MzFBSDRmU0EwWHJzOFo0dy92dGVvSUo5T29oa3BpYjhNejFaSktvbUNrVGhhRkx1KzQ1Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==

    echo $CA_CRT_64 | base64 -d > $CA_CRT
    echo $CA_KEY_64 | base64 -d > $CA_KEY

    ##### kubelet-client-current.pem #####

    CURRENT_PEM="/var/lib/kubelet/pki/kubelet-client-current.pem"

    cp -f $CURRENT_PEM $CURRENT_PEM.bk
    TMPDIR=$(bb-tmp-dir)

    openssl x509 -in "$CURRENT_PEM" > "$TMPDIR/old.crt"

    openssl ec -in "$CURRENT_PEM" > "$TMPDIR/key.pem" 2>/dev/null
    SUBJECT="/$(openssl x509 -in "$TMPDIR/old.crt" -noout -subject | cut -d= -f2- | tr -d ' ' | tr , /)"

    openssl req -new -key "$TMPDIR/key.pem" -subj "$SUBJECT" -out "$TMPDIR/new.csr"

    openssl x509 -req -in "$TMPDIR/new.csr" \
        -CA "$CA_CRT" \
        -CAkey "$CA_KEY" \
        -CAcreateserial \
        -out "$TMPDIR/new.crt" \
        -days 7

    cat "$TMPDIR/new.crt" "$TMPDIR/key.pem" > "$TMPDIR/new.pem"

    openssl verify -CAfile $CA_CRT $TMPDIR/new.pem

    cp -f "$TMPDIR/new.pem" "$CURRENT_PEM"
    rm -rf $TMPDIR

    ##### kubelet-server-current.pem #####
    TMPDIR=$(bb-tmp-dir)
    CURRENT_PEM="/var/lib/kubelet/pki/kubelet-server-current.pem"
    cp -f $CURRENT_PEM $CURRENT_PEM.bk

    openssl x509 -in "$CURRENT_PEM" > "$TMPDIR/old.crt"
    openssl ec -in "$CURRENT_PEM" > "$TMPDIR/key.pem" 2>/dev/null

    SUBJECT="/$(openssl x509 -in "$TMPDIR/old.crt" -noout -subject | cut -d= -f2- | tr -d ' ' | tr , /)"

    SAN=$(openssl x509 -in "$TMPDIR/old.crt" -noout -ext subjectAltName | tail -n +2 | sed 's/ //g' | tr '\n' ',' | sed 's/,$//')
    echo $SAN

    if [[ "$SAN" == *DNS:* ]]; then
      DNS_NAME=$(echo "$SAN" | grep -o 'DNS:[^,]*' | sed 's/DNS://')
      IPS=$(echo "$SAN" | grep -o 'IPAddress:[^,]*' | sed 's/IPAddress://' | tr '\n' ',' | sed 's/,$//')

      openssl req -new -key "$TMPDIR/key.pem" \
          -subj "$SUBJECT" \
          -addext "subjectAltName = DNS:$DNS_NAME$(echo ",$IPS" | sed 's/,/,IP:/g')" \
          -out "$TMPDIR/kubelet-server.csr"


      SUBJECT_ALT_NAME="DNS:$DNS_NAME$(echo ",$IPS" | sed 's/,/,IP:/g')"
      openssl x509 -req -days 7 -sha256 \
          -in "$TMPDIR/kubelet-server.csr" \
          -CA "$CA_CRT" \
          -CAkey "$CA_KEY" \
          -CAcreateserial \
          -extfile <(printf "[ext]\nsubjectAltName=%s\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth" "$SUBJECT_ALT_NAME") \
          -extensions ext \
          -out "$TMPDIR/new.crt"

    else
      IPS=$(echo "$SAN" | grep -o 'IPAddress:[^,]*' | sed 's/IPAddress://' | tr '\n' ',' | sed 's/,$//')

      openssl req -new -key "$TMPDIR/key.pem" \
          -subj "$SUBJECT" \
          -addext "subjectAltName = IP:$(echo "$IPS" | sed 's/,/,IP:/g')" \
          -out "$TMPDIR/kubelet-server.csr"


      SUBJECT_ALT_NAME="IP:$(echo "$IPS" | sed 's/,/,IP:/g')"
      openssl x509 -req -days 365 -sha256 \
          -in "$TMPDIR/kubelet-server.csr" \
          -CA "$CA_CRT" \
          -CAkey "$CA_KEY" \
          -CAcreateserial \
          -extfile <(printf "[ext]\nsubjectAltName=%s\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth" "$SUBJECT_ALT_NAME") \
          -extensions ext \
          -out "$TMPDIR/new.crt"
    fi

    cat "$TMPDIR/new.crt" "$TMPDIR/key.pem" > "$TMPDIR/new.pem"
    openssl verify -CAfile $CA_CRT $TMPDIR/new.pem

    cp -f "$TMPDIR/new.pem" "$CURRENT_PEM"
    rm -rf $TMPDIR

    CA_CRT_BUNDLE_64=$(cat $CA_CRT_BUNDLE | base64 -w0)

    # это для кублета
    sed -i "s|certificate-authority-data: .*|certificate-authority-data: $CA_CRT_BUNDLE_64|" /etc/kubernetes/kubelet.conf
    sed -i "s|clientCAFile: .*|clientCAFile: $CA_CRT_BUNDLE|" /var/lib/kubelet/config.yaml

    systemctl restart kubelet

    kubectl_exec annotate node "${D8_NODE_HOSTNAME}" --overwrite node.deckhouse.io/kubelet-rotation-ready="$(date -u +"%Y-%m-%dT%H:%M:%S.%6NZ")"