/*
Copyright 2022 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"runtime"
	"sort"
	"strings"
	"text/template"
)

var registryTemplate = `// Code generated by "go generate ./tools/register.go". DO NOT EDIT!
package main

import (
	_ "github.com/deckhouse/deckhouse/go_lib/deckhouse-config/conversion"
{{ range $package := . }}
	_ "{{ $package }}"
{{- end }}
)
`

func cwd() string {
	_, f, _, ok := runtime.Caller(1)
	if !ok {
		panic("cannot get caller")
	}

	dir, err := filepath.Abs(f)
	if err != nil {
		panic(err)
	}

	for i := 0; i < 3; i++ { // ../../
		dir = filepath.Dir(dir)
	}

	return dir
}

func searchConversions(dir string, workDir string) ([]string, error) {
	packagePaths := make([]string, 0)

	err := filepath.Walk(dir, func(path string, f os.FileInfo, err error) error {
		if f != nil && f.IsDir() {
			if f.Name() == "internal" {
				return filepath.SkipDir
			}
			if f.Name() == "testdata" {
				return filepath.SkipDir
			}
			return nil
		}
		if filepath.Ext(path) != ".go" {
			return nil
		}
		if strings.HasSuffix(path, "_test.go") {
			return nil
		}

		trimDir := workDir
		packagePath := filepath.Join(
			deckhouseGoModuleName,
			filepath.Dir(
				strings.TrimPrefix(path, trimDir),
			),
		)
		packagePaths = append(packagePaths, packagePath)
		return nil
	})

	if err != nil {
		return nil, err
	}
	return packagePaths, nil
}

const deckhouseGoModuleName = "github.com/deckhouse/deckhouse/"

func main() {
	workDir := cwd()

	var (
		output string
		stream = os.Stdout
	)
	flag.StringVar(&output, "output", "", "output files for generated code")
	flag.Parse()

	outputs := make([]string, 0)
	outputPaths := strings.Split(output, ",")
	for _, path := range outputPaths {
		outputs = append(outputs, path)
	}

	if len(outputs) == 0 {
		panic(fmt.Errorf("no outputs specified"))
	}

	var buf bytes.Buffer

	var conversionPackages []string

	conversionDirs := []string{
		filepath.Join(workDir, "global-hooks/settings-conversion"),
	}

	moduleDirs, err := filepath.Glob(filepath.Join(workDir, "modules/*/settings-conversion"))
	if err != nil {
		panic(fmt.Errorf("search conversions for CE: %v", err))
	}
	conversionDirs = append(conversionDirs, moduleDirs...)

	moduleDirs, err = filepath.Glob(filepath.Join(workDir, "ee/modules/*/settings-conversion"))
	if err != nil {
		panic(fmt.Errorf("search conversions for EE: %v", err))
	}
	conversionDirs = append(conversionDirs, moduleDirs...)

	moduleDirs, err = filepath.Glob(filepath.Join(workDir, "ee/fe/modules/*/settings-conversion"))
	if err != nil {
		panic(fmt.Errorf("search conversions for FE: %v", err))
	}
	conversionDirs = append(conversionDirs, moduleDirs...)

	for _, dir := range conversionDirs {
		packagePaths, err := searchConversions(dir, workDir)
		if err != nil {
			panic(fmt.Errorf("search conversions: %v", err))
		}
		conversionPackages = append(conversionPackages, packagePaths...)
	}

	sort.Strings(conversionPackages)

	t := template.New("registry")
	t, err = t.Parse(registryTemplate)
	if err != nil {
		panic(fmt.Errorf("parse template: %v", err))
	}

	err = t.Execute(&buf, conversionPackages)
	if err != nil {
		panic(fmt.Errorf("execute template: %v", err))
	}

	bufBytes := buf.Bytes()
	for _, path := range outputs {
		var err error
		dir := filepath.Dir(path)
		err = os.MkdirAll(dir, 0o755)
		if err != nil {
			panic(fmt.Errorf("ensure dir %s: %v", dir, err))
		}

		stream, err = os.Create(path)
		if err != nil {
			panic(fmt.Errorf("create file %s: %v", path, err))
		}
		defer stream.Close()

		_, err = io.Copy(stream, bytes.NewReader(bufBytes))
		if err != nil {
			panic(fmt.Errorf("write to file %s: %v", path, err))
		}
	}
}
