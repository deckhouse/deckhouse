/*
Copyright 2023 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bufio"
	"bytes"
	"flag"
	"os"
	"path/filepath"
	"runtime"
	"text/template"
)

const flowSchemaTemplate = `# Schema generated by "tools/flow_schema.go" DO NOT EDIT.
# To generate run 'make generate'
---
apiVersion: flowcontrol.apiserver.k8s.io/v1beta2
kind: FlowSchema
metadata:
  name: deckhouse-flow-schemas
` +
	"{{`  {{- include \"helm_lib_module_labels\" (list . (dict \"app\" .Chart.Name)) | nindent 2 }}`}}" + `
spec:
  distinguisherMethod:
    type: ByUser
  matchingPrecedence: 1000
  priorityLevelConfiguration:
    name: deckhouse-prioritylevel
  rules:
  - resourceRules:
    - apiGroups: [""]
      clusterScope: true
      namespaces: ["*"]
      resources: ["*"]
      verbs: ["list"]

    - apiGroups: ["deckhouse.io"]
      clusterScope: true
      namespaces: ["*"]
      resources: ["*"]
      verbs: ["list"]

    - apiGroups: ["cilium.io"]
      clusterScope: true
      namespaces: ["*"]
      resources: ["*"]
      verbs: ["list"]

    subjects:
{{- range $k, $v := . }}
    - kind: ServiceAccount
      serviceAccount:
        name: "*"
        namespace: {{ $k }}
{{- end }}
`

func cwd() string {
	_, f, _, ok := runtime.Caller(1)
	if !ok {
		panic("cannot get caller")
	}

	dir, err := filepath.Abs(f)
	if err != nil {
		panic(err)
	}

	for i := 0; i < 3; i++ { // ../../
		dir = filepath.Dir(dir)
	}

	// If deckhouse repo directory is symlinked (e.g. to /deckhouse), resolve the real path.
	// Otherwise, filepath.Walk will ignore all subdirectories.
	dir, err = filepath.EvalSymlinks(dir)
	if err != nil {
		panic(err)
	}

	return dir
}

func searchNamespaces(workDir string) (map[string]struct{}, error) {
	namespaces := make(map[string]struct{})
	err := filepath.Walk(workDir, func(path string, f os.FileInfo, err error) error {
		if f != nil && f.IsDir() {
			return nil
		}
		if filepath.Base(path) != ".namespace" {
			return nil
		}
		readFile, err := os.Open(path)
		if err != nil {
			return err
		}
		defer readFile.Close()

		fileScanner := bufio.NewScanner(readFile)
		fileScanner.Split(bufio.ScanLines)

		var namespace string
		for fileScanner.Scan() {
			if len(fileScanner.Text()) > 0 {
				namespace = fileScanner.Text()
				break
			}
		}
		namespaces[namespace] = struct{}{}
		return nil
	})

	// Remove non-deckhouse namespaces
	delete(namespaces, "default")
	delete(namespaces, "kube-system")

	return namespaces, err
}

func main() {
	var (
		output string
		stream = os.Stdout
	)
	flag.StringVar(&output, "output", "", "output file for generated code")
	flag.Parse()

	if output != "" {
		var err error
		stream, err = os.Create(output)
		if err != nil {
			panic(err)
		}

		defer stream.Close()
	}

	workDir := cwd()
	namespaces, err := searchNamespaces(workDir)
	if err != nil {
		panic(err)
	}

	var buf bytes.Buffer

	t := template.New("flowSchema")
	t, err = t.Parse(flowSchemaTemplate)
	if err != nil {
		panic(err)
	}

	err = t.Execute(&buf, namespaces)
	if err != nil {
		panic(err)
	}

	stream.Write(buf.Bytes())
}
