/*
Copyright 2023 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"flag"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"text/template"
)

// This tool generates webhook configuration for linstor-scheduler-admission and excludes all
// d8-namespaces from it (except few ones)

// Specify all d8-namespaces that might be controlled by linstor-scheduler
var dontExcludeNamespaces = []string{
	"d8-monitoring",
	"d8-upmeter",
	"default",
}

var webhookTemplate = `# File generated by "tools/linstor_scheduler_webhook.go" DO NOT EDIT.
# To generate run 'make generate'
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linstor-scheduler-admission
  {{` + "`" + `{{- include "helm_lib_module_labels" (list . (dict "app" "linstor-scheduler-admission")) | nindent 2 }}` + "`" + `}}
webhooks:
- name: scheduler-admission.linstor.deckhouse.io
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
{{- range . }}
      - {{ . }}
{{- end }}
  rules:
  - apiGroups:   [""]
    apiVersions: ["v1"]
    operations:  ["CREATE"]
    resources:   ["pods"]
    scope:       "*"
  clientConfig:
    service:
      namespace: "d8-linstor"
      name: "linstor-scheduler-admission"
      path: "/mutate"
      port: 4443
    caBundle: {{` + "`" + `{{ .Values.linstor.internal.webhookCert.ca | b64enc }}` + "`" + `}}
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Ignore
  timeoutSeconds: 10
`

func main() {
	var (
		output string
		dir    string
		stream = os.Stdout
	)
	flag.StringVar(&output, "output", "", "output file for generated code")
	flag.StringVar(&dir, "dir", "", "directory with deckhouse modules")
	flag.Parse()

	// If output defined write a file
	if output != "" {
		var err error
		stream, err = os.Create(output)
		if err != nil {
			panic(err)
		}

		defer stream.Close()
	}

	namespaces := getNamespaces(dir)

	// Create template and execute it
	t := template.New("linstorSchedulerWebhook")
	t, err := t.Parse(webhookTemplate)
	if err != nil {
		panic(err)
	}
	err = t.Execute(stream, namespaces)
	if err != nil {
		panic(err)
	}
}

func getNamespaces(rootpath string) []string {

	list := make([]string, 0, 10)

	err := filepath.Walk(rootpath, func(p string, info os.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}
		if filepath.Base(path.Dir(path.Dir(p))) == "modules" && filepath.Base(p) == ".namespace" {
			content, err := ioutil.ReadFile(p)
			if err != nil {
				panic(err)
			}
			ns := strings.TrimSpace(string(content))
			for _, item := range dontExcludeNamespaces {
				if item == ns {
					return nil
				}
			}
			for _, item := range list {
				if item == ns {
					return nil
				}
			}
			list = append(list, ns)
		}
		return nil
	})
	if err != nil {
		panic(err)
	}
	return list
}
