type: object
properties:
  storageClass:
    description: |
      > **Устарел**. Используйте параметр [settings.modules.storageClass](#parameters-modules-storageclass).

      Имя StorageClass, который будет использоваться для всех компонентов Deckhouse Kubernetes Platform (Prometheus, Grafana, OpenVPN и т. д.).

        * Если значение не указано, то используется StorageClass по умолчанию, установленный в кластере.
        * Этот параметр имеет смысл использовать только в исключительных ситуациях.
        * Этот параметр применяется в процессе включения модуля.
  defaultClusterStorageClass:
    type: string
    default: null
    description: |-
      Имя StorageClass, который DKP определит как StorageClass используемый в кластере по умолчанию.

      DKP запрещает вручную добавлять или изменять default-аннотацию (`storageclass.kubernetes.io/is-default-class='true'`) у StorageClass. Используйте параметр, чтобы определять или изменять StorageClass используемый в кластере по умолчанию.

      Если значение не указано, фактический StorageClass используемый в кластере по умолчанию будет определяться в следующем порядке:

       * StorageClass в кластере, имеющий default-аннотацию (`storageclass.kubernetes.io/is-default-class='true'`);
  highAvailability:
    description: |
      Параметр глобального включения *режима отказоустойчивости* для модулей, которые его поддерживают.

      Если значение не указано, оно определяется автоматически как `true` для кластеров с более чем одним master-узлом. В остальных случаях значение определяется как `false`.
  modules:
    description: |
      Общие параметры модулей Deckhouse.
    properties:
      ingressClass:
        description: |
          Класс Ingress-контроллера (Ingress class), используемый для модулей Deckhouse.
      publicDomainTemplate:
        description: |
          Шаблон DNS-имен c ключом `%s` в качестве динамической части строки.

          Модули Deckhouse используют этот шаблон при создании Ingress-ресурсов.

          Например, для шаблона `%s.kube.company.my` модуль prometheus создаст Ingress-ресурс на адрес `grafana.kube.company.my` для доступа к Grafana.

          **Обратите внимание:**
          - Нельзя использовать в кластере DNS-имена (создавать соответствующие Ingress-ресурсы), подпадающие под указанный шаблон. Это может вызвать пересечения с создаваемыми Deckhouse Ingress-ресурсами.
          - Домен, используемый в шаблоне, не должен совпадать с доменом, указанным в параметре [clusterDomain](/installing/configuration.html#clusterconfiguration-clusterdomain). Например, если `clusterDomain` установлен в `cluster.local` (значение по умолчанию), то `publicDomainTemplate` не может быть `%s.cluster.local`.
          - Домен, используемый в шаблоне, не должен совпадать с доменом, указанным в параметре [clusterDomain](/installing/configuration.html#clusterconfiguration-clusterdomain) и внутренней сервисной зоне сети. Например, если clusterDomain установлен в cluster.local (по умолчанию), а сервисная зона сети — ru-central1.internal, то publicDomainTemplate не может быть %s.cluster.local или %s.ru-central1.internal.
          - Если параметр не указан, Ingress-ресурсы создаваться не будут.
      placement:
        description: |
          Настройки, определяющие расположение компонентов модулей Deckhouse по умолчанию.
        properties:
          customTolerationKeys:
            description: |
              Список ключей пользовательских toleration.

              Необходимо указывать, чтобы позволить планировщику размещать критически важные компоненты Deckhouse, такие как cni и csi, на выделенных узлах.
      https:
        description: |
          Способ реализации протокола HTTPS, используемый модулями Deckhouse.
        properties:
          mode:
            description: |
              Режим работы HTTPS:
              * `CertManager` — модули Deckhouse будут работать по HTTPS, самостоятельно заказывая сертификат с помощью ClusterIssuer, указанного в параметре `certManager.clusterIssuerName`;
              * `CustomCertificate` — модули Deckhouse будут работать по HTTPS, используя сертификат из пространства имен `d8-system`;
              * `Disabled` — модули Deckhouse будут работать только по HTTP (некоторые модули могут не работать, например [user-authn](/modules/user-authn/));
              * `OnlyInURI` — модули Deckhouse будут работать по HTTP, подразумевая, что перед ними стоит внешний HTTPS-балансировщик, который терминирует HTTPS. Балансировщик должен обеспечивать перенаправление с HTTP на HTTPS.
          certManager:
            properties:
              clusterIssuerName:
                description: |
                  Имя `ClusterIssuer`, используемого модулями Deckhouse.

                  В модуле [cert-manager](/modules/cert-manager/) доступны следующие `ClusterIssuer`: `letsencrypt`, `letsencrypt-staging`, `selfsigned`. Также вы можете использовать свой `ClusterIssuer`.
          customCertificate:
            properties:
              secretName:
                description: |
                  Имя Secret'а в пространстве имен `d8-system`, который будет использоваться модулями Deckhouse.

                  Указанный Secret должен быть в формате kubernetes.io/tls.
      resourcesRequests:
        description: |
          Количество ресурсов (CPU и памяти), выделяемых для работы компонентов Deckhouse, работающих на каждом узле кластера (обычно это DaemonSet'ы, например `cni-flannel`, `monitoring-ping`).

        properties:
          controlPlane:
            description: |
              Количество ресурсов (CPU и памяти), выделяемых для компонентов control plane, работающих на каждом master-узле кластера.
            properties:
              cpu:
                description: |
                  Количество CPU, выделяемых для компонентов control plane, работающих на каждом master-узле кластера.
              memory:
                description: |
                  Объем памяти, выделяемой для компонентов control plane, работающих на каждом master-узле кластера.
      storageClass:
        description: |
          Имя StorageClass, который будет использоваться для всех компонентов Deckhouse Kubernetes Platform (Prometheus, Grafana, OpenVPN и т. д.).

            * Если значение не указано, то используется StorageClass по умолчанию, установленный в кластере.
            * Этот параметр имеет смысл использовать только в исключительных ситуациях.
            * Этот параметр применяется в процессе включения модуля.
