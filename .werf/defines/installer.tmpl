# render imports for install and install standalone images
# . is dict with next params
#   Env - werf env
{{- define "installer_and_installer_standalone_generic_imports" }}
{{- $context := . -}}

- image: dhctl
  add: /dhctl/bin/dhctl
  to: /dhctl
  before: setup
- image: dev-prebuild
  add: /deckhouse
  to: /deckhouse
  includePaths:
  - modules/*/openapi/config-values.yaml
  - global-hooks/openapi/config-values.yaml
  after: setup
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/candi/images_digests.json
  before: setup
- image: version-map-artifact
  add: /version_map_{{ $context.Env }}.yml
  to: /deckhouse/candi/version_map.yml
  before: setup
- image: ssh-static
  add: /ssh/bin
  to: /bin
  before: setup
  includePaths:
  - ssh
  - ssh-add
  - ssh-agent
  - scp
{{- end }}

# render imports for install images for relocate binaries and libraries
{{- define "installer_and_installer_standalone_libraries_and_binaries_imports" }}
- image: tools/bash
  add: /usr/bin/bash
  to: /bin/bash
  before: install
- image: tools/jq
  add: /usr/bin/jq
  before: install
- image: tools/yq
  add: /usr/bin/yq
  before: install
- image: tools/sed
  add: /usr/bin/sed
  before: install
- image: tools/grep
  add: /usr/bin/grep
  before: install
- image: tools/gawk
  add: /
  to: /
  includePaths:
  - usr/bin/awk
  - usr/bin/gawk
  before: install
- image: tools/findutils
  add: /usr/bin/find
  before: install
- image: tools/coreutils
  add: /
  to: /
  includePaths:
  - usr/bin/[
  - usr/bin/b2sum
  - usr/bin/base32
  - usr/bin/base64
  - usr/bin/basename
  - usr/bin/basenc
  - usr/bin/cat
  - usr/bin/chcon
  - usr/bin/chgrp
  - usr/bin/chmod
  - usr/bin/chown
  - usr/bin/chroot
  - usr/bin/cksum
  - usr/bin/comm
  - usr/bin/coreutils
  - usr/bin/cp
  - usr/bin/csplit
  - usr/bin/cut
  - usr/bin/date
  - usr/bin/dd
  - usr/bin/df
  - usr/bin/dir
  - usr/bin/dircolors
  - usr/bin/dirname
  - usr/bin/du
  - usr/bin/echo
  - usr/bin/env
  - usr/bin/expand
  - usr/bin/expr
  - usr/bin/factor
  - usr/bin/false
  - usr/bin/fmt
  - usr/bin/fold
  - usr/bin/groups
  - usr/bin/head
  - usr/bin/hostid
  - usr/bin/id
  - usr/bin/install
  - usr/bin/join
  - usr/bin/kill
  - usr/bin/link
  - usr/bin/ln
  - usr/bin/logname
  - usr/bin/ls
  - usr/bin/md5sum
  - usr/bin/mkdir
  - usr/bin/mkfifo
  - usr/bin/mknod
  - usr/bin/mktemp
  - usr/bin/mv
  - usr/bin/nice
  - usr/bin/nl
  - usr/bin/nohup
  - usr/bin/nproc
  - usr/bin/numfmt
  - usr/bin/od
  - usr/bin/paste
  - usr/bin/pathchk
  - usr/bin/pinky
  - usr/bin/pr
  - usr/bin/printenv
  - usr/bin/printf
  - usr/bin/ptx
  - usr/bin/pwd
  - usr/bin/readlink
  - usr/bin/realpath
  - usr/bin/rm
  - usr/bin/rmdir
  - usr/bin/runcon
  - usr/bin/seq
  - usr/bin/sha1sum
  - usr/bin/sha224sum
  - usr/bin/sha256sum
  - usr/bin/sha384sum
  - usr/bin/sha512sum
  - usr/bin/shred
  - usr/bin/shuf
  - usr/bin/sleep
  - usr/bin/sort
  - usr/bin/split
  - usr/bin/stat
  - usr/bin/stdbuf
  - usr/bin/stty
  - usr/bin/sum
  - usr/bin/sync
  - usr/bin/tac
  - usr/bin/tail
  - usr/bin/tee
  - usr/bin/test
  - usr/bin/timeout
  - usr/bin/touch
  - usr/bin/tr
  - usr/bin/true
  - usr/bin/truncate
  - usr/bin/tsort
  - usr/bin/tty
  - usr/bin/uname
  - usr/bin/unexpand
  - usr/bin/uniq
  - usr/bin/unlink
  - usr/bin/uptime
  - usr/bin/users
  - usr/bin/vdir
  - usr/bin/wc
  - usr/bin/who
  - usr/bin/whoami
  - usr/bin/yes
  before: install
- image: tools/openssl
  add: /usr/lib
  to: /usr/lib
  includePaths:
  - libcrypto.so*
  - libssl.so*
  - engines-3
  - ossl-modules
  before: install
- image: tools/openssl
  add: /usr/bin/openssl
  to: /usr/bin/openssl
  before: install
- image: tools/vim
  add: /
  to: /
  includePaths:
  - usr/bin/vim
  - usr/share/vim
  before: install
- image: tools/less
  add: /usr/bin/less
  to: /usr/bin/less
  before: install
{{- end }}


# render opentofu imports for install and install standalone images
# . is dict with next params
#   Env - werf env
#   TF - TF from werf.yaml
#   Editions - Editions from werf.yaml
{{- define "installer_and_installer_standalone_opentofu_imports" }}
{{- $context := . -}}

- image: opentofu # from modules/040-terraform-manager/images/terraform-manager-base/werf.inc.yaml
  add: /opentofu/opentofu
  to: /bin/opentofu
  before: setup
{{- range $_, $edition := $context.Editions }}
  {{- if $edition.terraformProviders }}
    {{- range $_, $tfProvider := $edition.terraformProviders }}
      {{- $tf := index $context.TF $tfProvider }}

        {{- if not $tf.useOpentofu  }}
          {{- continue }}
        {{- end }}

        {{- if eq $tf.type "vcd" }}
          {{- range $version := $tf.versions }}
- image: {{ $tf.artifact }} # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /{{ $tf.artifactBinary }}-v{{ $version }}
  to: /plugins/registry.opentofu.org/{{ $tf.namespace }}/{{ $tf.type }}/{{ $version }}/linux_amd64/{{ $tf.destinationBinary }}
  before: setup
          {{- end }}
        {{- else }}
- image: {{ $tf.artifact }} # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /{{ $tf.artifactBinary }}
  to: /plugins/registry.opentofu.org/{{ $tf.namespace }}/{{ $tf.type }}/{{ $tf.version }}/linux_amd64/{{ $tf.destinationBinary }}
  before: setup
        {{- end }}
    {{- end }}
  {{- end }}
  {{- if eq $.Env $edition.name }}
    {{- break -}}
  {{- end }}
{{- end }}

{{- end }}


# render terraform imports for install and install standalone images
# . is dict with next params
#   Env - werf env
#   TF - TF from werf.yaml
#   Editions - Editions from werf.yaml
{{- define "installer_and_installer_standalone_terraform_imports" }}
{{- $context := . -}}

- image: terraform # from modules/040-terraform-manager/images/terraform-manager-base/werf.inc.yaml
  add: /terraform/terraform
  to: /bin/terraform
  before: setup
{{- range $_, $edition := $context.Editions }}
  {{- if $edition.terraformProviders }}
    {{- range $_, $tfProvider := $edition.terraformProviders }}
      {{- $tf := index $context.TF $tfProvider }}

        {{- if $tf.useOpentofu  }}
          {{- continue }}
        {{- end }}

        {{- if eq $tf.type "vcd" }}
          {{- range $version := $tf.versions }}
- image: {{ $tf.artifact }} # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /{{ $tf.artifactBinary }}-v{{ $version }}
  to: /plugins/registry.terraform.io/{{ $tf.namespace }}/{{ $tf.type }}/{{ $version }}/linux_amd64/{{ $tf.destinationBinary }}
  before: setup
          {{- end }}
        {{- else }}
- image: {{ $tf.artifact }} # from modules/040-terraform-manager/images/terraform-manager-{PROVIDER}/werf.inc.yaml
  add: /{{ $tf.artifactBinary }}
  to: /plugins/registry.terraform.io/{{ $tf.namespace }}/{{ $tf.type }}/{{ $tf.version }}/linux_amd64/{{ $tf.destinationBinary }}
  before: setup
        {{- end }}
    {{- end }}
  {{- end }}
  {{- if eq $.Env $edition.name }}
    {{- break -}}
  {{- end }}
{{- end }}

{{- end }}


# render shell scripts for preparing installer image
# . is dict with keys:
#   rootContext - context with .Files
#   CI_COMMIT_TAG - CI_COMMIT_TAG env
#   Env - edition set up from ci
{{- define "installer_prepare_with_shell" }}
{{- $context := . -}}
{{- $rootContext := $context.rootContext -}}

shell:
  setup:
  - |
    ln -fs /dhctl /usr/bin/dhctl
    cat <<"EOD" > /etc/inputrc
    {{- $rootContext.Files.Get (printf "%sdeckhouse-controller/files/inputrc" $rootContext.prefix) | nindent 4 }}
    EOD

    ln -s /bin/bash /bin/sh
    cat <<"EOD" > /etc/bashrc
    PS1='\[\033[01;30m\][deckhouse]\[\033[00m\] \[\033[01;33m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '

    EOD

    mkdir -p /var/run/dhctl

    mkdir -p /root
    ln -s /etc/bashrc /root/.bashrc
    ln -s /etc/bashrc /.bashrc

    mkdir -p /etc/vim
    ln -s /usr/bin/vim /usr/bin/vi
    cat <<"EOD" > /etc/vim/vimrc.local
    {{- $rootContext.Files.Get (printf "%sdeckhouse-controller/files/vimrc.local" $rootContext.prefix) | nindent 4 }}
    EOD

    echo 'eval "$(dhctl --completion-script-bash)"' >> /etc/bashrc
    echo '{{- $context.CI_COMMIT_TAG }}' > /deckhouse/version
    echo '{{- $context.Env | default "unknown" }}' > /deckhouse/edition

    # add bash envsubst
    # from https://gist.github.com/gmolveau/2770f2d05fa5825e1ffdb5a61f0c1283
    # envsubst is used in the e2e tests, remove it when we move tests to commander
    cat << "EOD" > /bin/envsubst
    #!/bin/bash

    usage() {
        echo "Usage: $0 [OPTIONS] [file_path]"
        echo "OPTIONS:"
        echo "  -p, --prefix PREFIX      Specify the prefix for environment variables"
        echo "  -h, --help               Show this help message"
        echo "If no file_path is provided, the script reads from stdin."
        exit 1
    }

    # Function to replace environment variables with a prefix in a text file
    replace_env_variables() {
        local content="$1"
        local prefix="$2"

        # Get environment variables with the specified prefix (only variable names)
        variables=$(env | grep "^${prefix}" | sed -e "s/${prefix}\([^=]*\)=.*/\1/")

        # Loop through variables and simulate replacement in the content
        while IFS= read -r variable; do
            key="${prefix}${variable}"
            value=$(printenv "${key}")
            if [ -n "${value}" ]; then
                content=$(echo "${content}" | sed "s|\${${key}}|${value}|g")
            fi
        done <<< "${variables}"

        echo "${content}"
    }

    # Initialize flags with default values
    file_path=""
    prefix=""

    # Parse flags
    while [[ $# -gt 0 ]]; do
        key="$1"

        case $key in
            -p | --prefix)
                prefix="$2"
                shift # past argument
                shift # past value
                ;;
            -h | --help)
                usage
                ;;
            *)
                file_path="$1"
                shift # past value
                ;;
        esac
    done

    # If no file path provided or stdin specified, read from stdin
    if [ -z "${file_path}" ] || [ "${file_path}" == "-" ]; then
        content=$(cat -)
    else
        # Check if file exists
        if [ ! -f "${file_path}" ]; then
            echo "File ${file_path} not found."
            exit 1
        fi
        content=$(< "${file_path}")
    fi

    replace_env_variables "${content}" "${prefix}"
    EOD
    chown 64535:64535 /bin/envsubst
    chmod +x /bin/envsubst
{{- end }}


# render installer standalone setup script
# . is dict with next params
#   CI_COMMIT_TAG - CI_COMMIT_TAG env
#   Env - edition set up from ci
{{- define "installer_standalone_setup_script" }}
{{- $context := . -}}

- echo '{{- $context.CI_COMMIT_TAG }}' > /image/deckhouse/version
- echo '{{- $context.Env | default "unknown" }}' > /image/deckhouse/edition
- cd /image
- tar -czf /dhctl-{{- $context.CI_COMMIT_TAG }}.x86_64.tar.gz *

{{- end }}


# render installer standalone setup script
# . is dict with next params
#   CI_COMMIT_TAG - CI_COMMIT_TAG env
#   Images - base images dict
{{- define "installer_standalone_image" }}
{{- $context := . -}}

image: dev/install-standalone
fromImage: builder/scratch
import:
- image: install-standalone-builder
  add: /dhctl-{{- $context.CI_COMMIT_TAG }}.x86_64.tar.gz
  to: /
  before: setup

{{- end }}
