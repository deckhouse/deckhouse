# put image with vex mitigations to registry.
# Mitigations can be found in the known_vulnerabilities.vex file in the image directory
# input parameters:
# list of $ and image name.
# list ($ "common/kubernetes")
{{- define "vex mitigation" }}
  {{- $context := index . 0 }}
  {{- $imageName := index . 1 }}
  {{- $knownVulnPath := (printf "/%smodules/%s-%s/images/%s/known_vulnerabilities.vex" $context.ModulePath $context.ModulePriority $context.ModuleName $context.ImageName) }}
  {{- $vexFile := false }}
  {{- if eq (len ($context.Files.Glob $knownVulnPath)) 1 }}
    {{- $vexFile = true }}
  {{- end }}
  {{- if $vexFile }}
---
image: {{ $imageName }}-vex-artifact
fromImage: base/distroless
final: true
secrets:
- id: REGISTRY_USER
  env: REGISTRY_USER
- id: REGISTRY_PASSWORD
  env: REGISTRY_PASSWORD
#- id: COSIGN_VAULT_ADDRESS
#  env: COSIGN_VAULT_ADDRESS
- id: COSIGN_VAULT_KEY
  env: COSIGN_VAULT_KEY
#- id: COSIGN_AUTH_ROLE
#  env: COSIGN_AUTH_ROLE
- id: COSIGN_TRANSIT_SECRET_ENGINE_PATH
  env: COSIGN_TRANSIT_SECRET_ENGINE_PATH
- id: ACTIONS_ID_TOKEN_REQUEST_TOKEN
  env: ACTIONS_ID_TOKEN_REQUEST_TOKEN
- id: ACTIONS_ID_TOKEN_REQUEST_URL
  env: ACTIONS_ID_TOKEN_REQUEST_URL
import:
- image: tools/cosign
  add: /usr/bin/cosign
  to: /usr/bin/cosign
  before: install
- image: tools/jq
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: install
- image: tools/curl
  add: /usr/bin/curl-static
  to: /usr/bin/curl
  before: install
- image: tools/bash
  add: /usr/bin/bash
  to: /bin/bash
git:
- add: {{ $knownVulnPath }}
  to: /known_vulnerabilities.vex
  stageDependencies:
    setup:
    - 'known_vulnerabilities.vex'
dependencies:
- image: {{ $imageName }}
  before: install
  imports:
  - type: ImageDigest
    targetEnv: IMAGE_DIGEST
  - type: ImageRepo
    targetEnv: IMAGE_REPO
shell:
  beforeInstall:
  {{- include "alpine packages proxy" $context | nindent 2 }}
  - apk add --no-cache curl
  install:
  - export REGISTRY_USER="$(cat /run/secrets/REGISTRY_USER)"
  - export REGISTRY_PASSWORD="$(cat /run/secrets/REGISTRY_PASSWORD)"
  - export VAULT_ADDR="https://seguro.flant.com"
  - export COSIGN_VAULT_KEY="$(cat /run/secrets/COSIGN_VAULT_KEY)"
  - export COSIGN_AUTH_ROLE="dh-signer-dev_dh-signer-dev"
  - export TRANSIT_SECRET_ENGINE_PATH="$(cat /run/secrets/COSIGN_TRANSIT_SECRET_ENGINE_PATH)"
  - export ACTIONS_ID_TOKEN_REQUEST_TOKEN="$(cat /run/secrets/ACTIONS_ID_TOKEN_REQUEST_TOKEN)"
  - export ACTIONS_ID_TOKEN_REQUEST_URL="$(cat /run/secrets/ACTIONS_ID_TOKEN_REQUEST_URL)"
  - |
    ACTIONS_ID_TOKEN=$(jq -r .value <<< $(curl -fsH "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github-access-aud" )) \
    VAULT_TOKEN="$(curl -X POST "${VAULT_ADDR}/v1/auth/github/login" -d '{"role":"'${COSIGN_AUTH_ROLE}'","jwt":"'${ACTIONS_ID_TOKEN}'"}' | jq -r '.auth.client_token')" \
    cosign attest \
      --registry-username="${REGISTRY_USER}" \
      --registry-password="${REGISTRY_PASSWORD}" \
      --predicate /known_vulnerabilities.vex \
      --type openvex \
      --key hashivault://${COSIGN_VAULT_KEY} \
      --tlog-upload=false \
      -y \
      "${IMAGE_REPO}@${IMAGE_DIGEST}"
  {{- end }}
{{- end }}
#    REGISTRY_USER="$(cat /run/secrets/REGISTRY_USER)" \
#    REGISTRY_PASSWORD="$(cat /run/secrets/REGISTRY_PASSWORD)" \
#    VAULT_ADDR="$(cat /run/secrets/COSIGN_VAULT_ADDRESS)" \
#    COSIGN_VAULT_KEY="$(cat /run/secrets/COSIGN_VAULT_KEY)" \
#    COSIGN_AUTH_ROLE="$(cat /run/secrets/COSIGN_AUTH_ROLE)" \
#    TRANSIT_SECRET_ENGINE_PATH="$(cat /run/secrets/COSIGN_TRANSIT_SECRET_ENGINE_PATH)" \
#    ACTIONS_ID_TOKEN_REQUEST_TOKEN="$(cat /run/secrets/ACTIONS_ID_TOKEN_REQUEST_TOKEN)" \
#    ACTIONS_ID_TOKEN_REQUEST_URL="$(cat /run/secrets/ACTIONS_ID_TOKEN_REQUEST_URL)" \
