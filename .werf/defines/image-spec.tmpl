# Add image spec with user deckhouse (64535:64535) to final container
# . is dict with keys:
#  envs - optional dict (env name string -> value string) with additional envs that container needs
#  labels - optional dict (key string -> value string) with additional labels that container should have
#  entrypoint - optional list of strings with entrypoint that container should have. It will be converted to json
#  work_dir - optional string with working dir that container should have
{{- define "image_spec_with_user_deckhouse" }}
{{- $context := . }}

{{- $newContext := dict "user" "64535" }}

{{- if hasKey $context "envs" -}}
  {{- $_ := set $newContext "envs" (get $context "envs") }}
{{- end }}

{{- if hasKey $context "labels" -}}
  {{- $_ := set $newContext "labels" (get $context "labels") }}
{{- end }}

{{- if hasKey $context "entrypoint" -}}
  {{- $_ := set $newContext "entrypoint" (get $context "entrypoint") }}
{{- end }}

{{- if hasKey $context "work_dir" -}}
  {{- $_ := set $newContext "work_dir" (get $context "work_dir") }}
{{- end }}

{{ include "image_spec_for_final_container" $newContext }}

{{- end }}

# Add image spec with to final container
# . is dict with keys:
#  user - required string with user id
#  group - optional string with group id. If empty will user user id as group id
#  envs - optional dict (env name string -> value string) with additional envs that container needs
#  labels - optional dict (key string -> value string) with additional labels that container should have
#  entrypoint - optional list of strings with entrypoint that container should have. It will be converted to json
#  work_dir - optional string with working dir that container should have
{{- define "image_spec_for_final_container" }}
{{- $context := . }}

{{- if not (hasKey $context "user") -}}
  {{- fail "user context key should pass" -}}
{{- end }}
{{- $user := get $context "user" }}

{{- if not (kindIs "string" $user) }}
  {{- fail "user context key should be string" -}}
{{- end }}

{{- if empty $user }}
  {{- fail "user context key should not be empty" -}}
{{- end }}

{{- $group := $user }}
{{- if hasKey $context "group" -}}
  {{- $group = get $context "group" }}

  {{- if not (kindIs "string" $group) }}
    {{- fail "group context key should be string" -}}
  {{- end }}

  {{- if empty $group -}}
    {{- fail "group context key should not be empty" -}}
  {{- end }}
{{- end }}

{{- $envs := dict }}
{{- if hasKey $context "envs" -}}
  {{- $envs = get $context "envs" }}

  {{- if not (kindIs "map" $envs) }}
    {{- fail "envs context key should be dict" -}}
  {{- end }}
{{- end }}

{{- $labels := dict }}
{{- if hasKey $context "labels" -}}
  {{- $labels = get $context "labels" }}

  {{- if not (kindIs "map" $labels) }}
    {{- fail "labels context key should be dict" -}}
  {{- end }}
{{- end }}

{{- $entrypoint := list }}
{{- if hasKey $context "entrypoint" -}}
  {{- $entrypoint = get $context "entrypoint" }}

  {{- if not (kindIs "slice" $entrypoint) }}
    {{- fail "entrypoint context key should be slice" -}}
  {{- end }}
{{- end }}

{{- $work_dir := "" }}
{{- if hasKey $context "work_dir" -}}
  {{- $work_dir = get $context "work_dir" }}

  {{- if not (kindIs "string" $work_dir) }}
    {{- fail "work_dir context key should be string" -}}
  {{- end }}
{{- end }}

imageSpec:
  config:
    user: "{{ printf "%s:%s" $user $group }}"
  {{ if not (empty $envs) }}
    env: {{ $envs | toJson }}
  {{ end }}
  {{ if not (empty $labels) }}
    labels: {{ $labels | toJson }}
  {{ end }}
  {{ if not (empty $entrypoint) }}
    entrypoint: {{ $entrypoint | toJson }}
  {{ end }}
  {{ if not (empty $work_dir) }}
    workingDir: "{{ $work_dir }}"
  {{ end }}
{{- end }}
