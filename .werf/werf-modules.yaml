# modules_images
{{- define "module_image_template" }}
  {{- if eq .ImageInstructionType "Dockerfile" }}
---
image: {{ .ModuleName }}/{{ .ImageName }}
context: {{ .ModulePath }}modules/{{ .ModulePriority }}-{{ .ModuleName }}/images/{{ .ImageName }}
dockerfile: Dockerfile
args:
  BASE_ALPINE: {{ .Images.BASE_ALPINE }}
  BASE_ALPINE_DEV: {{ .Images.BASE_ALPINE_DEV }}
  BASE_ALT: {{ .Images.BASE_ALT }}
  BASE_ALT_DEV: {{ .Images.BASE_ALT_DEV }}
  BASE_GOLANG_ALPINE: {{ .Images.BASE_GOLANG_ALPINE }}
  BASE_GOLANG_ALPINE_DEV: {{ .Images.BASE_GOLANG_ALPINE_DEV }}
  BASE_GOLANG_16_ALPINE: {{ .Images.BASE_GOLANG_16_ALPINE }}
  BASE_GOLANG_16_ALPINE_DEV: {{ .Images.BASE_GOLANG_16_ALPINE_DEV }}
  BASE_GOLANG_17_ALPINE: {{ .Images.BASE_GOLANG_17_ALPINE }}
  BASE_GOLANG_17_ALPINE_DEV: {{ .Images.BASE_GOLANG_17_ALPINE_DEV }}
  BASE_GOLANG_BUSTER: {{ .Images.BASE_GOLANG_BUSTER }}
  BASE_GOLANG_BUSTER_DEV: {{ .Images.BASE_GOLANG_BUSTER_DEV }}
  BASE_GOLANG_16_BUSTER: {{ .Images.BASE_GOLANG_16_BUSTER }}
  BASE_GOLANG_17_BUSTER: {{ .Images.BASE_GOLANG_17_BUSTER }}
  BASE_GOLANG_18_ALPINE: {{ .Images.BASE_GOLANG_18_ALPINE }}
  BASE_GOLANG_18_ALPINE_DEV: {{ .Images.BASE_GOLANG_18_ALPINE_DEV }}
  BASE_GOLANG_19_ALPINE: {{ .Images.BASE_GOLANG_19_ALPINE }}
  BASE_GOLANG_19_ALPINE_DEV: {{ .Images.BASE_GOLANG_19_ALPINE_DEV }}
  BASE_GOLANG_19_BULLSEYE: {{ .Images.BASE_GOLANG_19_BULLSEYE }}
  BASE_GOLANG_19_BULLSEYE_DEV: {{ .Images.BASE_GOLANG_19_BULLSEYE_DEV }}
  BASE_GOLANG_19_BUSTER: {{ .Images.BASE_GOLANG_19_BUSTER }}
  BASE_GOLANG_20_ALPINE: {{ .Images.BASE_GOLANG_20_ALPINE }}
  BASE_GOLANG_20_ALPINE_DEV: {{ .Images.BASE_GOLANG_20_ALPINE_DEV }}
  BASE_GOLANG_20_BULLSEYE: {{ .Images.BASE_GOLANG_20_BULLSEYE }}
  BASE_GOLANG_20_BULLSEYE_DEV: {{ .Images.BASE_GOLANG_20_BULLSEYE_DEV }}
  BASE_GOLANG_20_BUSTER: {{ .Images.BASE_GOLANG_20_BUSTER }}
  BASE_GOLANG_21_ALPINE: {{ .Images.BASE_GOLANG_21_ALPINE }}
  BASE_GOLANG_21_ALPINE_DEV: {{ .Images.BASE_GOLANG_21_ALPINE_DEV }}
  BASE_GOLANG_21_BULLSEYE: {{ .Images.BASE_GOLANG_21_BULLSEYE }}
  BASE_GOLANG_21_BULLSEYE_DEV: {{ .Images.BASE_GOLANG_21_BULLSEYE_DEV }}
  BASE_GOLANG_22_ALPINE: {{ .Images.BASE_GOLANG_22_ALPINE }}
  BASE_GOLANG_22_ALPINE_DEV: {{ .Images.BASE_GOLANG_22_ALPINE_DEV }}
  BASE_GOLANG_22_BULLSEYE: {{ .Images.BASE_GOLANG_22_BULLSEYE }}
  BASE_GOLANG_23_ALPINE: {{ .Images.BASE_GOLANG_23_ALPINE }}
  BASE_GOLANG_23_ALPINE_DEV: {{ .Images.BASE_GOLANG_23_ALPINE_DEV }}
  BASE_GOLANG_23_BULLSEYE: {{ .Images.BASE_GOLANG_23_BULLSEYE }}
  BASE_NGINX_ALPINE:  {{ .Images.BASE_NGINX_ALPINE }}
  BASE_NGINX_ALPINE_DEV:  {{ .Images.BASE_NGINX_ALPINE_DEV }}
  BASE_NODE_16_ALPINE: {{ .Images.BASE_NODE_16_ALPINE }}
  BASE_NODE_16_ALPINE_DEV: {{ .Images.BASE_NODE_16_ALPINE_DEV }}
  BASE_PYTHON_ALPINE:  {{ .Images.BASE_PYTHON_ALPINE }}
  BASE_PYTHON_ALPINE_DEV:  {{ .Images.BASE_PYTHON_ALPINE_DEV }}
  BASE_UBUNTU: {{ .Images.BASE_UBUNTU }}
  BASE_UBUNTU_BIONIC: {{ .Images.BASE_UBUNTU_BIONIC }}
  BASE_UBUNTU_DEV: {{ .Images.BASE_UBUNTU_DEV }}
  BASE_JEKYLL: {{ .Images.BASE_JEKYLL }}
  BASE_SCRATCH: {{ .Images.BASE_SCRATCH }}
  SOURCE_REPO: {{ .SOURCE_REPO }}
  CLOUD_PROVIDERS_SOURCE_REPO: {{ .CLOUD_PROVIDERS_SOURCE_REPO }}
  OBSERVABILITY_SOURCE_REPO: {{ .OBSERVABILITY_SOURCE_REPO }}
  STRONGHOLD_PULL_TOKEN: {{ .STRONGHOLD_PULL_TOKEN }}
  DECKHOUSE_PRIVATE_REPO: {{ .DECKHOUSE_PRIVATE_REPO }}
  # proxies for various packages
  GOPROXY: {{ .GOPROXY }}
  {{- if not (has (list .ModuleName .ImageName | join "/") (list "common/distroless")) }}
dependencies:
- image: common/distroless
  imports:
  - type: ImageName
    targetBuildArg: BASE_DISTROLESS
- image: common/iptables-wrapper
  imports:
  - type: ImageName
    targetBuildArg: BASE_IPTABLES_WRAPPER
  {{- end }}
  {{- else }}
  {{- tpl .ImageBuildData . }}
  {{- end }}
  {{- end }}

  {{- $Root := . }}
  {{- $ModulesImagesDigestList := list }}
  {{- $ExcludedModulesDict := dict }}

# Collect images if desired for editions
#
# depending on the rules for skipping modules in the editions.yaml
# file and the used assembly mechanism (werf, docker), we form modules for assembly
  {{- $ModulesImagesBuildFiles := dict }}
  {{- range $_, $edition := $.Editions }}
  {{- if not $edition.skipCollectImages }}
  {{ $ModulesImagesBuildFiles = merge $ModulesImagesBuildFiles ($.Files.Glob (printf "%s/*/images/*/{Dockerfile,werf.inc.yaml}" $edition.modulesDir)) }}
  {{- end }}

    # fill in "$_" data for assembly
    {{- if eq $.Env $edition.name }}
    {{- if $edition.excludeModules }}
    {{- range $_, $exludeModuleName := $edition.excludeModules }}
    {{- $_ := set $ExcludedModulesDict (printf "%s" $exludeModuleName) "true" }}
    {{- end }}
    {{- end }}

    {{- break -}}
    {{- end }}
    {{- end }}

    {{- range $path, $content := $ModulesImagesBuildFiles  }}
    {{- $ctx := dict }}
    {{- if regexMatch "/werf.inc.yaml$" $path }}
    {{- $_ := set $ctx "ImageInstructionType" "Stapel" }}
    {{- else }}
    {{- $_ := set $ctx "ImageInstructionType" "Dockerfile" }}
    {{- end }}
    {{- $ImageData := regexReplaceAll "^(.*)modules/([0-9]+)-([a-z0-9-]+)/images/([0-9a-z-_]+)/(Dockerfile|werf.inc.yaml)$" $path "${1}#${2}#${3}#${4}" | split "#" }}
      {{- $moduleName := $ImageData._2 }}
      # exclude modules and images from editions
      {{- if hasKey $ExcludedModulesDict $moduleName }}
      {{- continue -}}
      {{- end }}

      {{- $_ := set $ctx "CandiVersionMap" $.CandiVersionMap }}
      {{- $_ := set $ctx "ModulePath" $ImageData._0 }}
      {{- $_ := set $ctx "ModulePriority" $ImageData._1 }}
      {{- $_ := set $ctx "ModuleName" $moduleName }}
      {{- $_ := set $ctx "ImageName" $ImageData._3 }}
      {{- $_ := set $ctx "ImageBuildData" $content }}
      {{- $_ := set $ctx "Files" $Root.Files }}
      {{- $_ := set $ctx "Env" $Root.Env }}

      {{- $_ := set $ctx "Images" $Root.Images }}
      {{- $_ := set $ctx "CandiVersionMap" $Root.CandiVersionMap }}
      {{- $_ := set $ctx "TF" $Root.TF }}
      {{- $_ := set $ctx "SOURCE_REPO" $Root.SOURCE_REPO }}
      {{- $_ := set $ctx "CLOUD_PROVIDERS_SOURCE_REPO" $Root.CLOUD_PROVIDERS_SOURCE_REPO }}
      {{- $_ := set $ctx "OBSERVABILITY_SOURCE_REPO" $Root.OBSERVABILITY_SOURCE_REPO }}
      {{- $_ := set $ctx "GOPROXY" $Root.GOPROXY }}
      {{- $_ := set $ctx "DECKHOUSE_PRIVATE_REPO" $Root.DECKHOUSE_PRIVATE_REPO }}
      {{- $_ := set $ctx "STRONGHOLD_PULL_TOKEN" $Root.STRONGHOLD_PULL_TOKEN }}
      {{- $_ := set $ctx "DistroPackagesProxy" $Root.DistroPackagesProxy }}
      {{- $_ := set $ctx "CargoProxy" $Root.CargoProxy }}
---
{{ include "module_image_template" $ctx }}
  {{- range $ImageYamlMainfest := regexSplit "\n?---[ \t]*\n" (include "module_image_template" $ctx) -1 }}
  {{- $ImageManifest := $ImageYamlMainfest | fromYaml }}
  {{- if $ImageManifest.image }}
  {{- if ne $ImageManifest.final false }}
  {{- $ModulesImagesDigestList = append $ModulesImagesDigestList $ImageManifest.image }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
---
image: images-digests
from: {{ .Images.BASE_ALPINE }}
dependencies:
  {{- range $imageDigest := $ModulesImagesDigestList }}
  {{- $ModuleNameCamel := $imageDigest | splitList "/" | first | camelcase | untitle }}
  {{- $ImageDigestCamel  := $imageDigest | splitList "/" | last  | camelcase | untitle }}
- image: {{ $imageDigest }}
  before: setup
  imports:
  - type: ImageDigest
    targetEnv: MODULE_IMAGE_DIGEST_{{ $ModuleNameCamel }}_{{ $ImageDigestCamel }}
  {{- end }}
import:
- artifact: jq
  add: /usr/bin/jq
  to: /usr/bin/jq
  before: setup
shell:
  setup:
  - |
    touch digests_full.lst
    # Here we have list of records like "MODULE_IMAGE_DIGEST_moduleName_sha256:imageDigest", which we parse
    for line in `printenv | grep MODULE_IMAGE_DIGEST_ | cut -d "=" -f 1`
    do
      digestKey=`echo $line | cut -f 4- -d '_'`
      imageDigest=`printenv $line | grep -Eo "sha256:[a-f0-9]+"`
      echo $digestKey'='$imageDigest >> digests_full.lst
    done
    cat digests_full.lst | jq -Rn '
      reduce inputs as $i (
        {};
        . * (
          $i | sub("=";"_") |
          split("_") as [$moduleName, $imageName, $digest] |
          {($moduleName): {($imageName): $digest}}
        )
      )
    ' > /images_digests.json
---
