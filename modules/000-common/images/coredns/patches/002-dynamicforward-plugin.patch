diff --git a/core/dnsserver/zdirectives.go b/core/dnsserver/zdirectives.go
index 56174955c..f106f02b5 100644
--- a/core/dnsserver/zdirectives.go
+++ b/core/dnsserver/zdirectives.go
@@ -63,4 +63,5 @@ var Directives = []string{
 	"on",
 	"sign",
 	"view",
+	"dynamicforward",
 }
diff --git a/core/plugin/zplugin.go b/core/plugin/zplugin.go
index 12bb4ce15..b9b80109e 100644
--- a/core/plugin/zplugin.go
+++ b/core/plugin/zplugin.go
@@ -20,6 +20,7 @@ import (
 	_ "github.com/coredns/coredns/plugin/dns64"
 	_ "github.com/coredns/coredns/plugin/dnssec"
 	_ "github.com/coredns/coredns/plugin/dnstap"
+	_ "github.com/coredns/coredns/plugin/dynamicforward"
 	_ "github.com/coredns/coredns/plugin/erratic"
 	_ "github.com/coredns/coredns/plugin/errors"
 	_ "github.com/coredns/coredns/plugin/etcd"
diff --git a/man/coredns-dynamicforward.7 b/man/coredns-dynamicforward.7
new file mode 100644
index 000000000..8b0e954b3
--- /dev/null
+++ b/man/coredns-dynamicforward.7
@@ -0,0 +1,90 @@
+.Dd January 25, 2025
+.Dt DYNAMICFORWARD 8
+.Os
+.Sh NAME
+.Nm dynamicforward
+.Nd CoreDNS plugin for dynamically updating forwarders using Kubernetes Service
+.Sh SYNOPSIS
+.Nm dynamicforward
+.Op Fl options
+.Sh DESCRIPTION
+The
+.Nm dynamicforward
+plugin allows CoreDNS to dynamically update its list of DNS forwarders based on changes to Kubernetes Service of upstream DNS server. This is useful in environments where DNS servers are ephemeral or their configuration is managed dynamically.
+
+The plugin can be configured in the CoreDNS Corefile with the following syntax:
+.Bd -literal -offset indent
+dynamicforward {
+    namespace <namespace>
+    service_name <servicename>
+    port_name <portname>
+    expire <duration>
+    health_check <duration>
+    force_tcp
+    prefer_udp
+}
+.Ed
+
+.Sh OPTIONS
+.Bl -tag -width indent
+.It Xo
+.Cm namespace
+.Ar <namespace>
+.Xc
+Specifies the Kubernetes namespace where the upstream DNS Service is. This parameter is required.
+
+.It Xo
+.Cm service_name
+.Ar <servicename>
+.Xc
+Defines the upstream DNS Service name.
+
+.It Xo
+.Cm portname
+.Ar <portname>
+.Xc
+Specifies the port name responsible for DNS serving in Service resource.
+
+.It Xo
+.Cm expire
+.Ar <duration>
+.Xc
+Expire (cached) connections after this time, the default is 10s.
+
+.It Xo
+.Cm health_check
+.Ar <duration>
+.Xc
+Configure the behaviour of health checking of the upstream servers. use a different duration for health checking, the default duration is 0.5s.
+.El
+
+.Sh USAGE
+To use the plugin, include it in the Corefile configuration for your CoreDNS server. An example configuration is shown below:
+.Bd -literal -offset indent
+.:53 {
+    errors
+    log
+    dynamicforward {
+        namespace kube-system
+        service_name kube-dns
+        port_name dns
+        expire 10m
+        health_check 5s
+        prefer_udp
+    }
+}
+.Ed
+
+The plugin will automatically watch related to specified Service's EndpointSlices. Whenever an EndpointSlice is added, updated, or deleted, the list of forward servers will be updated dynamically.
+
+.Sh LOGGING
+The plugin logs important events such as updates to the forwarder list and errors encountered during operation.
+
+.Sh FILES
+None.
+
+.Sh BUGS
+No known bugs. If you encounter issues, please report them to the project's issue tracker.
+
+.Sh SEE ALSO
+.Xr coredns 8 ,
diff --git a/plugin.cfg b/plugin.cfg
index 36bd367da..ae2c6fe82 100644
--- a/plugin.cfg
+++ b/plugin.cfg
@@ -72,3 +72,4 @@ whoami:whoami
 on:github.com/coredns/caddy/onevent
 sign:sign
 view:view
+dynamicforward:dynamicforward
diff --git a/plugin/dynamicforward/dynamicforward.go b/plugin/dynamicforward/dynamicforward.go
new file mode 100644
index 000000000..6eac767f9
--- /dev/null
+++ b/plugin/dynamicforward/dynamicforward.go
@@ -0,0 +1,71 @@
+package dynamicforward
+
+import (
+	"context"
+	"github.com/coredns/coredns/plugin"
+	"github.com/coredns/coredns/plugin/forward"
+	"github.com/coredns/coredns/plugin/pkg/proxy"
+	"github.com/coredns/coredns/plugin/pkg/transport"
+	"github.com/miekg/dns"
+	"log"
+	"sync"
+)
+
+// DynamicForward main struct of plugin
+type DynamicForward struct {
+	Next        plugin.Handler
+	Namespace   string
+	ServiceName string
+	forwardTo   []string
+	mu          sync.RWMutex
+	forwarder   *forward.Forward
+	options     proxy.Options
+	cond        *sync.Cond
+}
+
+func (df *DynamicForward) ServeDNS(ctx context.Context, w dns.ResponseWriter, r *dns.Msg) (int, error) {
+	//wait forwarder
+	df.cond.L.Lock()
+
+	if df.forwarder == nil {
+		df.cond.Wait()
+	}
+
+	df.cond.L.Unlock()
+
+	return df.forwarder.ServeDNS(ctx, w, r)
+}
+
+// UpdateForwardServers update list servers for forward requests
+func (df *DynamicForward) UpdateForwardServers(newServers []string, config DynamicForwardConfig) {
+	df.cond.L.Lock()
+
+	newForwarder := forward.New()
+
+	for _, server := range newServers {
+		proxyInstance := proxy.NewProxy(server, server, transport.DNS)
+		proxyInstance.SetExpire(config.Expire)
+		proxyInstance.SetReadTimeout(config.HealthCheck)
+		newForwarder.SetProxy(proxyInstance)
+		newForwarder.SetProxyOptions(df.options)
+	}
+
+	oldForwarder := df.forwarder
+
+	// Fill up list servers
+	df.forwarder = newForwarder
+	df.forwardTo = newServers
+	df.cond.Broadcast()
+	df.cond.L.Unlock()
+
+	if oldForwarder != nil {
+		for _, oldProxy := range oldForwarder.List() {
+			oldProxy.Stop()
+		}
+	}
+
+	log.Printf("[dynamicforward] Forward servers updated: %v", newServers)
+}
+
+// Name return plugin name
+func (df *DynamicForward) Name() string { return "dynamicforward" }
diff --git a/plugin/dynamicforward/setup.go b/plugin/dynamicforward/setup.go
new file mode 100644
index 000000000..c8f3e3298
--- /dev/null
+++ b/plugin/dynamicforward/setup.go
@@ -0,0 +1,67 @@
+package dynamicforward
+
+import (
+	"context"
+	"github.com/coredns/caddy"
+	"github.com/coredns/coredns/core/dnsserver"
+	"github.com/coredns/coredns/plugin"
+	"log"
+	"sync"
+)
+
+func init() { plugin.Register("dynamicforward", setup) }
+
+func setup(c *caddy.Controller) error {
+
+	version := "0.3.7"
+
+	log.Printf("\033[34m[dynamicforward] version: %s\033[0m\n", version)
+
+	// parse config
+	config, err := ParseConfig(c)
+	if err != nil {
+		return err
+	}
+
+	dynamicForwardPlugin := &DynamicForward{
+		Namespace:   config.Namespace,
+		ServiceName: config.ServiceName, //kubernetes.io/service-name=d8-kube-dns
+		forwarder:   nil,
+		options:     config.opts,
+		cond:        sync.NewCond(&sync.Mutex{}),
+	}
+
+	// Add the Plugin to CoreDNS, so Servers can use it in their plugin chain.
+	dnsserver.GetConfig(c).AddPlugin(func(next plugin.Handler) plugin.Handler {
+		dynamicForwardPlugin.Next = next
+		return dynamicForwardPlugin
+	})
+
+	// Context for properly shutdown goroutine
+	ctx, cancel := context.WithCancel(context.Background())
+
+	c.OnStartup(func() error {
+		log.Printf("[dynamicforward] Starting with namespace=%s, service_name=%s\n", config.Namespace, config.ServiceName)
+		// Start go routine for watch EndpointSlice
+		go func() {
+			err := startEndpointSliceWatcher(ctx, config.Namespace, config.ServiceName, config.PortName, func(newServers []string) {
+				dynamicForwardPlugin.UpdateForwardServers(newServers, *config)
+				log.Printf("[dynamicforward] Updated servers namespace%s, service_name=%s\n: %v", config.Namespace, config.ServiceName, newServers)
+			})
+
+			if err != nil {
+				log.Printf("[dynamicforward] Error starting EndpointSlice watcher with label kubernetes.io/service-name=%s: %v", config.ServiceName, err)
+			}
+		}()
+
+		return nil
+	})
+
+	c.OnShutdown(func() error {
+		log.Printf("[dynamicforward] Shutting down with namespace=%s\n", config.Namespace)
+		cancel()
+		return nil
+	})
+
+	return nil
+}
diff --git a/plugin/dynamicforward/utils.go b/plugin/dynamicforward/utils.go
new file mode 100644
index 000000000..7609dcd2d
--- /dev/null
+++ b/plugin/dynamicforward/utils.go
@@ -0,0 +1,85 @@
+package dynamicforward
+
+import (
+	"fmt"
+	"github.com/coredns/caddy"
+	"github.com/coredns/coredns/plugin/pkg/proxy"
+	"time"
+)
+
+type DynamicForwardConfig struct {
+	Namespace   string
+	ServiceName string
+	PortName    string
+	Expire      time.Duration
+	HealthCheck time.Duration
+	opts        proxy.Options
+}
+
+// ParseConfig parse conf CoreFile
+func ParseConfig(c *caddy.Controller) (*DynamicForwardConfig, error) {
+	config := &DynamicForwardConfig{
+		Expire:      30 * time.Minute, // Default value
+		HealthCheck: 10 * time.Second, // Default value
+		opts: proxy.Options{
+			ForceTCP:           false,
+			PreferUDP:          false,
+			HCRecursionDesired: true,
+			HCDomain:           ".",
+		},
+	}
+
+	c.RemainingArgs()
+	// Checking the presence of a parameter block
+	for c.NextBlock() {
+		switch c.Val() {
+		case "namespace":
+			if !c.NextArg() {
+				return nil, c.ArgErr()
+			}
+			config.Namespace = c.Val()
+		case "service_name":
+			if !c.NextArg() {
+				return nil, c.ArgErr()
+			}
+			config.ServiceName = c.Val()
+		case "port_name":
+			if !c.NextArg() {
+				return nil, c.ArgErr()
+			}
+			config.PortName = c.Val()
+		case "expire":
+			if !c.NextArg() {
+				return nil, c.ArgErr()
+			}
+			duration, err := time.ParseDuration(c.Val())
+			if err != nil {
+				return nil, fmt.Errorf("invalid expire duration: %v", err)
+			}
+			config.Expire = duration
+		case "health_check":
+			if !c.NextArg() {
+				return nil, c.ArgErr()
+			}
+			duration, err := time.ParseDuration(c.Val())
+			if err != nil {
+				return nil, fmt.Errorf("invalid health_check duration: %v", err)
+			}
+			config.HealthCheck = duration
+		case "force_tcp":
+			config.opts.ForceTCP = true
+		case "prefer_udp":
+			config.opts.PreferUDP = true
+
+		default:
+			return nil, c.Errf("unknown parameter: %s", c.Val())
+		}
+	}
+
+	// Checking the required parameters
+	if config.Namespace == "" || config.ServiceName == "" || config.PortName == "" {
+		return nil, fmt.Errorf("namespace, servicename, and portname are required parameters")
+	}
+
+	return config, nil
+}
diff --git a/plugin/dynamicforward/utils_test.go b/plugin/dynamicforward/utils_test.go
new file mode 100644
index 000000000..4db2d1069
--- /dev/null
+++ b/plugin/dynamicforward/utils_test.go
@@ -0,0 +1,132 @@
+package dynamicforward
+
+import (
+	"github.com/coredns/caddy"
+	"testing"
+	"time"
+)
+
+func TestParseConfig(t *testing.T) {
+	tests := []struct {
+		name          string
+		input         string
+		expected      DynamicForwardConfig
+		expectErr     bool
+		expectedError string
+	}{
+		{
+			name: "Valid config with all parameters",
+			input: `dynamicforward {
+				namespace kube-system
+				service_name d8-kube-dns
+				port_name dns
+				expire 10m
+				health_check 5s
+			}`,
+			expected: DynamicForwardConfig{
+				Namespace:   "kube-system",
+				ServiceName: "d8-kube-dns",
+				PortName:    "dns",
+				Expire:      10 * time.Minute,
+				HealthCheck: 5 * time.Second,
+			},
+			expectErr: false,
+		},
+		{
+			name: "Config missing namespace",
+			input: `dynamicforward {
+				service_name d8-kube-dns
+				port_name dns
+				expire 10m
+				health_check 5s
+			}`,
+			expectErr:     true,
+			expectedError: "namespace, servicename, and portname are required parameters",
+		},
+		{
+			name: "Config with invalid expire value",
+			input: `dynamicforward {
+				namespace kube-system
+				service_name d8-kube-dns
+				port_name dns
+				expire not-a-duration
+			}`,
+			expectErr:     true,
+			expectedError: "invalid expire duration",
+		},
+		{
+			name: "Config with missing health_check value",
+			input: `dynamicforward {
+				namespace kube-system
+				service_name d8-kube-dns
+				port_name dns
+				health_check
+			}`,
+			expectErr:     true,
+			expectedError: "wrong argument count or unexpected line ending",
+		},
+		{
+			name: "Minimal valid config",
+			input: `dynamicforward {
+				namespace kube-system
+				service_name d8-kube-dns
+				port_name dns
+			}`,
+			expected: DynamicForwardConfig{
+				Namespace:   "kube-system",
+				ServiceName: "d8-kube-dns",
+				PortName:    "dns",
+				Expire:      30 * time.Minute,
+				HealthCheck: 10 * time.Second,
+			},
+			expectErr: false,
+		},
+	}
+
+	for _, test := range tests {
+		t.Run(test.name, func(t *testing.T) {
+			// Parsing controller
+			controller := caddy.NewTestController("dns", test.input)
+
+			// Parse config
+			config, err := ParseConfig(controller)
+
+			// Check err
+			if test.expectErr {
+				if err == nil {
+					t.Fatalf("expected error, got nil")
+				}
+				if !containsError(err.Error(), test.expectedError) {
+					t.Fatalf("expected error containing %q, got %q", test.expectedError, err.Error())
+				}
+				return
+			}
+
+			if err != nil {
+				t.Fatalf("unexpected error: %v", err)
+			}
+
+			// Compare results
+			if config.Namespace != test.expected.Namespace {
+				t.Errorf("expected namespace %q, got %q", test.expected.Namespace, config.Namespace)
+			}
+			if config.ServiceName != test.expected.ServiceName {
+				t.Errorf("expected label %q, got %q", test.expected.ServiceName, config.ServiceName)
+			}
+			if config.PortName != test.expected.PortName {
+				t.Errorf("expected portname %q, got %q", test.expected.PortName, config.PortName)
+			}
+			if config.Expire != test.expected.Expire {
+				t.Errorf("expected expire %v, got %v", test.expected.Expire, config.Expire)
+			}
+			if config.HealthCheck != test.expected.HealthCheck {
+				t.Errorf("expected health_check %v, got %v", test.expected.HealthCheck, config.HealthCheck)
+			}
+		})
+	}
+}
+
+// containsError
+func containsError(actual, expected string) bool {
+	return len(actual) >= len(expected) && actual[:len(expected)] == expected
+}
diff --git a/plugin/dynamicforward/watchslice.go b/plugin/dynamicforward/watchslice.go
new file mode 100644
index 000000000..a4d9708d7
--- /dev/null
+++ b/plugin/dynamicforward/watchslice.go
@@ -0,0 +1,147 @@
+package dynamicforward
+
+import (
+	"context"
+	_ "context"
+	"fmt"
+	v1 "k8s.io/api/discovery/v1"
+	_ "k8s.io/apimachinery/pkg/apis/meta/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	_ "k8s.io/apimachinery/pkg/labels"
+	"k8s.io/client-go/kubernetes"
+	"k8s.io/client-go/rest"
+	"k8s.io/client-go/tools/cache"
+	"log"
+)
+
+// startEndpointSliceWatcher tracks changes to the EndpointSlicesList for the specified service.
+func startEndpointSliceWatcher(ctx context.Context, namespace, serviceName string, portName string, onUpdate func(newServers []string)) error {
+	// Create config for Kubernetes-client
+	config, err := rest.InClusterConfig()
+	if err != nil {
+		return fmt.Errorf("[dynamicforward] failed to create in-cluster config in namespace=%s, service-name %s: %w\n", namespace, serviceName, err)
+	}
+
+	// Create client Kubernetes
+	clientset, err := kubernetes.NewForConfig(config)
+	if err != nil {
+		return fmt.Errorf("[dynamicforward] failed to create Kubernetes client in namespace=%s, service-name %s: %w\n", namespace, serviceName, err)
+	}
+
+	// Create list/watch with filter by label
+	listWatch := cache.NewFilteredListWatchFromClient(
+		clientset.DiscoveryV1().RESTClient(),
+		"endpointslices",
+		namespace,
+		func(options *metav1.ListOptions) {
+			options.LabelSelector = fmt.Sprintf("kubernetes.io/service-name=%s", serviceName)
+		},
+	)
+
+	//store all  slices
+	esStore := cache.NewStore(cache.MetaNamespaceKeyFunc)
+
+	handler := cache.ResourceEventHandlerFuncs{
+		AddFunc: func(obj interface{}) {
+			endpointSlice, ok := obj.(*v1.EndpointSlice)
+			if !ok {
+				log.Printf("[dynamicforward] error hadling addition EndpointSlice for service=%s: Unexpected type %T\n", serviceName, obj)
+				return
+			}
+			esStore.Add(endpointSlice)
+			handleUpdate(esStore, portName, serviceName, namespace, onUpdate)
+			log.Printf("[dynamicforward] succusfuly added EndpointSlices for service=%s: %s\n", serviceName, endpointSlice.Name)
+		},
+		UpdateFunc: func(old, new interface{}) {
+			oldEndpointSlice, ok1 := old.(*v1.EndpointSlice)
+			newEndpointSlice, ok2 := new.(*v1.EndpointSlice)
+			if !ok1 || !ok2 {
+				log.Printf("[dynamicforward] error hadling update EndpointSlice for service=%s: Unexpected types: %T, %T\n", serviceName, old, new)
+				return
+			}
+			esStore.Update(newEndpointSlice)
+			handleUpdate(esStore, portName, serviceName, namespace, onUpdate)
+			log.Printf("[dynamicforward] succusfuly updated EndpointSlices for service=%s: EndpointSlice updated: %s -> %s\n", serviceName, oldEndpointSlice.Name, newEndpointSlice.Name)
+		},
+		DeleteFunc: func(obj interface{}) {
+			endpointSlice, ok := obj.(*v1.EndpointSlice)
+			if !ok {
+				tombstone, ok := obj.(cache.DeletedFinalStateUnknown)
+				if !ok {
+					log.Printf("[dynamicforward] error delete EndpointSlice for service=%s: Unexpected type %T\n", serviceName, obj)
+					return
+				}
+				endpointSlice, ok = tombstone.Obj.(*v1.EndpointSlice)
+				if !ok {
+					log.Printf("[dynamicforward] error delete EndpointSlice for service=%s: Tombstone contained object of unexpected type %T\n", serviceName, tombstone.Obj)
+					return
+				}
+			}
+			esStore.Delete(endpointSlice)
+			handleUpdate(esStore, portName, serviceName, namespace, onUpdate)
+			log.Printf("[dynamicforward] succusfuly seleted EndpointSlice for service=%s: EndpointSlice: %s\n", serviceName, endpointSlice.Name)
+		},
+	}
+
+	// Create controller for EndpointSlice
+	informerOptions := cache.InformerOptions{
+		ListerWatcher:   listWatch,
+		ObjectType:      &v1.EndpointSlice{},
+		Handler:         handler,
+		ResyncPeriod:    0,
+		MinWatchTimeout: 0,
+		Indexers:        nil,
+		Transform:       nil,
+	}
+
+	_, controller := cache.NewInformerWithOptions(informerOptions)
+
+	// Start informer
+	go controller.Run(ctx.Done())
+
+	// Wait while informer end sync
+	if !cache.WaitForCacheSync(ctx.Done(), controller.HasSynced) {
+		return fmt.Errorf("[dynamicforward] failed to sync EndpointSlices informer")
+	}
+
+	log.Printf("[dynamicforward] EndpointSlice watcher for service %s in namespace %s: is running...", serviceName, namespace)
+
+	return nil
+}
+
+// updateServers handle update EndpointSlice and callback
+func handleUpdate(store cache.Store, portName string, serviceName string, namespace string, onUpdate func(newServers []string)) {
+
+	// Show all pslices in cache
+	items := store.List()
+	log.Printf("[dynamicforward] Number of EndpointSlices in cache for service %s in namespace %s: %d", serviceName, namespace, len(items))
+
+	servers := make(map[string]struct{})
+	for _, item := range items {
+		endpointSlice, ok := item.(*v1.EndpointSlice)
+		if !ok {
+			log.Printf("[dynamicforward] Failed to cast object to EndpointSlice for service %s in namespace %s: %v", serviceName, namespace, item)
+			continue
+		}
+
+		for _, endpoint := range endpointSlice.Endpoints {
+			for _, address := range endpoint.Addresses {
+				for _, port := range endpointSlice.Ports {
+					if port.Port != nil && port.Name != nil && *port.Name == portName {
+						server := fmt.Sprintf("%s:%d", address, *port.Port)
+						servers[server] = struct{}{}
+					}
+				}
+			}
+		}
+	}
+
+	// convert map in slice
+	serverList := make([]string, 0, len(servers))
+	for server := range servers {
+		serverList = append(serverList, server)
+	}
+
+	// callback onUpdate
+	onUpdate(serverList)
+}
diff --git a/plugin/forward/forward.go b/plugin/forward/forward.go
index cb22391e2..2cef4952c 100644
--- a/plugin/forward/forward.go
+++ b/plugin/forward/forward.go
@@ -68,6 +68,11 @@ func New() *Forward {
 	return f
 }

+// SetProxyOptions setup proxy options
+func (f *Forward) SetProxyOptions(opts proxy.Options) {
+	f.opts = opts
+}
+
 // SetProxy appends p to the proxy list and starts healthchecking.
 func (f *Forward) SetProxy(p *proxy.Proxy) {
 	f.proxies = append(f.proxies, p)
