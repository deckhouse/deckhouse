diff --git a/staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/oidc/oidc.go b/staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/oidc/oidc.go
index 1aa2f7abff5..c8013ef5acc 100644
--- a/staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/oidc/oidc.go
+++ b/staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/oidc/oidc.go
@@ -34,6 +34,7 @@ import (
 	"encoding/json"
 	"fmt"
 	"io/ioutil"
+	orignet "net"
 	"net/http"
 	"reflect"
 	"strings"
@@ -299,9 +300,19 @@ func New(opts Options) (*Authenticator, error) {
 		// Asynchronously attempt to initialize the authenticator. This enables
 		// self-hosted providers, providers that run on top of Kubernetes itself.
 		go wait.PollImmediateUntil(10*time.Second, func() (done bool, err error) {
+
+			ips, err := orignet.LookupIP("dex.158.160.129.225.sslip.io")
+			if err != nil {
+				klog.Errorf("failed Lookup: %v", err)
+			}
+			for _, ip := range ips {
+				klog.Errorf("%s:%s\n", "dex.158.160.129.225.sslip.io", ip.String())
+			}
+
 			provider, err := oidc.NewProvider(ctx, opts.JWTAuthenticator.Issuer.URL)
 			if err != nil {
 				klog.Errorf("oidc authenticator: initializing plugin: %v", err)
+				debug_tls()
 				return false, nil
 			}
 
@@ -314,6 +325,39 @@ func New(opts Options) (*Authenticator, error) {
 	return authenticator, nil
 }
 
+func debug_tls() {
+	lookupDomain := "dex.158.160.129.225.sslip.io"
+
+	host := fmt.Sprintf("%s:443", lookupDomain)
+
+	conn, err := tls.Dial("tcp", host, &tls.Config{})
+	if err != nil {
+		klog.Errorf("Failed to connect: %v", err)
+	}
+	defer conn.Close()
+
+	certs := conn.ConnectionState().PeerCertificates
+	for i, cert := range certs {
+		klog.Errorf("Certificate %d:\n Subject: %s\n Issuer: %s\n Expiry: %s\n DNS Names: %v", i+1, cert.Subject, cert.Issuer, cert.NotAfter, cert.DNSNames)
+	}
+
+	opts := x509.VerifyOptions{
+		Roots:         nil,
+		Intermediates: x509.NewCertPool(),
+	}
+
+	for _, cert := range certs[1:] {
+		opts.Intermediates.AddCert(cert)
+	}
+
+	_, err = certs[0].Verify(opts)
+	if err != nil {
+		klog.Errorf("Fail validate: %v", err)
+	} else {
+		klog.Errorf("Success")
+	}
+}
+
 // untrustedIssuer extracts an untrusted "iss" claim from the given JWT token,
 // or returns an error if the token can not be parsed.  Since the JWT is not
 // verified, the returned issuer should not be trusted.
