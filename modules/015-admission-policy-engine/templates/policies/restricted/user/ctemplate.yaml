apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: d8pssuser
  labels:
    heritage: deckhouse
    module: admission-policy-engine
    security.deckhouse.io: pod-security-standard
  annotations:
    metadata.gatekeeper.sh/title: "Volume Types"
    description: >-
      Containers must be required to run as non-root users.
      Containers must not set runAsUser to 0
      For more information, seehttps://kubernetes.io/docs/concepts/security/pod-security-standards/
spec:
  crd:
    spec:
      names:
        kind: D8PSSUser
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          description: >-
            Containers must be required to run as non-root users.
            Containers must not set runAsUser to 0
            For more information, seehttps://kubernetes.io/docs/concepts/security/pod-security-standards/
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package d8.pod_security_standards

        # Disallow top level
        violation[{"msg": msg, "details": {}}] {
            has_field(input.review.object.spec, "securityContext")
            c := input.review.object.spec

            not valuesAreAllowed(c)

            msg := sprintf("Pod %v is attempting to run without a required securityContext/runAsNonRoot or securityContext/runAsUser != 0", [input.review.object.metadata.name])
        }

        # Disallow container
        violation[{"msg": msg, "details": {}}] {
            not has_field(input.review.object.spec, "securityContext")
            c := input_security_context[_]

            not valuesAreAllowed(c)

            msg := sprintf("Container %v is attempting to run without a required securityContext/runAsNonRoot or securityContext/runAsUser != 0", [c.name])
        }

        valuesAreAllowed(obj) {
        	nonRootFlagIsTrue(obj)
            not hasZeroUserID(obj)
        }


        nonRootFlagIsTrue(c) {
            c.securityContext.runAsNonRoot == true
        }

        hasZeroUserID(c) {
            c.securityContext.runAsUser == 0
        }


        input_security_context[c] {
          c := input.review.object.spec.containers[_]
        }

        input_security_context[c] {
          c := input.review.object.spec.initContainers[_]
        }

        input_security_context[c] {
          c := input.review.object.spec.ephemeralContainers[_]
        }

        # has_field returns whether an object has a field
        has_field(object, field) {
          object[field]
        }
