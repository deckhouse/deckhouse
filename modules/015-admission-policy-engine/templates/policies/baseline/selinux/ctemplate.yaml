apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: d8pssselinuxv2
  labels:
    heritage: deckhouse
    module: admission-policy-engine
    security.deckhouse.io: pod-security-standard
  annotations:
    metadata.gatekeeper.sh/title: "SELinux V2"
    description: >-
      Defines an allow-list of seLinuxOptions configurations for pod
      containers. Corresponds to a PodSecurityPolicy requiring SELinux configs.
      For more information, see https://kubernetes.io/docs/concepts/security/pod-security-standards/
spec:
  crd:
    spec:
      names:
        kind: D8PSSSELinuxV2
      validation:
        openAPIV3Schema:
          type: object
          description: >-
            Defines an allow-list of seLinuxOptions configurations for pod
            containers. Corresponds to a PodSecurityPolicy requiring SELinux configs.
            For more information, see https://kubernetes.io/docs/concepts/security/pod-security-standards/
          properties:
            allowedSELinuxTypes:
              type: array
              description: "An allow-list of SELinux types."
              items:
                type: string
                description: "An SELinux type."
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package d8.pod_security_standards

        # Disallow top level custom SELinux options
        violation[{"msg": msg, "details": {}}] {
            has_field(input.review.object.spec.securityContext, "seLinuxOptions")
            not input_seLinuxOptions_allowed(input.review.object.spec.securityContext.seLinuxOptions)
            msg := sprintf("Only SELinux type option is allowed, pod: %v. Allowed SELinux types: %v", [input.review.object.metadata.name, input.parameters.allowedSELinuxTypes])
        }
        # Disallow container level custom SELinux options
        violation[{"msg": msg, "details": {}}] {
            c := input_security_context[_]
            has_field(c.securityContext, "seLinuxOptions")
            not input_seLinuxOptions_allowed(c.securityContext.seLinuxOptions)
            msg := sprintf("Only SELinux type option is allowed, pod: %v, container %v. Allowed SELinux types: %v", [input.review.object.metadata.name, c.name, input.parameters.allowedSELinuxTypes])
        }

        input_seLinuxOptions_allowed(options) {
          allowed_type := input.parameters.allowedSELinuxTypes[_]
          type_field_allowed("type", options, allowed_type)

          not field_has_value("level", options)
          not field_has_value("role", options)
          not field_has_value("user", options)
        }

        type_field_allowed(field, options, value) {
          options[field] == value
        }

        field_has_value(field, options) {
          has_field(options, field)
          count(options[field]) > 0
        }

        input_security_context[c] {
          c := input.review.object.spec.containers[_]
        }

        input_security_context[c] {
          c := input.review.object.spec.initContainers[_]
        }

        input_security_context[c] {
          c := input.review.object.spec.ephemeralContainers[_]
        }

        # has_field returns whether an object has a field
        has_field(object, field) {
          object[field]
        }
