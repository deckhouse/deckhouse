apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: d8pssallowedsysctls
  labels:
    heritage: deckhouse
    module: admission-policy-engine
    security.deckhouse.io: pod-security-standard
  annotations:
    metadata.gatekeeper.sh/title: "Forbidden Sysctls"
    description: >-
      Controls the `sysctl` profile used by containers. For more information,
      see https://kubernetes.io/docs/concepts/security/pod-security-standards/
spec:
  crd:
    spec:
      names:
        kind: D8PSSAllowedSysctls
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          description: >-
            Controls the `sysctl` profile used by containers. For more information,
            see https://kubernetes.io/docs/concepts/security/pod-security-standards/
          properties:
            allowedSysctls:
              type: array
              description: "An allow-list of sysctls. `*` to allow all sysctls."
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package d8.pod_security_standards

        violation[{"msg": msg, "details": {}}] {
            sysctl := input.review.object.spec.securityContext.sysctls[_].name
            not allowed_sysctl(sysctl)
            msg := sprintf("The sysctl %v is not allowed, pod: %v. Allowed sysctls: %v", [sysctl, input.review.object.metadata.name, input.parameters.allowedSysctls])
        }

        # * may be used to forbid all sysctls
        allowed_sysctl(sysctl) {
            input.parameters.allowedSysctls[_] == "*"
        }

        allowed_sysctl(sysctl) {
            input.parameters.allowedSysctls[_] == sysctl
        }

        allowed_sysctl(sysctl) {
            startswith(sysctl, trim(input.parameters.allowedSysctls[_], "*"))
        }
