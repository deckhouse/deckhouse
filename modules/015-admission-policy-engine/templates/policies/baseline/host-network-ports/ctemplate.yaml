apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: d8psshostnetworkingports
  labels:
    heritage: deckhouse
    module: admission-policy-engine
    security.deckhouse.io: pod-security-standard
  annotations:
    metadata.gatekeeper.sh/title: "Host Networking Ports"
    description: >-
      Controls usage of host network namespace by pod containers. Specific
      ports must be specified. Corresponds to the `hostNetwork` and
      `hostPorts` fields in a PodSecurityPolicy. For more information, see
      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
spec:
  crd:
    spec:
      names:
        kind: D8PSSHostNetworkingPorts
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          description: >-
            Controls usage of host network namespace by pod containers. Specific
            ports must be specified. Corresponds to the `hostNetwork` and
            `hostPorts` fields in a PodSecurityPolicy. For more information, see
            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
          knownPortRanges:
            type: array
            items:
              type: object
              properties:
                min:
                  description: "The start of the allowed port range, inclusive."
                  type: integer
                max:
                  description: "The end of the allowed port range, inclusive."
                  type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package d8.pod_security_standards

        violation[{"msg": msg, "details": {}}] {
        	hostPort := input_containers[_].ports[_].hostPort

          	not in_range(hostPort)

            knownRanges := [range | range := sprintf("%d-%d", [input.parameters.knownPortRanges[i].min, input.parameters.knownPortRanges[i].max])]

            msg := sprintf("The specified hostPort is not allowed, pod: %v. Allowed port ranges: %v", [input.review.object.metadata.name, knownRanges])
        }

        in_range(port) = range_results {
        	some i
        	min := input.parameters.knownPortRanges[i].min
            max := input.parameters.knownPortRanges[i].max
            range_results = port >= min
            range_results = port <= max
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.ephemeralContainers[_]
        }
