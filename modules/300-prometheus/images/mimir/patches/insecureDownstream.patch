diff --git a/pkg/frontend/downstream_roundtripper.go b/pkg/frontend/downstream_roundtripper.go
index 921bceff5..c57189994 100644
--- a/pkg/frontend/downstream_roundtripper.go
+++ b/pkg/frontend/downstream_roundtripper.go
@@ -6,9 +6,12 @@
 package frontend
 
 import (
+	"fmt"
 	"net/http"
 	"net/url"
+	"os"
 	"path"
+	"strings"
 
 	"github.com/grafana/mimir/pkg/util/instrumentation"
 )
@@ -18,6 +21,8 @@ type downstreamRoundTripper struct {
 	downstreamURL *url.URL
 }
 
+const authCredentialsFile = "/var/run/secrets/kubernetes.io/serviceaccount/token"
+
 func NewDownstreamRoundTripper(downstreamURL string) (http.RoundTripper, error) {
 	u, err := url.Parse(downstreamURL)
 	if err != nil {
@@ -32,5 +37,16 @@ func (d downstreamRoundTripper) RoundTrip(r *http.Request) (*http.Response, erro
 	r.URL.Host = d.downstreamURL.Host
 	r.URL.Path = path.Join(d.downstreamURL.Path, r.URL.Path)
 	r.Host = ""
-	return http.DefaultTransport.RoundTrip(r)
+
+	tr := http.DefaultTransport.(*http.Transport).Clone()
+	tr.TLSClientConfig.InsecureSkipVerify = true
+
+	b, err := os.ReadFile(authCredentialsFile)
+	if err != nil {
+		return nil, fmt.Errorf("unable to read authorization credentials file %s: %w", authCredentialsFile, err)
+	}
+	authCredentials := strings.TrimSpace(string(b))
+	r.Header.Set("Authorization", fmt.Sprintf("Bearer %s", authCredentials))
+
+	return tr.RoundTrip(r)
 }
