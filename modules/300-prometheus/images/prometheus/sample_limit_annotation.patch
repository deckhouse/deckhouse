diff --git a/discovery/kubernetes/pod.go b/discovery/kubernetes/pod.go
index 2e55dce78..e84fa50b0 100644
--- a/discovery/kubernetes/pod.go
+++ b/discovery/kubernetes/pod.go
@@ -279,6 +279,7 @@ func (p *Pod) buildPod(pod *apiv1.Pod) *targetgroup.Group {

 			tg.Targets = append(tg.Targets, model.LabelSet{
 				model.AddressLabel:            lv(addr),
+				"__sample_limit__":            lv(""),
 				podContainerNameLabel:         lv(c.Name),
 				podContainerPortNumberLabel:   lv(ports),
 				podContainerPortNameLabel:     lv(port.Name),
diff --git a/discovery/kubernetes/service.go b/discovery/kubernetes/service.go
index 4b3c4de51..6b8ee4772 100644
--- a/discovery/kubernetes/service.go
+++ b/discovery/kubernetes/service.go
@@ -188,6 +188,7 @@ func (s *Service) buildService(svc *apiv1.Service) *targetgroup.Group {

 		labelSet := model.LabelSet{
 			model.AddressLabel:       lv(addr),
+			"__sample_limit__":       lv(""),
 			servicePortNameLabel:     lv(port.Name),
 			servicePortProtocolLabel: lv(string(port.Protocol)),
 			serviceType:              lv(string(svc.Spec.Type)),
diff --git a/scrape/scrape.go b/scrape/scrape.go
index 9304baecd..3e59cc738 100644
--- a/scrape/scrape.go
+++ b/scrape/scrape.go
@@ -297,6 +297,11 @@ func newScrapePool(cfg *config.ScrapeConfig, app storage.Appendable, jitterSeed
 		}
 		opts.target.SetMetadataStore(cache)

+		limit := opts.target.SampleLimit()
+		if limit == 0 {
+			limit = opts.sampleLimit
+		}
+
 		return newScrapeLoop(
 			ctx,
 			opts.scraper,
@@ -310,7 +315,7 @@ func newScrapePool(cfg *config.ScrapeConfig, app storage.Appendable, jitterSeed
 			cache,
 			jitterSeed,
 			opts.honorTimestamps,
-			opts.sampleLimit,
+			limit,
 			opts.labelLimits,
 			opts.interval,
 			opts.timeout,
diff --git a/scrape/target.go b/scrape/target.go
index e017a4584..f3f7352ec 100644
--- a/scrape/target.go
+++ b/scrape/target.go
@@ -18,6 +18,7 @@ import (
 	"hash/fnv"
 	"net"
 	"net/url"
+	"strconv"
 	"strings"
 	"sync"
 	"time"
@@ -492,3 +493,15 @@ func TargetsFromGroup(tg *targetgroup.Group, cfg *config.ScrapeConfig) ([]*Targe
 	}
 	return targets, failures
 }
+
+func (t *Target) SampleLimit() int {
+	limit := t.labels.Get("__sample_limit__")
+	if limit == "" {
+		return 0
+	}
+	convertedLimit, err := strconv.Atoi(limit)
+	if err != nil {
+		return 0
+	}
+	return convertedLimit
+}
