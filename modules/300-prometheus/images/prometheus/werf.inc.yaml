---
{{- $prometheusVersion := "v2.55.1" }}
image: {{ .ModuleName }}/{{ .ImageName }}
fromImage: common/distroless
import:
- image: {{ .ModuleName }}/{{ .ImageName }}-artifact
  add: /src
  to: /bin
  before: setup
  includePaths:
  - 'promtool'
  - 'prometheus'
- image: {{ .ModuleName }}/{{ .ImageName }}-artifact
  add: /src/consoles
  to: /usr/share/prometheus/consoles
  before: setup
- image: {{ .ModuleName }}/{{ .ImageName }}-artifact
  add: /src/console_libraries
  to: /usr/share/prometheus/console_libraries
  before: setup
- image: {{ .ModuleName }}/{{ .ImageName }}-artifact
  add: /src/documentation/examples/prometheus.yml
  to: /etc/prometheus/prometheus.yml
  before: setup
- image: {{ .ModuleName }}/{{ .ImageName }}-binaries-artifact
  add: /relocate
  to: /
  before: install
  includePaths:
  - '**/*'
git:
{{- include "image mount points" . }}
imageSpec:
  config:
    entrypoint: ["/bin/prometheus"]
    expose: ["9090"]
    volumes: ["/prometheus"]
    workingDir: "/prometheus"
    cmd: ["--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.path=/prometheus", "--web.console.libraries=/usr/share/prometheus/console_libraries", "--web.console.templates=/usr/share/prometheus/consoles"]
---
image: {{ .ModuleName }}/{{ .ImageName }}-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /{{ .ModulePath }}modules/{{ .ModulePriority }}-{{ .ModuleName }}/images/{{ .ImageName }}/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}
shell:
  install:
  - git clone --depth 1 --branch v0.17.0 $(cat /run/secrets/SOURCE_REPO)/prometheus/promu.git /src/promu
  - git clone --depth 1 --branch {{ $prometheusVersion }} $(cat /run/secrets/SOURCE_REPO)/prometheus/prometheus-deps.git /src/prometheus-deps
  - git clone --depth 1 --branch {{ $prometheusVersion }} $(cat /run/secrets/SOURCE_REPO)/prometheus/prometheus.git /src/prometheus
  - cd /src/prometheus
  - git apply /patches/*.patch --verbose
  - rm -rf web/ui/*
  - cp -r /src/prometheus-deps/web/ui/* web/ui/.
  - scripts/compress_assets.sh
  - rm -r documentation/examples/remote_storage
---
image: {{ .ModuleName }}/{{ .ImageName }}-promu-artifact
fromImage: builder/golang-alpine
final: false
import:
- image: {{ .ModuleName }}/{{ .ImageName }}-src-artifact
  add: /src/promu
  to: /src
  before: install
mount:
{{ include "mount points for golang builds" . }}
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
shell:
  install:
  - export GOPROXY=$(cat /run/secrets/GOPROXY) CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - cd /src
  - go build -ldflags="-s -w" -o promu ./main.go
---
image: {{ .ModuleName }}/{{ .ImageName }}-artifact
fromImage: {{ eq $.SVACE_ENABLED "false" | ternary "builder/golang-alpine" "builder/alt-go-svace" }}
final: false
mount:
{{ include "mount points for golang builds" . }}
import:
- image: {{ .ModuleName }}/{{ .ImageName }}-promu-artifact
  add: /src/promu
  to: /bin/promu
  before: install
- image: {{ .ModuleName }}/{{ .ImageName }}-src-artifact
  add: /src/prometheus
  to: /src
  before: install
secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}
shell:
  install:
  - export GOPROXY=$(cat /run/secrets/GOPROXY) CGO_ENABLED=0 GOOS=linux GOARCH=amd64
  - |
    while IFS=':' read -r key value; do
    if [[ -n $key && -n $value ]]; then
        key_clean=$(echo "$key" | tr -d '[:space:]' | tr '[:lower:]' '[:upper:]')
        value_clean=$(echo "$value" | sed 's/^ *//g')
        export "PROMETHEUS_${key_clean}=${value_clean}"
    fi
    done < <(/bin/promu info)
    export LDFLAGS="-X github.com/prometheus/common/version.Version=${PROMETHEUS_VERSION} \
    -X github.com/prometheus/common/version.Revision=${PROMETHEUS_REVISION} \
    -X github.com/prometheus/common/version.Branch=HEAD \
    -X github.com/prometheus/common/version.BuildUser=root@unknown \
    -X github.com/prometheus/common/version.BuildDate=$(date +%Y%m%d-%H:%M:%S) \
    -extldflags '-static'"
    export PROMETHEUS_TAGS="netgo,builtinassets,stringlabels"
  - cd /src
  - go generate -tags plugins ./plugins
  - |
    {{- include "image-build.build" (set $ "BuildCommand" `go build -tags "${PROMETHEUS_TAGS}" -ldflags="${LDFLAGS}" -o prometheus ./cmd/prometheus`) | indent 6 }}
  - go build -tags "${PROMETHEUS_TAGS}" -ldflags="${LDFLAGS}" -o promtool ./cmd/promtool
  - mkdir -p /empty
  - chown 64535:64535 /src/prometheus /src/promtool
  - chmod 0700 /src/prometheus /src/promtool
---
image: {{ .ModuleName }}/{{ .ImageName }}-binaries-artifact
fromImage: common/relocate-artifact
final: false
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - apt-get install -y curl
  install:
  - |
    /binary_replace.sh -i "\
      /usr/bin/curl \
      /bin/sh \
      /bin/df \
      " -o /relocate
