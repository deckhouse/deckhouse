diff --git a/cmd/manager/main.go b/cmd/manager/main.go
index c6b3002..d62218f 100644
--- a/cmd/manager/main.go
+++ b/cmd/manager/main.go
@@ -25,14 +25,18 @@ import (
 	"os"
 	"runtime"
 
+	monitoringv1 "github.com/coreos/prometheus-operator/pkg/apis/monitoring/v1"
 	"github.com/operator-framework/operator-sdk/pkg/k8sutil"
 	kubemetrics "github.com/operator-framework/operator-sdk/pkg/kube-metrics"
 	"github.com/operator-framework/operator-sdk/pkg/log/zap"
 	"github.com/operator-framework/operator-sdk/pkg/metrics"
 	sdkVersion "github.com/operator-framework/operator-sdk/version"
 	"github.com/spf13/pflag"
+	appsv1 "k8s.io/api/apps/v1"
 	v1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/api/meta"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/apimachinery/pkg/types"
 	"k8s.io/apimachinery/pkg/util/intstr"
 
 	// Import all Kubernetes client auth plugins (e.g. Azure, GCP, OIDC, etc.)
@@ -47,12 +51,17 @@ import (
 	"github.com/piraeusdatastore/piraeus-operator/pkg/apis"
 	"github.com/piraeusdatastore/piraeus-operator/pkg/controller"
 	"github.com/piraeusdatastore/piraeus-operator/pkg/controller/linstorcontroller"
+	"github.com/piraeusdatastore/piraeus-operator/pkg/controller/linstorsatelliteset"
+	"github.com/piraeusdatastore/piraeus-operator/pkg/k8s/monitoring"
+	"github.com/piraeusdatastore/piraeus-operator/pkg/k8s/reconcileutil"
 	kubeSpec "github.com/piraeusdatastore/piraeus-operator/pkg/k8s/spec"
 	"github.com/piraeusdatastore/piraeus-operator/version"
+	crclient "sigs.k8s.io/controller-runtime/pkg/client"
 )
 
 // Change below variables to serve metrics on different host or port.
 var (
+	createMonitoring          = true
 	metricsHost               = "0.0.0.0"
 	metricsPort         int32 = 8383
 	operatorMetricsPort int32 = 8686
@@ -68,6 +77,8 @@ func printVersion() {
 
 func main() {
 	pflag.BoolVarP(&linstorcontroller.CreateBackups, "create-backups", "", linstorcontroller.CreateBackups, "create backups of linstor resources if k8s database is used")
+	pflag.BoolVarP(&createMonitoring, "create-monitoring", "", createMonitoring, "automatically create monitoring resources in the cluster")
+	pflag.StringVar(&metricsHost, "bind-address", metricsHost, "bind address for operator metrics exporter")
 
 	// Add the zap logger flag set to the CLI. The flag set must
 	// be added before calling pflag.Parse().
@@ -79,6 +90,9 @@ func main() {
 
 	pflag.Parse()
 
+	linstorcontroller.CreateMonitroing = createMonitoring
+	linstorsatelliteset.CreateMonitroing = createMonitoring
+
 	// Use a zap logr.Logger implementation. If none of the zap
 	// flags are configured (or if the zap flag set is not being
 	// used), this defaults to a production zap logger.
@@ -137,17 +151,25 @@ func main() {
 		os.Exit(1)
 	}
 
-	addMetrics(ctx, cfg)
+	// Get the namespace the operator is currently deployed in.
+	operatorNs, err := k8sutil.GetOperatorNamespace()
+	if err != nil {
+		if errors.Is(err, k8sutil.ErrRunLocal) {
+			log.Info("Skipping CR metrics server handling; not running in a cluster.")
+			return
+		}
+		log.Error(err, "Failed to get operator namespace")
+		os.Exit(1)
+	}
 
-	// Add to the below struct any other metrics ports you want to expose.
-	servicePorts := []v1.ServicePort{
-		{Port: metricsPort, Name: metrics.OperatorPortName, Protocol: v1.ProtocolTCP, TargetPort: intstr.IntOrString{Type: intstr.Int, IntVal: metricsPort}},
-		{Port: operatorMetricsPort, Name: metrics.CRPortName, Protocol: v1.ProtocolTCP, TargetPort: intstr.IntOrString{Type: intstr.Int, IntVal: operatorMetricsPort}},
+	if err := serveCRMetrics(cfg, operatorNs); err != nil {
+		log.Info("Could not generate and serve custom resource metrics", "error", err.Error())
 	}
-	// Create Service object to expose the metrics port(s).
-	_, err = metrics.CreateMetricsService(ctx, cfg, servicePorts)
-	if err != nil {
-		log.Info(err.Error())
+
+	if createMonitoring {
+		addMetrics(ctx, cfg, operatorNs)
+	} else {
+		delMetrics(ctx, cfg, mgr, operatorNs)
 	}
 
 	log.Info("Starting the Cmd.")
@@ -161,25 +183,11 @@ func main() {
 
 // addMetrics will create the Services and Service Monitors to allow the operator export the metrics by using
 // the Prometheus operator.
-func addMetrics(ctx context.Context, cfg *rest.Config) {
-	// Get the namespace the operator is currently deployed in.
-	operatorNs, err := k8sutil.GetOperatorNamespace()
-	if err != nil {
-		if errors.Is(err, k8sutil.ErrRunLocal) {
-			log.Info("Skipping CR metrics server creation; not running in a cluster.")
-
-			return
-		}
-	}
-
-	if err := serveCRMetrics(cfg, operatorNs); err != nil {
-		log.Info("Could not generate and serve custom resource metrics", "error", err.Error())
-	}
-
+func addMetrics(ctx context.Context, cfg *rest.Config, operatorNs string) {
 	// Add to the below struct any other metrics ports you want to expose.
 	servicePorts := []v1.ServicePort{
-		{Port: metricsPort, Name: metrics.OperatorPortName, Protocol: v1.ProtocolTCP},
-		{Port: operatorMetricsPort, Name: metrics.CRPortName, Protocol: v1.ProtocolTCP},
+		{Port: metricsPort, Name: metrics.OperatorPortName, Protocol: v1.ProtocolTCP, TargetPort: intstr.IntOrString{Type: intstr.Int, IntVal: metricsPort}},
+		{Port: operatorMetricsPort, Name: metrics.CRPortName, Protocol: v1.ProtocolTCP, TargetPort: intstr.IntOrString{Type: intstr.Int, IntVal: operatorMetricsPort}},
 	}
 
 	// Create Service object to expose the metrics port(s).
@@ -202,6 +210,53 @@ func addMetrics(ctx context.Context, cfg *rest.Config) {
 			log.Info("Install prometheus-operator in your cluster to create ServiceMonitor objects", "error", err.Error())
 		}
 	}
+	// Create Service object to expose the metrics port(s).
+	_, err = metrics.CreateMetricsService(ctx, cfg, servicePorts)
+	if err != nil {
+		log.Info(err.Error())
+	}
+}
+
+// delMetrics will remove the Services and Service Monitors for Prometheus operator.
+func delMetrics(ctx context.Context, cfg *rest.Config, mgr manager.Manager, operatorNs string) {
+	operatorName, err := k8sutil.GetOperatorName()
+	if err != nil {
+		log.Error(err, "Failed to get operator name")
+		os.Exit(1)
+	}
+	client, err := crclient.New(cfg, crclient.Options{})
+	if err != nil {
+		log.Error(err, "failed to create new client")
+		os.Exit(1)
+	}
+	operatorResource := &appsv1.Deployment{}
+	err = client.Get(ctx, types.NamespacedName{Namespace: operatorNs, Name: operatorName}, operatorResource)
+	if err != nil {
+		log.Error(err, "failed to get operator deplotment")
+		os.Exit(1)
+	}
+
+	err = reconcileutil.DeleteIfOwned(ctx, client, &v1.Service{ObjectMeta: metav1.ObjectMeta{
+		Name:      fmt.Sprintf("%s-metrics", operatorName),
+		Namespace: operatorNs,
+	}}, operatorResource)
+
+	if err != nil {
+		log.Error(err, "Failed to delete monitoring service")
+		os.Exit(1)
+	}
+
+	if monitoring.Enabled(ctx, client, mgr.GetScheme()) {
+		err = reconcileutil.DeleteIfOwned(ctx, client, &monitoringv1.ServiceMonitor{ObjectMeta: metav1.ObjectMeta{
+			Name:      fmt.Sprintf("%s-metrics", operatorName),
+			Namespace: operatorNs,
+		}}, operatorResource)
+
+		if err != nil {
+			log.Error(err, "Failed to delete monitoring servicemonitor")
+			os.Exit(1)
+		}
+	}
 }
 
 // serveCRMetrics gets the Operator/CustomResource GVKs and generates metrics based on those types.
diff --git a/pkg/apis/piraeus/shared/linstor_types.go b/pkg/apis/piraeus/shared/linstor_types.go
index 38677b5..017a0ca 100644
--- a/pkg/apis/piraeus/shared/linstor_types.go
+++ b/pkg/apis/piraeus/shared/linstor_types.go
@@ -117,11 +117,13 @@ func (in *StoragePools) AllPhysicalStorageCreators() []PhysicalStorageCreator {
 }
 
 // StoragePool is the generalized type of storage pools.
+// +kubebuilder:object:generate=false
 type StoragePool interface {
 	GetName() string
 	ToLinstorStoragePool() lapi.StoragePool
 }
 
+// +kubebuilder:object:generate=false
 type PhysicalStorageCreator interface {
 	StoragePool
 	GetDevicePaths() []string
diff --git a/pkg/apis/piraeus/shared/zz_generated.deepcopy.go b/pkg/apis/piraeus/shared/zz_generated.deepcopy.go
index d83ca23..fcc7435 100644
--- a/pkg/apis/piraeus/shared/zz_generated.deepcopy.go
+++ b/pkg/apis/piraeus/shared/zz_generated.deepcopy.go
@@ -1,3 +1,4 @@
+//go:build !ignore_autogenerated
 // +build !ignore_autogenerated
 
 /*
@@ -17,10 +18,12 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-// Code generated by operator-sdk. DO NOT EDIT.
+// Code generated by controller-gen. DO NOT EDIT.
 
 package shared
 
+import ()
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *CommonPhysicalStorageOptions) DeepCopyInto(out *CommonPhysicalStorageOptions) {
 	*out = *in
@@ -29,7 +32,6 @@ func (in *CommonPhysicalStorageOptions) DeepCopyInto(out *CommonPhysicalStorageO
 		*out = make([]string, len(*in))
 		copy(*out, *in)
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommonPhysicalStorageOptions.
@@ -45,7 +47,6 @@ func (in *CommonPhysicalStorageOptions) DeepCopy() *CommonPhysicalStorageOptions
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *CommonStoragePoolOptions) DeepCopyInto(out *CommonStoragePoolOptions) {
 	*out = *in
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommonStoragePoolOptions.
@@ -61,7 +62,6 @@ func (in *CommonStoragePoolOptions) DeepCopy() *CommonStoragePoolOptions {
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *LinstorClientConfig) DeepCopyInto(out *LinstorClientConfig) {
 	*out = *in
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorClientConfig.
@@ -77,7 +77,6 @@ func (in *LinstorClientConfig) DeepCopy() *LinstorClientConfig {
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *NodeStatus) DeepCopyInto(out *NodeStatus) {
 	*out = *in
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeStatus.
@@ -105,7 +104,6 @@ func (in *SatelliteStatus) DeepCopyInto(out *SatelliteStatus) {
 			}
 		}
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SatelliteStatus.
@@ -123,7 +121,6 @@ func (in *StoragePoolLVM) DeepCopyInto(out *StoragePoolLVM) {
 	*out = *in
 	out.CommonStoragePoolOptions = in.CommonStoragePoolOptions
 	in.CommonPhysicalStorageOptions.DeepCopyInto(&out.CommonPhysicalStorageOptions)
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StoragePoolLVM.
@@ -141,7 +138,6 @@ func (in *StoragePoolLVMThin) DeepCopyInto(out *StoragePoolLVMThin) {
 	*out = *in
 	out.CommonStoragePoolOptions = in.CommonStoragePoolOptions
 	in.CommonPhysicalStorageOptions.DeepCopyInto(&out.CommonPhysicalStorageOptions)
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StoragePoolLVMThin.
@@ -157,7 +153,6 @@ func (in *StoragePoolLVMThin) DeepCopy() *StoragePoolLVMThin {
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *StoragePoolStatus) DeepCopyInto(out *StoragePoolStatus) {
 	*out = *in
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StoragePoolStatus.
@@ -174,7 +169,6 @@ func (in *StoragePoolStatus) DeepCopy() *StoragePoolStatus {
 func (in *StoragePoolZFS) DeepCopyInto(out *StoragePoolZFS) {
 	*out = *in
 	out.CommonStoragePoolOptions = in.CommonStoragePoolOptions
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StoragePoolZFS.
@@ -223,7 +217,6 @@ func (in *StoragePools) DeepCopyInto(out *StoragePools) {
 			}
 		}
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StoragePools.
diff --git a/pkg/apis/piraeus/v1/linstorcontroller_types.go b/pkg/apis/piraeus/v1/linstorcontroller_types.go
index 401cf69..1cfa0ee 100644
--- a/pkg/apis/piraeus/v1/linstorcontroller_types.go
+++ b/pkg/apis/piraeus/v1/linstorcontroller_types.go
@@ -113,6 +113,26 @@ type LinstorControllerSpec struct {
 	// +kubebuilder:validation:Enum=error;warn;info;debug;trace
 	LogLevel shared.LogLevel `json:"logLevel,omitempty"`
 
+	// HttpBindAddress is address used to bind HTTP listener
+	// +optional
+	// +nullable
+	HttpBindAddress string `json:"httpBindAddress"`
+
+	// HttpsBindAddress is address used to bind HTTPS listener
+	// +optional
+	// +nullable
+	HttpsBindAddress string `json:"httpsBindAddress"`
+
+	// Sidecars are additional containers which can be added to the pods.
+	// +optional
+	// +nullable
+	Sidecars []corev1.Container `json:"sidecars"`
+
+	// ExtraVolumes are additional volumes which can be added to the pods.
+	// +optional
+	// +nullable
+	ExtraVolumes []corev1.Volume `json:"extraVolumes"`
+
 	shared.LinstorClientConfig `json:",inline"`
 }
 
diff --git a/pkg/apis/piraeus/v1/linstorcsidriver_types.go b/pkg/apis/piraeus/v1/linstorcsidriver_types.go
index 9fbdd4e..6008500 100644
--- a/pkg/apis/piraeus/v1/linstorcsidriver_types.go
+++ b/pkg/apis/piraeus/v1/linstorcsidriver_types.go
@@ -135,6 +135,26 @@ type LinstorCSIDriverSpec struct {
 	// +kubebuilder:validation:Enum=error;warn;info;debug;trace
 	LogLevel shared.LogLevel `json:"logLevel,omitempty"`
 
+	// ControllerSidecars are additional containers which can be added to the controller pods.
+	// +optional
+	// +nullable
+	ControllerSidecars []corev1.Container `json:"sidecars"`
+
+	// ControllerExtraVolumes are additional volumes which can be added to the controller pods.
+	// +optional
+	// +nullable
+	ControllerExtraVolumes []corev1.Volume `json:"extraVolumes"`
+
+	// NodeSidecars are additional containers which can be added to the node pods.
+	// +optional
+	// +nullable
+	NodeSidecars []corev1.Container `json:"nodeSidecars"`
+
+	// NodeExtraVolumes are additional volumes which can be added to the node pods.
+	// +optional
+	// +nullable
+	NodeExtraVolumes []corev1.Volume `json:"nodeExtraVolumes"`
+
 	shared.LinstorClientConfig `json:",inline"`
 }
 
diff --git a/pkg/apis/piraeus/v1/linstorsatelliteset_types.go b/pkg/apis/piraeus/v1/linstorsatelliteset_types.go
index da45cfd..eb5b826 100644
--- a/pkg/apis/piraeus/v1/linstorsatelliteset_types.go
+++ b/pkg/apis/piraeus/v1/linstorsatelliteset_types.go
@@ -114,6 +114,11 @@ type LinstorSatelliteSetSpec struct {
 	// +nullable
 	MonitoringImage string `json:"monitoringImage"`
 
+	// MonitoringBindAddress is the address used to bind monitoring information exporter.
+	// +optional
+	// +nullable
+	MonitoringBindAddress string `json:"monitoringBindAddress"`
+
 	// LogLevel sets the log level for deployed components.
 	// +nullable
 	// +optional
@@ -121,6 +126,16 @@ type LinstorSatelliteSetSpec struct {
 	LogLevel shared.LogLevel `json:"logLevel,omitempty"`
 
 	shared.LinstorClientConfig `json:",inline"`
+
+	// Sidecars are additional containers which can be added to the pods.
+	// +optional
+	// +nullable
+	Sidecars []corev1.Container `json:"sidecars"`
+
+	// ExtraVolumes are additional volumes which can be added to the pods.
+	// +optional
+	// +nullable
+	ExtraVolumes []corev1.Volume `json:"extraVolumes"`
 }
 
 // LinstorSatelliteSetStatus defines the observed state of LinstorSatelliteSet
diff --git a/pkg/apis/piraeus/v1/zz_generated.deepcopy.go b/pkg/apis/piraeus/v1/zz_generated.deepcopy.go
index c1ebcd1..ac01172 100644
--- a/pkg/apis/piraeus/v1/zz_generated.deepcopy.go
+++ b/pkg/apis/piraeus/v1/zz_generated.deepcopy.go
@@ -1,3 +1,4 @@
+//go:build !ignore_autogenerated
 // +build !ignore_autogenerated
 
 /*
@@ -17,12 +18,12 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
-// Code generated by operator-sdk. DO NOT EDIT.
+// Code generated by controller-gen. DO NOT EDIT.
 
 package v1
 
 import (
-	shared "github.com/piraeusdatastore/piraeus-operator/pkg/apis/piraeus/shared"
+	"github.com/piraeusdatastore/piraeus-operator/pkg/apis/piraeus/shared"
 	corev1 "k8s.io/api/core/v1"
 	runtime "k8s.io/apimachinery/pkg/runtime"
 )
@@ -34,7 +35,6 @@ func (in *LinstorCSIDriver) DeepCopyInto(out *LinstorCSIDriver) {
 	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
 	in.Spec.DeepCopyInto(&out.Spec)
 	in.Status.DeepCopyInto(&out.Status)
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorCSIDriver.
@@ -67,7 +67,6 @@ func (in *LinstorCSIDriverList) DeepCopyInto(out *LinstorCSIDriverList) {
 			(*in)[i].DeepCopyInto(&(*out)[i])
 		}
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorCSIDriverList.
@@ -121,8 +120,35 @@ func (in *LinstorCSIDriverSpec) DeepCopyInto(out *LinstorCSIDriverSpec) {
 			(*in)[i].DeepCopyInto(&(*out)[i])
 		}
 	}
+	if in.ControllerSidecars != nil {
+		in, out := &in.ControllerSidecars, &out.ControllerSidecars
+		*out = make([]corev1.Container, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.ControllerExtraVolumes != nil {
+		in, out := &in.ControllerExtraVolumes, &out.ControllerExtraVolumes
+		*out = make([]corev1.Volume, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.NodeSidecars != nil {
+		in, out := &in.NodeSidecars, &out.NodeSidecars
+		*out = make([]corev1.Container, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.NodeExtraVolumes != nil {
+		in, out := &in.NodeExtraVolumes, &out.NodeExtraVolumes
+		*out = make([]corev1.Volume, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
 	out.LinstorClientConfig = in.LinstorClientConfig
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorCSIDriverSpec.
@@ -143,7 +169,6 @@ func (in *LinstorCSIDriverStatus) DeepCopyInto(out *LinstorCSIDriverStatus) {
 		*out = make([]string, len(*in))
 		copy(*out, *in)
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorCSIDriverStatus.
@@ -163,7 +188,6 @@ func (in *LinstorController) DeepCopyInto(out *LinstorController) {
 	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
 	in.Spec.DeepCopyInto(&out.Spec)
 	in.Status.DeepCopyInto(&out.Status)
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorController.
@@ -196,7 +220,6 @@ func (in *LinstorControllerList) DeepCopyInto(out *LinstorControllerList) {
 			(*in)[i].DeepCopyInto(&(*out)[i])
 		}
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorControllerList.
@@ -257,8 +280,21 @@ func (in *LinstorControllerSpec) DeepCopyInto(out *LinstorControllerSpec) {
 			(*out)[key] = val
 		}
 	}
+	if in.Sidecars != nil {
+		in, out := &in.Sidecars, &out.Sidecars
+		*out = make([]corev1.Container, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.ExtraVolumes != nil {
+		in, out := &in.ExtraVolumes, &out.ExtraVolumes
+		*out = make([]corev1.Volume, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
 	out.LinstorClientConfig = in.LinstorClientConfig
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorControllerSpec.
@@ -302,7 +338,6 @@ func (in *LinstorControllerStatus) DeepCopyInto(out *LinstorControllerStatus) {
 			(*out)[key] = val
 		}
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorControllerStatus.
@@ -322,7 +357,6 @@ func (in *LinstorSatelliteSet) DeepCopyInto(out *LinstorSatelliteSet) {
 	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
 	in.Spec.DeepCopyInto(&out.Spec)
 	in.Status.DeepCopyInto(&out.Status)
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorSatelliteSet.
@@ -355,7 +389,6 @@ func (in *LinstorSatelliteSetList) DeepCopyInto(out *LinstorSatelliteSetList) {
 			(*in)[i].DeepCopyInto(&(*out)[i])
 		}
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorSatelliteSetList.
@@ -411,7 +444,20 @@ func (in *LinstorSatelliteSetSpec) DeepCopyInto(out *LinstorSatelliteSetSpec) {
 		}
 	}
 	out.LinstorClientConfig = in.LinstorClientConfig
-	return
+	if in.Sidecars != nil {
+		in, out := &in.Sidecars, &out.Sidecars
+		*out = make([]corev1.Container, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
+	if in.ExtraVolumes != nil {
+		in, out := &in.ExtraVolumes, &out.ExtraVolumes
+		*out = make([]corev1.Volume, len(*in))
+		for i := range *in {
+			(*in)[i].DeepCopyInto(&(*out)[i])
+		}
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorSatelliteSetSpec.
@@ -443,7 +489,6 @@ func (in *LinstorSatelliteSetStatus) DeepCopyInto(out *LinstorSatelliteSetStatus
 			}
 		}
 	}
-	return
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinstorSatelliteSetStatus.
diff --git a/pkg/controller/linstorcontroller/linstorcontroller_controller.go b/pkg/controller/linstorcontroller/linstorcontroller_controller.go
index 2baafa8..418e420 100644
--- a/pkg/controller/linstorcontroller/linstorcontroller_controller.go
+++ b/pkg/controller/linstorcontroller/linstorcontroller_controller.go
@@ -56,6 +56,9 @@ import (
 // CreateBackups controls if the operator will create a backup of the LINSTOR resources before upgrading.
 var CreateBackups = true
 
+// CreateMonitoring controls if the operator will create a monitoring resources
+var CreateMonitroing = true
+
 // newControllerReconciler returns a new reconcile.Reconciler
 func newControllerReconciler(mgr manager.Manager) reconcile.Reconciler {
 	return &ReconcileLinstorController{client: mgr.GetClient(), scheme: mgr.GetScheme()}
@@ -259,12 +262,19 @@ func (r *ReconcileLinstorController) reconcileSpec(ctx context.Context, controll
 			}
 		}
 
-		serviceMonitorChanged, err := reconcileutil.CreateOrUpdateWithOwner(ctx, r.client, r.scheme, serviceMonitor, controllerResource, reconcileutil.OnPatchErrorRecreate)
-		if err != nil {
-			return fmt.Errorf("failed to reconcile servicemonitor definition: %w", err)
-		}
+		if CreateMonitroing {
+			serviceMonitorChanged, err := reconcileutil.CreateOrUpdateWithOwner(ctx, r.client, r.scheme, serviceMonitor, controllerResource, reconcileutil.OnPatchErrorRecreate)
+			if err != nil {
+				return fmt.Errorf("failed to reconcile servicemonitor definition: %w", err)
+			}
 
-		log.WithField("changed", serviceMonitorChanged).Debug("reconciling monitoring service definition: done")
+			log.WithField("changed", serviceMonitorChanged).Debug("reconciling monitoring service definition: done")
+		} else {
+			err = reconcileutil.DeleteIfOwned(ctx, r.client, &monitoringv1.ServiceMonitor{ObjectMeta: getObjectMeta(controllerResource, "%s")}, controllerResource)
+			if err != nil {
+				return fmt.Errorf("failed to delete monitoring servicemonitor: %w", err)
+			}
+		}
 	}
 
 	log.Debug("reconcile LINSTOR")
@@ -870,7 +880,7 @@ func newDeploymentForResource(controllerResource *piraeusv1.LinstorController) *
 				Spec: corev1.PodSpec{
 					ServiceAccountName: getServiceAccountName(controllerResource),
 					PriorityClassName:  controllerResource.Spec.PriorityClassName.GetName(controllerResource.Namespace),
-					Containers: []corev1.Container{
+					Containers: append([]corev1.Container{
 						{
 							Name:            "linstor-controller",
 							Image:           controllerResource.Spec.ControllerImage,
@@ -899,8 +909,8 @@ func newDeploymentForResource(controllerResource *piraeusv1.LinstorController) *
 							LivenessProbe: &livenessProbe,
 							Resources:     controllerResource.Spec.Resources,
 						},
-					},
-					Volumes:          volumes,
+					}, controllerResource.Spec.Sidecars...),
+					Volumes:          append(volumes, controllerResource.Spec.ExtraVolumes...),
 					ImagePullSecrets: pullSecrets,
 					Affinity:         getDeploymentAffinity(controllerResource),
 					Tolerations:      controllerResource.Spec.Tolerations,
@@ -968,7 +978,13 @@ func NewConfigMapForResource(controllerResource *piraeusv1.LinstorController) (*
 		}
 	}
 
+	var http *linstortoml.ControllerHttp
 	var https *linstortoml.ControllerHttps
+	if controllerResource.Spec.HttpBindAddress != "" {
+		http = &linstortoml.ControllerHttp{
+			ListenAddr: controllerResource.Spec.HttpBindAddress,
+		}
+	}
 	if controllerResource.Spec.LinstorHttpsControllerSecret != "" {
 		yes := true
 
@@ -979,6 +995,9 @@ func NewConfigMapForResource(controllerResource *piraeusv1.LinstorController) (*
 			Truststore:         kubeSpec.LinstorHttpsCertDir + "/truststore.jks",
 			TruststorePassword: kubeSpec.LinstorHttpsCertPassword,
 		}
+		if controllerResource.Spec.HttpsBindAddress != "" {
+			https.ListenAddr = controllerResource.Spec.HttpsBindAddress
+		}
 	}
 
 	linstorControllerConfig := linstortoml.Controller{
@@ -988,6 +1007,7 @@ func NewConfigMapForResource(controllerResource *piraeusv1.LinstorController) (*
 			ClientCertificate: dbClientCertPath,
 			ClientKeyPkcs8Pem: dbClientKeyPath,
 		},
+		Http:  http,
 		Https: https,
 		Logging: &linstortoml.ControllerLogging{
 			LinstorLevel: controllerResource.Spec.LogLevel.ToLinstor(),
diff --git a/pkg/controller/linstorcsidriver/linstorcsidriver_controller.go b/pkg/controller/linstorcsidriver/linstorcsidriver_controller.go
index b782539..865bcff 100644
--- a/pkg/controller/linstorcsidriver/linstorcsidriver_controller.go
+++ b/pkg/controller/linstorcsidriver/linstorcsidriver_controller.go
@@ -735,35 +735,37 @@ func newCSINodeDaemonSet(csiResource *piraeusv1.LinstorCSIDriver) *appsv1.Daemon
 	}
 
 	meta := getObjectMeta(csiResource, NodeDaemonSet, kubeSpec.CSINodeRole)
+	template := corev1.PodTemplateSpec{
+		ObjectMeta: meta,
+		Spec: corev1.PodSpec{
+			PriorityClassName:  csiResource.Spec.PriorityClassName.GetName(csiResource.Namespace),
+			ServiceAccountName: csiResource.Spec.CSINodeServiceAccountName,
+			InitContainers:     []corev1.Container{linstorWaitNodeInitContainer},
+			Containers: append([]corev1.Container{
+				driverRegistrar,
+				csiLivenessProbe,
+				linstorPluginContainer,
+			}, csiResource.Spec.NodeSidecars...),
+			Volumes: append([]corev1.Volume{
+				deviceDir,
+				pluginDir,
+				publishDir,
+				registrationDir,
+			}, csiResource.Spec.NodeExtraVolumes...),
+			DNSPolicy:        corev1.DNSClusterFirstWithHostNet,
+			ImagePullSecrets: pullSecrets,
+			Affinity:         csiResource.Spec.NodeAffinity,
+			Tolerations:      csiResource.Spec.NodeTolerations,
+		},
+	}
+
 	return &appsv1.DaemonSet{
 		ObjectMeta: meta,
 		Spec: appsv1.DaemonSetSpec{
 			Selector: &metav1.LabelSelector{
 				MatchLabels: meta.Labels,
 			},
-			Template: corev1.PodTemplateSpec{
-				ObjectMeta: meta,
-				Spec: corev1.PodSpec{
-					PriorityClassName:  csiResource.Spec.PriorityClassName.GetName(csiResource.Namespace),
-					ServiceAccountName: csiResource.Spec.CSINodeServiceAccountName,
-					InitContainers:     []corev1.Container{linstorWaitNodeInitContainer},
-					Containers: []corev1.Container{
-						driverRegistrar,
-						csiLivenessProbe,
-						linstorPluginContainer,
-					},
-					Volumes: []corev1.Volume{
-						deviceDir,
-						pluginDir,
-						publishDir,
-						registrationDir,
-					},
-					DNSPolicy:        corev1.DNSClusterFirstWithHostNet,
-					ImagePullSecrets: pullSecrets,
-					Affinity:         csiResource.Spec.NodeAffinity,
-					Tolerations:      csiResource.Spec.NodeTolerations,
-				},
-			},
+			Template: template,
 		},
 	}
 }
@@ -949,6 +951,27 @@ func newCSIControllerDeployment(csiResource *piraeusv1.LinstorCSIDriver) *appsv1
 	}
 
 	meta := getObjectMeta(csiResource, ControllerDeployment, kubeSpec.CSIControllerRole)
+	template := corev1.PodTemplateSpec{
+		ObjectMeta: meta,
+		Spec: corev1.PodSpec{
+			PriorityClassName:  csiResource.Spec.PriorityClassName.GetName(csiResource.Namespace),
+			ServiceAccountName: csiResource.Spec.CSIControllerServiceAccountName,
+			InitContainers:     []corev1.Container{linstorWaitAPIInitContainer},
+			Containers: append([]corev1.Container{
+				csiAttacher,
+				csiLivenessProbe,
+				csiProvisioner,
+				csiSnapshotter,
+				csiResizer,
+				linstorPlugin,
+			}, csiResource.Spec.ControllerSidecars...),
+			ImagePullSecrets: pullSecrets,
+			Volumes:          append([]corev1.Volume{socketVolume}, csiResource.Spec.ControllerExtraVolumes...),
+			Affinity:         getControllerAffinity(csiResource),
+			Tolerations:      csiResource.Spec.ControllerTolerations,
+		},
+	}
+
 	return &appsv1.Deployment{
 		ObjectMeta: meta,
 		Spec: appsv1.DeploymentSpec{
@@ -956,26 +979,7 @@ func newCSIControllerDeployment(csiResource *piraeusv1.LinstorCSIDriver) *appsv1
 				MatchLabels: meta.Labels,
 			},
 			Replicas: csiResource.Spec.ControllerReplicas,
-			Template: corev1.PodTemplateSpec{
-				ObjectMeta: meta,
-				Spec: corev1.PodSpec{
-					PriorityClassName:  csiResource.Spec.PriorityClassName.GetName(csiResource.Namespace),
-					ServiceAccountName: csiResource.Spec.CSIControllerServiceAccountName,
-					InitContainers:     []corev1.Container{linstorWaitAPIInitContainer},
-					Containers: []corev1.Container{
-						csiAttacher,
-						csiLivenessProbe,
-						csiProvisioner,
-						csiSnapshotter,
-						csiResizer,
-						linstorPlugin,
-					},
-					ImagePullSecrets: pullSecrets,
-					Volumes:          []corev1.Volume{socketVolume},
-					Affinity:         getControllerAffinity(csiResource),
-					Tolerations:      csiResource.Spec.ControllerTolerations,
-				},
-			},
+			Template: template,
 		},
 	}
 }
diff --git a/pkg/controller/linstorsatelliteset/linstorsatelliteset_controller.go b/pkg/controller/linstorsatelliteset/linstorsatelliteset_controller.go
index efd689b..eb7f9d3 100644
--- a/pkg/controller/linstorsatelliteset/linstorsatelliteset_controller.go
+++ b/pkg/controller/linstorsatelliteset/linstorsatelliteset_controller.go
@@ -30,6 +30,7 @@ import (
 	linstor "github.com/LINBIT/golinstor"
 	lapi "github.com/LINBIT/golinstor/client"
 	"github.com/LINBIT/golinstor/linstortoml"
+	monitoringv1 "github.com/coreos/prometheus-operator/pkg/apis/monitoring/v1"
 	"github.com/sirupsen/logrus"
 	apps "k8s.io/api/apps/v1"
 	corev1 "k8s.io/api/core/v1"
@@ -56,6 +57,9 @@ import (
 	lc "github.com/piraeusdatastore/piraeus-operator/pkg/linstor/client"
 )
 
+// CreateMonitoring controls if the operator will create a monitoring resources
+var CreateMonitroing = true
+
 func newSatelliteReconciler(mgr manager.Manager) reconcile.Reconciler {
 	return &ReconcileLinstorSatelliteSet{client: mgr.GetClient(), scheme: mgr.GetScheme()}
 }
@@ -274,26 +278,40 @@ func (r *ReconcileLinstorSatelliteSet) reconcileMonitoring(ctx context.Context,
 
 	monitoringService := newMonitoringService(satelliteSet)
 
-	monitoringServiceChanged, err := reconcileutil.CreateOrUpdateWithOwner(ctx, r.client, r.scheme, monitoringService, satelliteSet, reconcileutil.OnPatchErrorReturn)
-	if err != nil {
-		return nil, fmt.Errorf("failed to reconcile monitoring service definition")
-	}
+	if CreateMonitroing {
+		monitoringServiceChanged, err := reconcileutil.CreateOrUpdateWithOwner(ctx, r.client, r.scheme, monitoringService, satelliteSet, reconcileutil.OnPatchErrorReturn)
+		if err != nil {
+			return nil, fmt.Errorf("failed to reconcile monitoring service definition")
+		}
 
-	log.WithField("changed", monitoringServiceChanged).Debug("reconciling monitoring service definition: done")
+		log.WithField("changed", monitoringServiceChanged).Debug("reconciling monitoring service definition: done")
+	} else {
+		err = reconcileutil.DeleteIfOwned(ctx, r.client, &corev1.Service{ObjectMeta: getObjectMeta(satelliteSet, "%s-node-monitoring")}, satelliteSet)
+		if err != nil {
+			return nil, fmt.Errorf("failed to delete monitoring service: %w", err)
+		}
+	}
 
 	if monitoring.Enabled(ctx, r.client, r.scheme) {
-		log.Debug("monitoring is available in cluster, reconciling monitoring")
+		if CreateMonitroing {
+			log.Debug("monitoring is available in cluster, reconciling monitoring")
 
-		log.Debug("reconciling ServiceMonitor definition")
+			log.Debug("reconciling ServiceMonitor definition")
 
-		serviceMonitor := monitoring.MonitorForService(monitoringService)
+			serviceMonitor := monitoring.MonitorForService(monitoringService)
 
-		serviceMonitorChanged, err := reconcileutil.CreateOrUpdateWithOwner(ctx, r.client, r.scheme, serviceMonitor, satelliteSet, reconcileutil.OnPatchErrorReturn)
-		if err != nil {
-			return nil, fmt.Errorf("failed to reconcile servicemonitor definition: %w", err)
-		}
+			serviceMonitorChanged, err := reconcileutil.CreateOrUpdateWithOwner(ctx, r.client, r.scheme, serviceMonitor, satelliteSet, reconcileutil.OnPatchErrorReturn)
+			if err != nil {
+				return nil, fmt.Errorf("failed to reconcile servicemonitor definition: %w", err)
+			}
 
-		log.WithField("changed", serviceMonitorChanged).Debug("reconciling monitoring service definition: done")
+			log.WithField("changed", serviceMonitorChanged).Debug("reconciling monitoring service definition: done")
+		} else {
+			err = reconcileutil.DeleteIfOwned(ctx, r.client, &monitoringv1.ServiceMonitor{ObjectMeta: getObjectMeta(satelliteSet, "%s-node-monitoring")}, satelliteSet)
+			if err != nil {
+				return nil, fmt.Errorf("failed to delete monitoring servicemonitor: %w", err)
+			}
+		}
 	}
 
 	return drbdReactorCM, nil
@@ -926,7 +944,7 @@ func newSatelliteDaemonSet(satelliteSet *piraeusv1.LinstorSatelliteSet, satellit
 					DNSPolicy:          corev1.DNSClusterFirstWithHostNet,
 					PriorityClassName:  satelliteSet.Spec.PriorityClassName.GetName(satelliteSet.Namespace),
 					ServiceAccountName: getServiceAccountName(satelliteSet),
-					Containers: []corev1.Container{
+					Containers: append([]corev1.Container{
 						{
 							Name:  "linstor-satellite",
 							Image: satelliteSet.Spec.SatelliteImage,
@@ -964,8 +982,8 @@ func newSatelliteDaemonSet(satelliteSet *piraeusv1.LinstorSatelliteSet, satellit
 							},
 							Resources: satelliteSet.Spec.Resources,
 						},
-					},
-					Volumes: []corev1.Volume{
+					}, satelliteSet.Spec.Sidecars...),
+					Volumes: append([]corev1.Volume{
 						{
 							Name: kubeSpec.LinstorConfDirName,
 							VolumeSource: corev1.VolumeSource{
@@ -1002,7 +1020,7 @@ func newSatelliteDaemonSet(satelliteSet *piraeusv1.LinstorSatelliteSet, satellit
 								},
 							},
 						},
-					},
+					}, satelliteSet.Spec.ExtraVolumes...),
 					ImagePullSecrets: pullSecrets,
 				},
 			},
@@ -1036,6 +1054,7 @@ func daemonsetWithMonitoringContainer(ds *apps.DaemonSet, set *piraeusv1.Linstor
 		LivenessProbe: &corev1.Probe{
 			Handler: corev1.Handler{
 				HTTPGet: &corev1.HTTPGetAction{
+					Host:   set.Spec.MonitoringBindAddress,
 					Scheme: corev1.URISchemeHTTP,
 					Port:   intstr.FromInt(monitoringPort),
 				},
@@ -1116,9 +1135,9 @@ func newMonitoringConfigMap(set *piraeusv1.LinstorSatelliteSet) *corev1.ConfigMa
 		Data: map[string]string{
 			"prometheus.toml": fmt.Sprintf(`
 [[prometheus]]
-address = "0.0.0.0:%d"
+address = "%s:%d"
 enums = true
-`, monitoringPort),
+`, set.Spec.MonitoringBindAddress, monitoringPort),
 		},
 	}
 }
