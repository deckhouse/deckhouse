/*
Copyright 2022 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"text/template"
)

// How to use:
//   - export csv from https://gcpinstances.doit-intl.com/?region=asia-southeast1 to /tmp/gcp.csv
//   - run this generator
func readCsvFile(filePath string) ([][]string, error) {
	f, err := os.Open(filePath)
	if err != nil {
		return nil, fmt.Errorf("unable to read input file %s: %v", filePath, err)
	}
	defer f.Close()

	csvReader := csv.NewReader(f)
	records, err := csvReader.ReadAll()
	if err != nil {
		return nil, fmt.Errorf("unable to parse file as CSV for %s: %v", filePath, err)
	}

	return records, nil
}

func main() {
	instanceTypes := make(map[string]*InstanceType)
	records, err := readCsvFile("/tmp/gcp.csv")
	if err != nil {
		log.Fatal(err)
	}
	for i, rec := range records {
		if i == 0 {
			continue
		}
		instanceType := rec[0]
		cpuStr := rec[1]
		if cpuStr == "shared" {
			continue
		}
		cpu, err := strconv.ParseInt(strings.TrimSuffix(cpuStr, " vCPUs"), 10, 32)
		if err != nil {
			log.Fatal(rec, err)
		}
		memGBStr := rec[2]
		mem, err := strconv.ParseFloat(strings.TrimSuffix(memGBStr, " GiB"), 32)
		if err != nil {
			log.Fatal(rec, err)
		}
		resMem := mem * 1024

		instanceTypes[instanceType] = &InstanceType{
			InstanceType: instanceType,
			VCPU:         int(cpu),
			MemoryMb:     int(resMem),
			GPU:          0,
			Architecture: "amd64",
		}
	}

	f, err := os.Create("/deckhouse/modules/040-node-manager/hooks/internal/instance_types/gcp_instance_types.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	err = packageTemplate.Execute(f, struct {
		InstanceTypes map[string]*InstanceType
	}{
		InstanceTypes: instanceTypes,
	})
	if err != nil {
		log.Fatal(err) //nolint:gocritic
	}
}

type InstanceType struct {
	InstanceType string
	VCPU         int
	MemoryMb     int
	GPU          int
	Architecture string
}

var packageTemplate = template.Must(template.New("").Parse(`/*
Copyright 2022 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was generated by go generate; DO NOT EDIT

package instance_types

// gcpInstanceTypes is a map of gcp resources
var gcpInstanceTypes = map[string]*InstanceType{
{{- range .InstanceTypes }}
	"{{ .InstanceType }}": {
		InstanceType: "{{ .InstanceType }}",
		VCPU:         {{ .VCPU }},
		MemoryMb:     {{ .MemoryMb }},
		GPU:          {{ .GPU }},
	},
{{- end }}
}
`))
