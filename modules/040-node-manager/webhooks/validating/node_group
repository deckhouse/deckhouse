#!/usr/bin/env bash

# Copyright 2021 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source /shell_lib.sh

function __config__(){
  cat <<EOF
configVersion: v1
kubernetes:
  - name: endpoints
    apiVersion: v1
    kind: Endpoints
    queue: "endpoints-config"
    group: main
    executeHookOnEvent: []
    executeHookOnSynchronization: false
    keepFullObjectsInMemory: false
    nameSelector:
      matchNames:
      - kubernetes
    jqFilter: |
      {
        "count": (.subsets[].addresses | length )
      }
  - name: cluster_config
    apiVersion: v1
    kind: Secret
    queue: "cluster-config"
    group: main
    executeHookOnEvent: []
    executeHookOnSynchronization: false
    keepFullObjectsInMemory: false
    namespace:
      nameSelector:
        matchNames: ["kube-system"]
    nameSelector:
      matchNames:
        - d8-cluster-configuration
    jqFilter: '.data."cluster-configuration.yaml" // ""'
  - name: deckhouse_config
    apiVersion: v1
    kind: ConfigMap
    queue: "deckhouse-config"
    group: main
    executeHookOnEvent: []
    executeHookOnSynchronization: false
    keepFullObjectsInMemory: false
    namespace:
      nameSelector:
        matchNames: ["d8-system"]
    nameSelector:
      matchNames: ["deckhouse"]
    jqFilter: '.data.global // ""'
kubernetesValidating:
- name: nodegroup-policy.deckhouse.io
  group: main
  rules:
  - apiGroups:   ["deckhouse.io"]
    apiVersions: ["*"]
    operations:  ["CREATE", "UPDATE"]
    resources:   ["nodegroups"]
    scope:       "Cluster"
EOF
}

function __main__() {
  minPerZone=$(context::jq -r '.review.request.object.spec.cloudInstances.minPerZone // 0')
  maxPerZone=$(context::jq -r '.review.request.object.spec.cloudInstances.maxPerZone // 0')

  if [[ "$maxPerZone" -lt "$minPerZone" ]]; then
    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"it is forbidden to set maxPerZone lower than minPerZone for NodeGroup"}
EOF
    return 0
  fi

  if [[ "$minPerZone" -eq 0 && "$maxPerZone" -gt 0 ]]; then
    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"it is forbidden to set minPerZone to zero while maxPerZone is greater than zero"}
EOF
    return 0
  fi

  # cri.type cannot be changed if count of endpoints < 3
  if context::jq -e -r '.review.request.name == "master"' >/dev/null 2>&1; then
    defaultCRI="$(context::jq -r '.snapshots.cluster_config[0].filterResult' | base64 -d | grep "defaultCRI" | cut -d" " -f2)"
    if [[ -z "${defaultCRI}" ]]; then
      defaultCRI="Containerd"
    fi
    oldCRIType="$(context::jq -r --arg df "${defaultCRI}" '.review.request.oldObject.spec.cri.type // $df')"
    newCRIType="$(context::jq -r --arg df "${defaultCRI}" '.review.request.object.spec.cri.type // $df')"
    endpointsCount="$(context::jq -r '.snapshots.endpoints[].filterResult.count')"

    if [[ ("${newCRIType}" != "${oldCRIType}") && ("${endpointsCount}" -lt 3) ]]; then
      cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":true, "warnings":["it is disruptive to change cri.type in master node group for cluster with apiserver endpoints < 3"]}
EOF
      return 0
    fi
  fi

  missing_taints=""
  has_missing_taints=0
  taints=$(context::jq -r '.review.request.object.spec.nodeTemplate.taints // []')
  if [[ "$taints" != "[]" ]]; then
    customTolerationKeys=$(context::jq -e -r '.snapshots.deckhouse_config[0].filterResult' | yq  e '.' -j - | jq -r '.modules.placement.customTolerationKeys | if . == null then empty else .[] end')
    for taint in $(jq -e -r '.[].key' <<< "$taints"); do
      # Skip 'standart' taints
      if [[ $taint = 'dedicated' || $taint = 'dedicated.deckhouse.io' || $taint = 'node-role.kubernetes.io/control-plane' || $taint = 'node-role.kubernetes.io/master' ]]; then
        continue
      fi
      if ! printf '%s\n' "${customTolerationKeys[@]}" | grep -q -E "^$taint\$"; then
        has_missing_taints=1
        missing_taints="${missing_taints} ${taint}"
      fi
    done
  fi

  if [[ ${has_missing_taints} -eq 1 ]]; then
    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"it is forbidden to create a NodeGroup resource with taints not specified in global.modules.placement.customTolerationKeys in Deckhouse ConfigMap, add:${missing_taints} to customTolerationKeys."}
EOF
    return 0
  fi

  # check for nodeGroup deckhouse.io/v1alpha1
  if context::jq -e -r '.review.request.object.apiVersion == "deckhouse.io/v1alpha1"' >/dev/null 2>&1; then
    if context::jq -e -r '.review.request.object.spec.cri.type != "Docker" and .review.request.object.spec.docker != null' >/dev/null 2>&1; then
      cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"it is forbidden to create NodeGroup resource with set .spec.docker and without .spec.cri.type=\"Docker\""}
EOF
      return 0
    fi

    if context::jq -e -r '.review.request.object.spec.cri.type != "Containerd" and .review.request.object.spec.cri.containerd != null' >/dev/null 2>&1; then
      cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"it is forbidden to create NodeGroup resource with set .spec.cri.containerd and without .spec.cri.type=\"Containerd\""}
EOF
      return 0
    fi
  fi

    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":true}
EOF
}

hook::run "$@"
