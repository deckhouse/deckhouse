diff --git a/cluster-autoscaler/utils/drain/drain.go b/cluster-autoscaler/utils/drain/drain.go
index 5704e7823..ad5a1e614 100644
--- a/cluster-autoscaler/utils/drain/drain.go
+++ b/cluster-autoscaler/utils/drain/drain.go
@@ -18,6 +18,7 @@ package drain
 
 import (
 	"fmt"
+	"strings"
 	"time"
 
 	apiv1 "k8s.io/api/core/v1"
@@ -140,6 +141,20 @@ func GetPodsForDeletionOnNodeDrain(
 				replicated = true
 			}
 		} else if pod_util.IsDaemonSetPod(pod) {
+			fmt.Println("CHECKING daemonset POD: ", pod.Namespace+"/"+  pod.Name)
+			if strings.HasPrefix(pod.Namespace, "d8-") {
+				evictionEnabled := func(pod *apiv1.Pod) bool {
+					if val, ok := pod.Annotations["cluster-autoscaler.kubernetes.io/enable-ds-eviction"]; ok && val == "true" {
+						return true
+					}
+
+					return false
+				}(pod)
+				if !evictionEnabled {
+					fmt.Println("Skipping pod", pod.Namespace +"/"+ pod.Name)
+					continue
+				}
+			}
 			isDaemonSetPod = true
 			// don't have listener for other DaemonSet kind
 			// TODO: we should use a generic client for checking the reference.
@@ -228,6 +243,10 @@ func GetPodsForDeletionOnNodeDrain(
 		}
 		pods = append(pods, pod)
 	}
+
+	for _, ds := range daemonSetPods {
+		fmt.Println("Collected DS", ds.Namespace + "/" + ds.Name)
+	}
 	return pods, daemonSetPods, nil, nil
 }
 
