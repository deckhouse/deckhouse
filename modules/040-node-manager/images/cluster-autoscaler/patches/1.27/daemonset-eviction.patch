diff --git a/cluster-autoscaler/utils/daemonset/daemonset.go b/cluster-autoscaler/utils/daemonset/daemonset.go
index 193ea07f6..9537ddd81 100644
--- a/cluster-autoscaler/utils/daemonset/daemonset.go
+++ b/cluster-autoscaler/utils/daemonset/daemonset.go
@@ -19,9 +19,11 @@ package daemonset
 import (
 	"fmt"
 	"math/rand"
+	"strings"
 
 	appsv1 "k8s.io/api/apps/v1"
 	apiv1 "k8s.io/api/core/v1"
+	"k8s.io/klog/v2"
 	"k8s.io/kubernetes/pkg/controller/daemon"
 	schedulerframework "k8s.io/kubernetes/pkg/scheduler/framework"
 )
@@ -46,14 +48,36 @@ func GetDaemonSetPodsForNode(nodeInfo *schedulerframework.NodeInfo, daemonsets [
 	return result, nil
 }
 
+func shouldEvictDsPod(pod *apiv1.Pod, evictByDefault bool) bool {
+	if strings.HasPrefix(pod.Namespace, "d8-") {
+		if val, ok := pod.Annotations[EnableDsEvictionKey]; !ok || val != "true" {
+			klog.Infof("DaemonSet Pod %s/%s not eligible for eviction: namespace starts with 'd8-' and eviction not enabled", pod.Namespace, pod.Name)
+			return false
+		}
+	}
+
+	if a, ok := pod.Annotations[EnableDsEvictionKey]; ok {
+		if a == "true" {
+			klog.Infof("DaemonSet Pod %s/%s eligible for eviction: annotation %s=true", pod.Namespace, pod.Name, EnableDsEvictionKey)
+			return true
+		}
+		klog.Infof("DaemonSet Pod %s/%s not eligible for eviction: annotation %s=false", pod.Namespace, pod.Name, EnableDsEvictionKey)
+		return false
+	}
+
+	if evictByDefault {
+		klog.Infof("DaemonSet Pod %s/%s eligible for eviction: no annotation %s but evictByDefault is true", pod.Namespace, pod.Name, EnableDsEvictionKey)
+		return true
+	}
+
+	klog.Infof("DaemonSet Pod %s/%s not eligible for eviction: no annotation %s and evictByDefault is false", pod.Namespace, pod.Name, EnableDsEvictionKey)
+	return false
+}
+
 // PodsToEvict returns a list of DaemonSet pods that should be evicted during scale down.
 func PodsToEvict(pods []*apiv1.Pod, evictByDefault bool) (evictable []*apiv1.Pod) {
 	for _, pod := range pods {
-		if a, ok := pod.Annotations[EnableDsEvictionKey]; ok {
-			if a == "true" {
-				evictable = append(evictable, pod)
-			}
-		} else if evictByDefault {
+		if shouldEvictDsPod(pod, evictByDefault) {
 			evictable = append(evictable, pod)
 		}
 	}
