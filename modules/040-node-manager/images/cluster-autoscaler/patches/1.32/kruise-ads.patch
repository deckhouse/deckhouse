diff --git a/cluster-autoscaler/simulator/cluster.go b/cluster-autoscaler/simulator/cluster.go
index 23ccd037e..b9b82d7b6 100644
--- a/cluster-autoscaler/simulator/cluster.go
+++ b/cluster-autoscaler/simulator/cluster.go
@@ -234,6 +234,10 @@ func (r *RemovalSimulator) findPlaceFor(removedNode string, pods []*apiv1.Pod, n
 
 	newpods := make([]*apiv1.Pod, 0, len(pods))
 	for _, podptr := range pods {
+		controllerRef := drain.ControllerRef(podptr)
+		if controllerRef.Kind == "DaemonSet" && controllerRef.APIVersion == "apps.kruise.io/v1alpha1" {
+			continue
+		}
 		newpod := *podptr
 		newpod.Spec.NodeName = ""
 		newpods = append(newpods, &newpod)
diff --git a/cluster-autoscaler/utils/drain/drain.go b/cluster-autoscaler/utils/drain/drain.go
index 02ddb7a12..b2a1f89f6 100644
--- a/cluster-autoscaler/utils/drain/drain.go
+++ b/cluster-autoscaler/utils/drain/drain.go
@@ -116,7 +116,7 @@ func GetPodsForDeletionOnNodeDrain(
 
 		if skipNodesWithCustomControllerPods {
 			// TODO(vadasambar): remove this when we get rid of skipNodesWithCustomControllerPods
-			replicated, isDaemonSetPod, blockingPod, err = legacyCheckForReplicatedPods(listers, pod, minReplica)
+			replicated, isDaemonSetPod, blockingPod, err = legacyCheckForReplicatedPods(listers, pod, pdbs, minReplica)
 			if err != nil {
 				return []*apiv1.Pod{}, []*apiv1.Pod{}, blockingPod, err
 			}
@@ -155,7 +155,7 @@ func GetPodsForDeletionOnNodeDrain(
 	return pods, daemonSetPods, nil, nil
 }
 
-func legacyCheckForReplicatedPods(listers kube_util.ListerRegistry, pod *apiv1.Pod, minReplica int32) (replicated bool, isDaemonSetPod bool, blockingPod *BlockingPod, err error) {
+func legacyCheckForReplicatedPods(listers kube_util.ListerRegistry, pod *apiv1.Pod, pdbs []*policyv1.PodDisruptionBudget, minReplica int32) (replicated bool, isDaemonSetPod bool, blockingPod *BlockingPod, err error) {
 	replicated = false
 	refKind := ""
 	checkReferences := listers != nil
@@ -188,15 +188,33 @@ func legacyCheckForReplicatedPods(listers kube_util.ListerRegistry, pod *apiv1.P
 			replicated = true
 		}
 	} else if pod_util.IsDaemonSetPod(pod) {
-		isDaemonSetPod = true
-		// don't have listener for other DaemonSet kind
-		// TODO: we should use a generic client for checking the reference.
-		if checkReferences && refKind == "DaemonSet" {
-			_, err := listers.DaemonSetLister().DaemonSets(controllerNamespace).Get(controllerRef.Name)
-			if apierrors.IsNotFound(err) {
-				return replicated, isDaemonSetPod, &BlockingPod{Pod: pod, Reason: ControllerNotFound}, fmt.Errorf("daemonset for %s/%s is not present, err: %v", pod.Namespace, pod.Name, err)
-			} else if err != nil {
-				return replicated, isDaemonSetPod, &BlockingPod{Pod: pod, Reason: UnexpectedError}, fmt.Errorf("error when trying to get daemonset for %s/%s , err: %v", pod.Namespace, pod.Name, err)
+		// kruise daemonset
+		if controllerRef.APIVersion == "apps.kruise.io/v1alpha1" {
+			var pdbFound bool
+			for _, pdb := range pdbs {
+				if pdb.Namespace == controllerNamespace && pdb.Name == controllerRef.Name {
+					pdbFound = true
+					if pdb.Status.CurrentHealthy > minReplica {
+						replicated = true
+					}
+					break
+				}
+			}
+			if !pdbFound {
+				return replicated, isDaemonSetPod, &BlockingPod{Pod: pod, Reason: ControllerNotFound}, fmt.Errorf("pdb controlle for %s/%s is not present, err: %v", pod.Namespace, pod.Name, err)
+			}
+			// common daemonset
+		} else {
+			isDaemonSetPod = true
+			// don't have listener for other DaemonSet kind
+			// TODO: we should use a generic client for checking the reference.
+			if checkReferences && refKind == "DaemonSet" {
+				_, err := listers.DaemonSetLister().DaemonSets(controllerNamespace).Get(controllerRef.Name)
+				if apierrors.IsNotFound(err) {
+					return replicated, isDaemonSetPod, &BlockingPod{Pod: pod, Reason: ControllerNotFound}, fmt.Errorf("daemonset for %s/%s is not present, err: %v", pod.Namespace, pod.Name, err)
+				} else if err != nil {
+					return replicated, isDaemonSetPod, &BlockingPod{Pod: pod, Reason: UnexpectedError}, fmt.Errorf("error when trying to get daemonset for %s/%s , err: %v", pod.Namespace, pod.Name, err)
+				}
 			}
 		}
 	} else if refKind == "Job" {
