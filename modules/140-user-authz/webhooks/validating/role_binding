#!/usr/bin/env bash

# Copyright 2024 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source /shell_lib.sh

function __config__(){
  cat <<EOF
configVersion: v1
kubernetes:
  - name: roles
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    queue: authorization
    group: main
    executeHookOnEvent: []
    executeHookOnSynchronization: false
    keepFullObjectsInMemory: false
    labelSelector:
      matchLabels:
        rbac.deckhouse.io/kind: use
    jqFilter: |
      {
        "name": .metadata.name
      }
kubernetesValidating:
- name: role-validating.deckhouse.io
  group: main
  rules:
  - apiGroups:   ["rbac.authorization.k8s.io"]
    apiVersions: ["*"]
    operations:  ["CREATE"]
    resources:   ["clusterrolebindings"]
    scope:       "Cluster"
EOF
}

function __main__() {
  clusterRoleName=$(context::jq -r '.review.request.object.roleRef.name')
  result=$(context::jq -r --arg role "$clusterRoleName" '.snapshots.roles[].filterResult | select(.name == $role)')
  if [[ "$result" ]]; then
        cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"ClusterRole '$clusterRoleName' cannot be used in ClusterRoleBinding. Use RoleBinding instead."}
EOF
  return 0;
  fi
  cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":true}
EOF
}

hook::run "$@"