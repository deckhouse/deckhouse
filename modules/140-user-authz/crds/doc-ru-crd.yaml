spec:
  versions:
    - name: v1alpha1
      schema: &schema
        openAPIV3Schema:
          description: |
            Управляет настройками RBAC и авторизацией по namespace.
          properties:
            spec:
              properties:
                accessLevel:
                  description: |
                    Уровень доступа:
                    * `User` — позволяет получать информацию обо всех объектах (включая доступ к журналам Pod'ов), но не позволяет заходить в контейнеры, читать секреты и выполнять port-forward;
                    * `PrivilegedUser` — то же самое, что и User, но позволяет заходить в контейнеры, читать секреты, а также позволяет удалять Pod'ы (что обеспечивает возможность перезагрузки);
                    * `Editor` — то же самое, что и `PrivilegedUser`, но предоставляет возможность создавать, изменять и удалять namespace и все объекты, которые обычно нужны для прикладных задач;

                      **Важно!** т.к. Editor уполномочен редактировать RoleBindings, он может сам себе расширить полномочия в рамках namespace.
                    * `Admin` — то же самое, что и Editor, но позволяет удалять служебные объекты (производные ресурсы, например, `ReplicaSet`, `certmanager.k8s.io/challenges` и `certmanager.k8s.io/orders`);
                    * `ClusterEditor` — то же самое, что и `Editor`, но позволяет управлять ограниченным набором cluster-wide объектов, которые могут понадобиться для прикладных задач (`ClusterXXXMetric`, `ClusterRoleBindings`, `KeepalivedInstance`, `DaemonSet` и т.д). Роль для работы оператора кластера.

                      **Важно!** т.к. `ClusterEditor` уполномочен редактировать `ClusterRoleBindings`, он может сам себе расширить полномочия.
                    * `ClusterAdmin` — то же самое, что и ClusterEditor + Admin, но позволяет управлять служебными cluster-wide объектами (производные ресурсы, например, MachineSets, Machines, OpenstackInstanceClasses..., а так же ClusterAuthorizationRule). Роль для работы администратора кластера.

                      **Важно!** т.к. `ClusterAdmin` уполномочен редактировать `ClusterRoleBindings`, он может сам себе расширить полномочия.
                    * `SuperAdmin` — разрешены любые действия с любыми объектами, при этом ограничения `limitNamespaces` (см. ниже) продолжат работать.
                portForwarding:
                  description: |
                    Разрешить/запретить выполнять `port-forward`.
                allowScale:
                  description: |
                    Разрешить/запретить масштабировать (выполнять scale) Deployment'ы и StatefulSet'ы.
                allowAccessToSystemNamespaces:
                  description: |
                    Разрешить пользователю доступ в служебные namespace (`["kube-.*", "d8-.*", "loghouse", "default"]`).

                    **Доступно только** с включённым параметром `enableMultiTenancy`.
                limitNamespaces:
                  description: |
                    Список разрешённых namespace в формате регулярных выражений.

                    Политика:
                    * Если список указан, то разрешаем доступ только по нему.
                    * Если список не указан, то считаем, что разрешено всё, кроме системных namespace (см. `spec.allowAccessToSystemNamespaces` ниже).

                    **Доступно только** с включённым параметром `enableMultiTenancy`.
                subjects:
                  description: |
                    Пользователи и/или группы, которым необходимо предоставить права.

                    [Спецификация...](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#subject-v1-rbac-authorization-k8s-io)

                    При использовании совместно с модулем [user-authn](https://deckhouse.ru/documentation/v1/modules/150-user-authn/), обратите внимание на следующие нюансы:
                    - Для выдачи прав конкретному пользователю в качестве имени необходимо указывать его `email`;
                    - При указании группы убедитесь, что необходимые группы допускаются к получению от провайдера, т.е. указаны в соответствующем custom resource [DexProvider](https://deckhouse.ru/documentation/v1/modules/150-user-authn/cr.html#dexprovider).
                  items:
                    properties:
                      kind:
                        description: 'Тип ресурса.'
                      name:
                        description: 'Имя ресурса.'
                        example: 'some-group-name'
                      namespace:
                        description: 'Namespace для ServiceAccount.'
                additionalRoles:
                  description: |
                    Дополнительные роли, которые необходимо выдать для заданных `subjects`.

                    Параметр сделан на крайний случай, вместо него категорически рекомендуется использовать параметр `accessLevel`.
                  items:
                    properties:
                      apiGroup:
                        description: "apiGroup для пользователей."
                      kind:
                        description: 'Kind роли.'
                      name:
                        description: 'Название роли.'
    - name: v1
      served: true
      storage: false
      schema: *schema
