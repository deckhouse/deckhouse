apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: clusterauthorizationrules.deckhouse.io
  labels:
    heritage: deckhouse
    module: user-authz
spec:
  group: deckhouse.io
  scope: Cluster
  names:
    plural: clusterauthorizationrules
    singular: clusterauthorizationrule
    kind: ClusterAuthorizationRule
  preserveUnknownFields: false
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema: &schema
        openAPIV3Schema:
          type: object
          description: |
            This object manages RBAC and namespace-based authorization.
          required:
          - spec
          properties:
            spec:
              type: object
              required:
              - subjects
              properties:
                accessLevel:
                  type: string
                  description: |
                    Access level:
                    * `User` — has access to information about all objects (including viewing pod logs) but cannot exec into containers, read secrets, and perform port-forwarding;
                    * `PrivilegedUser` — the same as `User` + can exec into containers, read secrets, and delete pods (and thus, restart them);
                    * `Editor` — is the same as `PrivilegedUser` + can create and edit namespaces and all objects that are usually required for application tasks;

                      **Caution!** since `Editor` can edit `RoleBindings`, he can broader his privileges within the namespace;
                    * `Admin` — the same as `Editor` + can delete service objects (auxiliary resources such as `ReplicaSet`, `certmanager.k8s.io/challenges`, and `certmanager.k8s.io/orders`);
                    * `ClusterEditor` — the same as `Editor` + can manage a limited set of cluster-wide objects that can be used in application tasks (`ClusterXXXMetric`, `ClusterRoleBindings`, `KeepalivedInstance`, `DaemonSet`, etc.). This role is best suited for cluster operators.

                      **Caution!** since `ClusterEditor` can edit `ClusterRoleBindings`, he can broader his privileges within the cluster;
                    * `ClusterAdmin` — the same as both `ClusterEditor` and `Admin` + can manage cluster-wide service objects (e.g.,  MachineSets, Machines, OpenstackInstanceClasses..., as well as ClusterAuthorizationRule). This role is best suited for cluster administrators.

                      **Caution!** since `ClusterAdmin` can edit `ClusterRoleBindings`, he can broader his privileges within the cluster;
                    * `SuperAdmin` — can perform any actions with any objects (note that `limitNamespaces` (see below) restrictions remain valid).
                  enum: [User,PrivilegedUser,Editor,Admin,ClusterEditor,ClusterAdmin,SuperAdmin]
                  example: 'PrivilegedUser'
                portForwarding:
                  type: boolean
                  default: false
                  description: |
                    Allow/disallow the user to do `port-forwarding`.
                allowScale:
                  type: boolean
                  default: false
                  description: |
                    Defines if scaling of Deployments and StatefulSets is allowed/not allowed.
                allowAccessToSystemNamespaces:
                  type: boolean
                  description: |
                    Allow access to System namespaces (kube-*, d8-*, loghouse, default).

                    Option available **only** if `enableMultiTenancy` option is enabled.
                  x-doc-versionType: ee
                  x-doc-default: false
                limitNamespaces:
                  type: array
                  description: |
                    List of regex-patterns that define namespaces accessible by the user.

                    The decision making process:
                    * If the list is defined, then only its constituents are accessible.
                    * If the list is not defined, then all namespaces are accessible (except for the system ones - see `spec.allowAccessToSystemNamespaces` below).

                    Option available only if `enableMultiTenancy` option is enabled.
                  x-doc-versionType: ee
                  example: ['production-.*']
                  items:
                    type: string
                    minLength: 1
                subjects:
                  type: array
                  description: |
                    Users and/or groups to grant privileges.

                    [Kubernetes API reference...](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#subject-v1-rbac-authorization-k8s-io)

                    Pay attention to the following nuances if this module is used together with the [user-authn](https://deckhouse.io/en/documentation/v1/modules/150-user-authn/) module:
                    - Use the user's `email` as the username to grant privileges to the specific user;
                    - When specifying a group, make sure that the necessary groups are allowed to be received from the provider, i.e., they are defined in the corresponding custom resource [DexProvider](https://deckhouse.io/en/documentation/v1/modules/150-user-authn/cr.html#dexprovider).
                  items:
                    type: object
                    required:
                    - kind
                    - name
                    properties:
                      kind:
                        type: string
                        enum: [User,Group,ServiceAccount]
                        description: 'Type of user identification resource.'
                        example: 'Group'
                      name:
                        type: string
                        minLength: 1
                        description: 'Resource name.'
                        example: 'some-group-name'
                      namespace:
                        type: string
                        minLength: 1
                        description: 'ServiceAccount namespace.'
                additionalRoles:
                  type: array
                  description: |
                    Additional roles to bind for subjects.

                    This parameter is reserved for emergencies. Please, use the `accessLevel` parameter instead.

                  x-doc-example: |
                    ```yaml
                    additionalRoles:
                    - apiGroup: rbac.authorization.k8s.io
                      kind: ClusterRole
                      name: cluster-write-all
                    - apiGroup: rbac.authorization.k8s.io
                      kind: ClusterRole
                      name: cluster-read-all
                    ```
                  items:
                    type: object
                    required:
                    - apiGroup
                    - kind
                    - name
                    properties:
                      apiGroup:
                        type: string
                        description: 'apiGroup for users.'
                        example: 'rbac.authorization.k8s.io'
                        minLength: 1
                      kind:
                        type: string
                        description: 'Kind of the role.'
                        enum: [ClusterRole, Role]
                        example: 'ClusterRole'
                      name:
                        type: string
                        description: 'Name of the role.'
                        minLength: 1
                        example: 'cluster-admin'
    - name: v1
      served: true
      storage: false
      schema: *schema
