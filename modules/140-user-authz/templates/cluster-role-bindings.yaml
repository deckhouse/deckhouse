{{- define "rbac.namespace" }}
  {{- $kind := index . 0}}
  {{- if eq $kind "RoleBinding" }}
  {{ printf "namespace: %s" ( index . 1 ) }}
  {{- end }}
{{- end }}

{{- range $data := list (dict "kind" "RoleBinding" "values" "authRuleCrds") (dict "kind" "ClusterRoleBinding" "values" "clusterAuthRuleCrds") }}
  {{- range $crd := index $.Values.userAuthz.internal $data.values }}
    {{- if $crd.spec.additionalRoles }}
      {{- range $additional_role := $crd.spec.additionalRoles }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: {{ $data.kind }}
metadata:
  name: user-authz:{{ $crd.name }}:additional-role:{{ $additional_role.name }}
  {{- include "rbac.namespace" (list $data.kind $crd.namespace)}}
  {{- include "helm_lib_module_labels" (list $) | nindent 2 }}
roleRef:
  {{- $additional_role | toYaml | nindent 2 }}
subjects:
{{ $crd.spec.subjects | toYaml }}
      {{- end }}
    {{- end }}

    {{- if hasKey $crd.spec "accessLevel" }}
      {{- if not (list "User" "PrivilegedUser" "Editor" "Admin" "ClusterEditor" "ClusterAdmin" "SuperAdmin" | has $crd.spec.accessLevel) }}
        {{- cat "Unsupported accessLevel type" $crd.spec.accessLevel "in" $crd.name "crd" | fail }}
      {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: {{ $data.kind }}
metadata:
  name: user-authz:{{ $crd.name }}:{{ $crd.spec.accessLevel | kebabcase }}
  {{- include "rbac.namespace" (list $data.kind $crd.namespace)}}
  {{- include "helm_lib_module_labels" (list $) | nindent 2 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: user-authz:{{ $crd.spec.accessLevel | kebabcase }}
subjects:
{{ $crd.spec.subjects | toYaml }}

      {{- range $customClusterRole := (pluck ($crd.spec.accessLevel | untitle) $.Values.userAuthz.internal.customClusterRoles | first) }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: {{ $data.kind }}
metadata:
  name: user-authz:{{ $crd.name }}:{{ $crd.spec.accessLevel | kebabcase }}:custom-cluster-role:{{ $customClusterRole }}
  {{- include "rbac.namespace" (list $data.kind $crd.namespace)}}
  {{- include "helm_lib_module_labels" (list $) | nindent 2 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ $customClusterRole }}
subjects:
{{ $crd.spec.subjects | toYaml }}
      {{- end }}
    {{- end }}

    {{- if hasKey $crd.spec "portForwarding" }}
      {{- if ($crd.spec.portForwarding | default false) }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: {{ $data.kind }}
metadata:
  name: user-authz:{{ $crd.name }}:port-forward
  {{- include "rbac.namespace" (list $data.kind $crd.namespace)}}
  {{- include "helm_lib_module_labels" (list $) | nindent 2 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: user-authz:port-forward
subjects:
{{ $crd.spec.subjects | toYaml }}
      {{- end }}
    {{- end }}

    {{- if $crd.spec.allowScale }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: {{ $data.kind }}
metadata:
  name: user-authz:{{ $crd.name }}:scale
  {{- include "rbac.namespace" (list $data.kind $crd.namespace)}}
  {{- include "helm_lib_module_labels" (list $) | nindent 2 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: user-authz:scale
subjects:
{{ $crd.spec.subjects | toYaml }}
    {{- end }}
  {{- end }}
{{- end }}
