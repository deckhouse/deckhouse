diff --git a/pkg/prometheus/promcfg.go b/pkg/prometheus/promcfg.go
index 762eb75..7464f92 100644
--- a/pkg/prometheus/promcfg.go
+++ b/pkg/prometheus/promcfg.go
@@ -1688,6 +1688,10 @@ func (cg *ConfigGenerator) generateServiceMonitorConfig(
 
 	relabelings := initRelabelings()
 
+	if cg.endpointRoleFlavor() == kubernetesSDRoleEndpointSlice {
+		relabelings = generateFallbackEndpointSliceRelabeling(relabelings)
+	}
+
 	// Filter targets by services selected by the monitor.
 	// Exact label matches.
 	for _, k := range util.SortedKeys(m.Spec.Selector.MatchLabels) {
@@ -4489,6 +4493,39 @@ func (cg *ConfigGenerator) appendOTLPConfig(cfg yaml.MapSlice) (yaml.MapSlice, e
 		}), nil
 }
 
+func generateFallbackEndpointSliceRelabeling(relabelings []yaml.MapSlice) []yaml.MapSlice {
+	relabelings = append(relabelings, yaml.MapSlice{
+		{Key: "action", Value: "labelmap"},
+		{Key: "regex", Value: "^__meta_kubernetes_endpointslice_(label_.+|labelpresent_.+|annotation_.+|annotationpresent_.+)$"},
+		{Key: "replacement", Value: "__meta_kubernetes_endpoints_${1}"},
+	})
+	relabelings = append(relabelings, yaml.MapSlice{
+		{Key: "action", Value: "labelmap"},
+		{Key: "regex", Value: "^__meta_kubernetes_endpointslice_(port_name|port_protocol|address_target_kind|address_target_name)$"},
+		{Key: "replacement", Value: "__meta_kubernetes_endpoint_${1}"},
+	})
+	relabelings = append(relabelings, yaml.MapSlice{
+		{Key: "source_labels", Value: []string{"__meta_kubernetes_endpointslice_name"}},
+		{Key: "target_label", Value: "__meta_kubernetes_endpoints_name"},
+		{Key: "regex", Value: "(.+)"},
+		{Key: "replacement", Value: "${1}"},
+	})
+	relabelings = append(relabelings, yaml.MapSlice{
+		{Key: "source_labels", Value: []string{"__meta_kubernetes_endpointslice_endpoint_topology_kubernetes_io_hostname"}},
+		{Key: "target_label", Value: "__meta_kubernetes_endpoint_node_name"},
+		{Key: "regex", Value: "(.+)"},
+		{Key: "replacement", Value: "${1}"},
+	})
+	relabelings = append(relabelings, yaml.MapSlice{
+		{Key: "source_labels", Value: []string{"__meta_kubernetes_endpointslice_endpoint_conditions_ready"}},
+		{Key: "target_label", Value: "__meta_kubernetes_endpoint_ready"},
+		{Key: "regex", Value: "(.+)"},
+		{Key: "replacement", Value: "${1}"},
+	})
+
+	return relabelings
+}
+
 func (cg *ConfigGenerator) appendTracingConfig(cfg yaml.MapSlice, s assets.StoreGetter) (yaml.MapSlice, error) {
 	tracingConfig := cg.prom.GetCommonPrometheusFields().TracingConfig
 	if tracingConfig == nil {
-- 

