diff --git a/pkg/prometheus/promcfg.go b/pkg/prometheus/promcfg.go
--- a/pkg/prometheus/promcfg.go	(revision 8eda80dcc5d2a977b493dcaa122f0f2841e48c7b)
+++ b/pkg/prometheus/promcfg.go	(date 1651146264253)
@@ -20,8 +20,9 @@
 	"regexp"
 	"sort"
 	"strings"
+	"time"

-	"github.com/blang/semver/v4"
+	"github.com/blang/semver"
 	"github.com/go-kit/log"
 	"github.com/go-kit/log/level"
 	"github.com/pkg/errors"
@@ -568,6 +569,7 @@
 					apiserverConfig,
 					store,
 					shards,
+					scrapeInterval,
 				),
 			)
 		}
@@ -580,6 +582,7 @@
 					apiserverConfig,
 					store,
 					shards,
+					scrapeInterval,
 				),
 			)
 		}
@@ -592,6 +595,7 @@
 				apiserverConfig,
 				store,
 				shards,
+				scrapeInterval,
 			),
 		)
 	}
@@ -694,6 +698,7 @@
 	i int, apiserverConfig *v1.APIServerConfig,
 	store *assets.Store,
 	shards int32,
+	globalScrapeInterval string,
 ) yaml.MapSlice {
 	cfg := yaml.MapSlice{
 		{
@@ -706,11 +711,25 @@

 	cfg = append(cfg, cg.generateK8SSDConfig(m.Spec.NamespaceSelector, m.Namespace, apiserverConfig, store, kubernetesSDRolePod))

+	globalScrapeIntervalDuration, _ := time.ParseDuration(globalScrapeInterval)
+
 	if ep.Interval != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "scrape_interval", Value: ep.Interval})
 	}
 	if ep.ScrapeTimeout != "" {
-		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: ep.ScrapeTimeout})
+		scrapeTimeout := ep.ScrapeTimeout
+
+		// Prevent setting Scrape Timeout greater than Scrape Interval.
+		podMonitorScrapeTimeoutDuration, _ := time.ParseDuration(string(scrapeTimeout))
+		if ep.Interval != "" {
+			podMonitorScrapeInterval, _ := time.ParseDuration(string(ep.Interval))
+			if podMonitorScrapeTimeoutDuration.Seconds() > podMonitorScrapeInterval.Seconds() {
+				scrapeTimeout = ep.Interval
+			}
+		} else if podMonitorScrapeTimeoutDuration.Seconds() > globalScrapeIntervalDuration.Seconds() {
+			scrapeTimeout = v1.Duration(globalScrapeInterval)
+		}
+		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: scrapeTimeout})
 	}
 	if ep.Path != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "metrics_path", Value: ep.Path})
@@ -910,6 +929,7 @@
 	apiserverConfig *v1.APIServerConfig,
 	store *assets.Store,
 	shards int32,
+	globalScrapeInterval string,
 ) yaml.MapSlice {

 	jobName := fmt.Sprintf("probe/%s/%s", m.Namespace, m.Name)
@@ -929,11 +949,24 @@
 	}
 	cfg = append(cfg, yaml.MapItem{Key: "metrics_path", Value: path})

+	globalScrapeIntervalDuration, _ := time.ParseDuration(globalScrapeInterval)
+
 	if m.Spec.Interval != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "scrape_interval", Value: m.Spec.Interval})
 	}
 	if m.Spec.ScrapeTimeout != "" {
-		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: m.Spec.ScrapeTimeout})
+		scrapeTimeout := m.Spec.ScrapeTimeout
+		// Prevent setting Scrape Timeout greater than Scrape Interval.
+		probeScrapeTimeoutDuration, _ := time.ParseDuration(string(scrapeTimeout))
+		if m.Spec.Interval != "" {
+			podMonitorScrapeInterval, _ := time.ParseDuration(string(m.Spec.Interval))
+			if probeScrapeTimeoutDuration.Seconds() > podMonitorScrapeInterval.Seconds() {
+				scrapeTimeout = m.Spec.Interval
+			}
+		} else if probeScrapeTimeoutDuration.Seconds() > globalScrapeIntervalDuration.Seconds() {
+			scrapeTimeout = v1.Duration(globalScrapeInterval)
+		}
+		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: scrapeTimeout})
 	}
 	if m.Spec.ProberSpec.Scheme != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "scheme", Value: m.Spec.ProberSpec.Scheme})
@@ -1152,6 +1185,7 @@
 	apiserverConfig *v1.APIServerConfig,
 	store *assets.Store,
 	shards int32,
+	globalScrapeInterval string,
 ) yaml.MapSlice {
 	cfg := yaml.MapSlice{
 		{
@@ -1169,11 +1203,24 @@

 	cfg = append(cfg, cg.generateK8SSDConfig(m.Spec.NamespaceSelector, m.Namespace, apiserverConfig, store, role))

+	globalScrapeIntervalDuration, _ := time.ParseDuration(globalScrapeInterval)
+
 	if ep.Interval != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "scrape_interval", Value: ep.Interval})
 	}
 	if ep.ScrapeTimeout != "" {
-		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: ep.ScrapeTimeout})
+		scrapeTimeout := ep.ScrapeTimeout
+		// Prevent setting Scrape Timeout greater than Scrape Interval.
+		serviceMonitorScrapeTimeoutDuration, _ := time.ParseDuration(string(scrapeTimeout))
+		if ep.Interval != "" {
+			serviceMonitorScrapeInterval, _ := time.ParseDuration(string(ep.Interval))
+			if serviceMonitorScrapeTimeoutDuration.Seconds() > serviceMonitorScrapeInterval.Seconds() {
+				scrapeTimeout = ep.Interval
+			}
+		} else if serviceMonitorScrapeTimeoutDuration.Seconds() > globalScrapeIntervalDuration.Seconds() {
+			scrapeTimeout = v1.Duration(globalScrapeInterval)
+		}
+		cfg = append(cfg, yaml.MapItem{Key: "scrape_timeout", Value: scrapeTimeout})
 	}
 	if ep.Path != "" {
 		cfg = append(cfg, yaml.MapItem{Key: "metrics_path", Value: ep.Path})
