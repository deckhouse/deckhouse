diff --git a/cmd/virt-chroot/main.go b/cmd/virt-chroot/main.go
index e28daa07c78c..ce57e0381502 100644
--- a/cmd/virt-chroot/main.go
+++ b/cmd/virt-chroot/main.go
@@ -218,6 +218,7 @@ func main() {
 	createTapCmd.Flags().Uint("uid", 0, "the owner of the tap device")
 	createTapCmd.Flags().Uint("gid", 0, "the group of the owner of the tap device")
 	createTapCmd.Flags().Uint32("queue-number", 0, "the number of queues to use on multi-queued devices")
+	createTapCmd.Flags().String("parent-name", "", "the name of parent device for macvtap")
 	createTapCmd.Flags().Uint32("mtu", 1500, "the link MTU of the tap device")
 
 	createMDEVCmd := NewCreateMDEVCommand()
diff --git a/cmd/virt-chroot/tap-device-maker.go b/cmd/virt-chroot/tap-device-maker.go
index 4f39328c930c..30f2101f2b56 100644
--- a/cmd/virt-chroot/tap-device-maker.go
+++ b/cmd/virt-chroot/tap-device-maker.go
@@ -2,8 +2,12 @@ package main
 
 import (
 	"fmt"
+	"io/ioutil"
+	"os"
+	"path/filepath"
 	"strconv"
 	"strings"
+	"syscall"
 	"time"
 
 	"github.com/spf13/cobra"
@@ -11,41 +15,108 @@ import (
 	"golang.org/x/sys/unix"
 )
 
-func createTapDevice(name string, owner uint, group uint, queueNumber int, mtu int) error {
-	tapDevice := &netlink.Tuntap{
-		LinkAttrs:  netlink.LinkAttrs{Name: name},
-		Mode:       unix.IFF_TAP,
-		NonPersist: false,
-		Queues:     queueNumber,
-		Owner:      uint32(owner),
-		Group:      uint32(group),
+func createTapDevice(name string, parentName string, owner uint, group uint, queueNumber int, mtu int) error {
+	if parentName == "" {
+		// Parent not specified. Create a tap interface.
+		tapDevice := &netlink.Tuntap{
+			LinkAttrs:  netlink.LinkAttrs{Name: name},
+			Mode:       unix.IFF_TAP,
+			NonPersist: false,
+			Queues:     queueNumber,
+			Owner:      uint32(owner),
+			Group:      uint32(group),
+		}
+
+		// when netlink receives a request for a tap device with 1 queue, it uses
+		// the MULTI_QUEUE flag, which differs from libvirt; as such, we need to
+		// manually request the single queue flags, enabling libvirt to consume
+		// the tap device.
+		// See https://github.com/vishvananda/netlink/issues/574
+		if queueNumber == 1 {
+			tapDevice.Flags = netlink.TUNTAP_DEFAULTS
+		}
+
+		// Device creation is retried due to https://bugzilla.redhat.com/1933627
+		// which has been observed on multiple occasions on CI runs.
+		const retryAttempts = 5
+		attempt, err := retry(retryAttempts, func() error {
+			return netlink.LinkAdd(tapDevice)
+		})
+		if err != nil {
+			return fmt.Errorf("failed to create tap device named %s. Reason: %v", name, err)
+		}
+
+		if err := netlink.LinkSetMTU(tapDevice, mtu); err != nil {
+			return fmt.Errorf("failed to set MTU on tap device named %s. Reason: %v", name, err)
+		}
+
+		fmt.Printf("Successfully created tap device %s, attempt %d\n", name, attempt)
+		return nil
+	}
+
+	// Parent specified. Create a macvtap.
+	p, err := netlink.LinkByName(parentName)
+	if err != nil {
+		return fmt.Errorf("failed to lookup lowerDevice %q: %v", parentName, err)
+	}
+
+	macvtapDevice := &netlink.Macvtap{
+		Macvlan: netlink.Macvlan{
+			LinkAttrs: netlink.LinkAttrs{
+				Name:        name,
+				ParentIndex: p.Attrs().Index,
+				// we had crashes if we did not set txqlen to some value
+				TxQLen: p.Attrs().TxQLen,
+			},
+			Mode: netlink.MACVLAN_MODE_BRIDGE,
+		},
 	}
 
-	// when netlink receives a request for a tap device with 1 queue, it uses
-	// the MULTI_QUEUE flag, which differs from libvirt; as such, we need to
-	// manually request the single queue flags, enabling libvirt to consume
-	// the tap device.
-	// See https://github.com/vishvananda/netlink/issues/574
-	if queueNumber == 1 {
-		tapDevice.Flags = netlink.TUNTAP_DEFAULTS
+	if err := netlink.LinkAdd(macvtapDevice); err != nil {
+		return fmt.Errorf("failed to create macvtap device named %s. Reason: %v", name, err)
 	}
 
-	// Device creation is retried due to https://bugzilla.redhat.com/1933627
-	// which has been observed on multiple occasions on CI runs.
-	const retryAttempts = 5
-	attempt, err := retry(retryAttempts, func() error {
-		return netlink.LinkAdd(tapDevice)
-	})
+	// In case of macvtap we must create /dev/tapX device
+	tapSysPath := filepath.Join("/sys/class/net", name, "macvtap")
+	dirContent, err := ioutil.ReadDir(tapSysPath)
 	if err != nil {
-		return fmt.Errorf("failed to create tap device named %s. Reason: %v", name, err)
+		return fmt.Errorf("failed to open directory %s. error: %v", tapSysPath, err)
 	}
 
-	if err := netlink.LinkSetMTU(tapDevice, mtu); err != nil {
-		return fmt.Errorf("failed to set MTU on tap device named %s. Reason: %v", name, err)
+	devName := ""
+	for _, dir := range dirContent {
+		if strings.HasPrefix(dir.Name(), "tap") {
+			devName = dir.Name()
+			break
+		}
+	}
+	if devName == "" {
+		return fmt.Errorf("failed to find tap device number for %s.", name)
+	}
+
+	devSysPath := filepath.Join(tapSysPath, devName, "dev")
+	devString, err := ioutil.ReadFile(devSysPath)
+
+	if err != nil {
+		return fmt.Errorf("unable to read file %s. error: %v", devSysPath, err)
 	}
 
-	fmt.Printf("Successfully created tap device %s, attempt %d\n", name, attempt)
+	m := strings.Split(strings.TrimSuffix(string(devString), "\n"), ":")
+	major, err := strconv.Atoi(m[0])
+	if err != nil {
+		return fmt.Errorf("unable to convert major %s. error: %v", m[0], err)
+	}
+	minor, err := strconv.Atoi(m[1])
+	if err != nil {
+		return fmt.Errorf("unable to convert minor %s. error: %v", m[1], err)
+	}
+
+	tapDevPath := filepath.Join("/dev", devName)
+	if err := syscall.Mknod(tapDevPath, syscall.S_IFCHR|uint32(os.FileMode(0644)), int(unix.Mkdev(uint32(major), uint32(minor)))); err != nil {
+		return fmt.Errorf("failed to create characted device %s. error: %v", tapDevPath, err)
+	}
 
+	fmt.Printf("Successfully created macvtap device %s", name)
 	return nil
 }
 
@@ -55,6 +126,7 @@ func NewCreateTapCommand() *cobra.Command {
 		Short: "create a tap device in a given PID net ns",
 		RunE: func(cmd *cobra.Command, args []string) error {
 			tapName := cmd.Flag("tap-name").Value.String()
+			parentName := cmd.Flag("parent-name").Value.String()
 			uidStr := cmd.Flag("uid").Value.String()
 			gidStr := cmd.Flag("gid").Value.String()
 			queueNumber, err := cmd.Flags().GetUint32("queue-number")
@@ -75,7 +147,7 @@ func NewCreateTapCommand() *cobra.Command {
 				return fmt.Errorf("could not parse tap device group: %v", err)
 			}
 
-			return createTapDevice(tapName, uint(uid), uint(gid), int(queueNumber), int(mtu))
+			return createTapDevice(tapName, parentName, uint(uid), uint(gid), int(queueNumber), int(mtu))
 		},
 	}
 }
diff --git a/pkg/network/domainspec/generators.go b/pkg/network/domainspec/generators.go
index bf51be780b1f..75d73457a71b 100644
--- a/pkg/network/domainspec/generators.go
+++ b/pkg/network/domainspec/generators.go
@@ -50,14 +50,16 @@ type LibvirtSpecGenerator interface {
 func NewMacvtapLibvirtSpecGenerator(
 	iface *v1.Interface,
 	domain *api.Domain,
+	cachedDomainInterface api.Interface,
 	podInterfaceName string,
 	handler netdriver.NetworkHandler,
 ) *MacvtapLibvirtSpecGenerator {
 	return &MacvtapLibvirtSpecGenerator{
-		vmiSpecIface:     iface,
-		domain:           domain,
-		podInterfaceName: podInterfaceName,
-		handler:          handler,
+		vmiSpecIface:          iface,
+		domain:                domain,
+		cachedDomainInterface: cachedDomainInterface,
+		podInterfaceName:      podInterfaceName,
+		handler:               handler,
 	}
 }
 
@@ -245,10 +247,11 @@ func (b *SlirpLibvirtSpecGenerator) Generate() error {
 }
 
 type MacvtapLibvirtSpecGenerator struct {
-	vmiSpecIface     *v1.Interface
-	domain           *api.Domain
-	podInterfaceName string
-	handler          netdriver.NetworkHandler
+	vmiSpecIface          *v1.Interface
+	domain                *api.Domain
+	cachedDomainInterface api.Interface
+	podInterfaceName      string
+	handler               netdriver.NetworkHandler
 }
 
 func (b *MacvtapLibvirtSpecGenerator) Generate() error {
@@ -274,22 +277,28 @@ func (b *MacvtapLibvirtSpecGenerator) discoverDomainIfaceSpec() (*api.Interface,
 		log.Log.Reason(err).Errorf(linkIfaceFailFmt, b.podInterfaceName)
 		return nil, err
 	}
-	mac, err := virtnetlink.RetrieveMacAddressFromVMISpecIface(b.vmiSpecIface)
-	if err != nil {
-		return nil, err
+	_, dummy := podNicLink.(*netlink.Dummy)
+	if dummy {
+		newPodNicName := virtnetlink.GenerateNewBridgedVmiInterfaceName(b.podInterfaceName)
+		podNicLink, err = b.handler.LinkByName(newPodNicName)
+		if err != nil {
+			log.Log.Reason(err).Errorf(linkIfaceFailFmt, newPodNicName)
+			return nil, err
+		}
 	}
-	if mac == nil {
-		mac = &podNicLink.Attrs().HardwareAddr
+
+	b.cachedDomainInterface.MTU = &api.MTU{Size: strconv.Itoa(podNicLink.Attrs().MTU)}
+
+	// In case of macvtap-cni, we don't rename any interfaces
+	deviceName := b.podInterfaceName
+	if podNicLink.Type() != "macvtap" {
+		deviceName = virtnetlink.GenerateTapDeviceName(b.podInterfaceName)
 	}
 
-	return &api.Interface{
-		MAC: &api.MAC{MAC: mac.String()},
-		MTU: &api.MTU{Size: strconv.Itoa(podNicLink.Attrs().MTU)},
-		Target: &api.InterfaceTarget{
-			Device:  b.podInterfaceName,
-			Managed: "no",
-		},
-	}, nil
+	b.cachedDomainInterface.Target = &api.InterfaceTarget{
+		Device:  deviceName,
+		Managed: "no"}
+	return &b.cachedDomainInterface, nil
 }
 
 type PasstLibvirtSpecGenerator struct {
diff --git a/pkg/network/domainspec/generators_test.go b/pkg/network/domainspec/generators_test.go
index 57e577b6f185..57a9186e122c 100644
--- a/pkg/network/domainspec/generators_test.go
+++ b/pkg/network/domainspec/generators_test.go
@@ -132,7 +132,7 @@ var _ = Describe("Pod Network", func() {
 				macvtapInterface := &netlink.GenericLink{LinkAttrs: netlink.LinkAttrs{Name: primaryPodIfaceName, MTU: mtu, HardwareAddr: fakeMac}}
 				mockNetwork.EXPECT().LinkByName(primaryPodIfaceName).Return(macvtapInterface, nil)
 				specGenerator = NewMacvtapLibvirtSpecGenerator(
-					&vmi.Spec.Domain.Devices.Interfaces[0], domain, primaryPodIfaceName, mockNetwork)
+					&vmi.Spec.Domain.Devices.Interfaces[0], domain, api.Interface{}, primaryPodIfaceName, mockNetwork)
 			})
 
 			It("Should pass a non-privileged macvtap interface to qemu", func() {
diff --git a/pkg/network/driver/BUILD.bazel b/pkg/network/driver/BUILD.bazel
index bcd2cabb4558..58043cff6492 100644
--- a/pkg/network/driver/BUILD.bazel
+++ b/pkg/network/driver/BUILD.bazel
@@ -15,12 +15,15 @@ go_library(
         "//pkg/network/dns:go_default_library",
         "//pkg/network/link:go_default_library",
         "//pkg/util/sysctl:go_default_library",
+        "//pkg/virt-handler/cgroup:go_default_library",
         "//pkg/virt-handler/selinux:go_default_library",
         "//pkg/virt-launcher/virtwrap/converter:go_default_library",
         "//staging/src/kubevirt.io/api/core/v1:go_default_library",
         "//staging/src/kubevirt.io/client-go/log:go_default_library",
         "//vendor/github.com/coreos/go-iptables/iptables:go_default_library",
         "//vendor/github.com/golang/mock/gomock:go_default_library",
+        "//vendor/github.com/opencontainers/runc/libcontainer/configs:go_default_library",
+        "//vendor/github.com/opencontainers/runc/libcontainer/devices:go_default_library",
         "//vendor/github.com/vishvananda/netlink:go_default_library",
         "//vendor/k8s.io/utils/net:go_default_library",
     ],
diff --git a/pkg/network/driver/common.go b/pkg/network/driver/common.go
index 5e0cf08cea33..0b4d4208be42 100644
--- a/pkg/network/driver/common.go
+++ b/pkg/network/driver/common.go
@@ -26,8 +26,12 @@ import (
 	"net"
 	"os"
 	"os/exec"
+	"strconv"
+	"strings"
 
 	"github.com/coreos/go-iptables/iptables"
+	"github.com/opencontainers/runc/libcontainer/configs"
+	"github.com/opencontainers/runc/libcontainer/devices"
 	"github.com/vishvananda/netlink"
 
 	"kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/converter"
@@ -44,6 +48,7 @@ import (
 	dhcpserverv6 "kubevirt.io/kubevirt/pkg/network/dhcp/serverv6"
 	"kubevirt.io/kubevirt/pkg/network/dns"
 	"kubevirt.io/kubevirt/pkg/network/link"
+	"kubevirt.io/kubevirt/pkg/virt-handler/cgroup"
 	"kubevirt.io/kubevirt/pkg/virt-handler/selinux"
 )
 
@@ -87,6 +92,7 @@ type NetworkHandler interface {
 	GetNFTIPString(proto iptables.Protocol) string
 	CreateTapDevice(tapName string, queueNumber uint32, launcherPID int, mtu int, tapOwner string) error
 	BindTapDeviceToBridge(tapName string, bridgeName string) error
+	CreateMacvtapDevice(tapName string, parentName string, queueNumber uint32, launcherPID int, mtu int, tapOwner string) error
 	DisableTXOffloadChecksum(ifaceName string) error
 }
 
@@ -405,6 +411,101 @@ func buildTapDeviceMaker(tapName string, queueNumber uint32, virtLauncherPID int
 	return selinux.NewContextExecutor(virtLauncherPID, cmd)
 }
 
+func (h *NetworkUtilsHandler) CreateMacvtapDevice(tapName string, parentName string, queueNumber uint32, launcherPID int, mtu int, tapOwner string) error {
+	tapDeviceSELinuxCmdExecutor, err := buildMacvtapDeviceMaker(tapName, parentName, queueNumber, launcherPID, mtu, tapOwner)
+	if err != nil {
+		return err
+	}
+	if err := tapDeviceSELinuxCmdExecutor.Execute(); err != nil {
+		return fmt.Errorf("error creating tap device named %s; %v", tapName, err)
+	}
+
+	args := []string{
+		"exec",
+		"--mount", fmt.Sprintf("/proc/%d/ns/mnt", launcherPID),
+		"--",
+		"/bin/sh", "-c",
+		fmt.Sprintf("cat /sys/class/net/%s/macvtap/tap*/dev", tapName),
+	}
+
+	cmd := exec.Command("virt-chroot", args...)
+
+	log.Log.V(3).Infof("fetching macvtap info. running command: %s", cmd.String())
+	out, err := cmd.Output()
+	if err != nil {
+		if e, ok := err.(*exec.ExitError); ok {
+			if len(e.Stderr) > 0 {
+				return fmt.Errorf("failed to read macvtap info: %v: '%v'", err, string(e.Stderr))
+			}
+		}
+		return fmt.Errorf("failed to read macvtap info: %v", err)
+	}
+
+	m := strings.Split(strings.TrimSuffix(string(out), "\n"), ":")
+	major, err := strconv.Atoi(m[0])
+	if err != nil {
+		return fmt.Errorf("unable to convert major %s. error: %v", m[0], err)
+	}
+	minor, err := strconv.Atoi(m[1])
+	if err != nil {
+		return fmt.Errorf("unable to convert minor %s. error: %v", m[1], err)
+	}
+
+	manager, err := cgroup.NewManagerFromPid(launcherPID)
+	if err != nil {
+		return fmt.Errorf("failed to create cgroup manager. error: %v", err)
+	}
+
+	deviceRule := &devices.Rule{
+		Type:        devices.CharDevice,
+		Major:       int64(major),
+		Minor:       int64(minor),
+		Permissions: "rwm",
+		Allow:       true,
+	}
+
+	err = manager.Set(&configs.Resources{
+		Devices: []*devices.Rule{deviceRule},
+	})
+
+	if err != nil {
+		return fmt.Errorf("cgroup %s had failed to set device rule. error: %v. rule: %+v", manager.GetCgroupVersion(), err, *deviceRule)
+	} else {
+		log.Log.Infof("cgroup %s device rule is set successfully. rule: %+v", manager.GetCgroupVersion(), *deviceRule)
+	}
+
+	tap, err := netlink.LinkByName(tapName)
+	log.Log.V(4).Infof("Looking for tap device: %s", tapName)
+	if err != nil {
+		return fmt.Errorf("could not find tap device %s; %v", tapName, err)
+	}
+
+	err = netlink.LinkSetUp(tap)
+	if err != nil {
+		return fmt.Errorf("failed to set tap device %s up; %v", tapName, err)
+	}
+
+	log.Log.Infof("Successfully configured tap device: %s", tapName)
+	return nil
+}
+
+func buildMacvtapDeviceMaker(tapName string, parentName string, queueNumber uint32, virtLauncherPID int, mtu int, tapOwner string) (*selinux.ContextExecutor, error) {
+	createTapDeviceArgs := []string{
+		"create-tap",
+		"--mount", fmt.Sprintf("/proc/%d/ns/mnt", virtLauncherPID),
+		"--tap-name", tapName,
+		"--parent-name", parentName,
+		"--uid", tapOwner,
+		"--gid", tapOwner,
+		"--queue-number", fmt.Sprintf("%d", queueNumber),
+		"--mtu", fmt.Sprintf("%d", mtu),
+	}
+	// #nosec No risk for attacket injection. createTapDeviceArgs includes predefined strings
+	cmd := exec.Command("virt-chroot", createTapDeviceArgs...)
+
+	return selinux.NewContextExecutor(virtLauncherPID, cmd)
+}
+
 func (h *NetworkUtilsHandler) BindTapDeviceToBridge(tapName string, bridgeName string) error {
 	tap, err := netlink.LinkByName(tapName)
 	log.Log.V(4).Infof("Looking for tap device: %s", tapName)
diff --git a/pkg/network/driver/generated_mock_common.go b/pkg/network/driver/generated_mock_common.go
index 44a01b1ae43a..a0398627cb09 100644
--- a/pkg/network/driver/generated_mock_common.go
+++ b/pkg/network/driver/generated_mock_common.go
@@ -374,6 +374,16 @@ func (_mr *_MockNetworkHandlerRecorder) BindTapDeviceToBridge(arg0, arg1 interfa
 	return _mr.mock.ctrl.RecordCall(_mr.mock, "BindTapDeviceToBridge", arg0, arg1)
 }
 
+func (_m *MockNetworkHandler) CreateMacvtapDevice(tapName string, parentName string, queueNumber uint32, launcherPID int, mtu int, tapOwner string) error {
+	ret := _m.ctrl.Call(_m, "CreateMacvtapDevice", tapName, parentName, queueNumber, launcherPID, mtu, tapOwner)
+	ret0, _ := ret[0].(error)
+	return ret0
+}
+
+func (_mr *_MockNetworkHandlerRecorder) CreateMacvtapDevice(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
+	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMacvtapDevice", arg0, arg1, arg2, arg3, arg4, arg5)
+}
+
 func (_m *MockNetworkHandler) DisableTXOffloadChecksum(ifaceName string) error {
 	ret := _m.ctrl.Call(_m, "DisableTXOffloadChecksum", ifaceName)
 	ret0, _ := ret[0].(error)
diff --git a/pkg/network/infraconfigurators/BUILD.bazel b/pkg/network/infraconfigurators/BUILD.bazel
index 0986fa4d4d4a..786adb48dcf3 100644
--- a/pkg/network/infraconfigurators/BUILD.bazel
+++ b/pkg/network/infraconfigurators/BUILD.bazel
@@ -6,6 +6,7 @@ go_library(
         "bridge.go",
         "common.go",
         "generated_mock_common.go",
+        "macvtap.go",
         "masquerade.go",
         "passt.go",
     ],
diff --git a/pkg/network/infraconfigurators/common.go b/pkg/network/infraconfigurators/common.go
index 39eb138074b2..e3e5e9f74aa8 100644
--- a/pkg/network/infraconfigurators/common.go
+++ b/pkg/network/infraconfigurators/common.go
@@ -47,6 +47,10 @@ func createAndBindTapToBridge(handler netdriver.NetworkHandler, deviceName strin
 	return handler.BindTapDeviceToBridge(deviceName, bridgeIfaceName)
 }
 
+func createMacvtap(handler netdriver.NetworkHandler, deviceName string, parentName string, launcherPID int, mtu int, tapOwner string, vmi *v1.VirtualMachineInstance) error {
+	return handler.CreateMacvtapDevice(deviceName, parentName, calculateNetworkQueues(vmi), launcherPID, mtu, tapOwner)
+}
+
 func calculateNetworkQueues(vmi *v1.VirtualMachineInstance) uint32 {
 	if isMultiqueue(vmi) {
 		return converter.CalculateNetworkQueues(vmi)
diff --git a/pkg/network/infraconfigurators/macvtap.go b/pkg/network/infraconfigurators/macvtap.go
new file mode 100644
index 000000000000..4b81ea2ffb9a
--- /dev/null
+++ b/pkg/network/infraconfigurators/macvtap.go
@@ -0,0 +1,302 @@
+package infraconfigurators
+
+import (
+	"crypto/rand"
+	"fmt"
+	"net"
+	"strconv"
+
+	"github.com/vishvananda/netlink"
+
+	v1 "kubevirt.io/api/core/v1"
+	"kubevirt.io/client-go/log"
+
+	"kubevirt.io/kubevirt/pkg/network/cache"
+	netdriver "kubevirt.io/kubevirt/pkg/network/driver"
+	virtnetlink "kubevirt.io/kubevirt/pkg/network/link"
+	"kubevirt.io/kubevirt/pkg/util"
+	"kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/api"
+)
+
+type MacvtapPodNetworkConfigurator struct {
+	bridgeInterfaceName string
+	vmiSpecIface        *v1.Interface
+	ipamEnabled         bool
+	handler             netdriver.NetworkHandler
+	launcherPID         int
+	vmMac               *net.HardwareAddr
+	podIfaceIP          netlink.Addr
+	podNicLink          netlink.Link
+	podIfaceRoutes      []netlink.Route
+	tapDeviceName       string
+	vmi                 *v1.VirtualMachineInstance
+}
+
+func NewMacvtapPodNetworkConfigurator(vmi *v1.VirtualMachineInstance, vmiSpecIface *v1.Interface, bridgeIfaceName string, launcherPID int, handler netdriver.NetworkHandler) *MacvtapPodNetworkConfigurator {
+	return &MacvtapPodNetworkConfigurator{
+		vmi:                 vmi,
+		vmiSpecIface:        vmiSpecIface,
+		bridgeInterfaceName: bridgeIfaceName,
+		launcherPID:         launcherPID,
+		handler:             handler,
+	}
+}
+
+func (b *MacvtapPodNetworkConfigurator) DiscoverPodNetworkInterface(podIfaceName string) error {
+	link, err := b.handler.LinkByName(podIfaceName)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to get a link for interface: %s", podIfaceName)
+		return err
+	}
+	b.podNicLink = link
+
+	addrList, err := b.handler.AddrList(b.podNicLink, netlink.FAMILY_V4)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to get an ip address for %s", podIfaceName)
+		return err
+	}
+	if len(addrList) == 0 {
+		b.ipamEnabled = false
+	} else {
+		b.podIfaceIP = addrList[0]
+		b.ipamEnabled = true
+		if err := b.learnInterfaceRoutes(); err != nil {
+			return err
+		}
+	}
+
+	b.tapDeviceName = virtnetlink.GenerateTapDeviceName(podIfaceName)
+
+	b.vmMac, err = virtnetlink.RetrieveMacAddressFromVMISpecIface(b.vmiSpecIface)
+	if err != nil {
+		return err
+	}
+	if b.vmMac == nil || b.podNicLink.Type() != "macvtap" {
+		b.vmMac = &b.podNicLink.Attrs().HardwareAddr
+	}
+
+	return nil
+}
+
+func (b *MacvtapPodNetworkConfigurator) GenerateNonRecoverableDHCPConfig() *cache.DHCPConfig {
+	if !b.ipamEnabled {
+		return &cache.DHCPConfig{IPAMDisabled: true}
+	}
+
+	dhcpConfig := &cache.DHCPConfig{
+		MAC:          *b.vmMac,
+		IPAMDisabled: !b.ipamEnabled,
+		IP:           b.podIfaceIP,
+	}
+
+	if b.ipamEnabled && len(b.podIfaceRoutes) > 0 {
+		log.Log.V(4).Infof("got to add %d routes to the DhcpConfig", len(b.podIfaceRoutes))
+		b.decorateDhcpConfigRoutes(dhcpConfig)
+	}
+	return dhcpConfig
+}
+
+func (b *MacvtapPodNetworkConfigurator) PreparePodNetworkInterface() error {
+
+	if b.ipamEnabled {
+		// In case if podNicLink is configured via 'macvtap-cni', we have no access to the lower device.
+		// But we can use existing macvtap on this purpose. This way macvlan will inherit the same parent.
+		if err := b.createMacvlan(); err != nil {
+			log.Log.Reason(err).Errorf("failed to create macvlan device named %s", b.bridgeInterfaceName)
+			return err
+		}
+	}
+
+	if b.podNicLink.Type() == "macvtap" {
+		return nil
+	}
+
+	// Set interface link to down to change its MAC address
+	if err := b.handler.LinkSetDown(b.podNicLink); err != nil {
+		log.Log.Reason(err).Errorf("failed to bring link down for interface: %s", b.podNicLink.Attrs().Name)
+		return err
+	}
+
+	if b.ipamEnabled {
+		// Remove IP from POD interface
+		err := b.handler.AddrDel(b.podNicLink, &b.podIfaceIP)
+
+		if err != nil {
+			log.Log.Reason(err).Errorf("failed to delete address for interface: %s", b.podNicLink.Attrs().Name)
+			return err
+		}
+
+		if err := b.switchPodInterfaceWithDummy(); err != nil {
+			log.Log.Reason(err).Error("failed to switch pod interface with a dummy")
+			return err
+		}
+
+		// Set arp_ignore=1 to avoid
+		// the dummy interface being seen by Duplicate Address Detection (DAD).
+		// Without this, some VMs will lose their ip address after a few
+		// minutes.
+		if err := b.handler.ConfigureIpv4ArpIgnore(); err != nil {
+			log.Log.Reason(err).Errorf("failed to set arp_ignore=1")
+			return err
+		}
+	}
+
+	tapOwner := netdriver.LibvirtUserAndGroupId
+	if util.IsNonRootVMI(b.vmi) {
+		tapOwner = strconv.Itoa(util.NonRootUID)
+	}
+
+	err := createMacvtap(b.handler, b.tapDeviceName, b.podNicLink.Attrs().Name, b.launcherPID, b.podNicLink.Attrs().MTU, tapOwner, b.vmi)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to create tap device named %s", b.tapDeviceName)
+		return err
+	}
+
+	tapDevice, err := b.handler.LinkByName(b.tapDeviceName)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to get tap interface: %s", b.tapDeviceName)
+		return err
+	}
+
+	// Swap MAC addresses with PodNic
+	tapMac := b.podNicLink.Attrs().HardwareAddr
+	podMac := GenerateMac()
+
+	if err := netlink.LinkSetHardwareAddr(b.podNicLink, podMac); err != nil {
+		log.Log.Reason(err).Errorf("failed to set pod interface mac address %s %s, error: %v", b.podNicLink.Attrs().Name, podMac, err)
+		return err
+	}
+	if err := netlink.LinkSetHardwareAddr(tapDevice, tapMac); err != nil {
+		log.Log.Reason(err).Errorf("failed to set tap interface mac address %s %s, error: %v", b.tapDeviceName, tapMac, err)
+		return err
+	}
+
+	if err := b.handler.LinkSetUp(b.podNicLink); err != nil {
+		log.Log.Reason(err).Errorf("failed to bring link up for interface: %s", b.podNicLink.Attrs().Name)
+		return err
+	}
+
+	return nil
+}
+
+func (b *MacvtapPodNetworkConfigurator) GenerateNonRecoverableDomainIfaceSpec() *api.Interface {
+	return &api.Interface{
+		MAC: &api.MAC{MAC: b.podNicLink.Attrs().HardwareAddr.String()},
+	}
+}
+
+func (b *MacvtapPodNetworkConfigurator) learnInterfaceRoutes() error {
+	routes, err := b.handler.RouteList(b.podNicLink, netlink.FAMILY_V4)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to get routes for %s", b.podNicLink.Attrs().Name)
+		return err
+	}
+	if len(routes) == 0 {
+		return fmt.Errorf("no gateway address found in routes for %s", b.podNicLink.Attrs().Name)
+	}
+	b.podIfaceRoutes = routes
+	return nil
+}
+
+func (b *MacvtapPodNetworkConfigurator) decorateDhcpConfigRoutes(dhcpConfig *cache.DHCPConfig) {
+	log.Log.V(4).Infof("the default route is: %s", b.podIfaceRoutes[0].String())
+	dhcpConfig.Gateway = b.podIfaceRoutes[0].Gw
+	if len(b.podIfaceRoutes) > 1 {
+		dhcpRoutes := virtnetlink.FilterPodNetworkRoutes(b.podIfaceRoutes, dhcpConfig)
+		dhcpConfig.Routes = &dhcpRoutes
+	}
+}
+
+func (b *MacvtapPodNetworkConfigurator) createMacvlan() error {
+	m, err := netlink.LinkByName(b.podNicLink.Attrs().Name)
+	if err != nil {
+		return fmt.Errorf("failed to lookup lowerDevice %q: %v", b.podNicLink.Attrs().Name, err)
+	}
+
+	// Create a macvlan
+	macvlanDevice := &netlink.Macvlan{
+		LinkAttrs: netlink.LinkAttrs{
+			Name:        b.bridgeInterfaceName,
+			ParentIndex: m.Attrs().Index,
+			// we had crashes if we did not set txqlen to some value
+			TxQLen: m.Attrs().TxQLen,
+		},
+		Mode: netlink.MACVLAN_MODE_BRIDGE,
+	}
+
+	err = b.handler.LinkAdd(macvlanDevice)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to create a macvlan")
+		return err
+	}
+
+	err = b.handler.LinkSetUp(macvlanDevice)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to bring link up for interface: %s", b.bridgeInterfaceName)
+		return err
+	}
+
+	// set fake ip on a macvlan
+	addr := virtnetlink.GetFakeBridgeIP(b.vmi.Spec.Domain.Devices.Interfaces, b.vmiSpecIface)
+	fakeaddr, _ := b.handler.ParseAddr(addr)
+
+	if err := b.handler.AddrAdd(macvlanDevice, fakeaddr); err != nil {
+		log.Log.Reason(err).Errorf("failed to set macvlan IP")
+		return err
+	}
+
+	return nil
+}
+
+func (b *MacvtapPodNetworkConfigurator) switchPodInterfaceWithDummy() error {
+	originalPodInterfaceName := b.podNicLink.Attrs().Name
+	newPodInterfaceName := virtnetlink.GenerateNewBridgedVmiInterfaceName(originalPodInterfaceName)
+	dummy := &netlink.Dummy{LinkAttrs: netlink.LinkAttrs{Name: originalPodInterfaceName}}
+
+	// Rename pod interface to free the original name for a new dummy interface
+	err := b.handler.LinkSetName(b.podNicLink, newPodInterfaceName)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to rename interface : %s", b.podNicLink.Attrs().Name)
+		return err
+	}
+
+	b.podNicLink, err = b.handler.LinkByName(newPodInterfaceName)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to get a link for interface: %s", newPodInterfaceName)
+		return err
+	}
+
+	// Create a dummy interface named after the original interface
+	err = b.handler.LinkAdd(dummy)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to create dummy interface : %s", originalPodInterfaceName)
+		return err
+	}
+
+	// Replace original pod interface IP address to the dummy
+	// Since the dummy is not connected to anything, it should not affect networking
+	// Replace will add if ip doesn't exist or modify the ip
+	err = b.handler.AddrReplace(dummy, &b.podIfaceIP)
+	if err != nil {
+		log.Log.Reason(err).Errorf("failed to replace original IP address to dummy interface: %s", originalPodInterfaceName)
+		return err
+	}
+
+	return nil
+}
+
+func GenerateMac() net.HardwareAddr {
+	buf := make([]byte, 6)
+	var mac net.HardwareAddr
+
+	_, err := rand.Read(buf)
+	if err != nil {
+	}
+
+	// Set local bit, ensure unicast address
+	buf[0] = (buf[0] | 2) & 0xfe
+
+	mac = append(mac, buf[0], buf[1], buf[2], buf[3], buf[4], buf[5])
+
+	return mac
+}
diff --git a/pkg/network/setup/podnic.go b/pkg/network/setup/podnic.go
index bb1b2c28d89d..3bd022d34d85 100644
--- a/pkg/network/setup/podnic.go
+++ b/pkg/network/setup/podnic.go
@@ -81,6 +81,13 @@ func newPhase1PodNIC(vmi *v1.VirtualMachineInstance, network *v1.Network, handle
 	} else if podnic.vmiSpecIface.Passt != nil {
 		podnic.infraConfigurator = infraconfigurators.NewPasstPodNetworkConfigurator(
 			podnic.handler)
+	} else if podnic.vmiSpecIface.Macvtap != nil {
+		podnic.infraConfigurator = infraconfigurators.NewMacvtapPodNetworkConfigurator(
+			podnic.vmi,
+			podnic.vmiSpecIface,
+			generateInPodBridgeInterfaceName(podnic.podInterfaceName),
+			*podnic.launcherPID,
+			podnic.handler)
 	}
 	return podnic, nil
 }
@@ -267,7 +274,7 @@ func (l *podNIC) PlugPhase2(domain *api.Domain) error {
 
 func (l *podNIC) newDHCPConfigurator() dhcpconfigurator.Configurator {
 	var dhcpConfigurator dhcpconfigurator.Configurator
-	if l.vmiSpecIface.Bridge != nil {
+	if l.vmiSpecIface.Bridge != nil || l.vmiSpecIface.Macvtap != nil {
 		dhcpConfigurator = dhcpconfigurator.NewBridgeConfigurator(
 			l.cacheCreator,
 			getPIDString(l.launcherPID),
@@ -307,7 +314,14 @@ func (l *podNIC) newLibvirtSpecGenerator(domain *api.Domain) domainspec.LibvirtS
 		return domainspec.NewSlirpLibvirtSpecGenerator(l.vmiSpecIface, domain)
 	}
 	if l.vmiSpecIface.Macvtap != nil {
-		return domainspec.NewMacvtapLibvirtSpecGenerator(l.vmiSpecIface, domain, l.podInterfaceName, l.handler)
+		cachedDomainIface, err := l.cachedDomainInterface()
+		if err != nil {
+			return nil
+		}
+		if cachedDomainIface == nil {
+			cachedDomainIface = &api.Interface{}
+		}
+		return domainspec.NewMacvtapLibvirtSpecGenerator(l.vmiSpecIface, domain, *cachedDomainIface, l.podInterfaceName, l.handler)
 	}
 	if l.vmiSpecIface.Passt != nil {
 		return domainspec.NewPasstLibvirtSpecGenerator(l.vmiSpecIface, domain, l.vmi)
diff --git a/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go b/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go
index 91de9bb3a895..d377fdeced6f 100644
--- a/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go
+++ b/pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go
@@ -300,8 +300,6 @@ func validateInterfaceNetworkBasics(field *k8sfield.Path, networkExists bool, id
 		causes = appendStatusCauseForBridgeNotEnabled(field, causes, idx)
 	} else if iface.InterfaceBindingMethod.Macvtap != nil && !config.MacvtapEnabled() {
 		causes = appendStatusCauseForMacvtapFeatureGateNotEnabled(field, causes, idx)
-	} else if iface.InterfaceBindingMethod.Macvtap != nil && networkData.NetworkSource.Multus == nil {
-		causes = appendStatusCauseForMacvtapOnlyAllowedWithMultus(field, causes, idx)
 	} else if iface.InterfaceBindingMethod.Passt != nil && !config.PasstEnabled() {
 		causes = appendStatusCauseForPasstFeatureGateNotEnabled(field, causes, idx)
 	} else if iface.Passt != nil && networkData.Pod == nil {
@@ -510,15 +508,6 @@ func validateForwardPortNonZero(field *k8sfield.Path, forwardPort v1.Port, idx i
 	return causes
 }
 
-func appendStatusCauseForMacvtapOnlyAllowedWithMultus(field *k8sfield.Path, causes []metav1.StatusCause, idx int) []metav1.StatusCause {
-	causes = append(causes, metav1.StatusCause{
-		Type:    metav1.CauseTypeFieldValueInvalid,
-		Message: "Macvtap interface only implemented with Multus network",
-		Field:   field.Child("domain", "devices", "interfaces").Index(idx).Child("name").String(),
-	})
-	return causes
-}
-
 func appendStatusCauseForMacvtapFeatureGateNotEnabled(field *k8sfield.Path, causes []metav1.StatusCause, idx int) []metav1.StatusCause {
 	causes = append(causes, metav1.StatusCause{
 		Type:    metav1.CauseTypeFieldValueInvalid,
diff --git a/pkg/virt-config/configuration.go b/pkg/virt-config/configuration.go
index 06ddcd1a7c4b..3a953ce40743 100644
--- a/pkg/virt-config/configuration.go
+++ b/pkg/virt-config/configuration.go
@@ -414,7 +414,7 @@ func validateConfig(config *v1.KubeVirtConfiguration) error {
 
 	// set default network interface
 	switch config.NetworkConfiguration.NetworkInterface {
-	case "", string(v1.BridgeInterface), string(v1.SlirpInterface), string(v1.MasqueradeInterface):
+	case "", string(v1.BridgeInterface), string(v1.SlirpInterface), string(v1.MasqueradeInterface), string(v1.MacvtapInterface):
 		break
 	default:
 		return fmt.Errorf("invalid default-network-interface in config: %v", config.NetworkConfiguration.NetworkInterface)
diff --git a/pkg/virt-launcher/virtwrap/converter/network.go b/pkg/virt-launcher/virtwrap/converter/network.go
index 61073f49b30e..5c9ab9c1d572 100644
--- a/pkg/virt-launcher/virtwrap/converter/network.go
+++ b/pkg/virt-launcher/virtwrap/converter/network.go
@@ -85,7 +85,7 @@ func createDomainInterfaces(vmi *v1.VirtualMachineInstance, domain *api.Domain,
 			domainIface.Address = addr
 		}
 
-		if iface.Bridge != nil || iface.Masquerade != nil {
+		if iface.Bridge != nil || iface.Masquerade != nil || iface.Macvtap != nil {
 			// TODO:(ihar) consider abstracting interface type conversion /
 			// detection into drivers
 
@@ -109,21 +109,9 @@ func createDomainInterfaces(vmi *v1.VirtualMachineInstance, domain *api.Domain,
 			if err != nil {
 				return nil, err
 			}
-		} else if iface.Macvtap != nil {
-			if net.Multus == nil {
-				return nil, fmt.Errorf("macvtap interface %s requires Multus meta-cni", iface.Name)
-			}
-
-			domainIface.Type = "ethernet"
-			if iface.BootOrder != nil {
-				domainIface.BootOrder = &api.BootOrder{Order: *iface.BootOrder}
-			} else {
-				domainIface.Rom = &api.Rom{Enabled: "no"}
-			}
 		} else if iface.Passt != nil {
 			domain.Spec.Devices.Emulator = "/usr/bin/qrap"
 		}
-
 		if c.UseLaunchSecurity {
 			// It's necessary to disable the iPXE option ROM as iPXE is not aware of SEV
 			domainIface.Rom = &api.Rom{Enabled: "no"}
diff --git a/staging/src/kubevirt.io/api/core/v1/types.go b/staging/src/kubevirt.io/api/core/v1/types.go
index 4b901f6bcf89..d188f8f0a782 100644
--- a/staging/src/kubevirt.io/api/core/v1/types.go
+++ b/staging/src/kubevirt.io/api/core/v1/types.go
@@ -1508,6 +1508,8 @@ const (
 	MasqueradeInterface NetworkInterfaceType = "masquerade"
 	// Virtual machine instance passt interface
 	PasstInterface NetworkInterfaceType = "passt"
+	// Virtual machine instance macvtap interface
+	MacvtapInterface NetworkInterfaceType = "macvtap"
 )
 
 type DriverCache string
