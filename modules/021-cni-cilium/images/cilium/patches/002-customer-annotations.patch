diff --git a/api/v1/models/ip_a_m_response.go b/api/v1/models/ip_a_m_response.go
index 3828996e7c..3a0a48f120 100644
--- a/api/v1/models/ip_a_m_response.go
+++ b/api/v1/models/ip_a_m_response.go
@@ -33,6 +33,9 @@ type IPAMResponse struct {
 
 	// ipv6
 	IPV6 *IPAMAddressResponse `json:"ipv6,omitempty"`
+
+	// MAC address
+	MAC string `json:"mac,omitempty"`
 }
 
 // Validate validates this IP a m response
diff --git a/daemon/cmd/ipam.go b/daemon/cmd/ipam.go
index ff4b348cb7..eab96fcab9 100644
--- a/daemon/cmd/ipam.go
+++ b/daemon/cmd/ipam.go
@@ -64,6 +64,7 @@ func (h *postIPAM) Handle(params ipamapi.PostIpamParams) middleware.Responder {
 			ExpirationUUID:  ipv4Result.ExpirationUUID,
 			InterfaceNumber: ipv4Result.InterfaceNumber,
 		}
+		resp.MAC = ipv4Result.MAC.String()
 	}
 
 	if ipv6Result != nil {
@@ -76,6 +77,7 @@ func (h *postIPAM) Handle(params ipamapi.PostIpamParams) middleware.Responder {
 			ExpirationUUID:  ipv6Result.ExpirationUUID,
 			InterfaceNumber: ipv6Result.InterfaceNumber,
 		}
+		resp.MAC = ipv6Result.MAC.String()
 	}
 
 	return ipamapi.NewPostIpamCreated().WithPayload(resp)
diff --git a/pkg/datapath/connector/veth.go b/pkg/datapath/connector/veth.go
index 7b3e13f44b..f0cfc22738 100644
--- a/pkg/datapath/connector/veth.go
+++ b/pkg/datapath/connector/veth.go
@@ -66,9 +66,16 @@ func SetupVethWithNames(lxcIfName, tmpIfName string, mtu int, ep *models.Endpoin
 	if err != nil {
 		return nil, nil, fmt.Errorf("unable to generate rnd mac addr: %s", err)
 	}
-	epLXCMAC, err = mac.GenerateRandMAC()
-	if err != nil {
-		return nil, nil, fmt.Errorf("unable to generate rnd mac addr: %s", err)
+	if ep.Mac != "" {
+		epLXCMAC, err = mac.ParseMAC(ep.Mac)
+		if err != nil {
+			return nil, nil, fmt.Errorf("unable to parse peer mac addr: %s", err)
+		}
+	} else {
+		epLXCMAC, err = mac.GenerateRandMAC()
+		if err != nil {
+			return nil, nil, fmt.Errorf("unable to generate rnd mac addr: %s", err)
+		}
 	}
 
 	veth := &netlink.Veth{
diff --git a/pkg/ipam/hostscope.go b/pkg/ipam/hostscope.go
index 7c86293a74..d8d366ae7a 100644
--- a/pkg/ipam/hostscope.go
+++ b/pkg/ipam/hostscope.go
@@ -8,7 +8,10 @@ import (
 	"math/big"
 	"net"
 
+	"strings"
+
 	"github.com/cilium/cilium/pkg/ip"
+	"github.com/cilium/cilium/pkg/k8s/watchers"
 
 	"github.com/cilium/ipam/service/ipallocator"
 )
@@ -16,9 +19,12 @@ import (
 type hostScopeAllocator struct {
 	allocCIDR *net.IPNet
 	allocator *ipallocator.Range
+
+	// for k8s lister
+	k8swatcher *watchers.K8sWatcher
 }
 
-func newHostScopeAllocator(n *net.IPNet) Allocator {
+func newHostScopeAllocator(n *net.IPNet, k8sEventReg K8sEventRegister) Allocator {
 	cidrRange, err := ipallocator.NewCIDRRange(n)
 	if err != nil {
 		panic(err)
@@ -27,6 +33,7 @@ func newHostScopeAllocator(n *net.IPNet) Allocator {
 		allocCIDR: n,
 		allocator: cidrRange,
 	}
+	a.k8swatcher, _ = k8sEventReg.(*watchers.K8sWatcher)
 
 	return a
 }
@@ -52,12 +59,41 @@ func (h *hostScopeAllocator) Release(ip net.IP) error {
 }
 
 func (h *hostScopeAllocator) AllocateNext(owner string) (*AllocationResult, error) {
-	ip, err := h.allocator.AllocateNext()
+	var mac net.HardwareAddr
+	var result AllocationResult
+	var err error
+	if h.k8swatcher != nil {
+		names := strings.Split(owner, "/")
+		pod, err := h.k8swatcher.GetCachedPod(names[0], names[1])
+		if err != nil {
+			return nil, fmt.Errorf("get pod %s info failed %v. ", owner, err)
+		}
+		if pod.Annotations != nil {
+			if pod.Annotations[customPodMacAddr] != "" {
+				result.MAC, err = net.ParseMAC(pod.Annotations[customPodMacAddr])
+				if err != nil {
+					return nil, fmt.Errorf("can not parse mac address: %s", mac)
+				}
+			}
+			if pod.Annotations[customPodIpAddr] != "" {
+				result.IP = net.ParseIP(pod.Annotations[customPodIpAddr])
+				if result.IP == nil {
+					return nil, fmt.Errorf("customer invalid ip: %s. ", pod.Annotations[customPodIpAddr])
+				}
+				err = h.allocator.Allocate(result.IP)
+				if err != nil {
+					return nil, fmt.Errorf("customer ip is not avaliable %s: %w", result.IP.String(), err)
+				}
+				return &result, nil
+			}
+		}
+	}
+
+	result.IP, err = h.allocator.AllocateNext()
 	if err != nil {
 		return nil, err
 	}
-
-	return &AllocationResult{IP: ip}, nil
+	return &result, nil
 }
 
 func (h *hostScopeAllocator) AllocateNextWithoutSyncUpstream(owner string) (*AllocationResult, error) {
diff --git a/pkg/ipam/ipam.go b/pkg/ipam/ipam.go
index 76225125e3..a9bc3842db 100644
--- a/pkg/ipam/ipam.go
+++ b/pkg/ipam/ipam.go
@@ -104,11 +104,11 @@ func NewIPAM(nodeAddressing datapath.NodeAddressing, c Configuration, owner Owne
 		}).Infof("Initializing %s IPAM", c.IPAMMode())
 
 		if c.IPv6Enabled() {
-			ipam.IPv6Allocator = newHostScopeAllocator(nodeAddressing.IPv6().AllocationCIDR().IPNet)
+			ipam.IPv6Allocator = newHostScopeAllocator(nodeAddressing.IPv6().AllocationCIDR().IPNet, k8sEventReg)
 		}
 
 		if c.IPv4Enabled() {
-			ipam.IPv4Allocator = newHostScopeAllocator(nodeAddressing.IPv4().AllocationCIDR().IPNet)
+			ipam.IPv4Allocator = newHostScopeAllocator(nodeAddressing.IPv4().AllocationCIDR().IPNet, k8sEventReg)
 		}
 	case ipamOption.IPAMCRD, ipamOption.IPAMENI, ipamOption.IPAMAzure, ipamOption.IPAMAlibabaCloud:
 		log.Info("Initializing CRD-based IPAM")
diff --git a/pkg/ipam/types.go b/pkg/ipam/types.go
index c85f0373cb..f968ea4445 100644
--- a/pkg/ipam/types.go
+++ b/pkg/ipam/types.go
@@ -12,6 +12,11 @@ import (
 	"github.com/davecgh/go-spew/spew"
 )
 
+const (
+	customPodIpAddr  = "cni.cilium.io/ipAddress"
+	customPodMacAddr = "cni.cilium.io/macAddress"
+)
+
 // AllocationResult is the result of an allocation
 type AllocationResult struct {
 	// IP is the allocated IP
@@ -41,6 +46,9 @@ type AllocationResult struct {
 	// InterfaceNumber is a field for generically identifying an interface.
 	// This is only useful in ENI mode.
 	InterfaceNumber string
+
+	// MAC is the MAC address of the container interface.
+	MAC net.HardwareAddr
 }
 
 // Allocator is the interface for an IP allocator implementation
diff --git a/plugins/cilium-cni/cilium-cni.go b/plugins/cilium-cni/cilium-cni.go
index 0bbde3be7b..9f510bd49a 100644
--- a/plugins/cilium-cni/cilium-cni.go
+++ b/plugins/cilium-cni/cilium-cni.go
@@ -275,7 +275,7 @@ func cmdAdd(args *skel.CmdArgs) (err error) {
 		netNs    ns.NetNS
 	)
 
-	n, err = types.LoadNetConf(args.StdinData)
+	n, err = types.LoadNetConf(args.StdinData, args.Args)
 	if err != nil {
 		err = fmt.Errorf("unable to parse CNI configuration \"%s\": %s", args.StdinData, err)
 		return
@@ -402,6 +402,7 @@ func cmdAdd(args *skel.CmdArgs) (err error) {
 		Addressing:   &models.AddressPair{},
 		K8sPodName:   string(cniArgs.K8S_POD_NAME),
 		K8sNamespace: string(cniArgs.K8S_POD_NAMESPACE),
+		Mac:          ipam.MAC,
 	}
 
 	switch conf.DatapathMode {
@@ -545,7 +546,7 @@ func cmdDel(args *skel.CmdArgs) error {
 	// Note about when to return errors: kubelet will retry the deletion
 	// for a long time. Therefore, only return an error for errors which
 	// are guaranteed to be recoverable.
-	n, err := types.LoadNetConf(args.StdinData)
+	n, err := types.LoadNetConf(args.StdinData, args.Args)
 	if err != nil {
 		err = fmt.Errorf("unable to parse CNI configuration \"%s\": %s", args.StdinData, err)
 		return err
diff --git a/plugins/cilium-cni/cni-install.sh b/plugins/cilium-cni/cni-install.sh
index fc6f1e7642..991b7cabd5 100755
--- a/plugins/cilium-cni/cni-install.sh
+++ b/plugins/cilium-cni/cni-install.sh
@@ -195,6 +195,9 @@ EOF
 {
   "cniVersion": "0.3.1",
   "name": "cilium",
+  "capabilities": {
+    "mac": true
+  },
   "type": "cilium-cni",
   "enable-debug": ${ENABLE_DEBUG}
 }
diff --git a/plugins/cilium-cni/types/types.go b/plugins/cilium-cni/types/types.go
index d52f3d621d..e4f2a7186b 100644
--- a/plugins/cilium-cni/types/types.go
+++ b/plugins/cilium-cni/types/types.go
@@ -22,14 +22,17 @@ import (
 // NetConf is the Cilium specific CNI network configuration
 type NetConf struct {
 	cniTypes.NetConf
-	MTU          int                    `json:"mtu"`
-	Args         Args                   `json:"args"`
-	ENI          eniTypes.ENISpec       `json:"eni,omitempty"`
-	Azure        azureTypes.AzureSpec   `json:"azure,omitempty"`
-	IPAM         ipamTypes.IPAMSpec     `json:"ipam,omitempty"`
-	AlibabaCloud alibabaCloudTypes.Spec `json:"alibaba-cloud,omitempty"`
-	EnableDebug  bool                   `json:"enable-debug"`
-	LogFormat    string                 `json:"log-format"`
+	MTU           int                    `json:"mtu"`
+	Args          Args                   `json:"args,omitempty"`
+	ENI           eniTypes.ENISpec       `json:"eni,omitempty"`
+	Azure         azureTypes.AzureSpec   `json:"azure,omitempty"`
+	IPAM          ipamTypes.IPAMSpec     `json:"ipam,omitempty"`
+	AlibabaCloud  alibabaCloudTypes.Spec `json:"alibaba-cloud,omitempty"`
+	EnableDebug   bool                   `json:"enable-debug"`
+	LogFormat     string                 `json:"log-format"`
+	RuntimeConfig RuntimeConfig          `json:"runtimeConfig,omitempty"`
+
+	Mac string
 }
 
 // NetConfList is a CNI chaining configuration
@@ -73,17 +76,36 @@ func ReadNetConf(path string) (*NetConf, error) {
 		}
 	}
 
-	return LoadNetConf(b)
+	return LoadNetConf(b, "") // TODO??
 }
 
 // LoadNetConf unmarshals a Cilium network configuration from JSON and returns
 // a NetConf together with the CNI version
-func LoadNetConf(bytes []byte) (*NetConf, error) {
+func LoadNetConf(bytes []byte, envArgs string) (*NetConf, error) {
 	n := &NetConf{}
 	if err := json.Unmarshal(bytes, n); err != nil {
 		return nil, fmt.Errorf("failed to load netconf: %s", err)
 	}
 
+	if envArgs != "" {
+		e := MacEnvArgs{}
+		if err := cniTypes.LoadArgs(envArgs, &e); err != nil {
+			return nil, err
+		}
+
+		if e.MAC != "" {
+			n.Mac = string(e.MAC)
+		}
+	}
+
+	if mac := n.Args.Cni.Mac; mac != "" {
+		n.Mac = mac
+	}
+
+	if mac := n.RuntimeConfig.Mac; mac != "" {
+		n.Mac = mac
+	}
+
 	return parsePrevResult(n)
 }
 
@@ -91,6 +113,7 @@ func LoadNetConf(bytes []byte) (*NetConf, error) {
 type ArgsSpec struct {
 	cniTypes.CommonArgs
 	IP                         net.IP
+	MAC                        string
 	K8S_POD_NAME               cniTypes.UnmarshallableString
 	K8S_POD_NAMESPACE          cniTypes.UnmarshallableString
 	K8S_POD_INFRA_CONTAINER_ID cniTypes.UnmarshallableString
@@ -98,4 +121,20 @@ type ArgsSpec struct {
 
 // Args contains arbitrary information a scheduler
 // can pass to the cni plugin
-type Args struct{}
+type Args struct {
+	Cni CiliumArgs `json:"cni,omitempty"`
+}
+
+type CiliumArgs struct {
+	Mac string `json:"mac,omitempty"`
+}
+
+type RuntimeConfig struct {
+	Mac string `json:"mac,omitempty"`
+}
+
+// MacEnvArgs represents CNI_ARGS
+type MacEnvArgs struct {
+	cniTypes.CommonArgs
+	MAC cniTypes.UnmarshallableString `json:"mac,omitempty"`
+}
diff --git a/vendor/github.com/cilium/ipam/service/ipallocator/allocator.go b/vendor/github.com/cilium/ipam/service/ipallocator/allocator.go
index f08e883d5a..453b3a2a3c 100644
--- a/vendor/github.com/cilium/ipam/service/ipallocator/allocator.go
+++ b/vendor/github.com/cilium/ipam/service/ipallocator/allocator.go
@@ -129,18 +129,11 @@ func (r *Range) CIDR() net.IPNet {
 // or has already been reserved.  ErrFull will be returned if there
 // are no addresses left.
 func (r *Range) Allocate(ip net.IP) error {
-	ok, offset := r.contains(ip)
-	if !ok {
-		return &ErrNotInRange{r.net.String()}
-	}
-
-	allocated, err := r.alloc.Allocate(offset)
+	_, offset := r.contains(ip)
+	_, err := r.alloc.Allocate(offset)
 	if err != nil {
 		return err
 	}
-	if !allocated {
-		return ErrAllocated
-	}
 	return nil
 }
 
