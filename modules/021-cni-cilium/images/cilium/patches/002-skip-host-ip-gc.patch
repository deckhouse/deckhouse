Index: daemon/cmd/daemon_main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/daemon/cmd/daemon_main.go b/daemon/cmd/daemon_main.go
--- a/daemon/cmd/daemon_main.go	(revision b0d3140aa079b31d2f3889b0f695cf7add393e68)
+++ b/daemon/cmd/daemon_main.go	(date 1653904794837)
@@ -1678,7 +1678,8 @@
 	bootstrapStats.enableConntrack.Start()
 	log.Info("Starting connection tracking garbage collector")
 	gc.Enable(option.Config.EnableIPv4, option.Config.EnableIPv6,
-		restoredEndpoints.restored, d.endpointManager)
+		restoredEndpoints.restored, d.endpointManager,
+		d.datapath.LocalNodeAddressing())
 	bootstrapStats.enableConntrack.End(true)

 	bootstrapStats.k8sInit.Start()
Index: pkg/maps/ctmap/gc/gc.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkg/maps/ctmap/gc/gc.go b/pkg/maps/ctmap/gc/gc.go
--- a/pkg/maps/ctmap/gc/gc.go	(revision b0d3140aa079b31d2f3889b0f695cf7add393e68)
+++ b/pkg/maps/ctmap/gc/gc.go	(date 1653904794853)
@@ -10,6 +10,7 @@
 	"time"

 	"github.com/cilium/cilium/pkg/bpf"
+	"github.com/cilium/cilium/pkg/datapath"
 	"github.com/cilium/cilium/pkg/endpoint"
 	"github.com/cilium/cilium/pkg/inctimer"
 	"github.com/cilium/cilium/pkg/logging"
@@ -29,7 +30,8 @@
 }

 // Enable enables the connection tracking garbage collection.
-func Enable(ipv4, ipv6 bool, restoredEndpoints []*endpoint.Endpoint, mgr EndpointManager) {
+func Enable(ipv4, ipv6 bool, restoredEndpoints []*endpoint.Endpoint, mgr EndpointManager,
+	nodeAddressing datapath.NodeAddressing) {
 	var (
 		initialScan         = true
 		initialScanComplete = make(chan struct{})
@@ -86,7 +88,8 @@
 			}

 			if len(eps) > 0 || initialScan {
-				mapType, maxDeleteRatio = runGC(nil, ipv4, ipv6, triggeredBySignal, createGCFilter(initialScan, restoredEndpoints, emitEntryCB))
+				gcFilter := createGCFilter(initialScan, restoredEndpoints, emitEntryCB, nodeAddressing)
+				mapType, maxDeleteRatio = runGC(nil, ipv4, ipv6, triggeredBySignal, gcFilter)
 			}
 			for _, e := range eps {
 				if !e.ConntrackLocal() {
@@ -225,7 +228,7 @@
 	return
 }

-func createGCFilter(initialScan bool, restoredEndpoints []*endpoint.Endpoint, emitEntryCB ctmap.EmitCTEntryCBFunc) *ctmap.GCFilter {
+func createGCFilter(initialScan bool, restoredEndpoints []*endpoint.Endpoint, emitEntryCB ctmap.EmitCTEntryCBFunc, nodeAddressing datapath.NodeAddressing) *ctmap.GCFilter {
 	filter := &ctmap.GCFilter{
 		RemoveExpired: true,
 		EmitCTEntryCB: emitEntryCB,
@@ -238,9 +241,34 @@
 	if initialScan {
 		filter.ValidIPs = map[string]struct{}{}
 		for _, ep := range restoredEndpoints {
+			if ep.IsHost() {
+				continue
+			}
 			filter.ValidIPs[ep.IPv6.String()] = struct{}{}
 			filter.ValidIPs[ep.IPv4.String()] = struct{}{}
 		}
+
+		// Once the host firewall is enabled, we will start tracking (and
+		// potentially enforcing policies) on all connections to and from the
+		// host IP addresses. Thus, we also need to avoid GCing the host IPs.
+		if option.Config.EnableHostFirewall {
+			addrs, err := nodeAddressing.IPv4().LocalAddresses()
+			if err != nil {
+				log.WithError(err).Warning("Unable to list local IPv4 addresses")
+			}
+			addrsV6, err := nodeAddressing.IPv4().LocalAddresses()
+			if err != nil {
+				log.WithError(err).Warning("Unable to list local IPv4 addresses")
+			}
+			addrs = append(addrs, addrsV6...)
+
+			for _, ip := range addrs {
+				if option.Config.IsExcludedLocalAddress(ip) {
+					continue
+				}
+				filter.ValidIPs[ip.String()] = struct{}{}
+			}
+		}
 	}

 	return filter
