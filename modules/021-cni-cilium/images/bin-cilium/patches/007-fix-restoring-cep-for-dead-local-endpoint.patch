diff --git a/pkg/k8s/watchers/cilium_endpoint_slice_subscriber.go b/pkg/k8s/watchers/cilium_endpoint_slice_subscriber.go
index 418b23cbc2..60693c117a 100644
--- a/pkg/k8s/watchers/cilium_endpoint_slice_subscriber.go
+++ b/pkg/k8s/watchers/cilium_endpoint_slice_subscriber.go
@@ -4,11 +4,13 @@
 package watchers
 
 import (
+	"net"
 	"time"
 
 	"github.com/sirupsen/logrus"
 
 	"github.com/cilium/cilium/pkg/endpoint"
+	"github.com/cilium/cilium/pkg/node"
 
 	"github.com/cilium/cilium/pkg/k8s"
 	cilium_v2a1 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1"
@@ -148,6 +150,17 @@ func (cs *cesSubscriber) OnDelete(ces *cilium_v2a1.CiliumEndpointSlice) {
 	}
 }
 
+func (cs *cesSubscriber) isDeadLocalEndpoint(c *types.CiliumEndpoint) bool {
+	nodeIPv4 := node.GetIPv4()
+	cepNodeIPv4 := net.ParseIP(c.Networking.NodeIP)
+	if !nodeIPv4.Equal(cepNodeIPv4) {
+		return false
+	}
+
+	p := cs.epCache.LookupPodName(k8sUtils.GetObjNamespaceName(c))
+	return p == nil
+}
+
 // deleteCEP deletes the CEP and CES from the map.
 // If this was last CES for the CEP it triggers endpointDeleted.
 // If this was used CES for the CEP it picks other CES and triggers endpointUpdated.
@@ -159,7 +172,25 @@ func (cs *cesSubscriber) deleteCEPfromCES(CEPName, CESName string, c *types.Cili
 	if !needUpdate {
 		return
 	}
-	cep, exists := cs.cepMap.getCEPLocked(CEPName)
+
+	var cep *types.CiliumEndpoint
+	exists := false
+	for {
+		cep, exists = cs.cepMap.getCEPLocked(CEPName)
+		if !exists || !cs.isDeadLocalEndpoint(cep) {
+			break
+		}
+
+		currentCES := cs.cepMap.currentCES[CEPName]
+		log.WithFields(logrus.Fields{
+			"CESName": currentCES,
+			"CEPName": CEPName,
+		}).Debug("found dead local CEP, calling endpointDeleted")
+
+		cs.cepMap.deleteCEPLocked(CEPName, currentCES)
+		cs.epWatcher.endpointDeleted(cep)
+	}
+
 	if !exists {
 		log.WithFields(logrus.Fields{
 			"CESName": CESName,
-- 
2.34.1

