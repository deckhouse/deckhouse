diff --git a/pkg/redirectpolicy/manager.go b/pkg/redirectpolicy/manager.go
index 9c12fd38cc..dc50d56f83 100644
--- a/pkg/redirectpolicy/manager.go
+++ b/pkg/redirectpolicy/manager.go
@@ -758,16 +758,24 @@ func (rpm *Manager) upsertService(config *LRPConfig, frontendMapping *feMapping)
 			L3n4Addr: be.L3n4Addr,
 		})
 	}
+	LoadBalancerAlgorithm := lb.ToSVCLoadBalancingAlgorithm(option.Config.NodePortAlg)
+	if LoadBalancerAlgorithm == lb.SVCLoadBalancingAlgorithmUndef {
+		log.WithFields(logrus.Fields{
+			"service": config.id.Name,
+		}).Warn("LoadBalancer algorithm not configured, falling back to random")
+		LoadBalancerAlgorithm = lb.SVCLoadBalancingAlgorithmRandom
+	}
 	p := &lb.SVC{
 		Name: lb.ServiceName{
 			Name:      config.id.Name + localRedirectSvcStr,
 			Namespace: config.id.Namespace,
 		},
-		Type:             lb.SVCTypeLocalRedirect,
-		Frontend:         frontendAddr,
-		Backends:         backendAddrs,
-		ExtTrafficPolicy: lb.SVCTrafficPolicyCluster,
-		IntTrafficPolicy: lb.SVCTrafficPolicyCluster,
+		Type:                  lb.SVCTypeLocalRedirect,
+		Frontend:              frontendAddr,
+		Backends:              backendAddrs,
+		ExtTrafficPolicy:      lb.SVCTrafficPolicyCluster,
+		IntTrafficPolicy:      lb.SVCTrafficPolicyCluster,
+		LoadBalancerAlgorithm: LoadBalancerAlgorithm,
 	}
 
 	if _, _, err := rpm.svcManager.UpsertService(p); err != nil {
