diff --git a/pkg/ipam/hostscope.go b/pkg/ipam/hostscope.go
index 7bf0c014a45b..c43420e19b75 100644
--- a/pkg/ipam/hostscope.go
+++ b/pkg/ipam/hostscope.go
@@ -8,6 +8,10 @@ import (
 	"math/big"
 	"net"
 
+	"strings"
+
+	"github.com/cilium/cilium/pkg/k8s/watchers"
+
 	"github.com/cilium/ipam/service/ipallocator"
 
 	"github.com/cilium/cilium/pkg/ip"
@@ -16,9 +20,12 @@ import (
 type hostScopeAllocator struct {
 	allocCIDR *net.IPNet
 	allocator *ipallocator.Range
+
+	// for k8s lister
+	k8swatcher *watchers.K8sWatcher
 }
 
-func newHostScopeAllocator(n *net.IPNet) Allocator {
+func newHostScopeAllocator(n *net.IPNet, k8sEventReg K8sEventRegister) Allocator {
 	cidrRange, err := ipallocator.NewCIDRRange(n)
 	if err != nil {
 		panic(err)
@@ -27,6 +34,7 @@ func newHostScopeAllocator(n *net.IPNet) Allocator {
 		allocCIDR: n,
 		allocator: cidrRange,
 	}
+	a.k8swatcher, _ = k8sEventReg.(*watchers.K8sWatcher)
 
 	return a
 }
@@ -52,12 +60,34 @@ func (h *hostScopeAllocator) Release(ip net.IP) error {
 }
 
 func (h *hostScopeAllocator) AllocateNext(owner string) (*AllocationResult, error) {
-	ip, err := h.allocator.AllocateNext()
+	var result AllocationResult
+	var err error
+	if h.k8swatcher != nil {
+		names := strings.Split(owner, "/")
+		pod, err := h.k8swatcher.GetCachedPod(names[0], names[1])
+		if err != nil {
+			return nil, fmt.Errorf("get pod %s info failed %v. ", owner, err)
+		}
+		if pod.Annotations != nil {
+			if pod.Annotations[customPodIpAddr] != "" {
+				result.IP = net.ParseIP(pod.Annotations[customPodIpAddr])
+				if result.IP == nil {
+					return nil, fmt.Errorf("customer invalid ip: %s. ", pod.Annotations[customPodIpAddr])
+				}
+				err = h.allocator.Allocate(result.IP)
+				if err != nil {
+					return nil, fmt.Errorf("customer ip is not avaliable %s: %w", result.IP.String(), err)
+				}
+				return &result, nil
+			}
+		}
+	}
+
+	result.IP, err = h.allocator.AllocateNext()
 	if err != nil {
 		return nil, err
 	}
-
-	return &AllocationResult{IP: ip}, nil
+	return &result, nil
 }
 
 func (h *hostScopeAllocator) AllocateNextWithoutSyncUpstream(owner string) (*AllocationResult, error) {
diff --git a/pkg/ipam/ipam.go b/pkg/ipam/ipam.go
index 3418929baa85..d6d99d287b85 100644
--- a/pkg/ipam/ipam.go
+++ b/pkg/ipam/ipam.go
@@ -120,11 +120,11 @@ func NewIPAM(nodeAddressing types.NodeAddressing, c Configuration, owner Owner,
 		}).Infof("Initializing %s IPAM", c.IPAMMode())
 
 		if c.IPv6Enabled() {
-			ipam.IPv6Allocator = newHostScopeAllocator(nodeAddressing.IPv6().AllocationCIDR().IPNet)
+			ipam.IPv6Allocator = newHostScopeAllocator(nodeAddressing.IPv6().AllocationCIDR().IPNet, k8sEventReg)
 		}
 
 		if c.IPv4Enabled() {
-			ipam.IPv4Allocator = newHostScopeAllocator(nodeAddressing.IPv4().AllocationCIDR().IPNet)
+			ipam.IPv4Allocator = newHostScopeAllocator(nodeAddressing.IPv4().AllocationCIDR().IPNet, k8sEventReg)
 		}
 	case ipamOption.IPAMClusterPoolV2:
 		log.Info("Initializing ClusterPool v2 IPAM")
diff --git a/pkg/ipam/types.go b/pkg/ipam/types.go
index 66175b7cfaf2..57ff748bca86 100644
--- a/pkg/ipam/types.go
+++ b/pkg/ipam/types.go
@@ -13,6 +13,10 @@ import (
 	"github.com/cilium/cilium/pkg/lock"
 )
 
+const (
+	customPodIpAddr = "cni.cilium.io/ipAddress"
+)
+
 // AllocationResult is the result of an allocation
 type AllocationResult struct {
 	// IP is the allocated IP
diff --git a/vendor/github.com/cilium/ipam/service/ipallocator/allocator.go b/vendor/github.com/cilium/ipam/service/ipallocator/allocator.go
index f08e883d5a87..453b3a2a3c45 100644
--- a/vendor/github.com/cilium/ipam/service/ipallocator/allocator.go
+++ b/vendor/github.com/cilium/ipam/service/ipallocator/allocator.go
@@ -129,18 +129,11 @@ func (r *Range) CIDR() net.IPNet {
 // or has already been reserved.  ErrFull will be returned if there
 // are no addresses left.
 func (r *Range) Allocate(ip net.IP) error {
-	ok, offset := r.contains(ip)
-	if !ok {
-		return &ErrNotInRange{r.net.String()}
-	}
-
-	allocated, err := r.alloc.Allocate(offset)
+	_, offset := r.contains(ip)
+	_, err := r.alloc.Allocate(offset)
 	if err != nil {
 		return err
 	}
-	if !allocated {
-		return ErrAllocated
-	}
 	return nil
 }
 
