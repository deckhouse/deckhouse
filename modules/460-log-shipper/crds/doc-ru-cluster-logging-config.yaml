spec:
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: |
            Описывает источник логов в log-pipeline.

            Каждый CustomResource `ClusterLoggingConfig` описывает правила сбора логов из кластера.
          properties:
            spec:
              properties:
                type:
                  description: |
                    Возможные источники логов.

                    `KubernetesPods` собирает логи с Pod'ов.

                    `File` позволяет читать локальные файлы, доступные на узле.
                kubernetesPods:
                  properties:
                    namespaceSelector:
                      description: Задать фильтр по Namespace.
                      properties:
                        matchNames:
                          description: Собирать логи только с указанных Namespace.
                        excludeNames:
                          description: Собирать логи со всех Namespace кроме указанных в списке.
                        labelSelector:
                          description: |
                            Настройка `labelSelector` позволяет задать фильтр по namespace labels.

                            Подробнее про выражения можно узнать в [документации](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
                          properties:
                            matchLabels:
                              description: Список label, которые должен иметь namespace.
                            matchExpressions:
                              description: Список выражений для label, которые должен иметь namespace.
                    labelSelector:
                      description: |
                        Настройка `labelSelector` позволяет задать фильтр по Pod Labels.

                        Подробнее про выражения можно узнать в [документации](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/).
                      properties:
                        matchLabels:
                          description: Список label, которые должен иметь Pod.
                        matchExpressions:
                          description: Список выражений для label, которые должен иметь Pod.
                file:
                  properties:
                    include:
                      description: Список путей и паттернов для чтения. Поддерживаются wildcards.
                    exclude:
                      description: Список путей и паттернов файлов, которые читать не требуется. Поддерживаются wildcards.
                    lineDelimiter:
                      description: Задание символа новой строки.
                labelFilter:
                  description: |
                    Список правил для фильтрации логов по их лейблам.
                  items:
                    properties:
                      field:
                        description: Имя лейбла для фильтрации.
                      operator:
                        description: |
                          Оператор, который можно применить для фильтрации:
                          * `In` — ищет сроку или элемент в массиве.
                          * `NotIn` — является инверсией оператора `In`.
                          * `Regex` — пытается проверить строку в поле с использованием регулярного выражения (только логи, в которых есть поля подпадающие под регулярное выражение пройдут в хранилище).
                          * `NotRegex` — является инверсией оператора `Regex`, — в хранилище попадут логи, в которых нет поля или же оно не подпадает под регулярное выражение.
                          * `Exists` — проверяет наличие поля и пропускает логи только если поле есть.
                          * `DoesNotExist` — проверяет наличие поля, и пропускает логи только если поле отсутствует.
                      values:
                        description: |
                          Массив значений или регулярных выражений для соответствующих операций. Не работает для операций `Exists` и `DoesNotExist`.

                          Можно использовать целые числа или строки. Поля с числами с плавающей запятой и поля логического типа будут преобразованы в строки при сравнении.
                logFilter:
                  description: |
                    Список фильтров для логов.

                    Только логи, подпавшие под правила, будут сохранены в хранилище.
                  items:
                    properties:
                      field:
                        description: Имя поля для фильтрации. Должно быть пустым для логов в не JSON формате.
                      operator:
                        description: |
                          Оператор, который можно применить для фильтрации:
                          * `In` — ищет сроку или элемент в массиве.
                          * `NotIn` — является инверсией оператора `In`.
                          * `Regex` — пытается проверить строку в поле с использованием регулярного выражения (только логи, в которых есть поля подпадающие под регулярное выражение пройдут в хранилище).
                          * `NotRegex` — является инверсией оператора `Regex`, — в хранилище попадут логи, в которых нет поля или же оно не подпадает под регулярное выражение.
                          * `Exists` — проверяет наличие поля и пропускает логи только если поле есть.
                          * `DoesNotExist` — проверяет наличие поля, и пропускает логи только если поле отсутствует.
                      values:
                        description: |
                          Массив значений или регулярных выражений для соответствующих операций. Не работает для операций `Exists` и `DoesNotExist`.

                          Можно использовать целые числа или строки. Поля с числами с плавающей запятой и поля логического типа будут преобразованы в строки при сравнении.
                multilineParser:
                  description: Список паттернов для определения многострочных логов.
                  properties:
                    type:
                      description: |
                        Типы парсеров:
                        * `None` — не парсить логи.
                        * `General` — парсер, который пытается сливать логи у которых в начале сообщения стоит пробел или табуляция.
                        * `Backslash` — парсер, который парсит многострочные логи в SHELL-формате с обратным слэшом у строк одного сообщения.
                        * `LogWithTime` — парсер, который ожидает что любое новое сообщение начинается с временной метки.
                        * `MultilineJSON` — простой парсер JSON-логов, который предполагает что новое сообщение начинается с символа `{`.
                destinationRefs:
                  description: |
                    Массив имен CustomResource `ClusterLogDestination`, с которыми будет работать этот источник логов.

                    Поля с числовыми и булевыми типами будут преобразованы в строки.
