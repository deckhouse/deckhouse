diff --git a/src/kubernetes/hash_value.rs b/src/kubernetes/hash_value.rs
index 9ef13ea05..da061d539 100644
--- a/src/kubernetes/hash_value.rs
+++ b/src/kubernetes/hash_value.rs
@@ -53,6 +53,17 @@ where
         let metadata = self.0.metadata();
         Some(metadata.name.as_ref()?.as_str())
     }
+
+    /// Get the `metadata` from the `T`'.
+    pub fn metadata(&self) -> ObjectMeta {
+        let metadata = self.0.metadata().clone();
+        metadata
+    }
+
+    /// Gets a mutable reference to the metadata of this resource value.
+    pub fn metadata_mut(&mut self) -> &mut ObjectMeta {
+        self.0.metadata_mut()
+    }
 }

 impl<T> PartialEq<Self> for HashValue<T>
diff --git a/src/kubernetes/reflector.rs b/src/kubernetes/reflector.rs
index 0abe760b7..5c907cebc 100644
--- a/src/kubernetes/reflector.rs
+++ b/src/kubernetes/reflector.rs
@@ -247,6 +247,8 @@ mod tests {
         apimachinery::pkg::apis::meta::v1::{ObjectMeta, WatchEvent},
         Metadata,
     };
+    use wiremock::MockServer;
+    use vector_core::config::proxy::ProxyConfig;

     use super::{Error, Reflector};
     use crate::{
@@ -258,6 +260,9 @@ mod tests {
         },
         test_util::trace_init,
     };
+    use crate::kubernetes::client;
+    use crate::kubernetes::client::Client;
+    use crate::tls::TlsOptions;

     /// A helper function to simplify assertion on the `evmap` state.
     fn gather_state<T>(handle: &evmap::ReadHandle<String, state::evmap::Value<T>>) -> Vec<T>
@@ -1073,9 +1078,18 @@ mod tests {
         // Freeze time.
         tokio::time::pause();

+        let mock_server = MockServer::start().await;
+
+        let config = client::Config {
+            base: mock_server.uri().parse().unwrap(),
+            token: Some("SOMEGARBAGETOKEN".to_string()),
+            tls_options: TlsOptions::default(),
+        };
+        let client = Client::new(config, &ProxyConfig::default()).unwrap();
+
         // Prepare state.
         let (state_reader, state_writer) = evmap::new();
-        let state_writer = state::evmap::Writer::new(state_writer, None, HashKey::Uid); // test without debounce to avoid complexity
+        let state_writer = state::evmap::Writer::new(client.clone(), state_writer, None, HashKey::Uid); // test without debounce to avoid complexity
         let state_writer = state::instrumenting::Writer::new(state_writer);
         let resulting_state_reader = state_reader.clone();

diff --git a/src/kubernetes/state/evmap.rs b/src/kubernetes/state/evmap.rs
index 4c55d095f..a539445a0 100644
--- a/src/kubernetes/state/evmap.rs
+++ b/src/kubernetes/state/evmap.rs
@@ -5,8 +5,16 @@ use std::time::Duration;
 use async_trait::async_trait;
 use evmap::WriteHandle;
 use futures::future::BoxFuture;
-use k8s_openapi::{apimachinery::pkg::apis::meta::v1::ObjectMeta, Metadata};
+use http::StatusCode;
+use hyper::body;
+use k8s_openapi::{
+    api::apps::v1::{ReadNamespacedReplicaSetResponse, ReplicaSet},
+    api::batch::v1::{ReadNamespacedJobResponse, Job},
+    apimachinery::pkg::apis::meta::v1::{ObjectMeta, OwnerReference},
+    Metadata,
+};

+use crate::kubernetes::client::Client;
 use crate::kubernetes::{
     debounce::Debounce,
     hash_value::{HashKey, HashValue},
@@ -19,6 +27,7 @@ pub struct Writer<T>
 where
     T: Metadata<Ty = ObjectMeta> + Send,
 {
+    client: Client,
     inner: WriteHandle<String, Value<T>>,
     debounced_flush: Option<Debounce>,
     hash_key: HashKey,
@@ -31,6 +40,7 @@ where
     /// Take a [`WriteHandle`], initialize it and return it wrapped with
     /// [`Writer`].
     pub fn new(
+        client: Client,
         mut inner: WriteHandle<String, Value<T>>,
         flush_debounce_timeout: Option<Duration>,
         hash_key: HashKey,
@@ -43,6 +53,7 @@ where
         let debounced_flush = flush_debounce_timeout.map(Debounce::new);

         Self {
+            client,
             inner,
             debounced_flush,
             hash_key,
@@ -73,14 +84,16 @@ where
     type Item = T;

     async fn add(&mut self, item: Self::Item) {
-        if let Some((key, value)) = kv(item, self.hash_key) {
+        if let Some((key, mut value)) = kv(item, self.hash_key) {
+            enrich_owner_ref(&mut self.client, value.metadata_mut()).await;
             self.inner.insert(key, value);
             self.debounced_flush();
         }
     }

     async fn update(&mut self, item: Self::Item) {
-        if let Some((key, value)) = kv(item, self.hash_key) {
+        if let Some((key, mut value)) = kv(item, self.hash_key) {
+            enrich_owner_ref(&mut self.client, value.metadata_mut()).await;
             self.inner.update(key, value);
             self.debounced_flush();
         }
@@ -102,6 +115,100 @@ where
     }
 }

+async fn enrich_owner_ref(client: &mut Client, metadata: &mut ObjectMeta) {
+    if let Some(or) = metadata.owner_references.to_owned() {
+        let mut ns = String::from("default");
+        if let Some(namespace) = metadata.namespace.to_owned() {
+            ns = namespace
+        }
+
+        match or[0].kind.as_str() {
+            "ReplicaSet" => {
+                let owner_ref =
+                    replicaset_owner_ref(&mut client.clone(), or[0].name.as_str(), ns.as_str())
+                        .await;
+
+                if let Some(owner_ref) = owner_ref {
+                    metadata.owner_references = Some(owner_ref);
+                }
+            }
+            "Job" => {
+                let owner_ref =
+                    job_owner_ref(&mut client.clone(), or[0].name.as_str(), ns.as_str()).await;
+
+                if let Some(owner_ref) = owner_ref {
+                    metadata.owner_references = Some(owner_ref);
+                }
+            }
+            _ => {}
+        }
+    }
+}
+
+async fn replicaset_owner_ref(
+    client: &mut Client,
+    name: &str,
+    namespace: &str,
+) -> Option<Vec<OwnerReference>> {
+    if let Ok((req, resp_body)) =
+        ReplicaSet::read_namespaced_replica_set(name, namespace, Default::default())
+    {
+        let resp = client.send(req).await.ok()?;
+        let status = resp.status();
+
+        if status != StatusCode::OK {
+            return None;
+        }
+
+        // Read body to not to get EOF error for json parsing
+        let mut resp_result = resp_body(status);
+        if let Ok(body) = body::to_bytes(resp.into_body()).await {
+            resp_result.append_slice(&body);
+        }
+
+        if let Ok(read_rs_result) = resp_result.parse() {
+            match read_rs_result {
+                ReadNamespacedReplicaSetResponse::Ok(rs) => {
+                    return rs.metadata.owner_references;
+                }
+                _ => {} // Ignore is cannot get the owner
+            }
+        }
+    }
+    return None;
+}
+
+async fn job_owner_ref(
+    client: &mut Client,
+    name: &str,
+    namespace: &str,
+) -> Option<Vec<OwnerReference>> {
+    if let Ok((req, resp_body)) = Job::read_namespaced_job(name, namespace, Default::default()) {
+        let resp = client.send(req).await.ok()?;
+        let status = resp.status();
+
+        if status != StatusCode::OK {
+            return None;
+        }
+
+        // Read body to not to get EOF error for json parsing
+        let mut resp_result = resp_body(status);
+        if let Ok(body) = body::to_bytes(resp.into_body()).await {
+            resp_result.append_slice(&body);
+        }
+
+        if let Ok(read_rs_result) = resp_result.parse() {
+            match read_rs_result {
+                ReadNamespacedJobResponse::Ok(rs) => {
+                    return rs.metadata.owner_references;
+                }
+                _ => {} // Ignore is cannot get the owner
+            }
+        }
+    }
+    return None;
+}
+
 #[async_trait]
 impl<T> super::MaintainedWrite for Writer<T>
 where
@@ -138,10 +245,14 @@ fn kv<T: Metadata<Ty = ObjectMeta>>(object: T, hash_key: HashKey) -> Option<(Str

 #[cfg(test)]
 mod tests {
+    use crate::kubernetes::client;
     use k8s_openapi::api::core::v1::Pod;
+    use vector_core::config::proxy::ProxyConfig;
+    use wiremock::MockServer;

     use super::*;
     use crate::kubernetes::state::{MaintainedWrite, Write};
+    use crate::tls::TlsOptions;

     fn make_pod(uid: &str) -> Pod {
         Pod {
@@ -185,8 +296,17 @@ mod tests {

     #[tokio::test]
     async fn test_without_debounce() {
+        let mock_server = MockServer::start().await;
+
+        let config = client::Config {
+            base: mock_server.uri().parse().unwrap(),
+            token: Some("SOMEGARBAGETOKEN".to_string()),
+            tls_options: TlsOptions::default(),
+        };
+        let client = Client::new(config, &ProxyConfig::default()).unwrap();
+
         let (state_reader, state_writer) = evmap::new();
-        let mut state_writer = Writer::new(state_writer, None, HashKey::Uid);
+        let mut state_writer = Writer::new(client.clone(), state_writer, None, HashKey::Uid);

         assert!(state_reader.is_empty());
         assert!(state_writer.maintenance_request().is_none());
@@ -201,13 +321,25 @@ mod tests {

     #[tokio::test]
     async fn test_with_debounce() {
+        let mock_server = MockServer::start().await;
+
+        let config = client::Config {
+            base: mock_server.uri().parse().unwrap(),
+            token: Some("SOMEGARBAGETOKEN".to_string()),
+            tls_options: TlsOptions::default(),
+        };
+        let client = Client::new(config, &ProxyConfig::default()).unwrap();
+
         // Due to https://github.com/tokio-rs/tokio/issues/2090 we're not
         // pausing the time.
-
         let (state_reader, state_writer) = evmap::new();
         let flush_debounce_timeout = Duration::from_millis(100);
-        let mut state_writer =
-            Writer::new(state_writer, Some(flush_debounce_timeout), HashKey::Uid);
+        let mut state_writer = Writer::new(
+            client.clone(),
+            state_writer,
+            Some(flush_debounce_timeout),
+            HashKey::Uid,
+        );

         assert!(state_reader.is_empty());
         assert!(state_writer.maintenance_request().is_none());
diff --git a/src/sources/kubernetes_logs/mod.rs b/src/sources/kubernetes_logs/mod.rs
index dc3f6a222..555e51e62 100644
--- a/src/sources/kubernetes_logs/mod.rs
+++ b/src/sources/kubernetes_logs/mod.rs
@@ -292,6 +292,7 @@ impl Source {
         let watcher = k8s::instrumenting_watcher::InstrumentingWatcher::new(watcher);
         let (state_reader, state_writer) = evmap::new();
         let state_writer = k8s::state::evmap::Writer::new(
+            client.clone(),
             state_writer,
             Some(Duration::from_millis(10)),
             HashKey::Uid,
@@ -315,6 +316,7 @@ impl Source {
         let ns_watcher = k8s::instrumenting_watcher::InstrumentingWatcher::new(ns_watcher);
         let (ns_state_reader, ns_state_writer) = evmap::new();
         let ns_state_writer = k8s::state::evmap::Writer::new(
+            client.clone(),
             ns_state_writer,
             Some(Duration::from_millis(10)),
             HashKey::Name,
