Subject: [PATCH] added cef encoder
---
Index: website/cue/reference/components/sinks/base/webhdfs.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/webhdfs.cue b/website/cue/reference/components/sinks/base/webhdfs.cue
--- a/website/cue/reference/components/sinks/base/webhdfs.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/webhdfs.cue	(date 1723658498485)
@@ -107,6 +107,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -116,6 +201,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/humio_logs.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/humio_logs.cue b/website/cue/reference/components/sinks/base/humio_logs.cue
--- a/website/cue/reference/components/sinks/base/humio_logs.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/humio_logs.cue	(date 1723658498450)
@@ -107,6 +107,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -116,6 +201,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/socket.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/socket.cue b/website/cue/reference/components/sinks/base/socket.cue
--- a/website/cue/reference/components/sinks/base/socket.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/socket.cue	(date 1723658498476)
@@ -53,6 +53,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -62,6 +147,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/aws_sqs.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/aws_sqs.cue b/website/cue/reference/components/sinks/base/aws_sqs.cue
--- a/website/cue/reference/components/sinks/base/aws_sqs.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/aws_sqs.cue	(date 1723658498423)
@@ -143,6 +143,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -152,6 +237,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/http.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/http.cue b/website/cue/reference/components/sinks/base/http.cue
--- a/website/cue/reference/components/sinks/base/http.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/http.cue	(date 1723658498446)
@@ -154,6 +154,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -163,6 +248,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/splunk_hec_logs.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/splunk_hec_logs.cue b/website/cue/reference/components/sinks/base/splunk_hec_logs.cue
--- a/website/cue/reference/components/sinks/base/splunk_hec_logs.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/splunk_hec_logs.cue	(date 1723658498481)
@@ -157,6 +157,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -166,6 +251,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/loki.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/loki.cue b/website/cue/reference/components/sinks/base/loki.cue
--- a/website/cue/reference/components/sinks/base/loki.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/loki.cue	(date 1723658498456)
@@ -156,6 +156,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -165,6 +250,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/nats.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/nats.cue b/website/cue/reference/components/sinks/base/nats.cue
--- a/website/cue/reference/components/sinks/base/nats.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/nats.cue	(date 1723658498459)
@@ -141,6 +141,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -150,6 +235,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: lib/codecs/src/encoding/format/cef.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/codecs/src/encoding/format/cef.rs b/lib/codecs/src/encoding/format/cef.rs
new file mode 100644
--- /dev/null	(date 1723658419631)
+++ b/lib/codecs/src/encoding/format/cef.rs	(date 1723658419631)
@@ -0,0 +1,483 @@
+use std::{collections::HashMap, fmt::Write};
+
+use crate::encoding::BuildError;
+use bytes::BytesMut;
+use chrono::SecondsFormat;
+use lookup::lookup_v2::ConfigTargetPath;
+use tokio_util::codec::Encoder;
+use vector_core::{
+    config::DataType,
+    event::{Event, LogEvent, Value},
+    schema,
+};
+
+/// Device event identity.
+#[derive(Debug, Clone)]
+pub struct DeviceSettings {
+    pub vendor: String,
+    pub product: String,
+    pub version: String,
+    pub event_class_id: String,
+}
+
+impl DeviceSettings {
+    /// Creates a new `DeviceSettings`.
+    pub const fn new(
+        vendor: String,
+        product: String,
+        version: String,
+        event_class_id: String,
+    ) -> Self {
+        Self {
+            vendor,
+            product,
+            version,
+            event_class_id,
+        }
+    }
+}
+
+/// Config used to build a `CefSerializer`.
+#[crate::configurable_component]
+#[derive(Debug, Clone)]
+pub struct CefSerializerConfig {
+    /// The CEF Serializer Options.
+    pub cef: CefSerializerOptions,
+}
+
+impl CefSerializerConfig {
+    /// Creates a new `CefSerializerConfig`.
+    pub const fn new(cef: CefSerializerOptions) -> Self {
+        Self { cef }
+    }
+
+    /// Build the `CefSerializer` from this configuration.
+    pub fn build(&self) -> Result<CefSerializer, BuildError> {
+        let device_vendor = if let Some(device_vendor) = self.cef.device_vendor.clone() {
+            escape_header(device_vendor)
+        } else {
+            String::from("Datadog")
+        };
+        if device_vendor.len() > 63 {
+            return Err(format!(
+                "device_vendor exceed 63 characters limit: actual {}",
+                device_vendor.len()
+            )
+            .into());
+        };
+
+        let device_product = if let Some(device_product) = self.cef.device_product.clone() {
+            escape_header(device_product)
+        } else {
+            String::from("Vector")
+        };
+        if device_product.len() > 63 {
+            return Err(format!(
+                "device_product exceed 63 characters limit: actual {}",
+                device_product.len()
+            )
+            .into());
+        };
+
+        let device_version = if let Some(device_version) = self.cef.device_version.clone() {
+            device_version
+        } else {
+            String::from("0") // Major version. TODO(nabokihms): find a way to get the actual vector version.
+        };
+        if device_version.len() > 31 {
+            return Err(format!(
+                "device_version exceed 31 characters limit: actual {}",
+                device_version.len()
+            )
+            .into());
+        };
+
+        let device_event_class_id =
+            if let Some(device_event_class_id) = self.cef.device_event_class_id.clone() {
+                escape_header(device_event_class_id)
+            } else {
+                String::from("Telemetry Event")
+            };
+        if device_event_class_id.len() > 1023 {
+            return Err(format!(
+                "device_event_class_id exceed 1023 characters limit: actual {}",
+                device_event_class_id.len()
+            )
+            .into());
+        };
+
+        for key in self.cef.extensions.keys() {
+            if !key.chars().all(|c| c.is_ascii_alphabetic()) {
+                // TODO (nabokihms): Output all invalid keys
+                return Err(format!("extension keys can only contain ascii alphabetical characters: invalid key '{}'", key).into());
+            }
+        }
+
+        let device = DeviceSettings::new(
+            device_vendor,
+            device_product,
+            device_version,
+            device_event_class_id,
+        );
+
+        Ok(CefSerializer::new(
+            self.cef.version.clone(),
+            device,
+            self.cef.severity.clone(),
+            self.cef.name.clone(),
+            self.cef.extensions.clone(),
+        ))
+    }
+
+    /// The data type of events that are accepted by `CefSerializer`.
+    pub fn input_type(&self) -> DataType {
+        DataType::Log
+    }
+
+    /// The schema required by the serializer.
+    pub fn schema_requirement(&self) -> schema::Requirement {
+        // While technically we support `Value` variants that can't be losslessly serialized to
+        // CEF, we don't want to enforce that limitation to users yet.
+        schema::Requirement::empty()
+    }
+}
+
+/// CEF version.
+#[crate::configurable_component]
+#[derive(Debug, Default, Clone)]
+pub enum Version {
+    #[default]
+    /// CEF specification version 0.1.
+    V0,
+    /// CEF specification version 1.x.
+    V1,
+}
+
+impl Version {
+    fn as_str(&self) -> &'static str {
+        match self {
+            Version::V0 => "0",
+            Version::V1 => "1",
+        }
+    }
+}
+
+/// Config used to build a `CefSerializer`.
+#[crate::configurable_component]
+#[derive(Debug, Clone)]
+pub struct CefSerializerOptions {
+    /// CEF Version. Can be either 0 or 1.
+    /// Equals to "0" by default.
+    pub version: Version,
+
+    /// Identifies the vendor of the product.
+    /// The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+    /// The value length must be lower or equal to 63.
+    pub device_vendor: Option<String>,
+
+    /// Identifies the product of a vendor.
+    /// The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+    /// The value length must be lower or equal to 63.
+    pub device_product: Option<String>,
+
+    /// Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+    /// The value length must be lower or equal to 31.
+    pub device_version: Option<String>,
+
+    /// Unique identifier for each event-type. Identifies the type of event reported.
+    /// The value length must be lower or equal to 1023.
+    pub device_event_class_id: Option<String>,
+
+    /// This is a path that points to filed of a log event that reflects importance of the event.
+    /// Reflects importance of the event.
+    ///
+    /// It must point to a number from 0 to 10.
+    /// 0 = Lowest, 10 = Highest.
+    /// Equals to "cef.severity" by default.
+    pub severity: ConfigTargetPath,
+
+    /// This is a path that points to the human-readable description of a log event.
+    /// The value length must be lower or equal to 512.
+    /// Equals to "cef.name" by default.
+    pub name: ConfigTargetPath,
+
+    /// The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+    /// The event can have any number of key-value pairs in any order.
+    #[configurable(metadata(
+        docs::additional_props_description = "This is a path that points to the extension value of a log event."
+    ))]
+    pub extensions: HashMap<String, ConfigTargetPath>,
+    // TODO(nabokihms): use Template instead of ConfigTargetPath.
+    // Templates are in the src/ package, and codes are in the lib/codecs.
+}
+
+impl Default for CefSerializerOptions {
+    fn default() -> Self {
+        Self {
+            version: Version::default(),
+            device_vendor: None,
+            device_product: None,
+            device_version: None,
+            device_event_class_id: None,
+            severity: ConfigTargetPath::try_from("cef.severity".to_string()).unwrap(),
+            name: ConfigTargetPath::try_from("cef.name".to_string()).unwrap(),
+            extensions: HashMap::new(),
+        }
+    }
+}
+
+/// Serializer that converts an `Event` to bytes using the CEF format.
+/// CEF:<version>|<device_vendor>|<device_product>|<device_version>|<device_event_class>|<name>|<severity>|<encoded_fields>
+#[derive(Debug, Clone)]
+pub struct CefSerializer {
+    version: Version,
+    device: DeviceSettings,
+    severity: ConfigTargetPath,
+    name: ConfigTargetPath,
+    extensions: HashMap<String, ConfigTargetPath>,
+}
+
+impl CefSerializer {
+    /// Creates a new `CefSerializer`.
+    pub const fn new(
+        version: Version,
+        device: DeviceSettings,
+        severity: ConfigTargetPath,
+        name: ConfigTargetPath,
+        extensions: HashMap<String, ConfigTargetPath>,
+    ) -> Self {
+        Self {
+            version,
+            device,
+            severity,
+            name,
+            extensions,
+        }
+    }
+}
+
+impl Encoder<Event> for CefSerializer {
+    type Error = vector_common::Error;
+
+    fn encode(&mut self, event: Event, buffer: &mut BytesMut) -> Result<(), Self::Error> {
+        let log = event.into_log();
+
+        let severity: u8 = match get_log_event_value(&log, &self.severity).parse() {
+            Err(err) => {
+                return Err(format!("severity must be a number: {}", err).into());
+            }
+            Ok(severity) => {
+                if severity > 10 {
+                    return Err(format!(
+                        "severity must be a number from 0 to 10: actual {}",
+                        severity
+                    )
+                    .into());
+                };
+                severity
+            }
+        };
+
+        let name: String = escape_header(get_log_event_value(&log, &self.name));
+        if name.len() > 512 {
+            return Err(format!("name exceed 512 characters limit: actual {}", name.len()).into());
+        };
+
+        let mut formatted_extensions = Vec::new();
+        for (extension, field) in &self.extensions {
+            let value = get_log_event_value(&log, field);
+            if value.is_empty() {
+                continue;
+            }
+            let value = escape_extension(value);
+            formatted_extensions.push(format!("{}={}", extension, value));
+        }
+
+        buffer.write_fmt(format_args!(
+            "CEF:{}|{}|{}|{}|{}|{}|{}",
+            &self.version.as_str(),
+            &self.device.vendor,
+            &self.device.product,
+            &self.device.version,
+            &self.device.event_class_id,
+            name,
+            severity,
+        ))?;
+        if !formatted_extensions.is_empty() {
+            formatted_extensions.sort();
+
+            buffer.write_char('|')?;
+            buffer.write_str(formatted_extensions.join(" ").as_str())?;
+        }
+
+        Ok(())
+    }
+}
+
+fn get_log_event_value(log: &LogEvent, field: &ConfigTargetPath) -> String {
+    match log.get(field) {
+        Some(Value::Bytes(bytes)) => String::from_utf8_lossy(bytes).to_string(),
+        Some(Value::Integer(int)) => int.to_string(),
+        Some(Value::Float(float)) => float.to_string(),
+        Some(Value::Boolean(bool)) => bool.to_string(),
+        // TODO(nabokihms): support other timestamp options.
+        Some(Value::Timestamp(timestamp)) => timestamp.to_rfc3339_opts(SecondsFormat::AutoSi, true),
+        Some(Value::Null) => String::from(""),
+        // Other value types: Array, Regex, Object are not supported by the CEF format.
+        Some(_) => String::from(""),
+        None => String::from(""),
+    }
+}
+
+fn escape_header(mut s: String) -> String {
+    s = s.replace('\\', r#"\\"#);
+    s = s.replace('|', r#"\|"#);
+    String::from_utf8_lossy(s.as_bytes()).to_string()
+}
+
+fn escape_extension(mut s: String) -> String {
+    s = s.replace('\\', r#"\\"#);
+    s = s.replace('=', r#"\="#);
+    String::from_utf8_lossy(s.as_bytes()).to_string()
+}
+
+#[cfg(test)]
+mod tests {
+    use bytes::BytesMut;
+    use chrono::DateTime;
+    use ordered_float::NotNan;
+    use vector_common::btreemap;
+    use vector_core::event::{Event, LogEvent, Value};
+
+    use super::*;
+
+    #[test]
+    fn build_error_on_invalid_extension() {
+        let extensions = HashMap::from([(
+            String::from("foo.test"),
+            ConfigTargetPath::try_from("foo".to_string()).unwrap(),
+        )]);
+        let opts: CefSerializerOptions = CefSerializerOptions {
+            extensions,
+            ..CefSerializerOptions::default()
+        };
+        let config = CefSerializerConfig::new(opts);
+        let err = config.build().unwrap_err();
+        assert_eq!(
+            err.to_string(),
+            "extension keys can only contain ascii alphabetical characters: invalid key 'foo.test'"
+        );
+    }
+
+    #[test]
+    fn try_escape_header() {
+        let s1 = String::from(r#"Test | test"#);
+        let s2 = String::from(r#"Test \ test"#);
+        let s3 = String::from(r#"Test test"#);
+        let s4 = String::from(r#"Test \| \| test"#);
+
+        let s1 = escape_header(s1);
+        let s2 = escape_header(s2);
+        let s3: String = escape_header(s3);
+        let s4: String = escape_header(s4);
+
+        assert_eq!(s1, r#"Test \| test"#);
+        assert_eq!(s2, r#"Test \\ test"#);
+        assert_eq!(s3, r#"Test test"#);
+        assert_eq!(s4, r#"Test \\\| \\\| test"#);
+    }
+
+    #[test]
+    fn try_escape_extension() {
+        let s1 = String::from(r#"Test=test"#);
+        let s2 = String::from(r#"Test = test"#);
+        let s3 = String::from(r#"Test test"#);
+        let s4 = String::from(r#"Test \| \| test"#);
+
+        let s1 = escape_extension(s1);
+        let s2 = escape_extension(s2);
+        let s3: String = escape_extension(s3);
+        let s4: String = escape_extension(s4);
+
+        assert_eq!(s1, r#"Test\=test"#);
+        assert_eq!(s2, r#"Test \= test"#);
+        assert_eq!(s3, r#"Test test"#);
+        assert_eq!(s4, r#"Test \\| \\| test"#);
+    }
+
+    // TODO(nabokihms): more tests for edge cases.
+
+    #[test]
+    fn serialize_extensions() {
+        let event = Event::Log(LogEvent::from(btreemap! {
+            "cef" => Value::from(btreemap! {
+                "severity" => Value::from(1),
+                "name" => Value::from("Event name"),
+            }),
+            "foo" => Value::from("bar"),
+            "int" => Value::from(123),
+            "comma" => Value::from("abc,bcd"),
+            "float" => Value::Float(NotNan::new(3.1415925).unwrap()),
+            "space" => Value::from("sp ace"),
+            "time" => Value::Timestamp(DateTime::parse_from_rfc3339("2023-02-27T15:04:49.363+08:00").unwrap().into()),
+            "quote" => Value::from("the \"quote\" should be escaped"),
+            "bool" => Value::from(true),
+            "other" => Value::from("data"),
+        }));
+
+        let extensions = HashMap::from([
+            (
+                String::from("foo"),
+                ConfigTargetPath::try_from("foo".to_string()).unwrap(),
+            ),
+            (
+                String::from("int"),
+                ConfigTargetPath::try_from("int".to_string()).unwrap(),
+            ),
+            (
+                String::from("comma"),
+                ConfigTargetPath::try_from("comma".to_string()).unwrap(),
+            ),
+            (
+                String::from("float"),
+                ConfigTargetPath::try_from("float".to_string()).unwrap(),
+            ),
+            (
+                String::from("missing"),
+                ConfigTargetPath::try_from("missing".to_string()).unwrap(),
+            ),
+            (
+                String::from("space"),
+                ConfigTargetPath::try_from("space".to_string()).unwrap(),
+            ),
+            (
+                String::from("time"),
+                ConfigTargetPath::try_from("time".to_string()).unwrap(),
+            ),
+            (
+                String::from("quote"),
+                ConfigTargetPath::try_from("quote".to_string()).unwrap(),
+            ),
+            (
+                String::from("bool"),
+                ConfigTargetPath::try_from("bool".to_string()).unwrap(),
+            ),
+        ]);
+
+        let opts: CefSerializerOptions = CefSerializerOptions {
+            extensions,
+            ..CefSerializerOptions::default()
+        };
+
+        let config = CefSerializerConfig::new(opts);
+        let mut serializer = config.build().unwrap();
+        let mut bytes = BytesMut::new();
+
+        serializer.encode(event, &mut bytes).unwrap();
+
+        assert_eq!(
+            bytes.freeze(),
+            b"CEF:0|Datadog|Vector|0|Telemetry Event|1|Event name|bool=true comma=abc,bcd float=3.1415925 foo=bar int=123 quote=the \"quote\" should be escaped space=sp ace time=2023-02-27T07:04:49.363Z".as_slice()
+        );
+    }
+}
Index: src/components/validation/resources/mod.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/validation/resources/mod.rs b/src/components/validation/resources/mod.rs
--- a/src/components/validation/resources/mod.rs	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/src/components/validation/resources/mod.rs	(date 1723658498397)
@@ -208,6 +208,7 @@
 ) -> vector_lib::Result<decoding::Deserializer> {
     let deserializer_config = match config {
         SerializerConfig::Avro { .. } => todo!(),
+        SerializerConfig::Cef { .. } => todo!(),
         SerializerConfig::Csv { .. } => todo!(),
         SerializerConfig::Gelf => DeserializerConfig::Gelf(Default::default()),
         SerializerConfig::Json(_) => DeserializerConfig::Json(Default::default()),
Index: website/cue/reference/components/sinks/base/console.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/console.cue b/website/cue/reference/components/sinks/base/console.cue
--- a/website/cue/reference/components/sinks/base/console.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/console.cue	(date 1723658498430)
@@ -41,6 +41,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -50,6 +135,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: src/sinks/websocket/sink.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/sinks/websocket/sink.rs b/src/sinks/websocket/sink.rs
--- a/src/sinks/websocket/sink.rs	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/src/sinks/websocket/sink.rs	(date 1723659848980)
@@ -236,12 +236,12 @@

     const fn should_encode_as_binary(&self) -> bool {
         use vector_lib::codecs::encoding::Serializer::{
-            Avro, Csv, Gelf, Json, Logfmt, Native, NativeJson, Protobuf, RawMessage, Text,
+            Avro, Cef, Csv, Gelf, Json, Logfmt, Native, NativeJson, Protobuf, RawMessage, Text,
         };

         match self.encoder.serializer() {
             RawMessage(_) | Avro(_) | Native(_) | Protobuf(_) => true,
-            Csv(_) | Logfmt(_) | Gelf(_) | Json(_) | Text(_) | NativeJson(_) => false,
+            Cef(_) | Csv(_) | Logfmt(_) | Gelf(_) | Json(_) | Text(_) | NativeJson(_) => false,
         }
     }

Index: src/codecs/encoding/config.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/codecs/encoding/config.rs b/src/codecs/encoding/config.rs
--- a/src/codecs/encoding/config.rs	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/src/codecs/encoding/config.rs	(date 1723658498384)
@@ -119,7 +119,8 @@
             }
             (
                 None,
-                Serializer::Csv(_)
+                Serializer::Cef(_)
+                | Serializer::Csv(_)
                 | Serializer::Logfmt(_)
                 | Serializer::NativeJson(_)
                 | Serializer::RawMessage(_)
Index: website/cue/reference/components/sinks/base/papertrail.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/papertrail.cue b/website/cue/reference/components/sinks/base/papertrail.cue
--- a/website/cue/reference/components/sinks/base/papertrail.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/papertrail.cue	(date 1723658498463)
@@ -41,6 +41,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -50,6 +135,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/aws_kinesis_firehose.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/aws_kinesis_firehose.cue b/website/cue/reference/components/sinks/base/aws_kinesis_firehose.cue
--- a/website/cue/reference/components/sinks/base/aws_kinesis_firehose.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/aws_kinesis_firehose.cue	(date 1723658498412)
@@ -212,6 +212,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -221,6 +306,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: src/codecs/encoding/encoder.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/codecs/encoding/encoder.rs b/src/codecs/encoding/encoder.rs
--- a/src/codecs/encoding/encoder.rs	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/src/codecs/encoding/encoder.rs	(date 1723658498391)
@@ -116,6 +116,7 @@
             (Serializer::Native(_), _) | (Serializer::Protobuf(_), _) => "application/octet-stream",
             (
                 Serializer::Avro(_)
+                | Serializer::Cef(_)
                 | Serializer::Csv(_)
                 | Serializer::Gelf(_)
                 | Serializer::Json(_)
Index: lib/codecs/src/encoding/format/mod.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/codecs/src/encoding/format/mod.rs b/lib/codecs/src/encoding/format/mod.rs
--- a/lib/codecs/src/encoding/format/mod.rs	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/lib/codecs/src/encoding/format/mod.rs	(date 1723658432803)
@@ -5,6 +5,7 @@

 mod avro;
 mod common;
+mod cef;
 mod csv;
 mod gelf;
 mod json;
@@ -19,6 +20,7 @@

 pub use self::csv::{CsvSerializer, CsvSerializerConfig};
 pub use avro::{AvroSerializer, AvroSerializerConfig, AvroSerializerOptions};
+pub use cef::{CefSerializer, CefSerializerConfig};
 use dyn_clone::DynClone;
 pub use gelf::{GelfSerializer, GelfSerializerConfig};
 pub use json::{JsonSerializer, JsonSerializerConfig, JsonSerializerOptions};
Index: website/cue/reference/components/sinks/base/websocket.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/websocket.cue b/website/cue/reference/components/sinks/base/websocket.cue
--- a/website/cue/reference/components/sinks/base/websocket.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/websocket.cue	(date 1723658498488)
@@ -88,6 +88,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -97,6 +182,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/pulsar.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/pulsar.cue b/website/cue/reference/components/sinks/base/pulsar.cue
--- a/website/cue/reference/components/sinks/base/pulsar.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/pulsar.cue	(date 1723658498467)
@@ -135,6 +135,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -144,6 +229,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/gcp_chronicle_unstructured.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/gcp_chronicle_unstructured.cue b/website/cue/reference/components/sinks/base/gcp_chronicle_unstructured.cue
--- a/website/cue/reference/components/sinks/base/gcp_chronicle_unstructured.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/gcp_chronicle_unstructured.cue	(date 1723658498435)
@@ -110,6 +110,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -119,6 +204,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/kafka.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/kafka.cue b/website/cue/reference/components/sinks/base/kafka.cue
--- a/website/cue/reference/components/sinks/base/kafka.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/kafka.cue	(date 1723658498452)
@@ -96,6 +96,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -105,6 +190,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/file.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/file.cue b/website/cue/reference/components/sinks/base/file.cue
--- a/website/cue/reference/components/sinks/base/file.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/file.cue	(date 1723658498432)
@@ -61,6 +61,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -70,6 +155,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/gcp_cloud_storage.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/gcp_cloud_storage.cue b/website/cue/reference/components/sinks/base/gcp_cloud_storage.cue
--- a/website/cue/reference/components/sinks/base/gcp_cloud_storage.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/gcp_cloud_storage.cue	(date 1723658498439)
@@ -199,6 +199,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -208,6 +293,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/aws_cloudwatch_logs.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/aws_cloudwatch_logs.cue b/website/cue/reference/components/sinks/base/aws_cloudwatch_logs.cue
--- a/website/cue/reference/components/sinks/base/aws_cloudwatch_logs.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/aws_cloudwatch_logs.cue	(date 1723658498408)
@@ -233,6 +233,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -242,6 +327,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: lib/codecs/src/encoding/mod.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/codecs/src/encoding/mod.rs b/lib/codecs/src/encoding/mod.rs
--- a/lib/codecs/src/encoding/mod.rs	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/lib/codecs/src/encoding/mod.rs	(date 1723658498361)
@@ -8,8 +8,8 @@

 use bytes::BytesMut;
 pub use format::{
-    AvroSerializer, AvroSerializerConfig, AvroSerializerOptions, CsvSerializer,
-    CsvSerializerConfig, GelfSerializer, GelfSerializerConfig, JsonSerializer,
+    AvroSerializer, AvroSerializerConfig, AvroSerializerOptions, CefSerializer, CefSerializerConfig,
+    CsvSerializer, CsvSerializerConfig, GelfSerializer, GelfSerializerConfig, JsonSerializer,
     JsonSerializerConfig, LogfmtSerializer, LogfmtSerializerConfig, NativeJsonSerializer,
     NativeJsonSerializerConfig, NativeSerializer, NativeSerializerConfig, ProtobufSerializer,
     ProtobufSerializerConfig, ProtobufSerializerOptions, RawMessageSerializer,
@@ -184,6 +184,13 @@
         avro: AvroSerializerOptions,
     },

+    /// Encodes an event as a CEF (Common Event Format) formatted message.
+    ///
+    Cef(
+        /// Options for the CEF encoder.
+        CefSerializerConfig,
+    ),
+
     /// Encodes an event as a CSV message.
     ///
     /// This codec must be configured with fields to encode.
@@ -265,6 +272,12 @@
     }
 }

+impl From<CefSerializerConfig> for SerializerConfig {
+    fn from(config: CefSerializerConfig) -> Self {
+        Self::Cef(config)
+    }
+}
+
 impl From<CsvSerializerConfig> for SerializerConfig {
     fn from(config: CsvSerializerConfig) -> Self {
         Self::Csv(config)
@@ -326,6 +339,7 @@
             SerializerConfig::Avro { avro } => Ok(Serializer::Avro(
                 AvroSerializerConfig::new(avro.schema.clone()).build()?,
             )),
+            SerializerConfig::Cef(config) => Ok(Serializer::Cef(config.build()?)),
             SerializerConfig::Csv(config) => Ok(Serializer::Csv(config.build()?)),
             SerializerConfig::Gelf => Ok(Serializer::Gelf(GelfSerializerConfig::new().build())),
             SerializerConfig::Json(config) => Ok(Serializer::Json(config.build())),
@@ -361,7 +375,8 @@
             | SerializerConfig::Protobuf(_) => {
                 FramingConfig::LengthDelimited(LengthDelimitedEncoderConfig::default())
             }
-            SerializerConfig::Csv(_)
+            SerializerConfig::Cef(_)
+            | SerializerConfig::Csv(_)
             | SerializerConfig::Json(_)
             | SerializerConfig::Logfmt
             | SerializerConfig::NativeJson
@@ -379,6 +394,7 @@
             SerializerConfig::Avro { avro } => {
                 AvroSerializerConfig::new(avro.schema.clone()).input_type()
             }
+            SerializerConfig::Cef(config) => config.input_type(),
             SerializerConfig::Csv(config) => config.input_type(),
             SerializerConfig::Gelf { .. } => GelfSerializerConfig::input_type(),
             SerializerConfig::Json(config) => config.input_type(),
@@ -397,6 +413,7 @@
             SerializerConfig::Avro { avro } => {
                 AvroSerializerConfig::new(avro.schema.clone()).schema_requirement()
             }
+            SerializerConfig::Cef(config) => config.schema_requirement(),
             SerializerConfig::Csv(config) => config.schema_requirement(),
             SerializerConfig::Gelf { .. } => GelfSerializerConfig::schema_requirement(),
             SerializerConfig::Json(config) => config.schema_requirement(),
@@ -415,6 +432,8 @@
 pub enum Serializer {
     /// Uses an `AvroSerializer` for serialization.
     Avro(AvroSerializer),
+    /// Uses a `CefSerializer` for serialization.
+    Cef(CefSerializer),
     /// Uses a `CsvSerializer` for serialization.
     Csv(CsvSerializer),
     /// Uses a `GelfSerializer` for serialization.
@@ -441,6 +460,7 @@
         match self {
             Serializer::Json(_) | Serializer::NativeJson(_) | Serializer::Gelf(_) => true,
             Serializer::Avro(_)
+            | Serializer::Cef(_)
             | Serializer::Csv(_)
             | Serializer::Logfmt(_)
             | Serializer::Text(_)
@@ -462,6 +482,7 @@
             Serializer::Json(serializer) => serializer.to_json_value(event),
             Serializer::NativeJson(serializer) => serializer.to_json_value(event),
             Serializer::Avro(_)
+            | Serializer::Cef(_)
             | Serializer::Csv(_)
             | Serializer::Logfmt(_)
             | Serializer::Text(_)
@@ -480,6 +501,12 @@
     }
 }

+impl From<CefSerializer> for Serializer {
+    fn from(serializer: CefSerializer) -> Self {
+        Self::Cef(serializer)
+    }
+}
+
 impl From<CsvSerializer> for Serializer {
     fn from(serializer: CsvSerializer) -> Self {
         Self::Csv(serializer)
@@ -540,6 +567,7 @@
     fn encode(&mut self, event: Event, buffer: &mut BytesMut) -> Result<(), Self::Error> {
         match self {
             Serializer::Avro(serializer) => serializer.encode(event, buffer),
+            Serializer::Cef(serializer) => serializer.encode(event, buffer),
             Serializer::Csv(serializer) => serializer.encode(event, buffer),
             Serializer::Gelf(serializer) => serializer.encode(event, buffer),
             Serializer::Json(serializer) => serializer.encode(event, buffer),
Index: website/cue/reference/components/sinks/base/gcp_pubsub.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/gcp_pubsub.cue b/website/cue/reference/components/sinks/base/gcp_pubsub.cue
--- a/website/cue/reference/components/sinks/base/gcp_pubsub.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/gcp_pubsub.cue	(date 1723658498443)
@@ -108,6 +108,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -117,6 +202,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/aws_s3.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/aws_s3.cue b/website/cue/reference/components/sinks/base/aws_s3.cue
--- a/website/cue/reference/components/sinks/base/aws_s3.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/aws_s3.cue	(date 1723658498420)
@@ -321,6 +321,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -330,6 +415,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/redis.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/redis.cue b/website/cue/reference/components/sinks/base/redis.cue
--- a/website/cue/reference/components/sinks/base/redis.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/redis.cue	(date 1723658498473)
@@ -94,6 +94,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -103,6 +188,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/azure_blob.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/azure_blob.cue b/website/cue/reference/components/sinks/base/azure_blob.cue
--- a/website/cue/reference/components/sinks/base/azure_blob.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/azure_blob.cue	(date 1723658498428)
@@ -175,6 +175,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -184,6 +269,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/aws_kinesis_streams.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/aws_kinesis_streams.cue b/website/cue/reference/components/sinks/base/aws_kinesis_streams.cue
--- a/website/cue/reference/components/sinks/base/aws_kinesis_streams.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/aws_kinesis_streams.cue	(date 1723658498415)
@@ -212,6 +212,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -221,6 +306,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.

Index: website/cue/reference/components/sinks/base/amqp.cue
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/website/cue/reference/components/sinks/base/amqp.cue b/website/cue/reference/components/sinks/base/amqp.cue
--- a/website/cue/reference/components/sinks/base/amqp.cue	(revision 1167aa9cdaf4fdf5e860434fc98b01851c7a2676)
+++ b/website/cue/reference/components/sinks/base/amqp.cue	(date 1723658498404)
@@ -57,6 +57,91 @@
 					type: string: examples: ["{ \"type\": \"record\", \"name\": \"log\", \"fields\": [{ \"name\": \"message\", \"type\": \"string\" }] }"]
 				}
 			}
+			cef: {
+				description:   "The CEF Serializer Options."
+				relevant_when: "codec = \"cef\""
+				required:      true
+				type: object: options: {
+					device_event_class_id: {
+						description: """
+																Unique identifier for each event-type. Identifies the type of event reported.
+																The value length must be lower or equal to 1023.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_product: {
+						description: """
+																Identifies the product of a vendor.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_vendor: {
+						description: """
+																Identifies the vendor of the product.
+																The part of a unique device identifier. No two products can use the same pair of devide vendor and device product combination.
+																The value length must be lower or equal to 63.
+																"""
+						required: false
+						type: string: {}
+					}
+					device_version: {
+						description: """
+																Identifies the version of the problem. In combination with device product and vendor, it composes the unique id of device that sends messages.
+																The value length must be lower or equal to 31.
+																"""
+						required: false
+						type: string: {}
+					}
+					extensions: {
+						description: """
+																The collection fo key-value pairs. Keys are the keys of the extensions, and values are path that point to the extension values of a log event.
+																The event can have any number of key-value pairs in any order.
+																"""
+						required: false
+						type: object: options: "*": {
+							description: "This is a path that points to the extension value of a log event."
+							required:    true
+							type: string: {}
+						}
+					}
+					name: {
+						description: """
+																This is a path that points to the human-readable description of a log event.
+																The value length must be lower or equal to 512.
+																Equals to "cef.name" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					severity: {
+						description: """
+																This is a path that points to filed of a log event that reflects importance of the event.
+																Reflects importance of the event.
+
+																It must point to a number from 0 to 10.
+																0 = Lowest, 10 = Highest.
+																Equals to "cef.severity" by default.
+																"""
+						required: true
+						type: string: {}
+					}
+					version: {
+						description: """
+																CEF Version. Can be either 0 or 1.
+																Equals to "0" by default.
+																"""
+						required: true
+						type: string: enum: {
+							V0: "CEF specification version 0.1."
+							V1: "CEF specification version 1.x."
+						}
+					}
+				}
+			}
 			codec: {
 				description: "The codec to use for encoding events."
 				required:    true
@@ -66,6 +151,7 @@

 						[apache_avro]: https://avro.apache.org/
 						"""
+					cef: "Encodes an event as a CEF (Common Event Format) formatted message."
 					csv: """
 						Encodes an event as a CSV message.


