{
  "sources": {
    "cluster_logging_config/test-source:tests-whispers": {
      "type": "kubernetes_logs",
      "extra_label_selector": "app=test,log-shipper.deckhouse.io/exclude notin (true)",
      "extra_field_selector": "metadata.namespace=tests-whispers,metadata.name!=$VECTOR_SELF_POD_NAME",
      "extra_namespace_label_selector": "log-shipper.deckhouse.io/exclude notin (true)",
      "annotation_fields": {
        "container_image": "image",
        "container_name": "container",
        "pod_ip": "pod_ip",
        "pod_labels": "pod_labels",
        "pod_name": "pod",
        "pod_namespace": "namespace",
        "pod_node_name": "node",
        "pod_owner": "pod_owner"
      },
      "glob_minimum_cooldown_ms": 1000
    }
  },
  "transforms": {
    "transform/destination/test-es-dest/00_elastic_dedot": {
      "drop_on_abort": false,
      "inputs": [
        "transform/source/test-source/14_log_filter"
      ],
      "source": "if exists(.pod_labels) {\n    .pod_labels = map_keys(object!(.pod_labels), recursive: true) -\u003e |key| { replace(key, \".\", \"_\") }\n}",
      "type": "remap"
    },
    "transform/destination/test-es-dest/01_extra_fields": {
      "drop_on_abort": false,
      "inputs": [
        "transform/destination/test-es-dest/00_elastic_dedot"
      ],
      "source": "if !exists(.parsed_data) {\n    structured, err = parse_json(.message)\n    if err == null {\n        .parsed_data = structured\n    } else {\n        .parsed_data = .message\n    }\n}\n\n.foo=\"bar\"",
      "type": "remap"
    },
    "transform/destination/test-es-dest/02_del_parsed_data": {
      "drop_on_abort": false,
      "inputs": [
        "transform/destination/test-es-dest/01_extra_fields"
      ],
      "source": "if exists(.parsed_data) {\n    del(.parsed_data)\n}",
      "type": "remap"
    },
    "transform/destination/test-logstash-dest/00_elastic_dedot": {
      "drop_on_abort": false,
      "inputs": [
        "transform/source/test-source/14_log_filter"
      ],
      "source": "if exists(.pod_labels) {\n    .pod_labels = map_keys(object!(.pod_labels), recursive: true) -\u003e |key| { replace(key, \".\", \"_\") }\n}",
      "type": "remap"
    },
    "transform/destination/test-logstash-dest/01_extra_fields": {
      "drop_on_abort": false,
      "inputs": [
        "transform/destination/test-logstash-dest/00_elastic_dedot"
      ],
      "source": "if !exists(.parsed_data) {\n    structured, err = parse_json(.message)\n    if err == null {\n        .parsed_data = structured\n    } else {\n        .parsed_data = .message\n    }\n}\n\n.foo=\"bar\"",
      "type": "remap"
    },
    "transform/destination/test-logstash-dest/02_del_parsed_data": {
      "drop_on_abort": false,
      "inputs": [
        "transform/destination/test-logstash-dest/01_extra_fields"
      ],
      "source": "if exists(.parsed_data) {\n    del(.parsed_data)\n}",
      "type": "remap"
    },
    "transform/source/test-source/00_owner_ref": {
      "drop_on_abort": false,
      "inputs": [
        "cluster_logging_config/test-source:tests-whispers"
      ],
      "source": "if exists(.pod_owner) {\n    .pod_owner = string!(.pod_owner)\n\n    if starts_with(.pod_owner, \"ReplicaSet/\") {\n        hash = \"-\"\n        if exists(.pod_labels.\"pod-template-hash\") {\n            hash = hash + string!(.pod_labels.\"pod-template-hash\")\n\t\t}\n\n        if hash != \"-\" \u0026\u0026 ends_with(.pod_owner, hash) {\n            replace(.pod_owner, \"ReplicaSet/\", \"Deployment/\")\n            replace(.pod_owner, hash, \"\")\n        }\n    }\n\n    if starts_with(.pod_owner, \"Job/\") {\n        if match(.pod_owner, r'^.+-[0-9]{8,11}$') {\n            replace(.pod_owner, \"Job/\", \"CronJob/\")\n            replace(.pod_owner, r'-[0-9]{8,11}$', \"\")\n        }\n    }\n}",
      "type": "remap"
    },
    "transform/source/test-source/01_clean_up": {
      "drop_on_abort": false,
      "inputs": [
        "transform/source/test-source/00_owner_ref"
      ],
      "source": "if exists(.pod_labels.\"controller-revision-hash\") {\n    del(.pod_labels.\"controller-revision-hash\")\n}\nif exists(.pod_labels.\"pod-template-hash\") {\n    del(.pod_labels.\"pod-template-hash\")\n}\nif exists(.kubernetes) {\n    del(.kubernetes)\n}\nif exists(.file) {\n    del(.file)\n}",
      "type": "remap"
    },
    "transform/source/test-source/02_label_filter": {
      "condition": "exists(.foo)",
      "inputs": [
        "transform/source/test-source/01_clean_up"
      ],
      "type": "filter"
    },
    "transform/source/test-source/03_label_filter": {
      "condition": "!exists(.fo)",
      "inputs": [
        "transform/source/test-source/02_label_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/04_label_filter": {
      "condition": "if is_boolean(.test) || is_float(.test) {\n    data, err = to_string(.test);\n    if err != null {\n        false;\n    } else {\n        includes([111], data);\n    };\n} else if .test == null {\n    \"null\";\n} else {\n    includes([111], .test);\n}",
      "inputs": [
        "transform/source/test-source/03_label_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/05_label_filter": {
      "condition": "if is_boolean(.test) || is_float(.test) {\n    data, err = to_string(.test);\n    if err != null {\n        true;\n    } else {\n        !includes([\"test-test\"], data);\n    };\n} else if .test == null {\n    \"null\";\n} else {\n    !includes([\"test-test\"], .test);\n}",
      "inputs": [
        "transform/source/test-source/04_label_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/06_label_filter": {
      "condition": "match!(.test, r'^test.*$')",
      "inputs": [
        "transform/source/test-source/05_label_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/07_label_filter": {
      "condition": "if exists(.foo) \u0026\u0026 is_string(.foo) {\n    matched = false\n    matched0, err = match(.foo, r'^test.+$')\n    if err != null {\n        true\n    }\n    matched = matched || matched0\n    !matched\n} else {\n    true\n}",
      "inputs": [
        "transform/source/test-source/06_label_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/08_parse_json": {
      "drop_on_abort": false,
      "inputs": [
        "transform/source/test-source/07_label_filter"
      ],
      "source": "if !exists(.parsed_data) {\n    structured, err = parse_json(.message)\n    if err == null {\n        .parsed_data = structured\n    } else {\n        .parsed_data = .message\n    }\n}",
      "type": "remap"
    },
    "transform/source/test-source/09_log_filter": {
      "condition": "exists(.parsed_data.foo)",
      "inputs": [
        "transform/source/test-source/08_parse_json"
      ],
      "type": "filter"
    },
    "transform/source/test-source/10_log_filter": {
      "condition": "!exists(.parsed_data.fo)",
      "inputs": [
        "transform/source/test-source/09_log_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/11_log_filter": {
      "condition": "if is_boolean(.parsed_data.foo) || is_float(.parsed_data.foo) {\n    data, err = to_string(.parsed_data.foo);\n    if err != null {\n        false;\n    } else {\n        includes([\"wvrr\"], data);\n    };\n} else if .parsed_data.foo == null {\n    \"null\";\n} else {\n    includes([\"wvrr\"], .parsed_data.foo);\n}",
      "inputs": [
        "transform/source/test-source/10_log_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/12_log_filter": {
      "condition": "if is_boolean(.parsed_data.foo) || is_float(.parsed_data.foo) {\n    data, err = to_string(.parsed_data.foo);\n    if err != null {\n        true;\n    } else {\n        !includes([\"wvrr\"], data);\n    };\n} else if .parsed_data.foo == null {\n    \"null\";\n} else {\n    !includes([\"wvrr\"], .parsed_data.foo);\n}",
      "inputs": [
        "transform/source/test-source/11_log_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/13_log_filter": {
      "condition": "match!(.parsed_data.foo, r'^wvrr$')",
      "inputs": [
        "transform/source/test-source/12_log_filter"
      ],
      "type": "filter"
    },
    "transform/source/test-source/14_log_filter": {
      "condition": "if exists(.parsed_data.foo) \u0026\u0026 is_string(.parsed_data.foo) {\n    matched = false\n    matched0, err = match(.parsed_data.foo, r'^wvrr$')\n    if err != null {\n        true\n    }\n    matched = matched || matched0\n    !matched\n} else {\n    true\n}",
      "inputs": [
        "transform/source/test-source/13_log_filter"
      ],
      "type": "filter"
    }
  },
  "sinks": {
    "destination/cluster/test-es-dest": {
      "type": "elasticsearch",
      "inputs": [
        "transform/destination/test-es-dest/02_del_parsed_data"
      ],
      "healthcheck": {
        "enabled": false
      },
      "endpoint": "http://192.168.1.1:9200",
      "encoding": {
        "timestamp_format": "rfc3339"
      },
      "batch": {
        "max_bytes": 10485760,
        "timeout_secs": 1
      },
      "auth": {
        "password": "secret",
        "strategy": "basic",
        "user": "elastic"
      },
      "tls": {
        "ca_file": "-----BEGIN CERTIFICATE-----\nMIICwzCCAasCFCjUspjyoopVgNr4tLNRKhRXDfAxMA0GCSqGSIb3DQEBCwUAMB4x\nCzAJBgNVBAYTAlJVMQ8wDQYDVQQDDAZUZXN0Q0EwHhcNMjEwNjIyMTE0NjA0WhcN\nNDgxMTA3MTE0NjA0WjAeMQswCQYDVQQGEwJSVTEPMA0GA1UEAwwGVGVzdENBMIIB\nIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3ln6SzVITuVweDTgytxL6NLC\nv+Zyg9wWiVYRVqcghOSAP2XRe2cMbiaNonOhem444dkBEcwxYhXeXAYA47WBHvQG\n+ZFK9oJiBMddiHZf5jTWZC+oJ+6L+HtGdx1K7s3Yh38iC2XtjzU9QBsfeBeJHzYY\neWrmLt6iN6Qt44cywPtJUowjjJiOXPv1z9nT7c/sF/9S1ElXCLWPytwJWSb0eDR+\na1FvgEKWqMarJrEm1iYXKSQYPajXOTShGioHMVC+es1nypszLoweBuV79I/VVv4a\ngVNBa70ibDqs7/w3q2wCb5fZADE832SrWHtcm/InJCkAKys0rI9f89PXyGoYMwID\nAQABMA0GCSqGSIb3DQEBCwUAA4IBAQC4oyj/utVQYkn6yu5Q0MneO+V/NSEHxjNr\nrWNfrnOcSWb8jAQZ3vdZGKQLUokhaSQCJBwarLbAiNUmntogtHDlKgeGqtgU7xVy\nIi1BJW5VLrz8L5GMDGPGcfR3iT7Jh5rzS5QG9aysTx/0jVhStOR5rqjt9hrfk+I/\nT+OMPM5klzsayge9dHLu+yuW0sxxGRO7+9OyV7nOJ4GtLHbqetj0VAB+ijC0zu5M\njLCvoZdJPPUbZeQzqeUnYML+CCDEzBJGIFOWwl53eSnQWlWUiROecawHhnBs1iGb\nSCPD11M34QEfX0pjCNxEIsMKotTzWhEh+/oKrByvumzJjVykrSiy\n-----END CERTIFICATE-----\n",
        "crt_file": "-----BEGIN CERTIFICATE-----\nMIICtjCCAZ4CFGX3ECr4WwoVPaPZC4fZoN6sbXcOMA0GCSqGSIb3DQEBCwUAMB4x\nCzAJBgNVBAYTAlJVMQ8wDQYDVQQDDAZUZXN0Q0EwHhcNMjEwNjIyMTE1NzE2WhcN\nMzUwMzAxMTE1NzE2WjARMQ8wDQYDVQQDDAZ2ZWN0b3IwggEiMA0GCSqGSIb3DQEB\nAQUAA4IBDwAwggEKAoIBAQDGBdHpoX/fC+ZRGEAViOkrxOuoBHk12aSKFWUShIHW\nej04/s1KcdQyELeJY9aC1O5ngXsuZCUCfKSVtq5cr2I5zr4Zisr3BY+reqPUbEeb\nK4PBtEQ9Ibnz6E6LUKwJ+HE1YjibEAnFDejhRQjz0qT5aXGYMwDd+WF1Fvc1ePy/\n8ldG7c3oFg3oFbWZznoVBf39xwYfYtFvpcv5f0mmRVfezjQROgnXcOWFoQxUg0J1\nWQE3LUIGX10sAZsuJp35R7KA/ZHF6Gr8pzfHRcQhvOoeAcJOu6Y0PZ2ppK0azKz/\nqxs+f/aQBfsCtsuvO/Gnb/YaC3TwA2fexe+2AZ6F+SATAgMBAAEwDQYJKoZIhvcN\nAQELBQADggEBAExHd9KAvAYa0vhmZSEdGX7NvHj8AX1OWUAqvbprwbFuBH2fnKX+\nNbFTvWjJCP7dzmtpza1T9Dmo92C4/lZ94W/UsJOF2cHAQPyJvNSvbOTH9a03j8Bh\nimRwfm+LsnotFKxwU4aP+QHG+EPv/AC01wP5a9ei0EYZrHQxuu5l9gTDWcStkkZ9\n/1w4EXgMClYUWgCUGQ6/7/WNBN53cYfyiMPq/UNePeIaRBCmrqnIZP+SZ5p31EQs\nfr2jMkQJ9m7j6XV/DkdXSIl+VgfiXQIrCqSvQuwFWpvpbpTOpRNrXa4ik0BK0mKi\nbbi0LUgo2SpbnHirtiVyP/10Buhf3wHIGGQ=\n-----END CERTIFICATE-----\n",
        "key_file": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAxgXR6aF/3wvmURhAFYjpK8TrqAR5NdmkihVlEoSB1no9OP7N\nSnHUMhC3iWPWgtTuZ4F7LmQlAnyklbauXK9iOc6+GYrK9wWPq3qj1GxHmyuDwbRE\nPSG58+hOi1CsCfhxNWI4mxAJxQ3o4UUI89Kk+WlxmDMA3flhdRb3NXj8v/JXRu3N\n6BYN6BW1mc56FQX9/ccGH2LRb6XL+X9JpkVX3s40EToJ13DlhaEMVINCdVkBNy1C\nBl9dLAGbLiad+UeygP2Rxehq/Kc3x0XEIbzqHgHCTrumND2dqaStGsys/6sbPn/2\nkAX7ArbLrzvxp2/2Ggt08ANn3sXvtgGehfkgEwIDAQABAoIBADUqwt1zmx2L2F7V\nn/8oL1KtIIiQCutGcEMS03xRT3sCfwWahAwE2/BFRMICqEmgWhI4VZZzFOzCAn6f\n+diwzjKvK6M3/J6uQ5DK8MnL+L3UxR9xAxFWyNKQAOau1kInDl5C7OfVOopJ3cj9\n/BVa7Sh6AyHWL9lpZ51EeUNGJLZ0JZufB1QbAWi0NaEZHuaO/QCYNyB8yNMOBGya\nO9LmdyCfO9T/YLZWx/dCN5ZWYrHjTJZDGwOyBwY5B03QafJ+qANNJESMeznyTvDJ\n99whHCIqF4Chp03f7JnPQrBH0HmcC1oAf8LXX9v1/w68JjewU7UHh39Vq6t4cVep\nvXxaWIECgYEA7gCLSSVRPQqoFPApxD05fBjMRgv3kSmipZUM9nW2DvXsTRQCTSSs\nU/bT0nqgAmU7WeR7iAL3eJ1Nnr7yjW8eLZysFYJo32M2lGPgHuVhzRX/vnCNB1CG\ndkYXyd5r+H+vI5elHpo+lUiagv4KbBklBCgD9e4WzdXW7qxI9csMOEMCgYEA1P9R\nxhF5Bh4eGWX7EmC0Tf2UCkOp91uAzPd3f4SPXydKlq02BkpBxVJdCvAW6ZTFgqMu\ntgPqF/+K4M7/HE+b88h7+VvBMU20tqn5c5CbtMGeIM81i/ulE89jRVv/24cxYF+C\niTtVpRxu4IMsNkvp04xB26uphG2NG7CUcfAtI/ECgYEArjXBvonNPDQnsiPVPqpe\nAIMaSw+JaD0kq7U9Zs3ktHC4RfcmdBcq+M7MX92YcAhveC4xae5Z/HSQE2nLm1FB\nsrtijuAFKbayhc3RiGv4uainqVszL652re5CjWX8fEniBdiDabIXqygYyVdwg42o\nNbGgrIxZLtOe3tdHFHtK94cCgYBqWCOq4bRsIoNiqPEnJtM/ETlluozU7IGtVGz8\nZOH0Xzi1bDvJ/i9CZrH/sQmvi9DlPbYnuGKbosHjJlZm+zRhDhsfz/jwNdzhSpI6\nadvj7ruVo/8XKggskOH+kkV3hNNZS7Zv8Aj9y+lr/PIJFfPj5GZJWDbl4JCQX6Ru\nEr1m8QKBgEItNIJKC8KMr2xVPcnj54LYgPobxQrKKNSgEC+E3dDV8LD26vGJfQcI\nL0lPO3VmoYdZBykiAt5CXG5/FK9JCSWCmSY1OFbbgXtx0FjF7sTG8+w+j8mnQ6VP\n7WqSZ053ewFxk/XIXcNwWAQD9nWg3WJMwQADSDgKGctQQW8DOwOV\n-----END RSA PRIVATE KEY-----\n",
        "verify_hostname": false,
        "verify_certificate": true
      },
      "compression": "gzip",
      "bulk": {
        "action": "index",
        "index": "logs-%F"
      },
      "mode": "bulk"
    },
    "destination/cluster/test-logstash-dest": {
      "type": "socket",
      "inputs": [
        "transform/destination/test-logstash-dest/02_del_parsed_data"
      ],
      "healthcheck": {
        "enabled": false
      },
      "address": "192.168.199.252:9009",
      "encoding": {
        "codec": "json",
        "timestamp_format": "rfc3339"
      },
      "mode": "tcp",
      "tls": {
        "ca_file": "-----BEGIN CERTIFICATE-----\nMIICwzCCAasCFCjUspjyoopVgNr4tLNRKhRXDfAxMA0GCSqGSIb3DQEBCwUAMB4x\nCzAJBgNVBAYTAlJVMQ8wDQYDVQQDDAZUZXN0Q0EwHhcNMjEwNjIyMTE0NjA0WhcN\nNDgxMTA3MTE0NjA0WjAeMQswCQYDVQQGEwJSVTEPMA0GA1UEAwwGVGVzdENBMIIB\nIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3ln6SzVITuVweDTgytxL6NLC\nv+Zyg9wWiVYRVqcghOSAP2XRe2cMbiaNonOhem444dkBEcwxYhXeXAYA47WBHvQG\n+ZFK9oJiBMddiHZf5jTWZC+oJ+6L+HtGdx1K7s3Yh38iC2XtjzU9QBsfeBeJHzYY\neWrmLt6iN6Qt44cywPtJUowjjJiOXPv1z9nT7c/sF/9S1ElXCLWPytwJWSb0eDR+\na1FvgEKWqMarJrEm1iYXKSQYPajXOTShGioHMVC+es1nypszLoweBuV79I/VVv4a\ngVNBa70ibDqs7/w3q2wCb5fZADE832SrWHtcm/InJCkAKys0rI9f89PXyGoYMwID\nAQABMA0GCSqGSIb3DQEBCwUAA4IBAQC4oyj/utVQYkn6yu5Q0MneO+V/NSEHxjNr\nrWNfrnOcSWb8jAQZ3vdZGKQLUokhaSQCJBwarLbAiNUmntogtHDlKgeGqtgU7xVy\nIi1BJW5VLrz8L5GMDGPGcfR3iT7Jh5rzS5QG9aysTx/0jVhStOR5rqjt9hrfk+I/\nT+OMPM5klzsayge9dHLu+yuW0sxxGRO7+9OyV7nOJ4GtLHbqetj0VAB+ijC0zu5M\njLCvoZdJPPUbZeQzqeUnYML+CCDEzBJGIFOWwl53eSnQWlWUiROecawHhnBs1iGb\nSCPD11M34QEfX0pjCNxEIsMKotTzWhEh+/oKrByvumzJjVykrSiy\n-----END CERTIFICATE-----\n",
        "crt_file": "-----BEGIN CERTIFICATE-----\nMIICtjCCAZ4CFGX3ECr4WwoVPaPZC4fZoN6sbXcOMA0GCSqGSIb3DQEBCwUAMB4x\nCzAJBgNVBAYTAlJVMQ8wDQYDVQQDDAZUZXN0Q0EwHhcNMjEwNjIyMTE1NzE2WhcN\nMzUwMzAxMTE1NzE2WjARMQ8wDQYDVQQDDAZ2ZWN0b3IwggEiMA0GCSqGSIb3DQEB\nAQUAA4IBDwAwggEKAoIBAQDGBdHpoX/fC+ZRGEAViOkrxOuoBHk12aSKFWUShIHW\nej04/s1KcdQyELeJY9aC1O5ngXsuZCUCfKSVtq5cr2I5zr4Zisr3BY+reqPUbEeb\nK4PBtEQ9Ibnz6E6LUKwJ+HE1YjibEAnFDejhRQjz0qT5aXGYMwDd+WF1Fvc1ePy/\n8ldG7c3oFg3oFbWZznoVBf39xwYfYtFvpcv5f0mmRVfezjQROgnXcOWFoQxUg0J1\nWQE3LUIGX10sAZsuJp35R7KA/ZHF6Gr8pzfHRcQhvOoeAcJOu6Y0PZ2ppK0azKz/\nqxs+f/aQBfsCtsuvO/Gnb/YaC3TwA2fexe+2AZ6F+SATAgMBAAEwDQYJKoZIhvcN\nAQELBQADggEBAExHd9KAvAYa0vhmZSEdGX7NvHj8AX1OWUAqvbprwbFuBH2fnKX+\nNbFTvWjJCP7dzmtpza1T9Dmo92C4/lZ94W/UsJOF2cHAQPyJvNSvbOTH9a03j8Bh\nimRwfm+LsnotFKxwU4aP+QHG+EPv/AC01wP5a9ei0EYZrHQxuu5l9gTDWcStkkZ9\n/1w4EXgMClYUWgCUGQ6/7/WNBN53cYfyiMPq/UNePeIaRBCmrqnIZP+SZ5p31EQs\nfr2jMkQJ9m7j6XV/DkdXSIl+VgfiXQIrCqSvQuwFWpvpbpTOpRNrXa4ik0BK0mKi\nbbi0LUgo2SpbnHirtiVyP/10Buhf3wHIGGQ=\n-----END CERTIFICATE-----\n",
        "key_file": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAxgXR6aF/3wvmURhAFYjpK8TrqAR5NdmkihVlEoSB1no9OP7N\nSnHUMhC3iWPWgtTuZ4F7LmQlAnyklbauXK9iOc6+GYrK9wWPq3qj1GxHmyuDwbRE\nPSG58+hOi1CsCfhxNWI4mxAJxQ3o4UUI89Kk+WlxmDMA3flhdRb3NXj8v/JXRu3N\n6BYN6BW1mc56FQX9/ccGH2LRb6XL+X9JpkVX3s40EToJ13DlhaEMVINCdVkBNy1C\nBl9dLAGbLiad+UeygP2Rxehq/Kc3x0XEIbzqHgHCTrumND2dqaStGsys/6sbPn/2\nkAX7ArbLrzvxp2/2Ggt08ANn3sXvtgGehfkgEwIDAQABAoIBADUqwt1zmx2L2F7V\nn/8oL1KtIIiQCutGcEMS03xRT3sCfwWahAwE2/BFRMICqEmgWhI4VZZzFOzCAn6f\n+diwzjKvK6M3/J6uQ5DK8MnL+L3UxR9xAxFWyNKQAOau1kInDl5C7OfVOopJ3cj9\n/BVa7Sh6AyHWL9lpZ51EeUNGJLZ0JZufB1QbAWi0NaEZHuaO/QCYNyB8yNMOBGya\nO9LmdyCfO9T/YLZWx/dCN5ZWYrHjTJZDGwOyBwY5B03QafJ+qANNJESMeznyTvDJ\n99whHCIqF4Chp03f7JnPQrBH0HmcC1oAf8LXX9v1/w68JjewU7UHh39Vq6t4cVep\nvXxaWIECgYEA7gCLSSVRPQqoFPApxD05fBjMRgv3kSmipZUM9nW2DvXsTRQCTSSs\nU/bT0nqgAmU7WeR7iAL3eJ1Nnr7yjW8eLZysFYJo32M2lGPgHuVhzRX/vnCNB1CG\ndkYXyd5r+H+vI5elHpo+lUiagv4KbBklBCgD9e4WzdXW7qxI9csMOEMCgYEA1P9R\nxhF5Bh4eGWX7EmC0Tf2UCkOp91uAzPd3f4SPXydKlq02BkpBxVJdCvAW6ZTFgqMu\ntgPqF/+K4M7/HE+b88h7+VvBMU20tqn5c5CbtMGeIM81i/ulE89jRVv/24cxYF+C\niTtVpRxu4IMsNkvp04xB26uphG2NG7CUcfAtI/ECgYEArjXBvonNPDQnsiPVPqpe\nAIMaSw+JaD0kq7U9Zs3ktHC4RfcmdBcq+M7MX92YcAhveC4xae5Z/HSQE2nLm1FB\nsrtijuAFKbayhc3RiGv4uainqVszL652re5CjWX8fEniBdiDabIXqygYyVdwg42o\nNbGgrIxZLtOe3tdHFHtK94cCgYBqWCOq4bRsIoNiqPEnJtM/ETlluozU7IGtVGz8\nZOH0Xzi1bDvJ/i9CZrH/sQmvi9DlPbYnuGKbosHjJlZm+zRhDhsfz/jwNdzhSpI6\nadvj7ruVo/8XKggskOH+kkV3hNNZS7Zv8Aj9y+lr/PIJFfPj5GZJWDbl4JCQX6Ru\nEr1m8QKBgEItNIJKC8KMr2xVPcnj54LYgPobxQrKKNSgEC+E3dDV8LD26vGJfQcI\nL0lPO3VmoYdZBykiAt5CXG5/FK9JCSWCmSY1OFbbgXtx0FjF7sTG8+w+j8mnQ6VP\n7WqSZ053ewFxk/XIXcNwWAQD9nWg3WJMwQADSDgKGctQQW8DOwOV\n-----END RSA PRIVATE KEY-----\n",
        "verify_hostname": false,
        "verify_certificate": true
      },
      "keepalive": {
        "time_secs": 7200
      }
    },
    "destination/cluster/test-loki-dest": {
      "type": "loki",
      "inputs": [
        "transform/source/test-source/14_log_filter"
      ],
      "healthcheck": {
        "enabled": false
      },
      "encoding": {
        "codec": "text",
        "only_fields": [
          "message"
        ],
        "timestamp_format": "rfc3339"
      },
      "endpoint": "http://192.168.1.1:9000",
      "tls": {
        "verify_hostname": true,
        "verify_certificate": true
      },
      "labels": {
        "app": "{{ parsed_data.ap-p[0].a }}",
        "container": "{{ container }}",
        "foo": "bar",
        "image": "{{ image }}",
        "namespace": "{{ namespace }}",
        "node": "{{ node }}",
        "pod": "{{ pod }}",
        "pod_ip": "{{ pod_ip }}",
        "pod_labels_*": "{{ pod_labels }}",
        "pod_owner": "{{ pod_owner }}",
        "stream": "{{ stream }}"
      },
      "remove_label_fields": true,
      "out_of_order_action": "rewrite_timestamp"
    }
  }
}
