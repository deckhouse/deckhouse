#!/usr/bin/env bash

# Copyright 2021 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source /shell_lib.sh

function __config__(){
  cat <<EOF
configVersion: v1
kubernetes:
  - name: endpoints
    apiVersion: v1
    kind: Endpoints
    queue: "endpoints-config"
    group: main
    executeHookOnEvent: []
    executeHookOnSynchronization: false
    keepFullObjectsInMemory: false
    nameSelector:
      matchNames:
      - kubernetes
    jqFilter: |
      {
        "count": (.subsets[].addresses | length )
      }
  - name: nodegroups
    apiVersion: deckhouse.io/v1
    kind: NodeGroup
    queue: "nodegroups-list"
    group: main
    executeHookOnEvent: []
    executeHookOnSynchronization: false
    keepFullObjectsInMemory: false
    jqFilter: |
      {
        "name": .metadata.name,
        "criType": .spec.cri.type
      }
kubernetesValidating:
- name: d8-cluster-configuration-secret.deckhouse.io
  group: main
  labelSelector:
    matchLabels:
      name: d8-cluster-configuration
  rules:
  - apiGroups:   [""]
    apiVersions: ["v1"]
    operations:  ["*"]
    resources:   ["secrets"]
    scope:       "Namespaced"
EOF
}

function __main__() {
  # Secret kube-system/d8-cluster-configuration cannot be deleted
  if context::jq -e -r '.review.request.operation == "DELETE"' >/dev/null 2>&1; then
    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"it is forbidden to delete secret d8-cluster-configuration"}
EOF
    return 0
  fi

  # defaultCRI cannot be changed if count of endpoints < 3
  if context::jq -e -r '.review.request.operation == "UPDATE"' >/dev/null 2>&1; then
    endpointsCount="$(context::jq -r '.snapshots.endpoints[].filterResult.count')"
    oldDefaultCRI="$(context::jq -r '.review.request.oldObject.data."cluster-configuration.yaml"' | base64 -d | yq eval '.defaultCRI // "Containerd"' -)"
    newDefaultCRI="$(context::jq -r '.review.request.object.data."cluster-configuration.yaml"' | base64 -d | yq eval '.defaultCRI // "Containerd"' -)"

    if [[ ("${newDefaultCRI}" != "${oldDefaultCRI}") && ("${endpointsCount}" -lt 3) ]]; then
      cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":true, "warnings":["it is disruptive to change defaultCRI type for cluster with apiserver endpoints < 3"]}
EOF
      return 0
    fi
  fi

  # check CRI compatibility with k8s 1.24, docker CRI was deprecated there
  if context::jq -e -r '.review.request.operation == "UPDATE"' >/dev/null 2>&1; then
    k8sVersion="$(context::jq -r '.review.request.oldObject.data."cluster-configuration.yaml"' | base64 -d | yq eval '.kubernetesVersion // "1.21"' -)"
    echo "k8sVersion ${k8sVersion}"

    if [ "$k8sVersion" == "1.24" ]; then
      defaultCRI="$(context::jq -r '.review.request.object.data."cluster-configuration.yaml"' | base64 -d | yq eval '.defaultCRI // "Containerd"' -)"
      echo "DefaultCRI ${defaultCRI}"

      for i in $(context::jq -r '.snapshots.nodegroups | keys[]'); do
        nodeGroup=$(context::get snapshots.nodegroups.${i}.filterResult)
        name=$(jq -rc '.name' <<<${nodeGroup})
        criType=$(jq -rc '.criType' <<<${nodeGroup})
        echo "NG ${name} with criType ${criType}"
        if [ -z ${criType} ]; then
          echo "setting defaultCRI"
          criType=${defaultCRI}
        fi

        if [ "$criType" == "Docker" ]; then
          cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"Docker CRI is not supported by kubernetes 1.24. NodeGroup ${name} has incompatible CRI type"}
EOF

          return 0
        fi
      done


    fi # end if k8sVersion

    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"TMP"}
EOF
    return 0
  fi

  # allowed response
  cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":true}
EOF
}

hook::run "$@"
