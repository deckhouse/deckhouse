---
kind: ConfigMap
apiVersion: v1
metadata:
  name: documentation-nginx-config
  namespace: d8-system
  {{- include "helm_lib_module_labels" (list . (dict "app" "documentation")) | nindent 2 }}
data:
  nginx.conf: |-
    worker_processes 1;
    error_log /dev/stderr warn;
    pid       /tmp/nginx.pid;

    events {
      worker_connections 1024;
      multi_accept on;
    }

    http {
      include       /opt/nginx-static/conf/mime.types;
      default_type  application/octet-stream;

      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;

      access_log off;

      log_format json_combined escape=json '{ "time_local": "$time_local", '
        '"host": "$host", '
        '"remote_addr": "$remote_addr", '
        '"remote_user": "$remote_user", '
        '"request": "$request", '
        '"status": "$status", '
        '"body_bytes_sent": "$body_bytes_sent", '
        '"request_time": "$request_time", '
        '"http_referrer": "$http_referer", '
        '"http_user_agent": "$http_user_agent" }';

      keepalive_timeout  65;

      ssi on;
      gzip off;
      port_in_redirect off;

      map $http_accept_language $preferred_browser_lang {
        default       "en";
        "~^ru"        "ru";
      }

      map $uri $lang {
        "~^/ru/"      "ru";
        "~^/en/"      "en";
        default       "en";
      }

      server {
        listen   8080;
        server_name _;

        root   /app;
        index  index.html readme.html;
        error_page 403 404 /$lang/404.html;

        charset utf-8;
        access_log     /dev/stdout json_combined;


        location ~* ^(/|/documentation/.+|/products/kubernetes-platform/documentation/.+)$ {
            # Use the browser language as the default language
            set $cookie_lang $preferred_browser_lang;

            # Get language from cookie if it is present
            if ($http_cookie ~* "lang=([a-z]{2})") {
                set $cookie_lang $1;
            }

            rewrite ^/$ $scheme://$host/$cookie_lang/platform/$is_args$args redirect;
            rewrite ^/modules/(.+)$ $scheme://$host/$cookie_lang/modules/$1$is_args$args redirect;
            rewrite ^/platform/(.+)$ $scheme://$host/$cookie_lang/platform/$1$is_args$args redirect;
            rewrite ^/(products/kubernetes-platform/)?documentation/v[\d]+[^\/]*/(.*)?$ $scheme://$host/$cookie_lang/platform/$2$is_args$args redirect;
            rewrite ^/(ru/|en/)?(products/kubernetes-platform/)?documentation/v[\d]+[^\/]*/(.*)?$ $scheme://$host/$cookie_lang/platform/$2$is_args$args redirect;
        }

        location /link_test_report.txt {
            deny all;
        }

        location = /healthz {
            access_log  off;
            add_header Content-Type text/plain;
            return 200;
        }

        location /config {
            try_files $uri $uri/ =404;
        }

        # Common assets
        location ~* ^(/ru|/en)?/(platform/)?((presentations|assets|images|js|css)/.+)$ {
            alias /app/platform/$3;
        }

        # Includes
        location ~* ^(/ru|/en)?/(platform/)?(includes/.+)$ {
            alias /app/platform/$lang/$3;
        }

        # Modules from source index page
        location ~* ^/(ru|en)/modules/$ {
            try_files /modules/$1/readme.html =404;
        }

        # Redirects for modules folders
        location ~* ^/(ru|en)/modules/([^/.]+)$ {
            set $platform_module_folder_path "platform/$1/modules/$2";
            set $platform_module_url "/$1/platform/modules/$2/";
            set $ext_module_folder_path "modules/$1/$2";
            set $ext_module_url "/$1/modules/$2/";

            if (-d $document_root/$platform_module_folder_path) {
                return 301 $scheme://$host$platform_module_url$is_args$args;
            }

            if (-d $document_root/$ext_module_folder_path) {
                return 301 $scheme://$host$ext_module_url$is_args$args;
            }
        }

        location ~* ^/(ru|en)/modules/([^/]+)/(.*)$ {
            set $platform_module_folder_path "platform/$1/modules/$2";
            set $platform_module_url "/$1/platform/modules/$2/$3";
            set $lang "$1";
            set $module "$2";
            set $module_doc "$3";

            if (-d $document_root/$platform_module_folder_path) {
               return 301 $scheme://$host$platform_module_url$is_args$args;
            }

            # Redirect to stable version for module from source (doc for such modules is always has URL /LANG/modules/NAME/stable/DOC_URL).
            rewrite ^/(ru|en)/modules/([^/]+)/(?!(rock-solid|stable|early-access|beta|alpha))(.*)$ $scheme://$host/$1/modules/$2/stable/$3$is_args$args redirect;

            # Serve modules from sources
            try_files /modules/$lang/$module/$module_doc /modules/$lang/$module/$module_doc/ =404;
        }

        # Internal modules
        location ~* ^/(ru|en)/platform/(.*) {
            try_files /platform/$1/$2 /platform/$1/$2/index.html =404;
        }

        location ~* ^/platform/(ru|en)/(.*) {
            internal;
            try_files $uri $uri/ =404;
        }

        location ~* ^/modules/(ru|en)/([^0-9]+[^/]+)/(.*)$ {
            internal;
            try_files $uri $uri/ =404;
        }

        location / {
            try_files /platform$uri /platform$uri/ =404;
        }
      }
    }
