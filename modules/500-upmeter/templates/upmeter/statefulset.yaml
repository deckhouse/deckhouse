{{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: upmeter
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "upmeter")) | nindent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: StatefulSet
    name: upmeter
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: upmeter
      minAllowed:
        memory: 50Mi
        cpu: 50m
      maxAllowed:
        memory: 300Mi
        cpu: 350m
      mode: Auto
    - containerName: kube-rbac-proxy
      minAllowed:
        memory: 20Mi
        cpu: 20m
      maxAllowed:
        memory: 100Mi
        cpu: 200m
      mode: Auto
{{- end }}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: upmeter
  namespace: d8-upmeter
  {{- include "helm_lib_module_labels" (list . (dict "app" "upmeter")) | nindent 2 }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: upmeter
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: upmeter
  namespace: d8-{{ .Chart.Name }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "upmeter")) | nindent 2 }}
spec:
  replicas: 1
  serviceName: upmeter
  selector:
    matchLabels:
      app: upmeter
  template:
    metadata:
      labels:
        app: upmeter
    spec:
      imagePullSecrets:
      - name: deckhouse-registry
      terminationGracePeriodSeconds: 5
      enableServiceLinks: false
      serviceAccountName: upmeter
      {{- include "helm_lib_node_selector" (tuple . "monitoring") | nindent 6 }}
      {{- include "helm_lib_tolerations" (tuple . "monitoring") | nindent 6 }}
      {{- include "helm_lib_priority_class" (tuple . "cluster-low") | nindent 6 }}
      {{- include "helm_lib_module_pod_security_context_run_as_user_nobody" . | nindent 6 }}
      initContainers:
{{- $storageClass := .Values.upmeter.internal.effectiveStorageClass }}
{{- if $storageClass }}
      {{- include "helm_lib_module_init_container_chown_nobody_volume" (tuple . "data") | nindent 6 }}
{{- end }}
      - name: migrator
        image: "{{ $.Values.global.modulesImages.registry }}:{{ $.Values.global.modulesImages.tags.upmeter.upmeter }}"
        command:
          - /migrate
          - -verbose
          - "-path=/data/migrations/server"
          - "-database=sqlite3:///db/downtime.db.sqlite?x-no-tx-wrap=true"
          - up
        volumeMounts:
          - mountPath: /db
            name: data
            readOnly: false
          - mountPath: /tmp
            name: tmp
      containers:
      - name: upmeter
        {{- include "helm_lib_module_container_security_context_read_only_root_filesystem" . | nindent 8 }}
        image: "{{ $.Values.global.modulesImages.registry }}:{{ $.Values.global.modulesImages.tags.upmeter.upmeter }}"
        command:
          - /upmeter
          - start
          - --origins={{ index .Values.global.discovery "clusterMasterCount" }}
          - --user-agent=Upmeter/1.0 (Deckhouse {{ $.Values.global.deckhouseEdition }} {{ $.Values.global.deckhouseVersion }})
          {{- range $probeRef := .Values.upmeter.internal.disabledProbes }}
          - --disable-probe={{ $probeRef }}
          {{- end }}
          {{- if .Values.upmeter.internal.dynamicProbes }}
            {{- range $name := .Values.upmeter.internal.dynamicProbes.ingressControllerNames }}
          - --dynamic-probe-nginx-controller={{ $name }}
            {{- end }}
            {{- range $name := .Values.upmeter.internal.dynamicProbes.cloudEphemeralNodeGroupNames }}
          - --dynamic-probe-nodegroup={{ $name }}
            {{- end }}
          {{- end }}
        env:
          - name: UPMETER_DB_PATH
            value: "/db/downtime.db.sqlite"
          - name: UPMETER_LISTEN_HOST
            value: 127.0.0.1
          - name: UPMETER_LISTEN_PORT
            value: "8091"
          - name: LOG_LEVEL
            value: "info"
          - name: LOG_TYPE
            value: "json"
          {{- include "helm_lib_envs_for_proxy" . | nindent 10 }}
        volumeMounts:
          - mountPath: /db
            name: data
            readOnly: false
          - mountPath: /tmp
            name: tmp
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 8443
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            memory: "300Mi"
          requests:
{{- if $storageClass }}
            {{- include "helm_lib_module_ephemeral_storage_only_logs" . | nindent 12 }}
{{- else }}
            {{- include "helm_lib_module_ephemeral_storage_logs_with_extra" 1024 | nindent 12 }}
{{- end }}
      - name: kube-rbac-proxy
        {{- include "helm_lib_module_container_security_context_read_only_root_filesystem" . | nindent 8 }}
        image: "{{ $.Values.global.modulesImages.registry }}:{{ $.Values.global.modulesImages.tags.common.kubeRbacProxy }}"
        args:
        - "--secure-listen-address=$(KUBE_RBAC_PROXY_LISTEN_ADDRESS):8443"
        - "--client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        - "--v=2"
        - "--logtostderr=true"
        - "--stale-cache-interval=1h30m"
        ports:
        - containerPort: 8443
          name: https
        env:
        - name: KUBE_RBAC_PROXY_LISTEN_ADDRESS
          value: "0.0.0.0"
        - name: KUBE_RBAC_PROXY_CONFIG
          value: |
            excludePaths:
            - /healthz
            - /ready
            upstreams:
            - upstream: http://127.0.0.1:8091/
              path: /
              authorization:
                resourceAttributes:
                  namespace: d8-{{ .Chart.Name }}
                  apiGroup: apps
                  apiVersion: v1
                  resource: statefulsets
                  subresource: http
                  name: upmeter
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_only_logs" . | nindent 12 }}
      volumes:
      - emptyDir: {}
        name: tmp
{{- if not $storageClass }}
      - name: data
        emptyDir: {}
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ $storageClass }}
      resources:
        requests:
          storage: 1Gi
{{- end }}
