---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: deschedulers.deckhouse.io
spec:
  group: deckhouse.io
  names:
    kind: Descheduler
    listKind: DeschedulerList
    plural: deschedulers
    singular: descheduler
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.ready
          name: Ready
          type: boolean
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Descheduler is a description of a single descheduler instance.
          properties:
            apiVersion:
              type: string
            kind:
              type: string
            metadata:
              type: object
              properties:
                name:
                  type: string
            spec:
              description: Defines the behavior of a descheduler instance.
              properties:
                deploymentTemplate:
                  description: Defines Template of a descheduler Deployment.
                  properties:
                    nodeSelector:
                      additionalProperties:
                        type: string
                      type: object
                    tolerations:
                      items:
                        properties:
                          effect:
                            type: string
                          key:
                            type: string
                          operator:
                            type: string
                          tolerationSeconds:
                            format: int64
                            type: integer
                          value:
                            type: string
                        type: object
                      type: array
                  type: object
                deschedulerPolicy:
                  description: |
                    `globalParameters` and `strategies` follow the [descheduler's documentation](https://github.com/kubernetes-sigs/descheduler#policy-and-strategies).
                  properties:
                    globalParameters:
                      description: Parameters that apply to all policies.
                      properties:
                        evictFailedBarePods:
                          description: Allows Pods without `ownerReferences` and in `failed` phase to be evicted.
                          type: boolean
                        evictLocalStoragePods:
                          description: Allows Pods using local storage to be evicted.
                          type: boolean
                        evictSystemCriticalPods:
                          description: Allows eviction of Pods of any priority (including Kubernetes system Pods).
                          type: boolean
                        ignorePvcPods:
                          description: Prevents Pods with PVCs from being evicted.
                          type: boolean
                        maxNoOfPodsToEvictPerNamespace:
                          description: Restricts maximum of Pods to be evicted per namespace.
                          type: integer
                        maxNoOfPodsToEvictPerNode:
                          description: Restricts maximum of Pods to be evicted per node.
                          type: integer
                        nodeSelector:
                          type: string
                      type: object
                    strategies:
                      description: List of strategies with corresponding parameters for a given Descheduler instances.
                      properties:
                        highNodeUtilization:
                          required: [enabled]
                          description: >
                            This strategy finds nodes that are under utilized and evicts Pods from the nodes in the hope
                            that these Pods will be scheduled compactly into fewer nodes.
                          properties:
                            enabled:
                              type: boolean
                            nodeFilter: &node-filter
                              description: Filters Nodes to which the strategy applies.
                              labelSelector:
                                properties:
                                  matchExpressions:
                                    type: array
                                    description: List of label expressions that a node should have to qualify for the filter condition.
                                    items:
                                      properties:
                                        key:
                                          type: string
                                          description: A label name.
                                        operator:
                                          type: string
                                          description: A comparison operator.
                                          enum:
                                            - In
                                            - NotIn
                                            - Exists
                                            - DoesNotExist
                                        values:
                                          type: array
                                          description: A label value.
                                          items:
                                            type: string
                                            pattern: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
                                            minLength: 1
                                            maxLength: 63
                                      oneOf:
                                        - properties:
                                            operator:
                                              enum: [ Exists, DoesNotExist ]
                                          required: [ key, operator ]
                                          not:
                                            required: [ values ]
                                        - properties:
                                            operator:
                                              enum: [ In, NotIn ]
                                          required: [ key, operator, values ]
                                      type: object
                                    x-doc-examples:
                                      - - key: tier
                                          operator: In
                                          values:
                                            - production
                                            - staging
                                        - key: tier
                                          operator: NotIn
                                          values: [ production ]
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    type: object
                                type: object
                              type: object
                            priorityFilter: &priority-filter
                              description: Only Pods with priority lower than this will be descheduled.
                              thresholdPriority:
                                format: int32
                                type: integer
                              thresholdPriorityClassName:
                                type: string
                              type: object
                            namespaceFilter: &namespace-filter
                              description: Restricts Namespaces to which this strategy applies.
                              namespaces:
                                properties:
                                  exclude:
                                    items:
                                      type: string
                                    type: array
                                  include:
                                    items:
                                      type: string
                                    type: array
                                type: object
                              type: object
                            nodeFit: &node-fit
                              description: >
                                If set to true, the descheduler will consider whether or not the Pods
                                that meet eviction criteria will fit on other nodes before evicting them.
                              type: boolean
                          type: object
                        removeDuplicates:
                          required: [enabled]
                          description: >
                            This strategy plugin makes sure that there is only one pod associated with a ReplicaSet (RS), ReplicationController (RC), StatefulSet, or Job running on the same node. If there are more, those duplicate pods are evicted for better spreading of pods in a cluster. This issue could happen if some nodes went down due to whatever reasons, and pods on them were moved to other nodes leading to more than one pod associated with a RS or RC, for example, running on the same node. Once the failed nodes are ready again, this strategy could be enabled to evict those duplicate pods.
                            It provides one optional parameter, excludeOwnerKinds, which is a list of OwnerRef Kinds. If a pod has any of these Kinds listed as an OwnerRef, that pod will not be considered for eviction. Note that pods created by Deployments are considered for eviction by this strategy. The excludeOwnerKinds parameter should include ReplicaSet to have pods created by Deployments excluded.
                          properties:
                            enabled:
                              type: boolean
                            namespaces: *namespace-filter
                            excludeOwnerKinds:
                              type: array
                              items:
                                type: string
                                enum: ["ReplicaSet", "StatefulSet", "ReplicationController", "Job"]
                          type: object
                        lowNodeUtilization:
                          required: [enabled]
                          description: >
                            This strategy finds nodes that are under utilized and evicts pods, if possible, from other nodes in the hope that recreation of evicted pods will be scheduled on these underutilized nodes. The parameters of this strategy are configured under nodeResourceUtilizationThresholds.
                            The under utilization of nodes is determined by a configurable threshold thresholds. The threshold thresholds can be configured for cpu, memory, number of pods, and extended resources in terms of percentage (the percentage is calculated as the current resources requested on the node vs total allocatable. For pods, this means the number of pods on the node as a fraction of the pod capacity set for that node).
                            If a node's usage is below threshold for all (cpu, memory, number of pods and extended resources), the node is considered underutilized. Currently, pods request resource requirements are considered for computing node resource utilization.
                            There is another configurable threshold, targetThresholds, that is used to compute those potential nodes from where pods could be evicted. If a node's usage is above targetThreshold for any (cpu, memory, number of pods, or extended resources), the node is considered over utilized. Any node between the thresholds, thresholds and targetThresholds is considered appropriately utilized and is not considered for eviction. The threshold, targetThresholds, can be configured for cpu, memory, and number of pods too in terms of percentage.
                            These thresholds, thresholds and targetThresholds, could be tuned as per your cluster requirements. Note that this strategy evicts pods from overutilized nodes (those with usage above targetThresholds) to underutilized nodes (those with usage below thresholds), it will abort if any number of underutilized nodes or overutilized nodes is zero.
                            Additionally, the strategy accepts a useDeviationThresholds parameter. If that parameter is set to true, the thresholds are considered as percentage deviations from mean resource usage. thresholds will be deducted from the mean among all nodes and targetThresholds will be added to the mean. A resource consumption above (resp. below) this window is considered as overutilization (resp. underutilization).
                            NOTE: Node resource consumption is determined by the requests and limits of pods, not actual usage. This approach is chosen in order to maintain consistency with the kube-scheduler, which follows the same design for scheduling pods onto nodes. This means that resource usage as reported by Kubelet (or commands like kubectl top) may differ from the calculated consumption, due to these components reporting actual usage metrics.
                          properties:
                            enabled:
                              type: boolean
                            useDeviationThresholds:
                              type: bool
                              description: |
                                If that parameter is set to true, the thresholds are considered as percentage deviations from mean resource usage
                            thresholds:
                              type: object
                              description: |
                                Key-value, like ` "cpu" : 20`
                              additionalProperties: true
                            targetThresholds:
                              type: object
                              description: |
                                Key-value, like ` "cpu" : 20`
                              additionalProperties: true
                            numberOfNodes:
                              type: int
                              description: |
                                This parameter can be configured to activate the strategy only when the number of under utilized nodes are above the configured value. This could be helpful in large clusters where a few nodes could go under utilized frequently or for a short period of time. By default, numberOfNodes is set to zero.
                            evictableNamespaces: *namespace-filter
                          type: object
                        removeFailedPods:
                          required: [enabled]
                          description: This strategy evicts Pods that are in failed status phase.
                          properties:
                            enabled:
                              type: boolean
                            nodeFilter: *node-filter
                            priorityFilter: *priority-filter
                            namespaceFilter: *namespace-filter
                            nodeFit: *node-fit
                          type: object
                        removePodsHavingTooManyRestarts:
                          required: [enabled]
                          description: This strategy makes sure that Pods having too many restarts are removed from nodes.
                          properties:
                            enabled:
                              type: boolean
                            nodeFilter: *node-filter
                            priorityFilter: *priority-filter
                            namespaceFilter: *namespace-filter
                            nodeFit: *node-fit
                          type: object
                        removePodsViolatingInterPodAntiAffinity:
                          required: [enabled]
                          description: This strategy makes sure that Pods violating interpod anti-affinity are removed from nodes.
                          properties:
                            enabled:
                              type: boolean
                            nodeFilter: *node-filter
                            priorityFilter: *priority-filter
                            namespaceFilter: *namespace-filter
                            nodeFit: *node-fit
                          type: object
                        removePodsViolatingNodeAffinity:
                          required: [enabled]
                          description: This strategy makes sure all Pods violating node affinity are eventually removed from nodes.
                          properties:
                            enabled:
                              type: boolean
                            nodeFilter: *node-filter
                            priorityFilter: *priority-filter
                            namespaceFilter: *namespace-filter
                            nodeFit: *node-fit
                          type: object
                        removePodsViolatingNodeTaints:
                          required: [enabled]
                          description: This strategy makes sure that Pods violating NoSchedule taints on nodes are removed.
                          properties:
                            enabled:
                              type: boolean
                            nodeFilter: *node-filter
                            priorityFilter: *priority-filter
                            namespaceFilter: *namespace-filter
                            nodeFit: *node-fit
                          type: object
                        removePodsViolatingTopologySpreadConstraint:
                          required: [enabled]
                          description: This strategy makes sure that Pods violating topology spread constraints are evicted from nodes.
                          properties:
                            enabled:
                              type: boolean
                            nodeFilter: *node-filter
                            priorityFilter: *priority-filter
                            namespaceFilter: *namespace-filter
                            nodeFit: *node-fit
                          type: object
                      type: object
                  type: object
              type: object
            status:
              description: Most recently observed status of a descheduler instance.
              properties:
                ready:
                  type: boolean
              required:
                - ready
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
