/*
Copyright 2024 Flant JSC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package hooks

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	. "github.com/deckhouse/deckhouse/testing/hooks"
)

var _ = Describe("Istio hooks :: migration_adopt_service_accounts ::", func() {
	f := HookExecutionConfigInit(`{"global":{"discovery":{"clusterDomain":"cluster.flomaster"}},"istio":{"internal":{}}}`, "")

	Context("ServiceAccount is generated by operator", func() {
		BeforeEach(func() {
			f.BindingContexts.Set(f.KubeStateSet(`
---
apiVersion: v1
imagePullSecrets:
- name: d8-istio-sidecar-registry
kind: ServiceAccount
metadata:
  name: istiod-v1x19
  namespace: d8-istio
  labels:
    app: istiod
    install.operator.istio.io/owning-resource: v1x19
`))
			f.RunHook()
		})

		It("ServiceAccount are patched", func() {
			Expect(f).To(ExecuteSuccessfully())
			Expect(f.BindingContexts.Array()).ShouldNot(BeEmpty())

			sa := f.KubernetesResource("ServiceAccount", "d8-istio", "istiod-v1x19")
			Expect(sa.Exists()).To(BeTrue())
			Expect(sa.Field("metadata.labels").String()).To(MatchJSON(`{
"app": "istiod",
"app.kubernetes.io/managed-by": "Helm",
"install.operator.istio.io/owning-resource": "v1x19"
        }`))

			Expect(sa.Field("metadata.annotations").String()).To(MatchJSON(`{
"meta.helm.sh/release-name": "istio",
"meta.helm.sh/release-namespace": "d8-system"
		}`))
		})
	})
})
