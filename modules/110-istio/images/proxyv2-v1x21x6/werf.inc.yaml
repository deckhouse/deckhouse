---
{{- $istioVersion := "1.21.6" }}
{{- $istioImageVersion := (printf "v%s" (replace "." "x" $istioVersion)) }} {{- /* 1.21.6 -> v1x21x6 */}}
{{- $istioProxyCacheRev := "v1.21.6-5c3dc559371181d5baa4a7533c36f2370fc97581-alt-v1" }}
{{- $istioProxyDepsRev := "v1.21.6-5c3dc559371181d5baa4a7533c36f2370fc97581-alt-v1" }}
{{- $llvmRev := "llvmorg-14.0.6" }}
{{- $goVersion := "1.23.1" }}
{{- $protocVersion := "22.3" }}
{{- $bazelVersions := "6.3.2" }}
---
# Based on https://github.com/istio/istio/blob/1.21.6/docker/Dockerfile.base
#      and https://github.com/istio/istio/blob/1.21.6/pilot/docker/Dockerfile.proxyv2
image: {{ .ModuleName }}/{{ .ImageName }}
fromImage: common/alt-p11
import:
- image: {{ .ModuleName }}/common-{{ $istioImageVersion }}-src-artifact
  add: /src/istio/tools/packaging/common/envoy_bootstrap.json
  to: /var/lib/istio/envoy/envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
- image: {{ .ModuleName }}/pilot-{{ $istioImageVersion }}-src-artifact
  add: /src/istio/tools/packaging/common/gcp_envoy_bootstrap.json
  to: /var/lib/istio/envoy/gcp_envoy_bootstrap_tmpl.json
  owner: 1337
  group: 1337
  after: setup
- image: {{ .ModuleName }}/{{ .ImageName }}-agent-artifact
  add: /src/istio/out/pilot-agent
  to: /usr/local/bin/pilot-agent
  owner: 1337
  group: 1337
  after: setup
- image: {{ .ModuleName }}/{{ .ImageName }}-build-envoy-artifact
  add: /src/proxy/bazel-bin/envoy
  to: /usr/local/bin/envoy
  owner: 1337
  group: 1337
  after: setup
shell:
  beforeInstall:
  # Rebuild and need self builded iptables
  - |
    apt-get update && \
    apt-get install -y ca-certificates iptables iproute2
  - update-ca-trust
  - apt-get clean
  - rm -rf  /var/log/*log /var/lib/apt/lists/* /var/log/apt/* /var/lib/dpkg/*-old /var/cache/debconf/*-old
  - update-alternatives --set iptables /usr/sbin/iptables-legacy
  - update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
  install:
  - useradd -m --uid 1337 istio-proxy
  - echo istio-proxy ALL=NOPASSWD:ALL | tee -a /etc/sudoers
docker:
  ENV:
    ISTIO_META_ISTIO_PROXY_SHA: "istio-proxy:78bd2d9b284978e170a49cd13decd5f952544489"
    ISTIO_META_ISTIO_VERSION: "{{ $istioVersion }}"
  WORKDIR: "/"
  USER: 1337
  ENTRYPOINT: ["/usr/local/bin/pilot-agent"]
---
image: {{ .ModuleName }}/{{ .ImageName }}-agent-artifact
from: {{ .Images.BASE_GOLANG_23_ALPINE_DEV }}
final: false
import:
- image: {{ .ModuleName }}/{{ .ImageName }}-src-artifact
  add: /src/istio
  to: /src/istio
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - cd /src/istio/
  - echo {{ $istioVersion }} > version
  - export GOPROXY={{ $.GOPROXY }} GOOS=linux GOARCH=amd64
  - export LDFLAGS='-extldflags -static -s -w'
  - common/scripts/gobuild.sh /tmp/istio/out/ -tags=agent,disable_pgv /src/istio/pilot/cmd/pilot-agent
  #
  - chmod 0555 /tmp/istio/out/pilot-agent
  - chown 1337:1337 /tmp/istio/out/pilot-agent
---
image: {{ .ModuleName }}/{{ .ImageName }}-build-envoy-artifact
fromImage: {{ $.ModuleName }}/{{ .ImageName }}-build-image-artifact
final: false
import:
- image: {{ .ModuleName }}/pilot-{{ $istioImageVersion }}-src-artifact
  add: /src/proxy
  to: /src/proxy
  before: install
- image: {{ .ModuleName }}/{{ .ImageName }}-build-libcxx-artifact
  add: /opt/libcxx
  to: /opt/libcxx
  before: install
- image: {{ .ModuleName }}/{{ .ImageName }}-basel-artifact
  add: /tmp/bazel-cache
  to: /tmp/bazel-cache
  before: install
- image: {{ .ModuleName }}/{{ .ImageName }}-basel-artifact
  add: /tmp/bazel-deps
  to: /tmp/bazel-deps
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY={{ $.GOPROXY }}
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - export BAZEL_VERSION="6.3.2" USE_BAZEL_VERSION="6.3.2"
  - cd /src/proxy
  - sed -i '/^build --enable_platform_specific_config/a build --linkopt=-L/opt/libcxx/lib'          envoy.bazelrc
  - sed -i '/^build --enable_platform_specific_config/a build --linkopt=-Wl,-rpath,/opt/libcxx/lib' envoy.bazelrc
  - sed -i 's|build:libc++ --action_env=BAZEL_LINKOPTS=-lm:-pthread|build:libc++ --action_env=BAZEL_LINKOPTS=-lm:-lpthread|' envoy.bazelrc
  - sed -i 's|ENVOY_SHA = "94aa5f7f82fb543e7fbc011ea398ac12cc396817"|ENVOY_SHA = "5c3dc559371181d5baa4a7533c36f2370fc97581"|' WORKSPACE
  - sed -i 's|ENVOY_SHA256 = "092784be59d19e99343afc095c1a65eca916b0b3f218d48545a6f0d43cdd5885"|ENVOY_SHA256 = "17f36c4267570e64123e3f08cdf8fc9442634572c5dc87f3f4192d953a4d29bf"|' WORKSPACE
  #
  - export BAZEL_OUTPUT_BASE=$(bazel info output_base)
  - mkdir -p ${BAZEL_OUTPUT_BASE}/external
  - tar -zxf /tmp/bazel-deps/external.tar.gz -C ${BAZEL_OUTPUT_BASE}/external
  - rm -rf /tmp/bazel-deps
  #
  - bazel build --disk_cache=/tmp/bazel-cache --nofetch --stamp --config=release //:envoy
  - echo test-cache
---
image: {{ .ModuleName }}/{{ .ImageName }}-build-libcxx-artifact
fromImage: {{ $.ModuleName }}/{{ .ImageName }}-build-image-artifact
final: false
import:
- image: {{ .ModuleName }}/{{ .ImageName }}-src-artifact
  add: /src/llvm
  to: /src/llvm
  before: install
shell:
  install:
  - mkdir -p /opt/libcxx
  - cd /tmp/
  - |
    cmake \
    -GNinja \
    -DLLVM_ENABLE_PROJECTS="libcxxabi;libcxx" \
    -DLLVM_USE_LINKER=lld \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DCMAKE_INSTALL_PREFIX="/opt/libcxx" /src/llvm/llvm
  setup:
  - cd /tmp/
  - ninja install-cxx install-cxxabi
  - rm -rf /opt/libcxx/include
---
#=====================================================================================================
---
image: {{ $.ModuleName }}/{{ .ImageName }}-build-image-artifact
fromImage: common/alt-p11-artifact
final: false
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  beforeInstall:
  - export DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC
  - ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && echo ${TZ} > /etc/timezone
  - apt-get update -y
  - |
    apt-get install -y \
    apt-https curl jq tzdata \
    ca-certificates bash-completion iproute2 arpd ipset kmod \
    iptables iptables-ipv6 iptables-nft \
    coreutils binutils git zip unzip wget mount patch patchelf \
    make automake autoconf cmake ccache bison flex ninja-build pkg-config \
    gcc gcc-c++ libstdc++-devel libstdc++-devel-static \
    glibc glibc-devel glibc-devel-static \
    python python3 python3-module-pip python3-module-virtualenv \
    build-essential libtool \
    libnetfilter_conntrack libnetfilter_conntrack-devel libnfnetlink-devel \
    libmnl-devel libnftnl-devel elfutils-devel zlib-devel java-1.8.0-openjdk golangci-lint
  # for debug
  - apt-get install -y strace vim-console
  - |
    apt-get update && apt-get install -y \
    sudo \
    libcap-devel libpcap-devel \
    clang14.0 clang14.0-tools lld14.0 llvm14.0-devel \
    libcxxabi-devel \
    libcxx libcxx-static libcxxabi-static lld14.0
  # apt clean
  - apt-get autoclean && apt-get clean
  install:
  - update-alternatives --install /usr/bin/python python /usr/bin/python3 1
  - ln -s -f /usr/lib/llvm-14.0/bin/clang /usr/bin/clang
  - ln -s -f /usr/lib/llvm-14.0/bin/clang++ /usr/bin/clang++
  - ln -s -f /usr/lib/llvm-14.0/bin/ld.lld /usr/bin/ld.lld
  # Install Go
  - curl -sfL https://go.dev/dl/go{{ $goVersion }}.linux-amd64.tar.gz -o go.tar.gz
  - rm -rf /usr/local/go && tar -C /usr/local -xzf go.tar.gz && rm go.tar.gz
  - export GOROOT=/usr/local/go GOPATH=/go
  - export PATH=${PATH}:${GOROOT}/bin:${GOPATH}/bin
  - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
  - export GO_VERSION=${GOLANG_VERSION} GOPROXY={{ $.GOPROXY }}
  - go version
  # Install protoc and plugins
  - curl --fail --show-error --silent --location "https://github.com/protocolbuffers/protobuf/releases/download/v{{ $protocVersion }}/protoc-{{ $protocVersion }}-linux-x86_64.zip" --output /tmp/protoc.zip
  - unzip /tmp/protoc.zip -x readme.txt -d /usr/local && rm /tmp/protoc.zip
  - chmod o+rx /usr/local/bin/protoc && chmod o+rX -R /usr/local/include/google/
  # 8ba23be9613c672d40ae261d2a1335d639bdd59b == tag: cmd/protoc-gen-go-grpc/v1.3.0
  - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@8ba23be9613c672d40ae261d2a1335d639bdd59b
  - go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.30.0
  - go install github.com/mitchellh/protoc-gen-go-json@v1.1.0
  - go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc@v1.5.1
  # Install multiversion bazel
  - bazel_versions=({{ $bazelVersions }})
  # install bazel wrapper script in the path, it automatically recognises `.bazelversion` and `USE_BAZEL_VERSIONS`, if neither are set it picks latest
  - curl --fail --show-error --silent --location https://raw.githubusercontent.com/bazelbuild/bazel/${bazel_versions[-1]}/scripts/packages/bazel.sh --output /usr/local/bin/bazel
  - chmod +x /usr/local/bin/bazel
  - |
    for bazel_version in ${bazel_versions[@]} ; do
      # instead of using installer script, download binaries directly, as installer script doesn't append version suffix,
      # so for multiple versions to be usable files will need to moved around, which would be more tedious
      long_binary_name="bazel-${bazel_version}-linux-x86_64"
      curl --fail --show-error --silent --location https://github.com/bazelbuild/bazel/releases/download/${bazel_version}/${long_binary_name} --output "/usr/local/bin/${long_binary_name}"
      chmod +x "/usr/local/bin/${long_binary_name}"
      USE_BAZEL_VERSION="${bazel_version}" bazel version # to extract all binaries properly
    done
docker:
  ENV:
    GOROOT: "/usr/local/go"
    GOPATH: "/go"
    PATH: "${PATH}:${GOROOT}/bin:${GOPATH}/bin"
    GOOS: "linux"
    GOARCH: "amd64"
---
#=====================================================================================================
---
image: {{ .ModuleName }}/{{ .ImageName }}-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /{{ .ModulePath }}modules/{{ .ModulePriority }}-{{ .ModuleName }}/images/{{ .ImageName }}/patches
  to: /patches
  stageDependencies:
    install:
    - '**/*'
shell:
  install:
  - git clone --depth 1 --branch {{ $istioVersion }} {{ $.SOURCE_REPO }}/istio/proxy.git /src/proxy
  - git clone --branch "{{ $llvmRev }}" {{ $.SOURCE_REPO }}/llvm/llvm-project.git /src/llvm
  - rm -rf /src/llvm/.git
  - git clone --depth 1 --branch {{ $istioVersion }} {{ $.SOURCE_REPO }}/istio/istio.git /src/istio/
  #- git apply --verbose /patches/*.patch
  - rm -rf /src/istio/.git
---
image: {{ .ModuleName }}/{{ .ImageName }}-basel-artifact
fromImage: common/src-artifact
final: false
shell:
  install:
  - mkdir -p /tmp/bazel-cache
  - git clone --depth 1 --branch {{ $istioProxyCacheRev }} {{ $.SOURCE_REPO }}/istio/envoy-build-cache.git /tmp/bazel-cache
  - rm -rf /tmp/bazel-cache/.git
  - mkdir -p /tmp/bazel-deps
  - git clone --depth 1 --branch {{ $istioProxyDepsRev }} {{ .SOURCE_REPO }}/istio/envoy-build-deps.git /tmp/bazel-deps
  - rm -rf /tmp/bazel-deps/.git
