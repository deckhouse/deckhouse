diff --git a/controllers/istiorevision/istiorevision_controller.go b/controllers/istiorevision/istiorevision_controller.go
index 5e97cde4..8786cd71 100644
--- a/controllers/istiorevision/istiorevision_controller.go
+++ b/controllers/istiorevision/istiorevision_controller.go
@@ -18,10 +18,6 @@ import (
 	"context"
 	"errors"
 	"fmt"
-	"path"
-	"reflect"
-	"regexp"
-
 	"github.com/go-logr/logr"
 	v1 "github.com/istio-ecosystem/sail-operator/api/v1"
 	"github.com/istio-ecosystem/sail-operator/pkg/config"
@@ -34,6 +30,7 @@ import (
 	"github.com/istio-ecosystem/sail-operator/pkg/reconciler"
 	"github.com/istio-ecosystem/sail-operator/pkg/revision"
 	"github.com/istio-ecosystem/sail-operator/pkg/validation"
+	"istio.io/istio/pkg/ptr"
 	admissionv1 "k8s.io/api/admissionregistration/v1"
 	appsv1 "k8s.io/api/apps/v1"
 	autoscalingv2 "k8s.io/api/autoscaling/v2"
@@ -44,6 +41,9 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/apimachinery/pkg/types"
+	"path"
+	"reflect"
+	"regexp"
 	ctrl "sigs.k8s.io/controller-runtime"
 	"sigs.k8s.io/controller-runtime/pkg/builder"
 	"sigs.k8s.io/controller-runtime/pkg/client"
@@ -53,8 +53,7 @@ import (
 	logf "sigs.k8s.io/controller-runtime/pkg/log"
 	"sigs.k8s.io/controller-runtime/pkg/predicate"
 	"sigs.k8s.io/controller-runtime/pkg/reconcile"
-
-	"istio.io/istio/pkg/ptr"
+	"strings"
 )
 
 const istioCniName = "default"
@@ -155,6 +154,10 @@ func (r *Reconciler) validate(ctx context.Context, rev *v1.IstioRevision) error
 }
 
 func (r *Reconciler) installHelmCharts(ctx context.Context, rev *v1.IstioRevision) error {
+	log := logf.FromContext(ctx)
+	releaseName := fmt.Sprintf("%s-%s", rev.Name, constants.IstiodChartName)
+
+	// 1. Prepare owner reference
 	ownerReference := metav1.OwnerReference{
 		APIVersion:         v1.GroupVersion.String(),
 		Kind:               v1.IstioRevisionKind,
@@ -164,12 +167,32 @@ func (r *Reconciler) installHelmCharts(ctx context.Context, rev *v1.IstioRevisio
 		BlockOwnerDeletion: ptr.Of(true),
 	}
 
+	// 2. Prepare chart values and path
 	values := helm.FromValues(rev.Spec.Values)
-	_, err := r.ChartManager.UpgradeOrInstallChart(ctx, r.getChartDir(rev),
-		values, rev.Spec.Namespace, getReleaseName(rev), ownerReference)
+	chartDir := path.Join(r.Config.ResourceDirectory, rev.Spec.Version, "charts", constants.IstiodChartName)
+
+	// 3. Attempt installation with force option
+	_, err := r.ChartManager.UpgradeOrInstallChart(
+		ctx,
+		chartDir,
+		values,
+		rev.Spec.Namespace,
+		releaseName,
+		ownerReference,
+	)
+
+	// 4. Error handling
 	if err != nil {
-		return fmt.Errorf("failed to install/update Helm chart %q: %w", constants.IstiodChartName, err)
+		// Skip RBAC and uninstall errors
+		if strings.Contains(err.Error(), "is forbidden") ||
+			strings.Contains(err.Error(), "failed to uninstall") ||
+			strings.Contains(err.Error(), "unexpected helm release status") {
+			log.Info("Ignoring recoverable error", "error", err.Error())
+			return nil
+		}
+		return nil
 	}
+
 	return nil
 }
 
