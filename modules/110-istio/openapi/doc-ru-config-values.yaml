type: object
properties:
  globalVersion:
    description: Явно заданная версия control-plane Istio, который обслуживает data-plane с неявной версией (Namespace с лейблом `istio-injection=enabled`, но не `istio.io/rev=`). Должна быть из списка поддерживаемых версий (`kubectl -n d8-system exec deploy/deckhouse -- deckhouse-controller module values istio -o json | jq '.istio.internal.supportedVersions'`). По умолчанию — последняя версия из списка поддерживаемых версий.
  additionalVersions:
    description: Дополнительные версии control-plane Istio, которые будут установлены. Они будут обслуживать Namespace-ы, где явно указана версия с помощью лейбла `istio.io/rev=`.
  enableHTTP10:
    description: |
      Обрабатывать ли HTTP/1.0 запросы в sidecar-контейнерах или отвергать их с кодом ответа `426 Upgrade Required`.
  outboundTrafficPolicyMode:
    description: |
      Как поступать с запросами в сторону внешних, то есть, не учтённых в mesh'е сервисов.
      - `AllowAny` — пропускать.
      - `RegistryOnly` — запрещать. В данном случае для работы с внешними сервисами потребуется регистрировать их с помощью ресурса ServiceEntry или организовывать egressgateway.
  federation:
    description: Параметры федерации с другими кластерами.
    properties:
      enabled:
        description: Обозначить данный кластер как участник федерации (см. [Включение федерации](./#включение-федерации)).
  multicluster:
    description: Параметры мультикластерной инсталляции.
    properties:
      enabled:
        description: Обозначить данный кластер как участник мультикластера (см. [Включение мультикластера](./#включение-мультикластера)).
  alliance:
    description: Общие настройки для федерации и мультикластера.
    properties:
      ingressGateway:
        description: Параметры для ingressgateway.
        properties:
          inlet:
            description: |
              Способ публикации ingressgateway.
              - `LoadBalancer` — рекомендуется в случае, если площадка облачная и поддерживает LB.
              - `NodePort` — для площадок без LB.
          nodePort:
            description: Специальные настройки для ingressgateway с инлетом `NodePort`.
            properties:
              port:
                type: integer
                description: Статичный порт для сервиса с типом NodePort. Должен быть из диапазона, заданного аргументом kube-apiserver --service-node-port-range (по умолчанию 30000-32767).
          serviceAnnotations:
            description: |
              Дополнительные аннотации для сервиса ingressgateway.

              Полезно, например, для настройки локального LB в Yandex Cloud (аннотация `yandex.cpi.flant.com/listener-subnet-id`).
          nodeSelector:
            description: |
              Селектор для DaemonSet'а ingressgateway.

              Структура, аналогичная `spec.nodeSelector` пода Kubernetes.
          tolerations:
            description: |
              tolerations для DaemonSet'а ingressgateway.

              Структура, аналогичная `spec.tolerations` Kubernetes pod.
  tracing:
    description: Параметры трассировки.
    properties:
      enabled:
        description: Включить отправку трейсов в коллектор и интегрировать их отображение в kiali.
      sampling:
        description: |
          Параметр sampling используется для определения процента запросов, которые передаются в систему трассировки.

          Этот параметр должен быть настроен в зависимости от трафика в сети и количества данных трассировки, которые необходимо собрать.

          Параметр можно переопределить для каждого Pod'а индивидуально при помощи следующей аннотации:

          ```yaml
          proxy.istio.io/config: |
            tracing:
              sampling: 100.0
          ```
      collector:
        description: Параметры отправки трейсов в коллектор.
        properties:
          zipkin:
            description: |
              Параметры протокола zipkin, который использует Istio для отправки трейсов.

              Jaeger поддерживает этот протокол.
            properties:
              address:
                description: Сетевой адрес в формате `<IP of FQDN>:<port>`, по которому доступен zipkin-коллектор.
      kiali:
        description: |
          Настройки отображения span-ов в Kiali.

          Если настройки не предоставлены, kiali не будет отображать трассировку.
        properties:
          jaegerURLForUsers:
            description: |
              Адрес UI jaeger, доступный пользователю в формате `<proto>://<fqdn>[:port]/<base path>`.

              Обязательный параметр.
          jaegerGRPCEndpoint:
            description: |
              Адрес GRPC-интерфейса jaeger'а в формате `<proto>://<fqdn>[:port]/`, доступный сервису kiali изнутри кластера для служебных запросов.

              Если не указать, то kiali не будет интерпретировать трейсы самостоятельно и ограничится генерацией ссылок на `jaegerURLForUsers`.
  sidecar:
    description: Настройки для перехвата сетевого трафика в istio-sidecar.
    properties:
      includeOutboundIPRanges:
        description: |
          Трафик в сторону этих диапазонов IP безоговорочно заворачивается через Istio.

          Можно переопределить этот параметр для отдельного Pod'а с помощью аннотации `traffic.sidecar.istio.io/includeOutboundIPRanges`.
      excludeOutboundIPRanges:
        description: |
          Трафик в сторону этих диапазонов IP гарантированно не заворачивается через Istio.

          Можно переопределить этот параметр для отдельного Pod'а с помощью аннотации `traffic.sidecar.istio.io/excludeOutboundIPRanges`.
      excludeInboundPorts:
        description: |
          Диапазоны входящих портов, чей трафик гарантированно не заворачивается через Istio.

          Можно переопределить этот параметр для отдельного Pod'а с помощью аннотации `traffic.sidecar.istio.io/excludeInboundPorts`.
      excludeOutboundPorts:
        description: |
          Диапазоны исходящих портов, чей трафик гарантированно не заворачивается через Istio.

          Можно переопределить этот параметр для отдельного Pod'а с помощью аннотации `traffic.sidecar.istio.io/excludeOutboundPorts`.
        items:
          type: string
          pattern: '^[0-9]{1,5}$'
      resourcesManagement:
        description: |
          Управляет ресурсами sidecar-контейнера Istio.

          **Внимание!** Настройка применяется только для новых Pod'ов с `istio-proxy`.
        properties:
          mode:
          static:
            description: |
              Настройки управления ресурсами в статическом режиме.
            properties:
              requests:
                properties:
                  cpu:
                    description: |
                      Реквесты CPU.
                  memory:
                    description: |
                      Реквесты памяти.
              limits:
                properties:
                  cpu:
                    description: |
                      Лимиты CPU.
                  memory:
                    description: |
                      Лимиты памяти.
  ca:
    description: Явно заданный корневой сертификат, который будет использован для подписывания индивидуальных сертификатов сервисов в случае включения MTLS.
    properties:
      cert:
        description: Корневой или промежуточный сертификат в формате PEM.
      key:
        description: Ключ корневого сертификата в формате PEM.
      chain:
        description: Цепочка сертификатов в формате PEM на случай  если `cert` — промежуточный сертификат.
      root:
        description: Корневой сертификат в формате PEM на  случай если `cert` — промежуточный сертификат.
  proxyConfig:
    description: |
      Централизованная настройка [ProxyConfig](https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#ProxyConfig).
    properties:
      holdApplicationUntilProxyStarts:
        description: |
          Этот параметр заставляет sidecar-injector вставлять sidecar-контейнер на первое место в списке контейнеров Pod'а. Также он добавляет postStart-хук для того, чтобы убедиться, что Envoy инициализировался раньше самого приложения. Это позволит избежать сетевых ошибок при старте Pod'а.

          Этот глобальный параметр может быть переопределён на уровне Pod'а аннотацией `proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'`.
  controlPlane:
    description: Настройки для компонента istiod.
    properties:
      nodeSelector:
        description: |
          Опциональный селектор для компонентa istiod. Структура, аналогичная `spec.nodeSelector` пода Kubernetes.

          Если ничего не указано или указано `false`, будет [использоваться автоматика](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).
      tolerations:
        description: |
          Опциональные tolerations для компонента istiod.

          Структура, аналогичная `spec.tolerations` пода Kubernetes.

          Если ничего не указано или указано `false`, будет [использоваться автоматика](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).
      resourcesManagement:
        description: |
          Настройки управления ресурсами istiod.
        properties:
          mode:
          vpa:
            description: |
              Параметры для режима VPA.
            properties:
              mode:
                description: |
                  Режим работы VPA.
              cpu:
                min:
                  description: |
                    Минимально допустимый requests для cpu.
                max:
                  description: |
                    Максимально допустимый requests для cpu.
                limitRatio:
                  description: |
                    Коэффициент для вычисления limits процессора. Опционально используется для подсчёта первичного limits процессора у Pod'а. VPA при своей работе сохраняет пропорцию limits/requests и при вычислении подходящего, актуального requests настраивает limits в том же соотношении.
              memory:
                min:
                  description: |
                    Минимально допустимый requests для memory.
                max:
                  description: |
                    Максимально допустимый requests для memory.
                limitRatio:
                  description: |
                    Коэффициент для вычисления limits процессора. Опционально используется для подсчёта первичного limits процессора у Pod'а. VPA при своей работе сохраняет пропорцию limits/requests и при вычислении подходящего, актуального requests настраивает limits в том же соотношении.
          static:
            description: |
              Настройки управления ресурсами в статическом режиме.
            properties:
              requests:
                properties:
                  cpu:
                    description: |
                      Реквесты CPU.
                  memory:
                    description: |
                      Реквесты памяти.
              limits:
                properties:
                  cpu:
                    description: |
                      Лимиты CPU.
                  memory:
                    description: |
                      Лимиты памяти.
  nodeSelector:
    description: |
      Опциональный селектор для компонентов istio-operator, metadata-exporter и kiali.

      Структура, аналогичная `spec.nodeSelector` пода Kubernetes.

      Если ничего не указано или указано `false`, будет [использоваться автоматика](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).
  tolerations:
    description: |
      Опциональные tolerations для компонентов istio-operator, metadata-exporter и kiali.

      Структура, аналогичная `spec.tolerations` пода Kubernetes.

      Если ничего не указано или указано `false`, будет [использоваться автоматика](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).
  https:
    description: |
      Тип сертификата используемого для публичных веб-интерфейсов модуля.

      При использовании этого параметра полностью переопределяются глобальные настройки `global.modules.https`.
    properties:
      mode:
        description: |
          Режим работы HTTPS:
          - `CertManager` — Kiali/metadata-exporter (including SPIFFE endpoint)/api-proxy будут работать по https и заказывать сертификат с помощью clusterissuer заданном в параметре `certManager.clusterIssuerName`.
          - `CustomCertificate` — Kiali/metadata-exporter (including SPIFFE endpoint)/api-proxy будут работать по https используя сертификат из namespace `d8-system`.
          - `OnlyInURI` — Kiali/metadata-exporter (including SPIFFE endpoint)/api-proxy будут работать по HTTP (подразумевая, что перед ними стоит внешний балансер, который терминирует HTTPS) и все ссылки в [user-authn](https://deckhouse.ru/documentation/v1/modules/150-user-authn/) будут генерироваться с HTTPS-схемой.

          **Важно!** В отличие от остальных модулей, Istio не поддерживает работу без использования HTTPS (`mode: Disabled`).
      certManager:
        properties:
          clusterIssuerName:
            description: |
              ClusterIssuer, используемый для Kiali/metadata-exporter (including SPIFFE endpoint)/api-proxy.

              Доступны `letsencrypt`, `letsencrypt-staging`, `selfsigned`, но вы можете определить свои.
      customCertificate:
        properties:
          secretName:
            description: |
              Имя secret'а в namespace `d8-system`, который будет использоваться для Kiali/metadata-exporter (including SPIFFE endpoint)/api-proxy.

              Секрет должен быть в формате [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets).
  highAvailability:
    description: |
      Ручное управление режимом отказоустойчивости.

      По умолчанию режим отказоустойчивости определяется автоматически. [Подробнее](../../deckhouse-configure-global.html#параметры) про режим отказоустойчивости.
  auth:
    description: Опции, связанные с аутентификацией или авторизацией в приложении.
    properties:
      externalAuthentication:
        description: |
          Параметры для подключения внешней аутентификации (используется механизм Nginx Ingress [external-auth](https://kubernetes.github.io/ingress-nginx/examples/auth/external-auth/), работающий на основе модуля Nginx [auth_request](http://nginx.org/en/docs/http/ngx_http_auth_request_module.html).

          > Внешняя аутентификация включается автоматически, если включен модуль [user-authn](https://deckhouse.io/documentation/v1/modules/150-user-authn/).
        properties:
          authURL:
            description: URL сервиса аутентификации. Если пользователь прошел аутентификацию, сервис должен возвращать код ответа HTTP 200.
          authSignInURL:
            description: URL, куда будет перенаправлен пользователь для прохождения аутентификации (если сервис аутентификации вернул код ответа HTTP отличный от 200).
      allowedUserGroups:
        description: |
          Массив групп, пользователям которых позволен доступ в публичные веб-интерфейсы модуля.

          Используется, если включен модуль [user-authn](https://deckhouse.ru/documentation/v1/modules/150-user-authn/) или параметр `externalAuthentication`.

          **Внимание!** При использовании совместно с модулем [user-authn](https://deckhouse.ru/documentation/v1/modules/150-user-authn/) необходимо также добавить разрешенные группы в соответствующее поле в [настройках](https://deckhouse.ru/documentation/v1/modules/150-user-authn/cr.html#dexprovider) DexProvider.
      whitelistSourceRanges:
        description: Массив CIDR, которым разрешено проходить авторизацию в публичные веб-интерфейсы модуля.
      satisfyAny:
        description: |
          Разрешает пройти только одну из аутентификаций.

          В комбинации с опцией `whitelistSourceRanges` позволяет считать авторизованными всех пользователей из указанных сетей без ввода логина и пароля.
