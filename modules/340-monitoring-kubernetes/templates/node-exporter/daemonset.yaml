{{- if (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: node-exporter
  namespace: d8-monitoring
  {{- include "helm_lib_module_labels" (list . (dict "app" "node-exporter" "workload-resource-policy.deckhouse.io" "every-node")) | nindent 2 }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: DaemonSet
    name: node-exporter
  updatePolicy:
    updateMode: "Auto"
{{- end }}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: node-exporter
  namespace: d8-monitoring
  {{- include "helm_lib_module_labels" (list . (dict "app" "node-exporter")) | nindent 2 }}
spec:
  {{- include "helm_lib_pdb_daemonset" . | nindent 2}}
  selector:
    matchLabels:
      app: node-exporter
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: d8-monitoring
  {{- include "helm_lib_module_labels" (list . (dict "app" "node-exporter")) | nindent 2 }}
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
      name: node-exporter
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      hostPID: true
      serviceAccountName: node-exporter
      {{- include "helm_lib_priority_class" (tuple . "system-node-critical") | nindent 6 }}
      {{- include "helm_lib_tolerations" (tuple . "any-node") | nindent 6 }}
      {{- include "helm_lib_module_pod_security_context_run_as_user_root" . | nindent 6 }}
      containers:
      - image: "{{ $.Values.global.modulesImages.registry }}:{{ $.Values.global.modulesImages.tags.monitoringKubernetes.nodeExporter }}"
        name: node-exporter
        {{- include "helm_lib_module_container_security_context_read_only_root_filesystem_capabilities_drop_all" . | nindent 8 }}
        args:
        - '--web.listen-address=127.0.0.1:9101'
        - '--path.rootfs=/host/root'
        - '--collector.ntp'
        - '--collector.ntp.server-is-local'
        - '--collector.processes'
        - '--collector.interrupts'
        - '--collector.filesystem.ignored-mount-points'
        - '(^/(dev|proc|sys|run|var/lib/kubelet)($|/))|(^/var/lib/docker/)'
        - '--collector.filesystem.ignored-fs-types'
        - '^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|fuse\.lxcfs|hugetlbfs|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs|squashfs)$'
        - '--collector.textfile.directory'
        - '/host/textfile'
        - '--collector.netstat.fields'
        - '^(.*_(InErrors|InErrs)|Ip_Forwarding|Ip(6|Ext)_(InOctets|OutOctets)|Icmp6?_(InMsgs|OutMsgs)|TcpExt_.*|Tcp_(ActiveOpens|InSegs|OutSegs|PassiveOpens|RetransSegs|CurrEstab)|Udp6?_(InDatagrams|OutDatagrams|NoPorts))$'
        volumeMounts:
        - name: root
          readOnly:  true
          mountPath: /host/root
        - name: textfile
          readOnly: true
          mountPath: /host/textfile
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_logs_with_extra" 10 | nindent 12 }}
      - image: "{{ $.Values.global.modulesImages.registry }}:{{ $.Values.global.modulesImages.tags.monitoringKubernetes.kubeletEvictionThresholdsExporter }}"
        name: kubelet-eviction-thresholds-exporter
        {{- include "helm_lib_module_container_security_context_read_only_root_filesystem_capabilities_drop_all" . | nindent 8 }}
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: root
          readOnly:  true
          mountPath: /host/
        - name: textfile
          mountPath: /var/run/node-exporter-textfile
        - name: dockersock
          mountPath: /var/run/docker.sock
        - name: containerdsock
          mountPath: /var/run/containerd/containerd.sock
        - name: crictl
          mountPath: /usr/local/bin/crictl
        - name: kube
          mountPath: /root/.kube
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_only_logs" 10 | nindent 12 }}
      - name: kube-rbac-proxy
        {{- include "helm_lib_module_container_security_context_read_only_root_filesystem" . | nindent 8 }}
        image: "{{ $.Values.global.modulesImages.registry }}:{{ $.Values.global.modulesImages.tags.common.kubeRbacProxy }}"
        args:
        - "--secure-listen-address=$(KUBE_RBAC_PROXY_LISTEN_ADDRESS):9101"
        - "--client-ca-file=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        - "--v=2"
        - "--logtostderr=true"
        - "--stale-cache-interval=1h30m"
        env:
        - name: KUBE_RBAC_PROXY_LISTEN_ADDRESS
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KUBE_RBAC_PROXY_CONFIG
          value: |
            upstreams:
            - upstream: http://127.0.0.1:9101/metrics
              path: /metrics
              authorization:
                resourceAttributes:
                  namespace: d8-monitoring
                  apiGroup: apps
                  apiVersion: v1
                  resource: daemonsets
                  subresource: prometheus-metrics
                  name: node-exporter
        ports:
        - containerPort: 9101
          name: https-metrics
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_only_logs" . | nindent 12 }}
      volumes:
      - name: textfile
        hostPath:
          path: /var/run/node-exporter-textfile
          type: DirectoryOrCreate
      - name: root
        hostPath:
          path: /
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: containerdsock
        hostPath:
          path: /var/run/containerd/containerd.sock
      - name: crictl
        hostPath:
          path: /usr/local/bin/crictl
      - emptyDir:
          medium: Memory
        name: kube
      imagePullSecrets:
      - name: deckhouse-registry
