#!/bin/bash

# Copyright 2022 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euf -o pipefail

if [ x"${DEBUG:-}" == "xtrue" ]; then
  set -x
fi

runtime () {
  # We use external binary instead of the option `--request-timeout 60s` because the option does not work in-cluster mode.
  # ref: https://github.com/kubernetes/kubernetes/issues/49343/
  timeout 60s kubectl get --raw "/api/v1/nodes/$MY_NODE_NAME" | jq -r '.status.nodeInfo.containerRuntimeVersion | split(":")[0]'
}

evictions () {
  timeout 60s kubectl get --raw "/api/v1/nodes/$MY_NODE_NAME/proxy/configz" | jq -r '.kubeletconfig | {"evictionHard": .evictionHard, "evictionSoft": .evictionSoft}'
}

mountpoint () {
  path_to_mount="$1"

  # readlink returns 1 error code if file not link
  if link="$(readlink /host$path_to_mount)"; then
    path_to_mount="$link"
  fi

  stat -c "%m" "/host$path_to_mount" | sed 's#/host#/#g' | sed 's#//#/#g'
}

total_bytes () {
  df -B1 "/host$1" --output=size | tail -n 1
}

total_inodes () {
  df "/host$1" --output=itotal | tail -n 1
}

runtime_root_dir () {
  case $1 in
  docker)
    curl -sS --unix-sock /var/run/docker.sock http://system/info | jq -re '.DockerRootDir'
    ;;
  containerd)
    root_dir="$(grep "^root" /etc/containerd/config.toml | sed "s/ //g"  | sed "s/\"//g" |cut -d"=" -f2)"
    if [ -z "${root_dir}" ]; then
      root_dir="/var/lib/containerd"
    fi
    echo ${root_dir}
    ;;
  *)
    echo "Unknown container runtime detected: $(runtime). Only \"docker\" and \"containerd\" are supported"
    exit 1
    ;;
  esac
}

kubelet_root_dir () {
  # shellcheck disable=SC2009
  kube_root_dir=$(ps axu | grep kubelet | grep -Po '(?<=root-dir.)\S+')
  if [ -n "$kube_root_dir" ]; then
    echo -n "$kube_root_dir"
  else
    echo -n "/var/lib/kubelet"
  fi
}

normalize_to_pcnt () {
  # if contains a percent sign, return as-is
  case $1 in *%)
    echo "100 - ${1%"%"}" | bc -l
    return
  esac

  # else make it proportional to the output of "df"
  evict_bytes=$(echo "$1" | kube-resource-unit-converter)

  echo "scale=5; (1 - $evict_bytes / $2) * 100" | bc -l
}

while true; do
  runtime=$(runtime)
  if [[ -z "$runtime" ]]; then
    echo "Got empty runtime. Kubernetes API server is not accessible? Will try again in 60s."
    sleep 60
    continue
  fi
  evictions=$(evictions)
  if [[ -z "$evictions" ]]; then
    echo "Got empty kubelet eviction parameters. Kubernetes API server is not accessible? Will try again in 60s."
    sleep 60
    continue
  fi
  nodefs=$(kubelet_root_dir)
  imagefs=$(runtime_root_dir "$runtime")
  nodefs_mountpoint=$(mountpoint "$nodefs")
  imagefs_mountpoint=$(mountpoint "$imagefs")
  nodefs_bytes=$(total_bytes "$nodefs_mountpoint")
  imagefs_bytes=$(total_bytes "$imagefs_mountpoint")
  nodefs_inodes=$(total_inodes "$nodefs_mountpoint")
  imagefs_inodes=$(total_inodes "$imagefs_mountpoint")

  eviction_hard_nodefs_available=$(echo "$evictions" | jq -r '.evictionHard."nodefs.available" // empty')
  eviction_hard_nodefs_inodesfree=$(echo "$evictions" | jq -r '.evictionHard."nodefs.inodesFree" // empty')
  eviction_hard_imagefs_available=$(echo "$evictions" | jq -r '.evictionHard."imagefs.available" // empty')
  eviction_hard_imagefs_inodesfree=$(echo "$evictions" | jq -r '.evictionHard."imagefs.inodesFree" // empty')

  eviction_soft_nodefs_available=$(echo "$evictions" | jq -r '.evictionSoft."nodefs.available" // empty')
  eviction_soft_nodefs_inodesfree=$(echo "$evictions" | jq -r '.evictionSoft."nodefs.inodesFree" // empty')
  eviction_soft_imagefs_available=$(echo "$evictions" | jq -r '.evictionSoft."imagefs.available" // empty')
  eviction_soft_imagefs_inodesfree=$(echo "$evictions" | jq -r '.evictionSoft."imagefs.inodesFree" // empty')

  nl='
'
  accumulator=""
  if [ -n "$eviction_hard_nodefs_available" ]; then
    accumulator+="kubelet_eviction_nodefs_bytes{mountpoint=\"$nodefs_mountpoint\", type=\"hard\"} $(normalize_to_pcnt "$eviction_hard_nodefs_available" "$nodefs_bytes")$nl"
  fi

  if [ -n "$eviction_hard_nodefs_inodesfree" ]; then
    accumulator+="kubelet_eviction_nodefs_inodes{mountpoint=\"$nodefs_mountpoint\", type=\"hard\"} $(normalize_to_pcnt "$eviction_hard_nodefs_inodesfree" "$nodefs_inodes")$nl"
  fi

  if [ -n "$eviction_hard_imagefs_available" ]; then
    accumulator+="kubelet_eviction_imagefs_bytes{mountpoint=\"$imagefs_mountpoint\", type=\"hard\"} $(normalize_to_pcnt "$eviction_hard_imagefs_available" "$imagefs_bytes")$nl"
  fi

  if [ -n "$eviction_hard_imagefs_inodesfree" ]; then
    accumulator+="kubelet_eviction_imagefs_inodes{mountpoint=\"$imagefs_mountpoint\", type=\"hard\"} $(normalize_to_pcnt "$eviction_hard_imagefs_inodesfree" "$imagefs_inodes")$nl"
  fi

  if [ -n "$eviction_soft_nodefs_available" ]; then
    accumulator+="kubelet_eviction_nodefs_bytes{mountpoint=\"$nodefs_mountpoint\", type=\"soft\"} $(normalize_to_pcnt "$eviction_soft_nodefs_available" "$nodefs_bytes")$nl"
  fi

  if [ -n "$eviction_soft_nodefs_inodesfree" ]; then
    accumulator+="kubelet_eviction_nodefs_inodes{mountpoint=\"$nodefs_mountpoint\", type=\"soft\"} $(normalize_to_pcnt "$eviction_soft_nodefs_inodesfree" "$nodefs_inodes")$nl"
  fi

  if [ -n "$eviction_soft_imagefs_available" ]; then
    accumulator+="kubelet_eviction_imagefs_bytes{mountpoint=\"$imagefs_mountpoint\", type=\"soft\"} $(normalize_to_pcnt "$eviction_soft_imagefs_available" "$imagefs_bytes")$nl"
  fi

  if [ -n "$eviction_soft_imagefs_inodesfree" ]; then
    accumulator+="kubelet_eviction_imagefs_inodes{mountpoint=\"$imagefs_mountpoint\", type=\"soft\"} $(normalize_to_pcnt "$eviction_soft_imagefs_inodesfree" "$imagefs_inodes")$nl"
  fi

  echo "$accumulator" > /host/var/run/node-exporter-textfile/kubelet-eviction.prom
  sleep 300
done
