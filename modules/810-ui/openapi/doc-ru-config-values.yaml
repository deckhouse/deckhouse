properties:
  auth:
    description: |
      Доступ к web-интерфейсу
    properties:
      fontend:
        description: |
          Настройки доступа к web-интерфейсу.
        properties:
          externalAuthentication:
            description: |
              Параметры для подключения внешней аутентификации (используется механизм Nginx Ingress [external-auth](https://kubernetes.github.io/ingress-nginx/examples/auth/external-auth/), работающий на основе модуля Nginx [auth_request](http://nginx.org/en/docs/http/ngx_http_auth_request_module.html).

              > Внешняя аутентификация включается автоматически, если включен модуль [user-authn](https://deckhouse.io/documentation/v1/modules/150-user-authn/).
            properties:
              authURL:
                description: |
                  URL сервиса аутентификации. Если пользователь прошел аутентификацию, сервис должен возвращать код ответа HTTP 200.
              authSignInURL:
                description: |
                  URL, куда будет перенаправлен пользователь для прохождения аутентификации (если сервис аутентификации вернул код ответа HTTP отличный от 200).
          allowedUserGroups:
            description: |
              Группы доступа к просмотру интерфейса приложения.

              * Используется, если включен модуль `user-authn` или параметр `externalAuthentication`.
              * **Внимание!** При использовании совместно с модулем user-authn необходимо также добавить разрешенные группы в соответствующее поле в настройках DexProvider.
          whitelistSourceRanges:
            description: |
              Список CIDR, которым разрешено проходить аутентификацию. Если параметр не указан, аутентификацию разрешено проходить без ограничения по IP-адресу.
  https:
    description: |
      Тип сертификата используемого для веб-интерфейса.

      При использовании этого параметра полностью переопределяются глобальные настройки `global.modules.https`.
    properties:
      mode:
        description: |
          Режим работы HTTPS:
          - `Disabled` — fontend будут работать только по HTTP.
          - `CertManager` — fontend будут работать по https и заказывать сертификат с помощью clusterissuer заданном в параметре `certManager.clusterIssuerName`.
          - `CustomCertificate` — fontend будут работать по https используя сертификат из namespace `d8-system`.
          - `OnlyInURI` — fontend будет работать по HTTP (подразумевая, что перед ними стоит внешний балансер, который терминирует HTTPS) и все ссылки в [user-authn](https://deckhouse.ru/documentation/v1/modules/150-user-authn/) будут генерироваться с HTTPS-схемой.
      certManager:
        properties:
          clusterIssuerName:
            description: |
              ClusterIssuer, используемый для fontend.

              Доступны `letsencrypt`, `letsencrypt-staging`, `selfsigned`, но вы можете определить свои.
      customCertificate:
        properties:
          secretName:
            description: |
              Имя secret'а в namespace `d8-system`, который будет использоваться для fontend.

              Секрет должен быть в формате [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets).
  nodeSelector:
    description: |
      Структура, аналогичная `spec.nodeSelector` Kubernetes Pod.

      Если ничего не указано или указано `false` — будет [использоваться автоматика](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).
  tolerations:
    description: |
      Структура, аналогичная  `spec.tolerations` в Kubernetes Pod.

      Если ничего не указано или указано `false` — будет [использоваться автоматика](https://deckhouse.ru/documentation/v1/#выделение-узлов-под-определенный-вид-нагрузки).
