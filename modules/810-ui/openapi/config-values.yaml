x-config-version: 2
type: object
required:
  - auth
properties:
  auth:
    type: object
    default: {}
    description: |
      Configuration of authentication for Upmeter frontends.
    required:
      - frontend
    properties:
      frontend:
        type: object
        description: |
          Authentication configuration.
        default: {}
        properties:
          externalAuthentication:
            type: object
            description: |
              Parameters to enable external authentication. Uses Nginx Ingress [external-auth](https://kubernetes.github.io/ingress-nginx/examples/auth/external-auth/) mechanism which is based on the the Nginx [auth_request](https://nginx.org/en/docs/http/ngx_http_auth_request_module.html) module.
            properties:
              authURL:
                type: string
                description: |
                  URL of the authentication service. If the user is authenticated, the service should return an HTTP 200 response code.
              authSignInURL:
                type: string
                description: |
                  URL to redirect the user for authentication (if the authentication service returned a non-200 HTTP response code).
          password:
            type: string
            description: |
              Password for http authorization of the `admin` user. It is generated automatically, but you can change it.

              This parameter is used if the `externalAuthentication` is not enabled.
          allowedUserGroups:
            type: array
            items:
              type: string
            description: |
              An array of user groups that can access Grafana & Prometheus.

              This parameter is used if the `user-authn` module is enabled or the `externalAuthentication` parameter is set.

              **Caution!** Note that you must add those groups to the appropriate field in the DexProvider config if this module is used together with the [user-authn](https://deckhouse.io/documentation/v1/modules/150-user-authn/) one.
          whitelistSourceRanges:
            type: array
            items:
              type: string
            x-examples:
              - ["1.1.1.1/32"]
            description: An array if CIDRs that are allowed to authenticate.
  https:
    type: object
    x-examples:
      - mode: CustomCertificate
        customCertificate:
          secretName: "foobar"
      - mode: CertManager
        certManager:
          clusterIssuerName: letsencrypt
    description: |
      What certificate type to use with frontend and status apps.

      This parameter completely overrides the `global.modules.https` settings.
    properties:
      mode:
        type: string
        default: "Disabled"
        description: |
          The HTTPS usage mode:
          - `Disabled` — frontend will work over HTTP only;
          - `CertManager` — frontend will use HTTPS and get a certificate from the clusterissuer defined in the `certManager.clusterIssuerName` parameter.
          - `CustomCertificate` — frontend will use HTTPS using the certificate from the `d8-system` namespace.
          - `OnlyInURI` — frontend will work over HTTP (thinking that there is an external HTTPS load balancer in front that terminates HTTPS traffic). All the links in the `user-authn` will be generated using the HTTPS scheme.
        enum:
          - "Disabled"
          - "CertManager"
          - "CustomCertificate"
          - "OnlyInURI"
      certManager:
        type: object
        properties:
          clusterIssuerName:
            type: string
            default: "letsencrypt"
            description: |
              What ClusterIssuer to use for frontend.

              Currently, `letsencrypt`, `letsencrypt-staging`, `selfsigned` are available. Also, you can define your own.
      customCertificate:
        type: object
        default: {}
        properties:
          secretName:
            type: string
            description: |
              The name of the secret in the `d8-system` namespace to use with frontend.

              This secret must have the [kubernetes.io/tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets) format.
            default: "false"
  nodeSelector:
    type: object
    additionalProperties:
      type: string
    x-kubernetes-preserve-unknown-fields: true
    x-examples:
      - disktype: ssd
    description: |
      Node selector for frontend and backend pods. The same as in the Pods' `spec.nodeSelector` parameter in Kubernetes.

      If the parameter is omitted or `false`, it will be determined [automatically](https://deckhouse.io/documentation/v1/#advanced-scheduling).
  tolerations:
    type: array
    items:
      type: object
      properties:
        effect:
          type: string
        key:
          type: string
        operator:
          type: string
        tolerationSeconds:
          type: integer
          format: int64
        value:
          type: string
    x-examples:
      - - key: "key1"
          operator: "Equal"
          value: "value1"
          effect: "NoSchedule"
    description: |
      Node tolerations for frontend and backend pods. The same as in the Pods' `spec.tolerations` parameter in Kubernetes;

      If the parameter is omitted or `false`, it will be determined [automatically](https://deckhouse.io/documentation/v1/#advanced-scheduling).
