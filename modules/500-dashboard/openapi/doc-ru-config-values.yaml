type: object
properties:
  ingressClass:
    description: |
      Класс Ingress-контроллера, который используется для дашборда.

      Опциональный параметр, по умолчанию используется глобальное значение `modules.ingressClass`.
  auth:
    description: |
      Опции, связанные с аутентификацией или авторизацией в приложении.
    properties:
      externalAuthentication:
        description: |
          Параметры для подключения внешней аутентификации (используется механизм NGINX Ingress [external-auth](https://kubernetes.github.io/ingress-nginx/examples/auth/external-auth/), работающий на основе модуля Nginx [auth_request](https://nginx.org/en/docs/http/ngx_http_auth_request_module.html).

          Внешняя аутентификация включается автоматически, если включен модуль [user-authn](https://deckhouse.io/products/kubernetes-platform/documentation/v1/modules/user-authn/).

          > **Внимание.** Из соображений безопасности этот режим работает только при условии, что параметр `https.mode` (глобальный или в модуле) не установлен в значение `Disabled`.
        properties:
          authURL:
            description: |
              URL сервиса аутентификации. Если пользователь прошел аутентификацию, сервис должен возвращать код ответа `HTTP 200`.
          authSignInURL:
            description: |
              URL, куда будет перенаправлен пользователь для прохождения аутентификации (если сервис аутентификации вернул код ответа HTTP, отличный от `HTTP 200`).
          useBearerTokens:
            description: |
              Токены авторизации. Дашборд должен взаимодействовать с Kubernetes API от имени пользователя. Для этого сервис аутентификации обязан возвращать HTTP-заголовок `Authorization` в своих ответах, содержащий bearer-token. Этот токен будет использоваться дашбордом для выполнения запросов к API-серверу Kubernetes.
      allowedUserGroups:
        items:
        description: |
          Массив групп пользователей, которые могут иметь доступ к дашборду.

          Этот параметр используется, если модуль `user-authn` включён или настроен параметр `externalAuthentication`.

          > **Внимание.** Если модуль используется вместе с [user-authn](https://deckhouse.io/products/kubernetes-platform/documentation/v1/modules/user-authn/), не забудьте добавить эти группы в соответствующее поле конфигурации DexProvider.
      whitelistSourceRanges:
        description: |
          Список адресов в формате CIDR, которым разрешено проходить аутентификацию для доступа в дашборд.
  https:
    description: |
      Тип сертификата, используемого для дашборда.

      Этот параметр переопределяет глобальные настройки `global.modules.https`.
    properties:
      mode:
        description: |
          Режим работы HTTPS:
          * `CertManager` — дашборд работает по HTTPS и заказывать сертификат с помощью ClusterIssuer, заданного в параметре `certManager.clusterIssuerName`;
          * `CustomCertificate` — дашборд работает по HTTPS, используя сертификат из пространства имен `d8-system`;
          * `Disabled` — в данном режиме дашборд не будет работать;
          * `OnlyInURI` — это режим, при котором дашборд работает через HTTP (с учетом того, что перед ним настроен внешний HTTPS-балансировщик, который завершает HTTPS-соединение). В этом случае все ссылки в [user-authn](https://deckhouse.ru/products/kubernetes-platform/documentation/v1/modules/user-authn/) будут генерироваться с использованием схемы HTTPS. Балансировщик должен обеспечивать автоматическое перенаправление с HTTP на HTTPS.
      certManager:
        properties:
          clusterIssuerName:
            description: |
              Тип используемого ClusterIssuer. Доступны `letsencrypt`, `letsencrypt-staging`, `selfsigned`, но вы можете определить свои значения.
      customCertificate:
        properties:
          secretName:
            description: |
              Имя секрета (Secret) в пространстве имен `d8-system`, которое будет использоваться дашборд. Cекрет должен быть в формате [tls](https://kubernetes.github.io/ingress-nginx/user-guide/tls/#tls-secrets)).
  highAvailability:
    description: |
      Ручное управление режимом отказоустойчивости.

      По умолчанию режим отказоустойчивости определяется [автоматически](../../deckhouse-configure-global.html#параметры).
  nodeSelector:
    description: |
      Аналогично параметру Kubernetes `spec.nodeSelector` у подов.

      Если значение не указано или указано `false`, то Deckhouse попытается вычислить значение `nodeSelector` [автоматически](../../#выделение-узлов-под-определенный-вид-нагрузки).
  tolerations:
    description: |
      Аналогично параметру Kubernetes `spec.tolerations` у подов.

      Если ничего не указано или указано `false`, то Deckhouse попытается вычислить значение `tolerations` [автоматически](../../#выделение-узлов-под-определенный-вид-нагрузки).
