---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shell-operator
  labels:
    app: shell-operator-example-204
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shell-operator-example-204
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        heritage: example-204
        app: shell-operator-example-204
    spec:
      containers:
      - name: shell-operator
        image: riptide01/shell-operator:hooks4
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 1m
        env:
        - name: SHELL_OPERATOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: VALIDATING_WEBHOOK_SERVICE_NAME
          value: example-204-validating-service
        - name: VALIDATING_WEBHOOK_CONFIGURATION_NAME
          value: example-204
        - name: LOG_LEVEL
          value: debug
        livenessProbe:
          httpGet:
            port: 9680
            path: /healthz
            scheme: HTTPS
        volumeMounts:
        - name: validating-certs
          mountPath: /validating-certs/
          readOnly: true
        # - name: hooks
        #   mountPath: /hooks/002-deckhouse/validating/
        #   readOnly: false
      serviceAccountName: example-204-acc

      volumes:
      - name: validating-certs
        secret:
          secretName: example-204-validating-certs
      - name: hooks
        configMap:
          name: test-hooks
          defaultMode: 0777
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-hooks
data:
  test.py: |
    #!/usr/bin/python3
    from typing import Optional

    # Copyright 2024 Flant JSC
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    from deckhouse import hook
    from dotmap import DotMap

    config = """
    configVersion: v1
    kubernetesValidating:
    - name: prometheusremotewrite-policy.deckhouse.io
      group: main
      rules:
      - apiGroups:   ["deckhouse.io"]
        apiVersions: ["v1alpha1", "v1"]
        operations:  ["CREATE", "UPDATE"]
        resources:   ["prometheusremotewrites"]
        scope:       "Cluster"
    kubernetes:
    - name: prometheusremotewrites
      group: main
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      keepFullObjectsInMemory: false
      apiVersion: deckhouse.io/v1
      kind: PrometheusRemoteWrite
      jqFilter: |
        {
          "name": .metadata.name,
          "url": .spec.url,
        }
    """


    def main(ctx: hook.Context):
        try:
            # DotMap is a dict with dot notation
            binding_context = DotMap(ctx.binding_context)
            validate(binding_context, ctx.output.validations)
        except Exception as e:
            ctx.output.validations.error(str(e))


    def validate(ctx: DotMap, output: hook.ValidationsCollector):
        operation = ctx.review.request.operation
        if operation == "CREATE" or operation == "UPDATE":
            validate_creation_or_update(ctx, output)
        else:
            raise Exception(f"Unknown operation {ctx.operation}")


    def validate_creation_or_update(ctx: DotMap, output: hook.ValidationsCollector):
        error = check_verify_url_signatures(ctx)
        if error is not None:
            output.deny(error)
            return
        error = check_verify_ca_signatures(ctx)
        if error is not None:
            output.deny(error)
            return
        output.allow()


    # check that all image references don't have intersection, it's required by ratify
    # https://ratify.dev/docs/plugins/verifier/cosign/#scopes
    def check_verify_url_signatures(ctx: DotMap) -> Optional[str]:
        url = ctx.review.request.object.spec.url
        if len(url) == 0:
            return "Url has empty string"
        filtered_name = ctx.review.request.name
        if len([rw for rw in ctx.snapshots.prometheusremotewrites if rw.filterResult.url == url and rw.filterResult.name != filtered_name]) > 0:
            return f"Remote write URL {url} is already in use"
        # search in all prometheusremote write if url alredy used
        return None
        
    def check_verify_ca_signatures(ctx: DotMap) -> Optional[str]:
        ca = ctx.review.request.object.spec.tlsConfig.ca
        if len(ca) == 0:
            return None
        try:
            return None
        except Exception as e:
            return f"Certificate verification failed: {e}"
        
    if __name__ == "__main__":
        hook.run(main, config=config)

---
apiVersion: v1
kind: Service
metadata:
  name: example-204-validating-service
  labels:
    heritage: example-204
spec:
#  type: LoadBalancer
#  externalTrafficPolicy: Local
  ports:
    - name: validating-webhook
      port: 443
      targetPort: 9680
      protocol: TCP
  selector:
    app: shell-operator-example-204
---
apiVersion: v1
kind: Secret
metadata:
  name: example-204-validating-certs
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVIVENDQXdXZ0F3SUJBZ0lVYXkzUWVMNlRKd0pkUEM4NDhYbkhvNnF3TEU4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd2FERUxNQWtHQTFVRUJoTUNWVk14RHpBTkJnTlZCQWdUQms5eVpXZHZiakVSTUE4R0ExVUVCeE1JVUc5eQpkR3hoYm1ReEV6QVJCZ05WQkFvVENrdDFZbVZ5Ym1WMFpYTXhDekFKQmdOVkJBc1RBa05CTVJNd0VRWURWUVFECkV3cExkV0psY201bGRHVnpNQjRYRFRJMU1Ea3dOREV6TlRZd01Gb1hEVEkyTURrd05ERXpOVFl3TUZvd2J6RUwKTUFrR0ExVUVCaE1DVlZNeER6QU5CZ05WQkFnVEJrOXlaV2R2YmpFUk1BOEdBMVVFQnhNSVVHOXlkR3hoYm1ReApFekFSQmdOVkJBb1RDa3QxWW1WeWJtVjBaWE14RXpBUkJnTlZCQXNUQ2t0MVltVnlibVYwWlhNeEVqQVFCZ05WCkJBTVRDV0ZrYldsemMybHZiakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFNQVAKUForSHFMS2RNbDk4TmQvWnA2ZkFNcGFoMlhxK0V4OGZUMlRidlJCdWE4ZlpicHc0M3kzaHZhMEhadWRQWkZCNApyK0l1aDIwc3g4SHduZjFwMGpwZVVWVnNaR2lrL3NGSlVsTkczd2NhL1ZBOFFWaU9KYllXelliZExHNGkvY0xqCm41UDJpc1J6UlZ2WHdOVDNyREIxaEZ6NEczc2sxaDlpMXhHNmlFQkVMOE12bEMzbkt5c0R3SjZtbTNHSDU1UUkKdE84d2FOVTVNTHNlbVcxQUluV0pFdU1PamxmT0Nza0w5K0ZxQ3IrSGhTZ0tOM0FkSzIyZE0vb29HSG5aczZpSgpRZ09MeVVMeUZZOXI2VDUweFFGVnZVdU5CdVpJSnBXVXl0S2kzbjcreTBpQ1UxRXVYQ2d3OW1ZYmUzbHJTU2ExCmtFajNmV0VvTlJ0UGUyakxGNmNDQXdFQUFhT0J0ekNCdERBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGwKQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRQpGSEJxL2lwMDB5eE95WGZoNmJqWitQZithbTA4TUI4R0ExVWRJd1FZTUJhQUZIZDJQaWxvdW0vY1RwdFdUY0oxCnRxR09ZQjF2TURVR0ExVWRFUVF1TUN5Q0ttVjRZVzF3YkdVdE1qQTBMWFpoYkdsa1lYUnBibWN0YzJWeWRtbGoKWlM1a1pXWmhkV3gwTG5OMll6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFTY2pMNUFPSDlydHUza2srNVV4cgpKc21PVkQ1TVlLT3RHK1ZlUzhvUjBZUmV5QlR1YUZ0Vm5IRG0zSDJHUTRvUkJlcTNLaGthSVBialVFZDN5cVVvCnhRVU9MM1hnZ2ZzMHVPSFBpbzFTbG83aUNkL0xxQ0JZb3I5QlBCSkY2dlNUdEpjUUVmdHV0OTBTYzZpT0w5WS8KaldKQW52UGU0bjF4Z0h1VVJ1YW1ZODBqU2V0T2xJcnNVTU81YmpWbUtQQkZkaTRPSTE5R3V4MU5OSlkrZTJRYwpmbWhHeFZaZXpQUEFiY0Q2RGNNSkpBb0RzQUlzSStmYkNZYzh5bXlKQTVEVG4yTm5vcXVXRUpRejdiOTlxMS9xCmhaSEduSjhHRzBldHR6V2huSFJPWXU2ZFBQNmczaDl0cU4vVm9yN1RoOW13ajRhbU84N2dURERuUmRSSHBOMlMKZlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd0E4OW40ZW9zcDB5WDN3MTM5bW5wOEF5bHFIWmVyNFRIeDlQWk51OUVHNXJ4OWx1Cm5EamZMZUc5clFkbTUwOWtVSGl2NGk2SGJTekh3ZkNkL1duU09sNVJWV3hrYUtUK3dVbFNVMGJmQnhyOVVEeEIKV0k0bHRoYk5odDBzYmlMOXd1T2ZrL2FLeEhORlc5ZkExUGVzTUhXRVhQZ2JleVRXSDJMWEVicUlRRVF2d3krVQpMZWNyS3dQQW5xYWJjWWZubEFpMDd6Qm8xVGt3dXg2WmJVQWlkWWtTNHc2T1Y4NEt5UXYzNFdvS3Y0ZUZLQW8zCmNCMHJiWjB6K2lnWWVkbXpxSWxDQTR2SlF2SVZqMnZwUG5URkFWVzlTNDBHNWtnbWxaVEswcUxlZnY3TFNJSlQKVVM1Y0tERDJaaHQ3ZVd0SkpyV1FTUGQ5WVNnMUcwOTdhTXNYcHdJREFRQUJBb0lCQUFablR1SmhGejZKVXdZaQovcEZBMFF6cHNiTG4xRjVnWjlDYmgvRUtQVms2QUhvcVB3bGZaNmpBZDVJRk9kd0RHVmM5SUgyOE1aMkxqV0VXCmdRTFRncmN6U25QdnlGbXBQM1pzOFZCeTVpejIrUnIrMk9xRURUQnZWek1rbzB0TVlmaWIwSHNydzdOS2dwd0IKT0JFMDdUYm5OY1RoeGd6S3dDQ0F4VUJjK09RMFpoZW9DU0tsdzNaRnVhVUYvcU5sRTB0N2lBcVU2ZXplcEdvdQpLbHpDMEluWkdaZWJDOTNaYWd3UHFzb0ExL2xHKzZlSDAwMFp6dzh0UFhvdEhXM1VJVWVhdGE2bkN4RUFaSW1zCnNiaWZsMUo4VWZzeko1KzRsT0NoQ2lCNEVJRnU0WTgwK25sVTRLK0RZaVRKclFoL1k0ZmpsYkNGQk94ejBudVgKZ25LbzM4MENnWUVBd3BaaFFJT042cXh5RmMxT1BKSzRiNHo0dXN3bTd0cTBnRzhzSE1BeVR1SGdyeW9ScGI0YQpUdkw3RUJWT1phc3prK1o4R0RGRDFxQ3VxbnhDTDUwYkwxTnNvK2Z1RFRVTzRwMWQxQ0pWMlVzc2ZVQjVSK0lQCmVnOWJyRmovS1ljMnF4WCthdTdBc2tCd0dDMlBPenMwNHc3ZXZwSFV2Q1d1OU5hUjUzWHR0OFVDZ1lFQS9LeWUKL3c1NG94L3hWZlNGMnYvaDNSMmNzUk4rMnZtU3VkU2pBS3gramh0a09RcW5WQjJ4aXhjS0tieWRzU0htVnBWcgpLSjF3di9GQUpIUWR5djVyZ3BneWV3OFR6YVZnWFhRMmVvM2EvOXFGaitncis3SHErYnJISGw1anh2bW9ab2MwCkprRUZWVkdreEdFZzk3elNWT0tsNHB2aVRUY0hLOG10K3NyMVhIc0NnWUVBaHNKMGlhUlNCWUwxNDRseXRGcDgKSnF6L21RWkh0RVY4bWpIajMrbHZMZGdhcmRTNXNncE0xLzVJeDJPcURwa1pPRVY0RFowWXVTeEFxc3N4WHg0egp0SHZYRWxCT09aRlVSTGJ0UXp1Z0xzTjBCUzVBai9yTDh5RnR3SmRGNXpIQU40NGN5MXViMGhiMFNwcEt4cCtEClNmaURaSUZFVGlUZTNLczVFbzVHV20wQ2dZQnRFUkk4cElGOFlIQnJHdmFnbHExbkpiNGFUWUVIZ28xTU83WDAKdDRDVlZNdUpOOGtNclJpVEltblhwRHdwVnFtM25CMjZWV055NXU4NkRRbERNMWt5OFFGeFR3dk1TK054MDVVawpoNUVOdWNUSFhuK0YwTUhOOUVxNUdDTlhvektHdHp2U2UyU1M5SC83NkxVeldzVXJzUDNMK0YvUjFydjRzY0N3CnJlVUZld0tCZ0J0TWkwNFl3YTJISWZIWHFadDl6eGlmL2hmY0JjTkJXUkMyWmNjbUFvVmk3OWI4d3dTeXBYK0EKSzQvZnd5cmxSdkhxNmN3a2xCYkIvRmNPUjF6TGRzSkZWLzBVVm9VRFRNeHFCSEFyQVJNSTBlL3E5dTVQSTdaQQptMy9iMGZseG1tY2J3NnVZQjVHSXlLU2tHaDlrSjA1OXI3YUVRbWwrSzJqUG1UdWN1RktFCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURvRENDQW9pZ0F3SUJBZ0lVSnRwc0Y3RUJRaGgxK2IzZnRCcW1QZW5RSGlBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2FERUxNQWtHQTFVRUJoTUNWVk14RHpBTkJnTlZCQWdUQms5eVpXZHZiakVSTUE4R0ExVUVCeE1JVUc5eQpkR3hoYm1ReEV6QVJCZ05WQkFvVENrdDFZbVZ5Ym1WMFpYTXhDekFKQmdOVkJBc1RBa05CTVJNd0VRWURWUVFECkV3cExkV0psY201bGRHVnpNQjRYRFRJMU1Ea3dOREV6TkRFd01Gb1hEVE13TURrd016RXpOREV3TUZvd2FERUwKTUFrR0ExVUVCaE1DVlZNeER6QU5CZ05WQkFnVEJrOXlaV2R2YmpFUk1BOEdBMVVFQnhNSVVHOXlkR3hoYm1ReApFekFSQmdOVkJBb1RDa3QxWW1WeWJtVjBaWE14Q3pBSkJnTlZCQXNUQWtOQk1STXdFUVlEVlFRREV3cExkV0psCmNtNWxkR1Z6TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2ZTRGMVFLc3EwVlcKNWgwaFNGUGVPaFpON1N3eHk0ZkZsWitIVlo3MWJIZkZpZE5RV3JXNlQyOE0wNHF5emk2YmtSb01FdEh5ZUVMbwpvTDZOSWh3aFM5WFhET2ZQaFpObVB5Y0lOWWRUUXdxN0JGRGJHazFkS3MxdjJaRXJDZ0pVZEM5dGladzRkWkFZCmJOZW9ybjVER1pTd3dNNlM3TkhNYzJ5TXZNT3dyUjhXWTdLT05zNkx2RHJsYlQ4ZnQ2UlBjTGE5NzZReURnZzUKbDhDZXpYOS9vUmh3WjAzak1ERWR3bW5wMWZ4Y1k3cUlCN1RUQ2UvaE9BYVcvN0JxYlhlTlFJWnozMjhDWnlkbApuV1BPcitleHpsUk91VG00c0ZhVzl3ZHcyZkp5UkVYQkd1djlkV2ZpcHNZaUdTZjNjUXdJMjM2bEIybFFXaHl5CjJJN0s1ajNaQVFJREFRQUJvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBUVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWQzWStLV2k2Yjl4T20xWk53blcyb1k1Z0hXOHdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUJDVHJ2bFZSMm5lVG9uMCtYK0pMMVZINE5OMzR0TGd2WmxPdnFHdjNsdTdyY1hOcW83TE5lalBWYTBkCk54RHAweURZazlXWnR1N1hIRWxVOVpSb3A3ZnJSc1Z1RmNYY0dhUGptdnNNUVpHYm9RcHFxeXY4Ny9zd3NxZ1AKcU9OeDdPSjg0RU5Xc3lKQ3J4a2dwUW44Q0RreGtMN0NJTDlwcDRjU2hjdGF4WFBNbWczY0RoV242WFdkU0pVRQpDbEJXT0JiOHJheGVla1ZmSjB2a3dPU1Q3Q1Q1VGNoZDUxNEhsaCtOazFTK1VKclFKSU5nZnpjNFY3VHdqWnpNCmVYVGVMT1lVR1JaLzY2L1VBV2JZYTFST0hFajlGUGxnMjYrbjlHWUI0Uk1jcVVsN3hkbGgwSDloVzVtWG82dDYKVWozTm9MM1ZidEd5YmFja2NNM3pKL1UzZzMwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-204-acc
  namespace: default
  labels:
    heritage: example-204
---
# Create and update ValidatingWebhookConfiguration
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: example-204
  namespace: default
  labels:
    heritage: example-204
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  verbs: ["create", "list", "update"]
# - apiGroups: ["*"]
#   resources: ["*"]
#   verbs: ["get", "watch", "list"]
- apiGroups: ["deckhouse.io"]
  resources: ["validationwebhooks"]
  verbs: ["get", "list", "update"]
- apiGroups: [""]
  resources: ["secrets","endpoints","configmaps","namespaces", "nodes", "services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: example-204
  namespace: default
  labels:
    heritage: example-204
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: example-204
subjects:
  - kind: ServiceAccount
    name: example-204-acc
    namespace: default
