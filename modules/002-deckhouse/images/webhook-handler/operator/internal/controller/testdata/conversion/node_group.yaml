apiVersion: deckhouse.io/v1alpha1
kind: ConversionWebhook
metadata:
  name: nodegroup
context:
  - name: cluster_config
    kubernetes:
      apiVersion: v1
      kind: Secret
      queue: "cache-cluster-config"
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      keepFullObjectsInMemory: false
      namespace:
        nameSelector:
          matchNames: ["kube-system"]
      nameSelector:
        matchNames:
          - d8-provider-cluster-configuration
      jqFilter: '.data."cloud-provider-cluster-configuration.yaml" // ""'
kubernetesCustomResourceConversion:
  - name: alpha1_to_alpha2
    crdName: nodegroups.deckhouse.io
    conversions:
    - fromVersion: deckhouse.io/v1alpha1
      toVersion: deckhouse.io/v1alpha2
  - name: alpha2_to_alpha1
    crdName: nodegroups.deckhouse.io
    conversions:
    - fromVersion: deckhouse.io/v1alpha2
      toVersion: deckhouse.io/v1alpha1
  - name: alpha2_to_v1
    includeSnapshotsFrom: ["cluster_config"]
    crdName: nodegroups.deckhouse.io
    conversions:
    - fromVersion: deckhouse.io/v1alpha2
      toVersion: deckhouse.io/v1
  - name: v1_to_alpha2
    crdName: nodegroups.deckhouse.io
    conversions:
    - fromVersion: deckhouse.io/v1
      toVersion: deckhouse.io/v1alpha2
conversions:
  - from: v1alpha1
    to: v1alpha2
    handler:
      python: |
        def v1alpha1_to_v1alpha2(self, o: dict) -> typing.Tuple[str | None, dict]:
          ...

        def v1alpha2_to_v1alpha1(self, o: dict) -> typing.Tuple[str | None, dict]:
          ...
  - from: v1alpha2
    to: v1alpha3
    handler:
      python: |
        def v1alpha2_to_v1alpha3(self, o: dict) -> typing.Tuple[str | None, dict]:
          ...

        def v1alpha3_to_v1alpha2(self, o: dict) -> typing.Tuple[str | None, dict]:
          ...

