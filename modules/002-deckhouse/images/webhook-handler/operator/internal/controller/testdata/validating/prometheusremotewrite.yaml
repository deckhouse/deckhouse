apiVersion: deckhouse.io/v1alpha1
kind: ValidationWebhook
metadata:
  labels:
    app.kubernetes.io/name: operator
    app.kubernetes.io/managed-by: kustomize
  name: prometheusremotewrite
validationObject:
  name: prometheusremotewrite-policy.deckhouse.io
  group: main
  rules:
  - apiGroups:   ["deckhouse.io"]
    apiVersions: ["v1alpha1", "v1"]
    operations:  ["CREATE", "UPDATE"]
    resources:   ["prometheusremotewrites"]
    scope:       "Cluster"
context:
  - name: prometheusremotewrites
    kubernetes:
      group: main
      executeHookOnEvent: []
      executeHookOnSynchronization: false
      keepFullObjectsInMemory: false
      apiVersion: deckhouse.io/v1
      kind: PrometheusRemoteWrite
      jqFilter: |
        {
          "name": .metadata.name,
          "url": .spec.url,
        }
handler:
  cel: |
    TODO: not need now
  python: |
    def validate(ctx: DotMap, output: hook.ValidationsCollector):
        operation = ctx.review.request.operation
        if operation == "CREATE" or operation == "UPDATE":
            validate_creation_or_update(ctx, output)
        else:
            raise Exception(f"Unknown operation {ctx.operation}")


    def validate_creation_or_update(ctx: DotMap, output: hook.ValidationsCollector):
        error = check_verify_url_signatures(ctx)
        if error is not None:
            output.deny(error)
            return
        error = check_verify_ca_signatures(ctx)
        if error is not None:
            output.deny(error)
            return
        output.allow()


    # check that all image references don't have intersection, it's required by ratify
    # https://ratify.dev/docs/plugins/verifier/cosign/#scopes
    def check_verify_url_signatures(ctx: DotMap) -> Optional[str]:
        url = ctx.review.request.object.spec.url
        if len(url) == 0:
            return "Url has empty string"
        filtered_name = ctx.review.request.name
        if len([rw for rw in ctx.snapshots.prometheusremotewrites if rw.filterResult.url == url and rw.filterResult.name != filtered_name]) > 0:
            return f"Remote write URL {url} is already in use"
        # search in all prometheusremote write if url alredy used
        return None
        
    def check_verify_ca_signatures(ctx: DotMap) -> Optional[str]:
        ca = ctx.review.request.object.spec.tlsConfig.ca
        if len(ca) == 0:
            return None
        try:
            return None
        except Exception as e:
            return f"Certificate verification failed: {e}"
