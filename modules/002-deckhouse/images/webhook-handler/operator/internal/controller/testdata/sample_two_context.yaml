apiVersion: deckhouse.io/v1alpha1
kind: ValidationWebhook
metadata:
  labels:
    app.kubernetes.io/name: operator
    app.kubernetes.io/managed-by: kustomize
  name: validationwebhook-sample
validationObject: # 1-в-1 из validationwebhookconfiguration
  rules:
    - apiGroups: ["apps"]
      apiVersions: ["v1", "v1beta1"]
      operations: ["CREATE", "UPDATE"]
      resources: ["deployments", "replicasets"]
      scope: "Namespaced"
  objectSelector:
    matchLabels: # matchExpressions
      foo: bar
  namespaceSelector:
    matchExpressions:
      - key: runlevel
        operator: NotIn
        values: ["0","1"]
  matchConditions:
    - name: yyyy
      expression: 'request.resource.group != "rbac.authorization.k8s.io"'
context:
  - name: some_node
    kubernetes:
      apiVersion: v1
      kind: Node
      nameSelector: # oneOf с labelSelector
        matchNames: ["global"]
      labelSelector:
        matchLabels:
          foo: bar
      namespaceSelector:
        matchLabels: # matchExpressions, matchNames
          bar: foo
      jqFilter: { "nodeName": .metadata.name }
  - name: some_node
    kubernetes:
      apiVersion: v1
      kind: Node
      nameSelector: # oneOf с labelSelector
        matchNames: ["global"]
      labelSelector:
        matchLabels:
          foo: bar
      namespaceSelector:
        matchLabels: # matchExpressions, matchNames
          bar: foo
      jqFilter: { "nodeName": .metadata.name }
handler:
  cel: |
    TODO: сейчас не делаем
  python: |
    def validate(request: admission.Request, context: []Object || Context) -> tuple[Optional[str], bool]:
      // logic here
      return "message", True