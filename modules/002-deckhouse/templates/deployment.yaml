{{- define "deckhouse_resources" }}
cpu: 500m
memory: 1000Mi
{{- end }}

{{- if and (.Values.global.enabledModules | has "vertical-pod-autoscaler-crd") (.Capabilities.APIVersions.Has "autoscaling.k8s.io/v1/VerticalPodAutoscaler") }}
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: deckhouse
  namespace: d8-system
  {{- if .Values.deckhouse.nodeSelector }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "deckhouse")) | nindent 2 }}
  {{- else }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "deckhouse" "workload-resource-policy.deckhouse.io" "master")) | nindent 2 }}
  {{- end }}
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: deckhouse
  updatePolicy:
    updateMode: "Initial"
  resourcePolicy:
    containerPolicies:
    - containerName: deckhouse
      minAllowed:
        {{- include "deckhouse_resources" . | nindent 8 }}
      maxAllowed:
        cpu: 1000m
        memory: 2000Mi
{{- end }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: deckhouse
  namespace: d8-system
  {{- include "helm_lib_module_labels" (list . (dict "app" "deckhouse")) | nindent 2 }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: deckhouse
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deckhouse
  namespace: d8-system
  annotations:
    helm.sh/resource-policy: keep
    core.deckhouse.io/version: {{ .Values.global.deckhouseVersion | quote }}
    core.deckhouse.io/edition: {{ .Values.global.deckhouseEdition | quote }}
  {{- include "helm_lib_module_labels" (list . (dict "app" "deckhouse")) | nindent 2 }}
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: deckhouse
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: deckhouse
      annotations:
        checksum/registry: {{ include (print $.Template.BasePath "/registry-secret.yaml") . | sha256sum }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: dhctl.deckhouse.io/node-for-converge
                    operator: DoesNotExist
{{- include "helm_lib_priority_class" (tuple . "system-cluster-critical") | nindent 6 }}
{{- if .Values.deckhouse.nodeSelector }}
      nodeSelector:
        {{- .Values.deckhouse.nodeSelector | toYaml | nindent 8 }}
{{- else }}
      {{- include "helm_lib_node_selector" (tuple . "master") | nindent 6 }}
{{- end }}
{{- if .Values.deckhouse.tolerations }}
      tolerations:
        {{- .Values.deckhouse.tolerations | toYaml | nindent 8 }}
{{- else }}
      {{- include "helm_lib_tolerations" (tuple . "wildcard") | nindent 6 }}
{{- end }}
      {{- include "helm_lib_module_pod_security_context_run_as_user_nobody" . | nindent 6 }}
      containers:
        - name: deckhouse
          {{- include "helm_lib_module_container_security_context_not_allow_privilege_escalation" . | nindent 10 }}
          command:
            - /deckhouse/deckhouse
          image: "{{ .Values.deckhouse.internal.currentReleaseImageName }}"
          imagePullPolicy: Always
          env:
# KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT are needed on the bootstrap phase to make Deckhouse work without kube-proxy
{{- if not .Values.global.clusterIsBootstrapped }}
            - name: KUBERNETES_SERVICE_HOST
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: KUBERNETES_SERVICE_PORT
              value: "6443"
{{- end }}
            - name: LOG_LEVEL
              value: {{ .Values.deckhouse.logLevel }}
            - name: DECKHOUSE_BUNDLE
              value: {{ .Values.deckhouse.bundle }}
            - name: DECKHOUSE_POD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DECKHOUSE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HELM_HOST
              value: "127.0.0.1:44434"
            - name: OBJECT_PATCHER_KUBE_CLIENT_QPS
              value: "30"
            - name: OBJECT_PATCHER_KUBE_CLIENT_BURST
              value: "60"
            - name: ADDON_OPERATOR_CONFIG_MAP
              value: deckhouse-generated-config-do-not-edit
            - name: ADDON_OPERATOR_PROMETHEUS_METRICS_PREFIX
              value: deckhouse_
            - name: ADDON_OPERATOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ADDON_OPERATOR_LISTEN_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: HELM3LIB
              value: "yes"
            - name: HELM_HISTORY_MAX
              value: "3"
            - name: EXTERNAL_MODULES_DIR
              value: "/deckhouse/external-modules/"
            - name: DEBUG_UNIX_SOCKET
              value: /tmp/shell-operator-debug.socket
            - name: HISTFILE
              value: /tmp/.bash_history
            {{- include "helm_lib_envs_for_proxy" . | nindent 12 }}
          ports:
            - containerPort: 9650
              name: self
            - containerPort: 9651
              name: custom
          readinessProbe:
            httpGet:
              path: /ready
              port: 9650
            initialDelaySeconds: 5
            # fail after 10 minutes
            periodSeconds: 5
            failureThreshold: 120
          resources:
            requests:
              {{- include "helm_lib_module_ephemeral_storage_logs_with_extra" 100 | nindent 14 }}
{{- if not ( .Values.global.enabledModules | has "vertical-pod-autoscaler-crd") }}
              {{- include "deckhouse_resources" . | nindent 14 }}
{{- end }}
          workingDir: /deckhouse
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /.kube
            name: kube
          - mountPath: /deckhouse/external-modules
            name: external-modules
      hostNetwork: true
{{- if .Values.global.clusterIsBootstrapped }}
      dnsPolicy: ClusterFirstWithHostNet
{{- else }}
      dnsPolicy: Default
{{- end}}
      serviceAccountName: deckhouse
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp
      - emptyDir:
          medium: Memory
        name: kube
      - name: external-modules
        hostPath:
          path: /var/lib/deckhouse/external-modules
          type: Directory

