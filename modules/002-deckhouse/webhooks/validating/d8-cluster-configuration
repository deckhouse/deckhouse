#!/usr/bin/env bash

# Copyright 2021 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source /shell_lib.sh

function __config__(){
  cat <<EOF
configVersion: v1
kubernetesValidating:
- name: d8-cluster-configuration-secret.deckhouse.io
  group: main
  labelSelector:
    matchLabels:
      name: d8-cluster-configuration
  rules:
  - apiGroups:   [""]
    apiVersions: ["v1"]
    operations:  ["*"]
    resources:   ["secrets"]
    scope:       "Namespaced"
EOF
}

function __main__() {
  # Secret kube-system/d8-cluster-configuration cannot be deleted
  if context::jq -e -r '.review.request.operation == "DELETE"' >/dev/null 2>&1; then
    cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"it is forbidden to delete secret d8-cluster-configuration"}
EOF
    return 0
  fi

  # podSubnetNodeCIDRPrefix cannot be changed in running cluster
  if context::jq -e -r '.review.request.operation == "UPDATE"' >/dev/null 2>&1; then
    oldPrefix="$(context::jq -r '.review.request.oldObject.data."cluster-configuration.yaml"' | base64 -d | yq eval '.podSubnetNodeCIDRPrefix' -)"
    newPrefix="$(context::jq -r '.review.request.object.data."cluster-configuration.yaml"' | base64 -d | yq eval '.podSubnetNodeCIDRPrefix' -)"

    if [ "${oldPrefix}" != "${newPrefix}" ]; then
      cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":false, "message":"it is forbidden to change podSubnetNodeCIDRPrefix in running cluster"}
EOF
      return 0
    fi
  fi

  # podSubnetCIDR cannot be changed in running cluster
    if context::jq -e -r '.review.request.operation == "UPDATE"' >/dev/null 2>&1; then
      oldPodSubnet="$(context::jq -r '.review.request.oldObject.data."cluster-configuration.yaml"' | base64 -d | yq eval '.podSubnetCIDR' -)"
      newPodSubnet="$(context::jq -r '.review.request.object.data."cluster-configuration.yaml"' | base64 -d | yq eval '.podSubnetCIDR' -)"

      if [ "${oldPodSubnet}" != "${newPodSubnet}" ]; then
        cat <<EOF > "$VALIDATING_RESPONSE_PATH"
  {"allowed":false, "message":"it is forbidden to change podSubnetCIDR in running cluster"}
EOF
        return 0
      fi
    fi

  # serviceSubnetCIDR cannot be changed in running cluster
    if context::jq -e -r '.review.request.operation == "UPDATE"' >/dev/null 2>&1; then
      oldServiceSubnet="$(context::jq -r '.review.request.oldObject.data."cluster-configuration.yaml"' | base64 -d | yq eval '.serviceSubnetCIDR' -)"
      newServiceSubnet="$(context::jq -r '.review.request.object.data."cluster-configuration.yaml"' | base64 -d | yq eval '.serviceSubnetCIDR' -)"

      if [ "${oldServiceSubnet}" != "${newServiceSubnet}" ]; then
        cat <<EOF > "$VALIDATING_RESPONSE_PATH"
  {"allowed":false, "message":"it is forbidden to change serviceSubnetCIDR in running cluster"}
EOF
        return 0
      fi
    fi

  # allowed response
  cat <<EOF > "$VALIDATING_RESPONSE_PATH"
{"allowed":true}
EOF
}

hook::run "$@"
