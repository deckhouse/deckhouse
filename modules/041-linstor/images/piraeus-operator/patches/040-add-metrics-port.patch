diff --git a/pkg/apis/piraeus/v1/linstorcontroller_types.go b/pkg/apis/piraeus/v1/linstorcontroller_types.go
index 1cfa0ee..cd52404 100644
--- a/pkg/apis/piraeus/v1/linstorcontroller_types.go
+++ b/pkg/apis/piraeus/v1/linstorcontroller_types.go
@@ -73,6 +73,11 @@ type LinstorControllerSpec struct {
 	// +optional
 	LinstorHttpsControllerSecret string `json:"linstorHttpsControllerSecret"`
 
+	// Port for scraping metrics protected by RBAC proxy
+	// +optional
+	// +nullable
+	SecuredMetricsPort *int32 `json:"securedMetricsPort"`
+
 	// Resource requirements for the LINSTOR controller pod
 	// +optional
 	// +nullable
diff --git a/pkg/apis/piraeus/v1/zz_generated.deepcopy.go b/pkg/apis/piraeus/v1/zz_generated.deepcopy.go
index 51f1467..0021736 100644
--- a/pkg/apis/piraeus/v1/zz_generated.deepcopy.go
+++ b/pkg/apis/piraeus/v1/zz_generated.deepcopy.go
@@ -249,6 +249,11 @@ func (in *LinstorControllerSpec) DeepCopyInto(out *LinstorControllerSpec) {
 		*out = new(shared.LinstorSSLConfig)
 		**out = **in
 	}
+	if in.SecuredMetricsPort != nil {
+		in, out := &in.SecuredMetricsPort, &out.SecuredMetricsPort
+		*out = new(int32)
+		**out = **in
+	}
 	in.Resources.DeepCopyInto(&out.Resources)
 	if in.Affinity != nil {
 		in, out := &in.Affinity, &out.Affinity
diff --git a/pkg/controller/linstorcontroller/linstorcontroller_controller.go b/pkg/controller/linstorcontroller/linstorcontroller_controller.go
index 52fd46f..f5aa8a1 100644
--- a/pkg/controller/linstorcontroller/linstorcontroller_controller.go
+++ b/pkg/controller/linstorcontroller/linstorcontroller_controller.go
@@ -22,6 +22,7 @@ import (
 	"encoding/json"
 	"fmt"
 	"net"
+	"sort"
 	"strings"
 	"time"
 
@@ -674,6 +675,15 @@ func newDeploymentForResource(controllerResource *piraeusv1.LinstorController) *
 		{Name: controllerResource.Name, Port: int32(port)},
 	}
 
+	if controllerResource.Spec.SecuredMetricsPort != nil {
+		metricsPort := corev1.EndpointPort{
+			Name: "metrics", Port: *controllerResource.Spec.SecuredMetricsPort}
+		servicePorts = append(servicePorts, metricsPort)
+		sort.SliceStable(servicePorts, func(i, j int) bool {
+			return servicePorts[i].Port < servicePorts[j].Port
+		})
+	}
+
 	servicePortsJSON, err := json.Marshal(servicePorts)
 	if err != nil {
 		panic(err)
@@ -962,18 +972,33 @@ func newServiceForResource(controllerResource *piraeusv1.LinstorController) *cor
 		port = lc.DefaultHTTPSPort
 	}
 
+	ports := []corev1.ServicePort{
+		{
+			Name:       controllerResource.Name,
+			Port:       int32(port),
+			Protocol:   "TCP",
+			TargetPort: intstr.FromInt(port),
+		},
+	}
+
+	if controllerResource.Spec.SecuredMetricsPort != nil {
+		metricsPort := corev1.ServicePort{
+			Name:       "metrics",
+			Port:       *controllerResource.Spec.SecuredMetricsPort,
+			Protocol:   "TCP",
+			TargetPort: intstr.FromInt(int(*controllerResource.Spec.SecuredMetricsPort)),
+		}
+		ports = append(ports, metricsPort)
+		sort.SliceStable(ports, func(i, j int) bool {
+			return ports[i].Port < ports[j].Port
+		})
+	}
+
 	return &corev1.Service{
 		ObjectMeta: getObjectMeta(controllerResource, "%s"),
 		Spec: corev1.ServiceSpec{
 			ClusterIP: "",
-			Ports: []corev1.ServicePort{
-				{
-					Name:       controllerResource.Name,
-					Port:       int32(port),
-					Protocol:   "TCP",
-					TargetPort: intstr.FromInt(port),
-				},
-			},
+			Ports: ports,
 			Type: corev1.ServiceTypeClusterIP,
 		},
 	}
