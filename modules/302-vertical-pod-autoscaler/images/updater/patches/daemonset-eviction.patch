Index: vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction_test.go b/vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction_test.go
--- a/vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction_test.go	(revision 171d17565de1ccccfc4df44bd2232a45759b11ca)
+++ b/vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction_test.go	(date 1654177356605)
@@ -26,11 +26,12 @@
 	batchv1 "k8s.io/api/batch/v1"
 	apiv1 "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
-	"k8s.io/autoscaler/vertical-pod-autoscaler/pkg/utils/test"
 	appsinformer "k8s.io/client-go/informers/apps/v1"
 	coreinformer "k8s.io/client-go/informers/core/v1"
 	"k8s.io/client-go/kubernetes/fake"
 	"k8s.io/client-go/tools/cache"
+
+	"k8s.io/autoscaler/vertical-pod-autoscaler/pkg/utils/test"
 )

 type podWithExpectations struct {
@@ -233,7 +234,7 @@
 		for _, p := range testCase.pods {
 			pods = append(pods, p.pod)
 		}
-		factory, _ := getEvictionRestrictionFactory(&rc, nil, nil, 2, testCase.evictionTollerance)
+		factory, _ := getEvictionRestrictionFactory(&rc, nil, nil, nil, 2, testCase.evictionTollerance)
 		eviction := factory.NewPodsEvictionRestriction(pods)
 		for i, p := range testCase.pods {
 			assert.Equalf(t, p.canEvict, eviction.CanEvict(p.pod), "TC %v - unexpected CanEvict result for pod-%v %#v", tcIndex, i, p.pod)
@@ -272,7 +273,7 @@
 		pods[i] = test.Pod().WithName(getTestPodName(i)).WithCreator(&rs.ObjectMeta, &rs.TypeMeta).Get()
 	}

-	factory, _ := getEvictionRestrictionFactory(nil, &rs, nil, 2, 0.5)
+	factory, _ := getEvictionRestrictionFactory(nil, &rs, nil, nil, 2, 0.5)
 	eviction := factory.NewPodsEvictionRestriction(pods)

 	for _, pod := range pods {
@@ -311,7 +312,45 @@
 		pods[i] = test.Pod().WithName(getTestPodName(i)).WithCreator(&ss.ObjectMeta, &ss.TypeMeta).Get()
 	}

-	factory, _ := getEvictionRestrictionFactory(nil, nil, &ss, 2, 0.5)
+	factory, _ := getEvictionRestrictionFactory(nil, nil, &ss, nil, 2, 0.5)
+	eviction := factory.NewPodsEvictionRestriction(pods)
+
+	for _, pod := range pods {
+		assert.True(t, eviction.CanEvict(pod))
+	}
+
+	for _, pod := range pods[:2] {
+		err := eviction.Evict(pod, test.FakeEventRecorder())
+		assert.Nil(t, err, "Should evict with no error")
+	}
+	for _, pod := range pods[2:] {
+		err := eviction.Evict(pod, test.FakeEventRecorder())
+		assert.Error(t, err, "Error expected")
+	}
+}
+
+func TestEvictReplicatedByDaemonSet(t *testing.T) {
+	livePods := int32(5)
+
+	ds := appsv1.DaemonSet{
+		ObjectMeta: metav1.ObjectMeta{
+			Name:      "ds",
+			Namespace: "default",
+		},
+		TypeMeta: metav1.TypeMeta{
+			Kind: "DaemonSet",
+		},
+		Status: appsv1.DaemonSetStatus{
+			NumberAvailable: livePods,
+		},
+	}
+
+	pods := make([]*apiv1.Pod, livePods)
+	for i := range pods {
+		pods[i] = test.Pod().WithName(getTestPodName(i)).WithCreator(&ds.ObjectMeta, &ds.TypeMeta).Get()
+	}
+
+	factory, _ := getEvictionRestrictionFactory(nil, nil, nil, &ds, 2, 0.5)
 	eviction := factory.NewPodsEvictionRestriction(pods)

 	for _, pod := range pods {
@@ -346,7 +385,7 @@
 		pods[i] = test.Pod().WithName(getTestPodName(i)).WithCreator(&job.ObjectMeta, &job.TypeMeta).Get()
 	}

-	factory, _ := getEvictionRestrictionFactory(nil, nil, nil, 2, 0.5)
+	factory, _ := getEvictionRestrictionFactory(nil, nil, nil, nil, 2, 0.5)
 	eviction := factory.NewPodsEvictionRestriction(pods)

 	for _, pod := range pods {
@@ -385,7 +424,7 @@
 		pods[i] = test.Pod().WithName(getTestPodName(i)).WithCreator(&rc.ObjectMeta, &rc.TypeMeta).Get()
 	}

-	factory, _ := getEvictionRestrictionFactory(&rc, nil, nil, 10, 0.5)
+	factory, _ := getEvictionRestrictionFactory(&rc, nil, nil, nil, 10, 0.5)
 	eviction := factory.NewPodsEvictionRestriction(pods)

 	for _, pod := range pods {
@@ -421,7 +460,7 @@
 		pods[i] = test.Pod().WithName(getTestPodName(i)).WithCreator(&rc.ObjectMeta, &rc.TypeMeta).Get()
 	}

-	factory, _ := getEvictionRestrictionFactory(&rc, nil, nil, 2 /*minReplicas*/, tolerance)
+	factory, _ := getEvictionRestrictionFactory(&rc, nil, nil, nil, 2 /*minReplicas*/, tolerance)
 	eviction := factory.NewPodsEvictionRestriction(pods)

 	for _, pod := range pods {
@@ -461,7 +500,7 @@
 		pods[i] = test.Pod().WithName(getTestPodName(i)).WithCreator(&rc.ObjectMeta, &rc.TypeMeta).Get()
 	}

-	factory, _ := getEvictionRestrictionFactory(&rc, nil, nil, 2, tolerance)
+	factory, _ := getEvictionRestrictionFactory(&rc, nil, nil, nil, 2, tolerance)
 	eviction := factory.NewPodsEvictionRestriction(pods)

 	for _, pod := range pods {
@@ -479,7 +518,7 @@
 }

 func getEvictionRestrictionFactory(rc *apiv1.ReplicationController, rs *appsv1.ReplicaSet,
-	ss *appsv1.StatefulSet, minReplicas int,
+	ss *appsv1.StatefulSet, ds *appsv1.DaemonSet, minReplicas int,
 	evictionToleranceFraction float64) (PodsEvictionRestrictionFactory, error) {
 	kubeClient := &fake.Clientset{}
 	rcInformer := coreinformer.NewReplicationControllerInformer(kubeClient, apiv1.NamespaceAll,
@@ -487,6 +526,8 @@
 	rsInformer := appsinformer.NewReplicaSetInformer(kubeClient, apiv1.NamespaceAll,
 		0*time.Second, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
 	ssInformer := appsinformer.NewStatefulSetInformer(kubeClient, apiv1.NamespaceAll,
+		0*time.Second, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+	dsInformer := appsinformer.NewDaemonSetInformer(kubeClient, apiv1.NamespaceAll,
 		0*time.Second, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
 	if rc != nil {
 		err := rcInformer.GetIndexer().Add(rc)
@@ -506,11 +547,19 @@
 			return nil, fmt.Errorf("Error adding object to cache: %v", err)
 		}
 	}
+	if ds != nil {
+		err := dsInformer.GetIndexer().Add(ds)
+		if err != nil {
+			return nil, fmt.Errorf("Error adding object to cache: %v", err)
+		}
+	}
+
 	return &podsEvictionRestrictionFactoryImpl{
 		client:                    kubeClient,
 		rsInformer:                rsInformer,
 		rcInformer:                rcInformer,
 		ssInformer:                ssInformer,
+		dsInformer:                dsInformer,
 		minReplicas:               minReplicas,
 		evictionToleranceFraction: evictionToleranceFraction,
 	}, nil
Index: vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction.go b/vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction.go
--- a/vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction.go	(revision 171d17565de1ccccfc4df44bd2232a45759b11ca)
+++ b/vertical-pod-autoscaler/pkg/updater/eviction/pods_eviction_restriction.go	(date 1654197716528)
@@ -73,6 +73,7 @@
 	rcInformer                cache.SharedIndexInformer // informer for Replication Controllers
 	ssInformer                cache.SharedIndexInformer // informer for Stateful Sets
 	rsInformer                cache.SharedIndexInformer // informer for Replica Sets
+	dsInformer                cache.SharedIndexInformer // informer for Daemon Sets
 	minReplicas               int
 	evictionToleranceFraction float64
 }
@@ -83,6 +84,7 @@
 	replicationController controllerKind = "ReplicationController"
 	statefulSet           controllerKind = "StatefulSet"
 	replicaSet            controllerKind = "ReplicaSet"
+	daemonSet             controllerKind = "DaemonSet"
 	job                   controllerKind = "Job"
 )

@@ -169,11 +171,16 @@
 	if err != nil {
 		return nil, fmt.Errorf("Failed to create rsInformer: %v", err)
 	}
+	dsInformer, err := setUpInformer(client, daemonSet)
+	if err != nil {
+		return nil, fmt.Errorf("Failed to create dsInformer: %v", err)
+	}
 	return &podsEvictionRestrictionFactoryImpl{
 		client:                    client,
 		rcInformer:                rcInformer, // informer for Replication Controllers
 		ssInformer:                ssInformer, // informer for Replica Sets
 		rsInformer:                rsInformer, // informer for Stateful Sets
+		dsInformer:                dsInformer, // informer for Daemon Sets
 		minReplicas:               minReplicas,
 		evictionToleranceFraction: evictionToleranceFraction}, nil
 }
@@ -314,6 +321,23 @@
 			return 0, fmt.Errorf("stateful set %s/%s has no replicas config", creator.Namespace, creator.Name)
 		}
 		return int(*ss.Spec.Replicas), nil
+
+	case daemonSet:
+		dsObj, exists, err := f.dsInformer.GetStore().GetByKey(creator.Namespace + "/" + creator.Name)
+		if err != nil {
+			return 0, fmt.Errorf("daemon set %s/%s is not available, err: %v", creator.Namespace, creator.Name, err)
+		}
+		if !exists {
+			return 0, fmt.Errorf("daemon set %s/%s does not exist", creator.Namespace, creator.Name)
+		}
+		ds, ok := dsObj.(*appsv1.DaemonSet)
+		if !ok {
+			return 0, fmt.Errorf("failed to parse daemon set")
+		}
+		if ds.Status.NumberReady == 0 {
+			return 0, fmt.Errorf("daemon set %s/%s has no ready pods", creator.Namespace, creator.Name)
+		}
+		return int(ds.Status.NumberReady), nil
 	}

 	return 0, nil
@@ -341,6 +365,9 @@
 			resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
 	case statefulSet:
 		informer = appsinformer.NewStatefulSetInformer(kubeClient, apiv1.NamespaceAll,
+			resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
+	case daemonSet:
+		informer = appsinformer.NewDaemonSetInformer(kubeClient, apiv1.NamespaceAll,
 			resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
 	default:
 		return nil, fmt.Errorf("Unknown controller kind: %v", kind)
