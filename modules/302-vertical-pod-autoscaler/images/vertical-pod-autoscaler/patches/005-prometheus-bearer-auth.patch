Subject: [PATCH] Add prometheus bearer auth
---
Index: vertical-pod-autoscaler/pkg/recommender/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vertical-pod-autoscaler/pkg/recommender/main.go b/vertical-pod-autoscaler/pkg/recommender/main.go
--- a/vertical-pod-autoscaler/pkg/recommender/main.go	(revision 69eeed3cb2fdde4028307bd61341d9111af07c34)
+++ b/vertical-pod-autoscaler/pkg/recommender/main.go	(date 1750543092348)
@@ -70,6 +70,7 @@
 // Prometheus history provider flags
 var (
 	prometheusAddress   = flag.String("prometheus-address", "http://prometheus.monitoring.svc", `Where to reach for Prometheus metrics`)
+	prometheusInsecure  = flag.Bool("prometheus-insecure", false, `Skip tls verify if https is used in the prometheus-address`)
 	prometheusJobName   = flag.String("prometheus-cadvisor-job-name", "kubernetes-cadvisor", `Name of the prometheus job name which scrapes the cAdvisor metrics`)
 	historyLength       = flag.String("history-length", "8d", `How much time back prometheus have to be queried to get historical metrics`)
 	historyResolution   = flag.String("history-resolution", "1h", `Resolution at which Prometheus is queried for historical metrics`)
@@ -83,6 +84,8 @@
 	ctrNameLabel        = flag.String("container-name-label", "name", `Label name to look for container names`)
 	username            = flag.String("username", "", "The username used in the prometheus server basic auth")
 	password            = flag.String("password", "", "The password used in the prometheus server basic auth")
+	bearerToken         = flag.String("prometheus-bearer-token", "", "The bearer token use in the Prometheus server bearer token auth")
+	bearerTokenFile     = flag.String("prometheus-bearer-token-file", "", "Path to the bearer token file used for authentication by the Prometheus server")
 )

 // External metrics provider flags
@@ -142,6 +145,35 @@
 		klog.ErrorS(nil, "--vpa-object-namespace and --ignored-vpa-object-namespaces are mutually exclusive and can't be set together.")
 		os.Exit(255)
 	}
+
+	if *bearerToken != "" && *bearerTokenFile != "" && *username != "" {
+		klog.ErrorS(nil, "--bearer-token, --bearer-token-file and --username are mutually exclusive and can't be set together.")
+		klog.FlushAndExit(klog.ExitFlushTimeout, 1)
+	}
+
+	if *bearerTokenFile != "" {
+		fileContent, err := os.ReadFile(*bearerTokenFile)
+		if err != nil {
+			klog.ErrorS(err, "Unable to read bearer token file")
+			klog.FlushAndExit(klog.ExitFlushTimeout, 1)
+		}
+		*bearerToken = strings.TrimSpace(string(fileContent))
+	}
+
+	if *bearerToken != "" && *bearerTokenFile != "" && *username != "" {
+		klog.ErrorS(nil, "--bearer-token, --bearer-token-file and --username are mutually exclusive and can't be set together.")
+		klog.FlushAndExit(klog.ExitFlushTimeout, 1)
+	}
+
+	if *bearerTokenFile != "" {
+		fileContent, err := os.ReadFile(*bearerTokenFile)
+		if err != nil {
+			klog.ErrorS(err, "Unable to read bearer token file")
+			klog.FlushAndExit(klog.ExitFlushTimeout, 1)
+		}
+		*bearerToken = strings.TrimSpace(string(fileContent))
+	}
+
 	ctx := context.Background()

 	healthCheck := metrics.NewHealthCheck(*metricsFetcherInterval * 5)
@@ -297,6 +329,7 @@
 	} else {
 		config := history.PrometheusHistoryProviderConfig{
 			Address:                *prometheusAddress,
+			Insecure:               *prometheusInsecure,
 			QueryTimeout:           promQueryTimeout,
 			HistoryLength:          *historyLength,
 			HistoryResolution:      *historyResolution,
@@ -309,9 +342,10 @@
 			CtrNameLabel:           *ctrNameLabel,
 			CadvisorMetricsJobName: *prometheusJobName,
 			Namespace:              commonFlag.VpaObjectNamespace,
-			PrometheusBasicAuthTransport: history.PrometheusBasicAuthTransport{
-				Username: *username,
-				Password: *password,
+			Authentication: history.PrometheusCredentials{
+				BearerToken: *bearerToken,
+				Username:    *username,
+				Password:    *password,
 			},
 		}
 		provider, err := history.NewPrometheusHistoryProvider(config)
Index: vertical-pod-autoscaler/pkg/recommender/input/history/history_provider_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vertical-pod-autoscaler/pkg/recommender/input/history/history_provider_test.go b/vertical-pod-autoscaler/pkg/recommender/input/history/history_provider_test.go
--- a/vertical-pod-autoscaler/pkg/recommender/input/history/history_provider_test.go	(revision 69eeed3cb2fdde4028307bd61341d9111af07c34)
+++ b/vertical-pod-autoscaler/pkg/recommender/input/history/history_provider_test.go	(date 1750543025527)
@@ -19,6 +19,8 @@
 import (
 	"context"
 	"fmt"
+	"net/http"
+	"net/http/httptest"
 	"testing"
 	"time"

@@ -345,3 +347,41 @@
 	assert.Nil(t, err)
 	assert.Equal(t, histories, map[model.PodID]*PodHistory{podID: podHistory})
 }
+
+func TestPrometheusAuth(t *testing.T) {
+	var capturedRequest *http.Request
+	ts := httptest.NewTLSServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
+		capturedRequest = r
+		w.Write([]byte(`{"status": "success","data": {"resultType": "matrix","result": []}}`))
+	}))
+	defer ts.Close()
+
+	cfg := PrometheusHistoryProviderConfig{
+		Address:           ts.URL,
+		Insecure:          true,
+		HistoryLength:     "8d",
+		HistoryResolution: "30s",
+		QueryTimeout:      30 * time.Second,
+	}
+
+	t.Run("Basic auth", func(t *testing.T) {
+		cfg.Authentication.Username = "user"
+		cfg.Authentication.Password = "password"
+
+		prov, _ := NewPrometheusHistoryProvider(cfg)
+		_, err := prov.GetClusterHistory()
+
+		assert.Nil(t, err)
+		assert.Equal(t, capturedRequest.Header.Get("Authorization"), "Basic dXNlcjpwYXNzd29yZA==")
+	})
+
+	t.Run("Bearer token auth", func(t *testing.T) {
+		cfg.Authentication.BearerToken = "token"
+
+		prov, _ := NewPrometheusHistoryProvider(cfg)
+		_, err := prov.GetClusterHistory()
+
+		assert.Nil(t, err)
+		assert.Equal(t, capturedRequest.Header.Get("Authorization"), "Bearer token")
+	})
+}
Index: vertical-pod-autoscaler/pkg/recommender/input/history/history_provider.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vertical-pod-autoscaler/pkg/recommender/input/history/history_provider.go b/vertical-pod-autoscaler/pkg/recommender/input/history/history_provider.go
--- a/vertical-pod-autoscaler/pkg/recommender/input/history/history_provider.go	(revision 69eeed3cb2fdde4028307bd61341d9111af07c34)
+++ b/vertical-pod-autoscaler/pkg/recommender/input/history/history_provider.go	(date 1750543025439)
@@ -18,6 +18,7 @@

 import (
 	"context"
+	"crypto/tls"
 	"fmt"
 	"net/http"
 	"sort"
@@ -34,22 +35,48 @@
 	metrics_recommender "k8s.io/autoscaler/vertical-pod-autoscaler/pkg/utils/metrics/recommender"
 )

-// PrometheusBasicAuthTransport contains the username and password of prometheus server
+// PrometheusBasicAuthTransport injects basic auth headers into HTTP requests.
 type PrometheusBasicAuthTransport struct {
 	Username string
 	Password string
+	Base     http.RoundTripper
 }

-// RoundTrip function injects the username and password in the request's basic auth header
 func (t *PrometheusBasicAuthTransport) RoundTrip(req *http.Request) (*http.Response, error) {
-	req.SetBasicAuth(t.Username, t.Password)
-	return http.DefaultTransport.RoundTrip(req)
+	// Use default transport if none specified
+	rt := t.Base
+	if rt == nil {
+		rt = http.DefaultTransport
+	}
+
+	// Clone the request to avoid modifying the original
+	cloned := req.Clone(req.Context())
+	cloned.SetBasicAuth(t.Username, t.Password)
+	return rt.RoundTrip(cloned)
+}
+
+// PrometheusBearerTokenAuthTransport injects bearer token into HTTP requests.
+type PrometheusBearerTokenAuthTransport struct {
+	Token string
+	Base  http.RoundTripper
+}
+
+func (bt *PrometheusBearerTokenAuthTransport) RoundTrip(req *http.Request) (*http.Response, error) {
+	rt := bt.Base
+	if rt == nil {
+		rt = http.DefaultTransport
+	}
+
+	cloned := req.Clone(req.Context())
+	cloned.Header.Set("Authorization", fmt.Sprintf("Bearer %s", bt.Token))
+	return rt.RoundTrip(cloned)
 }

 // PrometheusHistoryProviderConfig allow to select which metrics
 // should be queried to get real resource utilization.
 type PrometheusHistoryProviderConfig struct {
 	Address                                          string
+	Insecure                                         bool
 	QueryTimeout                                     time.Duration
 	HistoryLength, HistoryResolution                 string
 	PodLabelPrefix, PodLabelsMetricName              string
@@ -57,7 +84,14 @@
 	CtrNamespaceLabel, CtrPodNameLabel, CtrNameLabel string
 	CadvisorMetricsJobName                           string
 	Namespace                                        string
-	PrometheusBasicAuthTransport
+
+	Authentication PrometheusCredentials
+}
+
+type PrometheusCredentials struct {
+	Username    string
+	Password    string
+	BearerToken string
 }

 // PodHistory represents history of usage and labels for a given pod.
@@ -91,23 +125,33 @@

 // NewPrometheusHistoryProvider constructs a history provider that gets data from Prometheus.
 func NewPrometheusHistoryProvider(config PrometheusHistoryProviderConfig) (HistoryProvider, error) {
+	prometheusTransport := promapi.DefaultRoundTripper
+
+	if config.Insecure {
+		prometheusTransport.(*http.Transport).TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
+	}
+
+	if config.Authentication.BearerToken != "" {
+		prometheusTransport = &PrometheusBearerTokenAuthTransport{
+			Token: config.Authentication.BearerToken,
+			Base:  prometheusTransport,
+		}
+	} else if config.Authentication.Username != "" && config.Authentication.Password != "" {
+		prometheusTransport = &PrometheusBasicAuthTransport{
+			Username: config.Authentication.Username,
+			Password: config.Authentication.Password,
+			Base:     prometheusTransport,
+		}
+	}
+
+	roundTripper := metrics_recommender.NewPrometheusRoundTripperCounter(
+		metrics_recommender.NewPrometheusRoundTripperDuration(prometheusTransport),
+	)
+
 	promConfig := promapi.Config{
 		Address:      config.Address,
-		RoundTripper: promapi.DefaultRoundTripper,
+		RoundTripper: roundTripper,
 	}
-
-	if config.Username != "" && config.Password != "" {
-		transport := &PrometheusBasicAuthTransport{
-			Username: config.Username,
-			Password: config.Password,
-		}
-		promConfig.RoundTripper = transport
-	}
-
-	roundTripper := metrics_recommender.NewPrometheusRoundTripperCounter(
-		metrics_recommender.NewPrometheusRoundTripperDuration(promConfig.RoundTripper),
-	)
-	promConfig.RoundTripper = roundTripper

 	promClient, err := promapi.NewClient(promConfig)
 	if err != nil {
