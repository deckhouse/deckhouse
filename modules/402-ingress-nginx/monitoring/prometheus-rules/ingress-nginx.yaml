- name: kubernetes.ingress-nginx.info
  rules:
  - record: ingress_nginx_overall_info
    expr: count({__name__=~"ingress_nginx_overall_.*", __name__!="ingress_nginx_overall_info"}) by (job,  controller, app, node, endpoint, content_kind, namespace, vhost) * 0 + 1
  - record: ingress_nginx_detail_info
    expr: count({__name__=~"ingress_nginx_detail_.*", __name__!="ingress_nginx_detail_info", __name__!~"ingress_nginx_detail_backend_.*"}) by (job, controller, app, node, endpoint, content_kind, namespace, ingress, service, service_port, vhost, location) * 0 + 1
  - record: ingress_nginx_detail_backend_info
    expr: count({__name__=~"ingress_nginx_detail_backend_.*", __name__!="ingress_nginx_detail_backend_info"}) by (job, controller, app, node, endpoint, namespace, ingress, service, service_port, vhost, location, pod_ip) * 0 + 1
  - alert: NginxIngressConfigTestFailed
    expr: nginx_ingress_controller_config_last_reload_successful == 0
    for: 10m
    labels:
      impact: marginal
      likelihood: certain
    annotations:
      plk_protocol_version: "1"
      plk_markup_format: markdown
      description: |-
        The configuration testing (nginx -t) of the {{ $labels.controller }} Ingress controller in the {{ $labels.controller_namespace }} Namespace has failed.

        The recommended course of action:
        1. Check controllers logs: `kubectl -n {{ $labels.controller_namespace }} logs {{ $labels.controller_pod }} -c ingress-nginx-controller`;
        2. Find the newest Ingress in the cluster: `kubectl get ingress --all-namespaces --sort-by="metadata.creationTimestamp"`;
        3. Probably, there is an error in configuration-snippet or server-snippet.
      summary: Config test failed on Nginx Ingress {{ $labels.controller }} in {{ $labels.controller_namespcae }} Namespace.
  - alert: NginxIngressSslWillExpire
    expr: count by (job, controller, class, host, namespace) (nginx_ingress_controller_ssl_expire_time_seconds < (time() + (14 * 24 * 3600)))
    for: 1h
    labels:
      severity_level: "5"
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      description: |-
        SSL certificate for {{ $labels.host }} in {{ $labels.namespace }} will expire in less than 2 weeks.
      summary: Certificate expires soon.
  - alert: NginxIngressSslExpired
    expr: count by (job, controller, class, host, namespace) (nginx_ingress_controller_ssl_expire_time_seconds < time())
    for: 1m
    labels:
      severity_level: "4"
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      description: |-
        SSL certificate for {{ $labels.host }} in {{ $labels.namespace }} has expired.

        https://{{ $labels.host }} version of site doesn't work!
      summary: Certificate has expired.
  - alert: NginxIngressProtobufExporterHasErrors
    expr: sum by (type, node, controller) (increase(protobuf_exporter_errors_total[5m])) > 0
    for: 10m
    labels:
      severity_level: "8"
    annotations:
      plk_markup_format: "markdown"
      plk_protocol_version: "1"
      description: |-
        The Ingress Nginx sidecar container with `protobuf_exporter` has {{ $labels.type }} errors.

        Please, check Ingress controller's logs:
        `kubectl -n d8-ingress-nginx logs $(kubectl -n d8-ingress-nginx get pods -l app=controller,name={{ $labels.controller }} -o wide | grep {{ $labels.node }} | awk '{print $1}') -c protobuf-exporter`.
      summary: The Ingress Nginx sidecar container with `protobuf_exporter` has {{ $labels.type }} errors.
  - alert: D8IngressNginxControllerVersionDeprecated
    expr: sum by (controller_name, controller_version) (d8_ingress_nginx_controller{controller_version=~"0.33|0.46|0.48|0.49"})
    labels:
      tier: cluster
      severity_level: "6"
    annotations:
      plk_protocol_version: "1"
      plk_markup_format: markdown
      description: |-
        Found deprecated Ingress Nginx controller version: {{ $labels.controller_version }} (the `{{ $labels.controller_name }}` IngressNginxController).

        Ingress Nginx controller versions below 1.1 are deprecated and wouldn't work in a cluster with Kubernetes >= 1.22.
        Support for Ingress Nginx controller versions below 1.1 (0.33, 0.46, 0.48, 0.49) will be removed in the Deckhouse 1.40 release. The default Ingress version will be changed to `1.1` in the Deckhouse 1.36 release.

        You can choose one of the following options:
        - If the default Ingress version is used, you can leave everything as it is. The Ingress version will be updated to 1.1 automatically when updating Deckhouse to version 1.36.
        - Explicitly specify Ingress version 1.1 in the `{{ $labels.controller_name }}` IngressNginxController. The Ingress version will be updated to 1.1 immediately, and you won't have to wait for the Deckhouse 1.36 release.
        - If you are using an explicitly specified Ingress version `{{ $labels.controller_version }}` in the `{{ $labels.controller_name }}` IngressNginxController, and won't change it, updating Deckhouse to the 1.40 release will not be possible.

        Ingress Nginx controller versions version 1.1 consumes fewer resources and contains fixes for many bugs, so it is recommended to upgrade to it ASAP.
      summary: >
        Deprecated version of `IngressNginxController` {{ $labels.controller_version }} found.
