Index: internal/ingress/controller/controller.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/ingress/controller/controller.go b/internal/ingress/controller/controller.go
--- a/internal/ingress/controller/controller.go	(revision 14f6b32032b709d3e0f614ca85954c3583c5fe3d)
+++ b/internal/ingress/controller/controller.go	(revision 162b3700db1ddf75248d683f03162dd247f5610d)
@@ -611,7 +611,7 @@
 					continue
 				}

-				upsName := upstreamName(ing.Namespace, path.Backend.Service)
+				upsName := upstreamName(ing.Namespace, ing.Name, path.Backend.Service)

 				ups := upstreams[upsName]

@@ -836,10 +836,11 @@

 		var defBackend string
 		if ing.Spec.DefaultBackend != nil && ing.Spec.DefaultBackend.Service != nil {
-			defBackend = upstreamName(ing.Namespace, ing.Spec.DefaultBackend.Service)
+			defBackend = upstreamName(ing.Namespace, ing.Name, ing.Spec.DefaultBackend.Service)

 			klog.V(3).Infof("Creating upstream %q", defBackend)
 			upstreams[defBackend] = newUpstream(defBackend)
+			upstreams[defBackend].Ingress = &ing.Ingress

 			upstreams[defBackend].UpstreamHashBy.UpstreamHashBy = anns.UpstreamHashBy.UpstreamHashBy
 			upstreams[defBackend].UpstreamHashBy.UpstreamHashBySubset = anns.UpstreamHashBy.UpstreamHashBySubset
@@ -902,7 +903,7 @@
 					continue
 				}

-				name := upstreamName(ing.Namespace, path.Backend.Service)
+				name := upstreamName(ing.Namespace, ing.Name, path.Backend.Service)
 				svcName, svcPort := upstreamServiceNameAndPort(path.Backend.Service)
 				if _, ok := upstreams[name]; ok {
 					continue
@@ -911,6 +912,7 @@
 				klog.V(3).Infof("Creating upstream %q", name)
 				upstreams[name] = newUpstream(name)
 				upstreams[name].Port = svcPort
+				upstreams[name].Ingress = &ing.Ingress

 				upstreams[name].UpstreamHashBy.UpstreamHashBy = anns.UpstreamHashBy.UpstreamHashBy
 				upstreams[name].UpstreamHashBy.UpstreamHashBySubset = anns.UpstreamHashBy.UpstreamHashBySubset
@@ -1137,7 +1139,7 @@
 		}

 		if ing.Spec.DefaultBackend != nil && ing.Spec.DefaultBackend.Service != nil {
-			defUpstream := upstreamName(ing.Namespace, ing.Spec.DefaultBackend.Service)
+			defUpstream := upstreamName(ing.Namespace, ing.Name, ing.Spec.DefaultBackend.Service)

 			if backendUpstream, ok := upstreams[defUpstream]; ok {
 				// use backend specified in Ingress as the default backend for all its rules
@@ -1411,7 +1413,7 @@

 	// merge catch-all alternative backends
 	if ing.Spec.DefaultBackend != nil {
-		upsName := upstreamName(ing.Namespace, ing.Spec.DefaultBackend.Service)
+		upsName := upstreamName(ing.Namespace, ing.Name, ing.Spec.DefaultBackend.Service)

 		altUps := upstreams[upsName]

@@ -1459,7 +1461,7 @@
 				continue
 			}

-			upsName := upstreamName(ing.Namespace, path.Backend.Service)
+			upsName := upstreamName(ing.Namespace, ing.Name, path.Backend.Service)

 			altUps := upstreams[upsName]

Index: internal/ingress/controller/nginx.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/ingress/controller/nginx.go b/internal/ingress/controller/nginx.go
--- a/internal/ingress/controller/nginx.go	(revision 14f6b32032b709d3e0f614ca85954c3583c5fe3d)
+++ b/internal/ingress/controller/nginx.go	(revision 162b3700db1ddf75248d683f03162dd247f5610d)
@@ -38,6 +38,8 @@
 	proxyproto "github.com/armon/go-proxyproto"
 	"github.com/eapache/channels"
 	apiv1 "k8s.io/api/core/v1"
+	networking "k8s.io/api/networking/v1"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/util/intstr"
 	"k8s.io/apimachinery/pkg/util/sets"
 	"k8s.io/client-go/kubernetes/scheme"
@@ -922,8 +924,12 @@

 	for i, backend := range rawBackends {
 		var service *apiv1.Service
+		var networkingIngress *networking.Ingress
 		if backend.Service != nil {
-			service = &apiv1.Service{Spec: backend.Service.Spec}
+			service = &apiv1.Service{ObjectMeta: metav1.ObjectMeta{Name: backend.Service.ObjectMeta.Name}, Spec: backend.Service.Spec}
+		}
+		if backend.Ingress != nil {
+			networkingIngress = &networking.Ingress{ObjectMeta: metav1.ObjectMeta{Name: backend.Ingress.ObjectMeta.Name}}
 		}
 		luaBackend := &ingress.Backend{
 			Name:                 backend.Name,
@@ -933,6 +939,7 @@
 			UpstreamHashBy:       backend.UpstreamHashBy,
 			LoadBalancing:        backend.LoadBalancing,
 			Service:              service,
+			Ingress:              networkingIngress,
 			NoServer:             backend.NoServer,
 			TrafficShapingPolicy: backend.TrafficShapingPolicy,
 			AlternativeBackends:  backend.AlternativeBackends,
Index: internal/ingress/controller/util.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/ingress/controller/util.go b/internal/ingress/controller/util.go
--- a/internal/ingress/controller/util.go	(revision 14f6b32032b709d3e0f614ca85954c3583c5fe3d)
+++ b/internal/ingress/controller/util.go	(revision 162b3700db1ddf75248d683f03162dd247f5610d)
@@ -47,13 +47,13 @@
 }

 // upstreamName returns a formatted upstream name based on namespace, service, and port
-func upstreamName(namespace string, service *networking.IngressServiceBackend) string {
+func upstreamName(namespace string, ingress string, service *networking.IngressServiceBackend) string {
 	if service != nil {
 		if service.Port.Number > 0 {
-			return fmt.Sprintf("%s-%s-%d", namespace, service.Name, service.Port.Number)
+			return fmt.Sprintf("%s-%s-%s-%d", namespace, ingress, service.Name, service.Port.Number)
 		}
 		if service.Port.Name != "" {
-			return fmt.Sprintf("%s-%s-%s", namespace, service.Name, service.Port.Name)
+			return fmt.Sprintf("%s-%s-%s-%s", namespace, ingress, service.Name, service.Port.Name)
 		}
 	}
 	return fmt.Sprintf("%s-INVALID", namespace)
Index: internal/ingress/types.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/ingress/types.go b/internal/ingress/types.go
--- a/internal/ingress/types.go	(revision 14f6b32032b709d3e0f614ca85954c3583c5fe3d)
+++ b/internal/ingress/types.go	(revision 162b3700db1ddf75248d683f03162dd247f5610d)
@@ -84,6 +84,7 @@
 	// Name represents an unique apiv1.Service name formatted as <namespace>-<name>-<port>
 	Name    string             `json:"name"`
 	Service *apiv1.Service     `json:"service,omitempty"`
+	Ingress *networking.Ingress `json:"ingress,omitempty"`
 	Port    intstr.IntOrString `json:"port"`
 	// SSLPassthrough indicates that Ingress controller will delegate TLS termination to the endpoints.
 	SSLPassthrough bool `json:"sslPassthrough"`
Index: internal/ingress/zz_generated.deepcopy.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/ingress/zz_generated.deepcopy.go b/internal/ingress/zz_generated.deepcopy.go
--- a/internal/ingress/zz_generated.deepcopy.go	(revision 14f6b32032b709d3e0f614ca85954c3583c5fe3d)
+++ b/internal/ingress/zz_generated.deepcopy.go	(revision 162b3700db1ddf75248d683f03162dd247f5610d)
@@ -23,6 +23,7 @@

 import (
 	v1 "k8s.io/api/core/v1"
+	networking "k8s.io/api/networking/v1"
 )

 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
@@ -32,6 +33,11 @@
 		in, out := &in.Service, &out.Service
 		*out = new(v1.Service)
 		(*in).DeepCopyInto(*out)
+	}
+	if in.Ingress != nil {
+		in, out := &in.Ingress, &out.Ingress
+		*out = new(networking.Ingress)
+		(*in).DeepCopyInto(*out)
 	}
 	out.Port = in.Port
 	if in.Endpoints != nil {
