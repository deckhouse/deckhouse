#!/bin/bash

# Copyright 2021 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

CHAIN_NAME="ingress-failover"
JUMP_RULE="-p tcp -m multiport --dports 80,443 -m addrtype --dst-type LOCAL -j $CHAIN_NAME"
SOCKET_EXISTS_RULE="-m socket --nowildcard -m mark ! --mark 3 -j RETURN"
MARK_HTTP_RULE="-p tcp --dport 80 -j CONNMARK --set-mark 3"
MARK_HTTPS_RULE="-p tcp --dport 443 -j CONNMARK --set-mark 3"
SAVE_MARK_RULE="-j CONNMARK --save-mark"
RESTORE_HTTP_MARK_RULE="-p tcp --dport 80 -j CONNMARK --restore-mark"
RESTORE_HTTPS_MARK_RULE="-p tcp --dport 443 -j CONNMARK --restore-mark"
DNAT_HTTP_RULE="-p tcp --dport 80 -j DNAT --to-destination 169.254.20.11:81"
DNAT_HTTPS_RULE="-p tcp --dport 443 -j DNAT --to-destination 169.254.20.11:444"
INPUT_ACCEPT_RULE="-p tcp -m multiport --dport 81,444 -d 169.254.20.11 -m comment --comment ingress-failover -j ACCEPT"
DEV_NAME=ingressfailover
# Initialization

# check if interface exists
if ! $(ip addr show "$DEV_NAME" >/dev/null 2>&1); then
  ip link add "$DEV_NAME" type dummy
fi
# check if address set
if ! $(ip addr show "$DEV_NAME" | grep -q "169.254.20.11/32"); then
  ip addr add 169.254.20.11/32 dev "$DEV_NAME"
fi


# during the failover rollout remove failover-jump-rule setting all traffic to primary
iptables -w -t nat -C PREROUTING $JUMP_RULE >/dev/null 2>&1 && iptables -w -t nat -D PREROUTING $JUMP_RULE >/dev/null 2>&1

# check chain exists and 81/444 ports accepted
iptables -w -t nat -n --list "$CHAIN_NAME" >/dev/null 2>&1 || iptables -w -t nat -N "$CHAIN_NAME"
iptables -w -C INPUT $INPUT_ACCEPT_RULE >/dev/null 2>&1 || iptables -w -I INPUT 1 $INPUT_ACCEPT_RULE

# restore conn mark
iptables -w -t mangle -C PREROUTING $RESTORE_HTTP_MARK_RULE >/dev/null 2>&1 || iptables -w -t mangle -I PREROUTING 1 $RESTORE_HTTP_MARK_RULE
iptables -w -t mangle -C PREROUTING $RESTORE_HTTPS_MARK_RULE >/dev/null 2>&1 || iptables -w -t mangle -I PREROUTING 2 $RESTORE_HTTPS_MARK_RULE

# flush and fill ingress-failover chain
iptables -w -t nat -F "$CHAIN_NAME"
iptables -w -t nat -I "$CHAIN_NAME" 1 $SOCKET_EXISTS_RULE
iptables -w -t nat -I "$CHAIN_NAME" 2 $MARK_HTTP_RULE
iptables -w -t nat -I "$CHAIN_NAME" 3 $MARK_HTTPS_RULE
iptables -w -t nat -I "$CHAIN_NAME" 4 $SAVE_MARK_RULE
iptables -w -t nat -I "$CHAIN_NAME" 5 $DNAT_HTTP_RULE
iptables -w -t nat -I "$CHAIN_NAME" 6 $DNAT_HTTPS_RULE

# restore jump-rule
iptables -w -t nat -C PREROUTING $JUMP_RULE >/dev/null 2>&1 || iptables -w -t nat -I PREROUTING 1 $JUMP_RULE

echo "Initialization complete"
echo "Starting check loop"

# check primary controller, if health check failed - remove RETURN rule
while true; do
  code=$(wget --server-response http://127.0.0.1:10254/healthz 2>&1 | awk '/^  HTTP/{print $2}')

  if [ -n "$code" ] && [ "$code" -eq 200 ]; then
    iptables -w -t nat -C "$CHAIN_NAME" $SOCKET_EXISTS_RULE >/dev/null 2>&1 || iptables -w -t nat -I "$CHAIN_NAME" 1 $SOCKET_EXISTS_RULE
  else
    iptables -w -t nat -C "$CHAIN_NAME" $SOCKET_EXISTS_RULE >/dev/null 2>&1 && iptables -w -t nat -D "$CHAIN_NAME" 1
  fi

  sleep 15
done
