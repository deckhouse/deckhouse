{{- $controllerBranch := "controller-v1.10.4" }}

---
image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
fromImage: common/src-artifact
final: false
git:
- add: /{{ $.ModulePath }}modules/{{ $.ModulePriority }}-{{ $.ModuleName }}/images/{{ $.ImageName }}/patches
  to: /patches
  stageDependencies:
    install:
      - '**/*'
- add: /{{ $.ModulePath }}modules/{{ $.ModulePriority }}-{{ $.ModuleName }}/images/{{ $.ImageName }}/rootfs
  to: /src/rootfs
  stageDependencies:
    install:
      - '**/*'
- add: /{{ $.ModulePath }}modules/{{ $.ModulePriority }}-{{ $.ModuleName }}/images/{{ $.ImageName }}/curl-chroot-wrapper.sh
  to: /src/curl-chroot-wrapper.sh
  stageDependencies:
    install:
      - '**/*'
- add: /{{ $.ModulePath }}modules/{{ $.ModulePriority }}-{{ $.ModuleName }}/images/{{ $.ImageName }}/nginx-chroot-wrapper.sh
  to: /src/nginx-chroot-wrapper.sh
  stageDependencies:
    install:
      - '**/*'
shell:
  beforeInstall:
  {{- include "alt packages proxy" . | nindent 2 }}
  - apt-get install patch
  setup:
  - mkdir -p /src
  - cd /src
  - git clone --branch v1.2.5 --depth 1 {{ $.SOURCE_REPO }}/yelp/dumb-init.git
  - git clone --branch 0.5.1 {{ $.SOURCE_REPO }}/starwing/lua-protobuf
  - git clone --branch 7-3 {{ $.SOURCE_REPO }}/luarocks-sorces/lua-iconv
  - git clone --branch {{ $controllerBranch }} --depth 1 {{$.SOURCE_REPO}}/kubernetes/ingress-nginx.git
  - cd /src/ingress-nginx
  - patch -p1 < /patches/004-lua-info.patch
  - patch -p1 < /patches/001-go-mod.patch
  - patch -p1 < /patches/005-makefile.patch
  - patch -p1 < /patches/002-healthcheck.patch
  - patch -p1 < /patches/006-metrics-SetSSLExpireTime.patch
  - patch -p1 < /patches/008-util.patch
  - patch -p1 < /patches/009-fix-cleanup.patch
  - patch -p1 < /patches/011-add-http3.patch
  - patch -p1 < /patches/010-nginx-build.patch
  - patch -p1 < /patches/012-new-metrics.patch
  - patch -p1 < /patches/013-default-backend-fix.patch
  - cd /src/ingress-nginx/rootfs
  - patch -p1 < /patches/014-balancer-lua.patch
  - patch -p1 < /patches/003-nginx-tmpl.patch
  - patch -p1 < /patches/007-auth-cookie-always.patch
  # pass env for build
  - cd /src/ingress-nginx
  - echo "export COMMIT_SHA=git-$(git rev-parse --short HEAD)" > .env_pass
  - echo "export REPO_INFO=$(git config --get remote.origin.url)" >> .env_pass
  - echo "export TAG=$(git describe --tags --always)" >> .env_pass
  - rm -rf /src/dumb-init/.git   
  - rm -rf /src/lua-protobuf/.git   
  - rm -rf /src/lua-iconv/.git   
  - rm -rf /src/ingress-nginx/.git   
  
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-dumb-init-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/dumb-init
  to: /src
  before: install
shell:
  beforeInstall:
  - apt-get install -y gcc glibc-core glibc-devel-static
  setup:
  - cd /src/
  - cc -std=gnu99 -static -s -Wall -Werror -O3 -o dumb-init dumb-init.c
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-lua-rocks-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/lua-protobuf
  to: /src/lua-protobuf
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/lua-iconv
  to: /src/lua-iconv
  before: install
shell:
  install:
  {{- include "alt packages proxy" . | nindent 2 }}
  - apt-get install -y gcc lua5.1-devel lua5.1 lua5.1-luarocks
  - apt-get install -y liblua5.1-devel --download-only
  setup:
  - cd /src/lua-protobuf
  - luarocks-5.1 make rockspecs/lua-protobuf-scm-1.rockspec
  - cd /src/lua-iconv
  - luarocks-5.1 install lua-iconv-7-3.src.rock
---
image: {{ .ModuleName }}/{{ $.ImageName }}-controller-artifact
from: {{ .Images.BASE_GOLANG_23_ALPINE }}
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/ingress-nginx
  to: /src
  before: install
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
shell:
  install:
  {{- include "alpine packages proxy" . | nindent 2 }}
  # git needs for getting tag and commit sha for build purposes
  - apk --no-cache add make bash git
  setup:
  - export GOPROXY={{ $.GOPROXY }}
  - export GOARCH=amd64
  - export PKG="k8s.io/ingress-nginx"
  - cd /src/
  - |
    source /src/.env_pass && \
    echo "Loaded: COMMIT_SHA=$COMMIT_SHA, REPO_INFO=$REPO_INFO, ARCH=$GOARCH, PKG=$PKG TAG=$TAG" && \
    make GO111MODULE=on USE_DOCKER=false build
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-nginx-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/ingress-nginx/images/nginx-1.25/rootfs/
  to: /
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/rootfs/etc
  to: /src/etc
  before: install
shell:
  install:
  # git needs for getting dependencies from our repo
  - apt-get install -y liblua5.3-devel lua5.3 libaio-devel libaom3 libbrotli-devel libcap-utils libcurl-devel libgrpc++-devel libgrpc++ libre2-devel libre2 libgrpc libgrpc-devel libssl-devel libmaxminddb libmaxminddb-devel libpcre-devel libpcre16 git cmake ninja-build libabseil-cpp-devel build-essential libgrpc-devel libprotobuf-devel grpc-plugins openssl libpcre2-devel libcares-devel
  - apt-get install -y liblua5.1-devel --download-only
  setup:
  - export SOURCE_REPO={{ $.SOURCE_REPO }}
  - git config --global url."{{ .SOURCE_REPO }}".insteadOf https://github.com
  - cp -R /src/etc/* /etc/
  - rm -rf /src/etc
  - /build.sh
---
image: {{ $.ModuleName }}/{{ $.ImageName }}-chroot-artifact
fromImage: common/alt-p11-artifact
final: false
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-nginx-artifact
  add: /usr/local
  to: /usr/local
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-nginx-artifact
  add: /opt
  to: /opt
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-nginx-artifact
  add: /etc/nginx
  to: /etc/nginx
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-nginx-artifact
  add: /usr/lib
  to: /chroot/usr/lib64
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-dumb-init-artifact
  add: /src/dumb-init
  to: /usr/bin/dumb-init
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-lua-rocks-artifact
  add: /usr/lib64/lua/5.1/iconv.so
  to: /usr/local/lib/lua/5.1/iconv.so
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-lua-rocks-artifact
  add: /usr/lib64/lua/5.1/pb.so
  to: /usr/local/lib/lua/5.1/pb.so
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-lua-rocks-artifact
  add: /usr/share/lua/5.1/protoc.lua
  to: /usr/local/share/lua/5.1/protoc.lua
  before: install
- image: {{ $.ModuleName }}/{{ $.ImageName }}-controller-artifact
  add: /src/rootfs/etc
  to: /src/rootfs/etc
  before: install
shell:
  install:
  {{- include "alt packages proxy" . | nindent 2 }}
  - apt-get -y install ca-certificates curl libxml2-devel libyajl libyajl-devel libmaxminddb libmaxminddb-devel iptables iptables-nft nfs-utils conntrack-tools glibc-gconv-modules libgrpc++-devel libgrpc++ libbrotli-devel libpcre-devel
  setup:
  - cp -R /usr/lib64 /chroot/usr/lib64
  - ln -s /usr/local/nginx/sbin/nginx /sbin/nginx
  - adduser -r -U -u 101 -d /usr/local/nginx -s /sbin/nologin -c www-data www-data
  - |
    bash -eu -c '
    writeDirs=(
      /chroot/etc/nginx
      /chroot/usr/local/nginx
      /chroot/usr/share
      /chroot/usr/bin
      /chroot/etc/ingress-controller
      /chroot/etc/ingress-controller/ssl
      /chroot/etc/ingress-controller/auth
      /chroot/etc/ingress-controller/telemetry
      /chroot/etc/ingress-controller/geoip
      /chroot/opt/modsecurity/var/log
      /chroot/opt/modsecurity/var/upload
      /chroot/opt/modsecurity/var/audit
      /chroot/var/log/audit
      /chroot/var/lib/nginx
      /chroot/var/log/nginx
      /chroot/var/lib/nginx/body
      /chroot/var/lib/nginx/fastcgi
      /chroot/var/lib/nginx/proxy
      /chroot/var/lib/nginx/scgi
      /chroot/var/lib/nginx/uwsgi
      /chroot/tmp/nginx
    );
    for dir in "${writeDirs[@]}"; do
      mkdir -p ${dir};
      chown -R www-data:www-data ${dir};
    done'
  - mkdir -p /chroot/lib /chroot/lib64 /chroot/proc /chroot/usr /chroot/bin /chroot/dev /chroot/run /chroot/usr/lib64 /chroot/usr/local/modsecurity /chroot/usr/local/share
  - cp /etc/passwd /etc/group /etc/hosts /chroot/etc/
  # Create opentelemetry.toml file as it doesn't present in controller_image
  - touch /chroot/etc/nginx/opentelemetry.toml /chroot/etc/ingress-controller/telemetry/opentelemetry.toml
  - chown -R www-data:www-data /chroot/etc/nginx/opentelemetry.toml /chroot/etc/ingress-controller/telemetry/opentelemetry.toml
  - cp -a /etc/pki /chroot/etc/pki
  - cp -a /usr/share/ca-certificates /chroot/usr/share/ca-certificates
  - cp -a /usr/bin/curl /chroot/usr/bin/curl
  - cp -a /lib64/* /chroot/lib64/
  - rm -rf /chroot/lib64/apt /chroot/lib64/debug /chroot/lib64/games
  - cp -a /usr/lib64/libcurl* /chroot/usr/lib64/
  - cp -a /usr/lib64/libstdc++* /chroot/usr/lib64/
  - cp -a /usr/lib64/libbrotli* /chroot/usr/lib64/
  - cp -a /usr/lib64/libxml2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libyajl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libmaxminddb.* /chroot/usr/lib64/
  - cp -a /usr/lib64/libgsasl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnfnetlink.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libntlm.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnetfilter_conntrack.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libnghttp2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libpsl.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libssh2.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/gconv /chroot/usr/lib64/
  - cp -a /usr/lib64/libgrpc++.so* /chroot/usr/lib64/
  - cp -a /usr/lib64/libpcre.so* /chroot/usr/lib64/
  - cp -a /etc/nginx/* /chroot/etc/nginx/
  - cp -a /usr/local/bin /chroot/usr/local/
  - cp -a /usr/local/lib /chroot/usr/local/
  - cp -a /usr/local/share/lua* /chroot/usr/local/share/
  - cp -a /usr/local/lib64 /chroot/usr/local/
  - cp -a /usr/local/modsecurity/bin /chroot/usr/local/modsecurity/
  - cp -a /usr/local/modsecurity/lib/libmodsecurity.* /chroot/usr/lib64/
  - cp -a /usr/local/nginx /chroot/usr/local/
  - chown www-data:www-data /chroot/etc
  - cp -R /src/rootfs/etc/* /chroot/etc
  - rm -rf /src/rootfs/etc
---
image: {{ $.ModuleName }}/{{ $.ImageName }}
fromImage: common/alt-p11-artifact
import:
- image: {{ $.ModuleName }}/{{ $.ImageName }}-chroot-artifact
  add: /chroot
  to: /chroot
  before: setup
- image: {{ $.ModuleName }}/{{ $.ImageName }}-controller-artifact
  add: /src/rootfs/bin/amd64/dbg
  to: /dbg
  before: setup
- image: {{ $.ModuleName }}/{{ $.ImageName }}-controller-artifact
  add: /src/rootfs/bin/amd64/nginx-ingress-controller
  to: /nginx-ingress-controller
  before: setup
- image: {{ $.ModuleName }}/{{ $.ImageName }}-controller-artifact
  add: /src/rootfs/bin/amd64/wait-shutdown
  to: /wait-shutdown
  before: setup
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/curl-chroot-wrapper.sh
  to: /usr/bin/curl
  before: setup
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/nginx-chroot-wrapper.sh
  to: /usr/bin/nginx
  before: setup
- image: {{ $.ModuleName }}/{{ $.ImageName }}-dumb-init-artifact
  add: /src/dumb-init
  to: /usr/bin/dumb-init
  before: setup
- image: {{ $.ModuleName }}/{{ $.ImageName }}-src-artifact
  add: /src/rootfs/etc
  to: /src/rootfs/etc
  before: setup
shell:
  setup:
  - export PATH="$PATH:/usr/local/luajit/bin:/usr/local/nginx/sbin:/usr/local/nginx/bin"
  - export LUA_PATH="/usr/local/share/luajit-2.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;;"
  - export LUA_CPATH="/usr/local/lib/lua/?/?.so;/usr/local/lib/lua/?.so;;"
  - cp -R /src/rootfs/etc/* /chroot/etc
  - rm -rf /src/rootfs/etc/
  - ln -s /usr/local/nginx/sbin/nginx /sbin/nginx
  - adduser -r -U -u 101 -d /usr/local/nginx -s /sbin/nologin -c www-data www-data
  - chown www-data:www-data /usr/bin/nginx
  - chown www-data:www-data /usr/bin/curl
  - chown www-data:www-data /chroot/etc
  - chmod 1777 /tmp
  - setcap     cap_sys_chroot,cap_net_bind_service=+ep /nginx-ingress-controller
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /nginx-ingress-controller
  - setcap    cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/unshare
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/unshare
  - setcap    cap_net_bind_service=+ep /chroot/usr/local/nginx/sbin/nginx
  - setcap -v cap_net_bind_service=+ep /chroot/usr/local/nginx/sbin/nginx
  - setcap    cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/dumb-init
  - setcap -v cap_sys_chroot,cap_net_bind_service=+ep /usr/bin/dumb-init
  - rm -rf /etc/pki
  - ln -sf /chroot/etc/pki /etc/pki
  - ln -sf /chroot/usr/share/ca-certificates /usr/share/ca-certificates
  - ln -sf /chroot/etc/nginx /etc/nginx
  - ln -sf /chroot/tmp/nginx /tmp/nginx
  - ln -sf /chroot/etc/ingress-controller /etc/ingress-controller
  - ln -sf /chroot/var/log/nginx /var/log/nginx
  - touch /chroot/var/log/nginx/access.log
  - chown www-data:www-data /chroot/var/log/nginx/access.log
  - echo "" > /chroot/etc/resolv.conf
  - chown -R www-data:www-data /var/log /chroot/var/log /chroot/etc/resolv.conf
  - mknod -m 0666 /chroot/dev/null c 1 3
  - mknod -m 0666 /chroot/dev/random c 1 8
  - mknod -m 0666 /chroot/dev/urandom c 1 9
  - mknod -m 0666 /chroot/dev/full c 1 7
  - mknod -m 0666 /chroot/dev/ptmx c 5 2
  - mknod -m 0666 /chroot/dev/zero c 1 5
  - mknod -m 0666 /chroot/dev/tty c 5 0
  - echo -e "/lib\n/lib64\n/usr/local/lib\n/usr/local/lib64\n/etc/nginx/modules" > /etc/ld.so.conf.d/local.conf
  - ldconfig
# Create ld.so.cache inside chroot
  - cp -a /etc/ld.so.conf* /chroot/etc/ && ldconfig -r /chroot
# remove ruby from libs because it has cve's but not using in image
# ruby install with grpc-plugins packet it needs for building nginx
  - rm -rf /chroot/usr/lib64/ruby
# remove owasp-modsecurity-crs/util bash scripts cve
  - rm -rf /chroot/etc/nginx/owasp-modsecurity-crs
imageSpec:
  config:
    workingDir: /
    user: "www-data"
    expose: ["80", "443"]
    entrypoint: ["/usr/bin/dumb-init", "--"]
    cmd: ["/nginx-ingress-controller"]
    env: { "PATH": "$PATH:/usr/local/luajit/bin:/usr/local/nginx/sbin:/usr/local/nginx/bin", "LUA_PATH": "/usr/local/share/luajit-2.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/lib/lua/?.lua;;", "LUA_CPATH": "/usr/local/lib/lua/?/?.so;/usr/local/lib/lua/?.so;;" }
