diff --git i/internal/ingress/controller/config/config.go w/internal/ingress/controller/config/config.go
index 3098f5cba..7b6ed4ff8 100644
--- i/internal/ingress/controller/config/config.go
+++ w/internal/ingress/controller/config/config.go
@@ -454,6 +454,11 @@ type Configuration struct {
 	// Default: true
 	UseHTTP2 bool `json:"use-http2,omitempty"`
 
+	// Enables or disables the HTTP/3 support in secure connections
+	// https://nginx.org/ru/docs/http/ngx_http_v3_module.html
+	// Default: true
+	UseHTTP3 bool `json:"use-http3,omitempty"`
+
 	// Disables gzipping of responses for requests with "User-Agent" header fields matching any of
 	// the specified regular expressions.
 	// http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_disable
@@ -846,6 +851,7 @@ func NewDefault() Configuration {
 		VariablesHashBucketSize:          256,
 		VariablesHashMaxSize:             2048,
 		UseHTTP2:                         true,
+		UseHTTP3:                         false,
 		DisableProxyInterceptErrors:      false,
 		ProxyStreamTimeout:               "600s",
 		ProxyStreamNextUpstream:          true,
diff --git i/internal/ingress/controller/template/template.go w/internal/ingress/controller/template/template.go
index 8628f8090..9e73e9e92 100644
--- i/internal/ingress/controller/template/template.go
+++ w/internal/ingress/controller/template/template.go
@@ -290,6 +290,7 @@ var funcMap = text_template.FuncMap{
 	"shouldLoadModSecurityModule":        shouldLoadModSecurityModule,
 	"buildHTTPListener":                  buildHTTPListener,
 	"buildHTTPSListener":                 buildHTTPSListener,
+	"buildHTTP3Listener":                 buildHTTP3Listener,
 	"buildOpentelemetryForLocation":      buildOpentelemetryForLocation,
 	"shouldLoadOpentelemetryModule":      shouldLoadOpentelemetryModule,
 	"buildModSecurityForLocation":        buildModSecurityForLocation,
@@ -1394,7 +1395,7 @@ func buildHTTPListener(t, s interface{}) string {
 		addrV4 = tc.Cfg.BindAddressIpv4
 	}
 
-	co := commonListenOptions(&tc, hostname)
+	co := commonListenOptions(&tc, hostname, false)
 
 	out = append(out, httpListener(addrV4, co, &tc)...)
 
@@ -1427,7 +1428,7 @@ func buildHTTPSListener(t, s interface{}) string {
 		return ""
 	}
 
-	co := commonListenOptions(&tc, hostname)
+	co := commonListenOptions(&tc, hostname, false)
 
 	addrV4 := []string{""}
 	if len(tc.Cfg.BindAddressIpv4) > 0 {
@@ -1450,7 +1451,45 @@ func buildHTTPSListener(t, s interface{}) string {
 	return strings.Join(out, "\n")
 }
 
-func commonListenOptions(template *config.TemplateConfig, hostname string) string {
+func buildHTTP3Listener(t, s interface{}) string {
+	var out []string
+
+	tc, ok := t.(config.TemplateConfig)
+	if !ok {
+		klog.Errorf("expected a 'config.TemplateConfig' type but %T was returned", t)
+		return ""
+	}
+
+	hostname, ok := s.(string)
+	if !ok {
+		klog.Errorf("expected a 'string' type but %T was returned", s)
+		return ""
+	}
+
+	co := commonListenOptions(&tc, hostname, true)
+
+	addrV4 := []string{""}
+	if len(tc.Cfg.BindAddressIpv4) > 0 {
+		addrV4 = tc.Cfg.BindAddressIpv4
+	}
+
+	out = append(out, http3Listener(addrV4, co, &tc)...)
+
+	if !tc.IsIPV6Enabled {
+		return strings.Join(out, "\n")
+	}
+
+	addrV6 := []string{"[::]"}
+	if len(tc.Cfg.BindAddressIpv6) > 0 {
+		addrV6 = tc.Cfg.BindAddressIpv6
+	}
+
+	out = append(out, http3Listener(addrV6, co, &tc)...)
+
+	return strings.Join(out, "\n")
+}
+
+func commonListenOptions(template *config.TemplateConfig, hostname string, useHTTP3 bool) string {
 	var out []string
 
 	if template.Cfg.UseProxyProtocol {
@@ -1469,7 +1508,11 @@ func commonListenOptions(template *config.TemplateConfig, hostname string) strin
 		out = append(out, "reuseport")
 	}
 
-	out = append(out, fmt.Sprintf("backlog=%v", template.BacklogSize))
+	//filter backlog, due to unavailable to use with quic
+	//https://mailman.nginx.org/pipermail/nginx-devel/2024-January/UM73PXAEESYS36KEQTYMA5HSC2GK2C4L.html
+	if !useHTTP3 {
+		out = append(out, fmt.Sprintf("backlog=%v", template.BacklogSize))
+	}
 
 	return strings.Join(out, " ")
 }
@@ -1523,6 +1566,24 @@ func httpsListener(addresses []string, co string, tc *config.TemplateConfig) []s
 	return out
 }
 
+func http3Listener(addresses []string, co string, tc *config.TemplateConfig) []string {
+	out := make([]string, 0)
+	for _, address := range addresses {
+		lo := []string{"listen"}
+
+		if address == "" {
+			lo = append(lo, fmt.Sprintf("%v", tc.ListenPorts.HTTPS))
+		} else {
+			lo = append(lo, fmt.Sprintf("%v:%v", address, tc.ListenPorts.HTTPS))
+		}
+
+		lo = append(lo, "quic", co, ";")
+		out = append(out, strings.Join(lo, " "))
+	}
+
+	return out
+}
+
 func buildOpentelemetryForLocation(isOTEnabled, isOTTrustSet bool, location *ingress.Location) string {
 	isOTEnabledInLoc := location.Opentelemetry.Enabled
 	isOTSetInLoc := location.Opentelemetry.Set
