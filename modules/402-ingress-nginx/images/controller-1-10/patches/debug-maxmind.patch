diff --git a/internal/nginx/maxmind.go b/internal/nginx/maxmind.go
index 3bd895b5d..d62fa4108 100644
--- a/internal/nginx/maxmind.go
+++ b/internal/nginx/maxmind.go
@@ -106,6 +106,7 @@ func DownloadGeoLite2DB(attempts int, period time.Duration) error {
 		for _, dbName := range strings.Split(MaxmindEditionIDs, ",") {
 			dlError = downloadDatabase(dbName)
 			if dlError != nil {
+				klog.Infof("failed to download base for %s: %s", dbName, dlError)
 				break
 			}
 		}
@@ -144,11 +145,13 @@ func downloadDatabase(dbName string) error {
 	if err != nil {
 		return err
 	}
+	klog.Infof("downloading maxmind GeoIP2 base %s by url %s", dbName, newURL)
 
 	resp, err := http.DefaultClient.Do(req)
 	if err != nil {
 		return err
 	}
+	klog.Infof("request is done with status %d", resp.StatusCode)
 
 	defer resp.Body.Close()
 
@@ -158,6 +161,7 @@ func downloadDatabase(dbName string) error {
 
 	archive, err := gzip.NewReader(resp.Body)
 	if err != nil {
+		klog.Infof("create archive reader for base %s failed: %s", dbName, err.Error())
 		return err
 	}
 	defer archive.Close()
@@ -168,27 +172,34 @@ func downloadDatabase(dbName string) error {
 	for {
 		header, err := tarReader.Next()
 		if err == io.EOF {
+			klog.Infof("base %s archive is EOF", dbName)
 			break
 		}
 
 		if err != nil {
+			klog.Infof("read archive for base %s failed: %s", dbName, err.Error())
 			return err
 		}
 
 		if header.Typeflag == tar.TypeReg {
 			if !strings.HasSuffix(header.Name, mmdbFile) {
+				klog.Infof("skip file %s for base %s", header.Name, dbName)
 				continue
 			}
 			return func() error {
 				outFile, err := os.Create(path.Join(geoIPPath, mmdbFile))
 				if err != nil {
+					klog.Infof("cannot create file for base %s in path %s: %s", dbName, path.Join(geoIPPath, mmdbFile), err.Error())
 					return err
 				}
 
 				defer outFile.Close()
 
-				if _, err := io.CopyN(outFile, tarReader, header.Size); err != nil {
+				if nBytes, err := io.CopyN(outFile, tarReader, header.Size); err != nil {
+					klog.Infof("cannot copy file for base %s in path %s: %s", dbName, path.Join(geoIPPath, mmdbFile), err.Error())
 					return err
+				} else {
+					klog.Infof("writing is done for base %s, wrote %d", dbName, nBytes)
 				}
 				return nil
 			}()
