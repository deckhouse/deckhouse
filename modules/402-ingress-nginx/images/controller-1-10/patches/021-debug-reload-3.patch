diff --git a/go.work.sum b/go.work.sum
index 3a38ab8ec..7c9fd83f5 100644
--- a/go.work.sum
+++ b/go.work.sum
@@ -718,6 +718,7 @@ github.com/google/martian v2.1.0+incompatible h1:/CP5g8u/VJHijgedC/Legn3BAbAaWPg
 github.com/google/martian/v3 v3.3.2 h1:IqNFLAmvJOgVlpdEBiQbDc2EwKW77amAycfTuWKdfvw=
 github.com/google/pprof v0.0.0-20210407192527-94a9f03dee38/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=
 github.com/google/pprof v0.0.0-20210720184732-4bb14d4b1be1/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=
+github.com/google/pprof v0.0.0-20240424215950-a892ee059fd6/go.mod h1:kf6iHlnVGwgKolg33glAes7Yg/8iWP8ukqeldJSO7jw=
 github.com/google/renameio v0.1.0 h1:GOZbcHa3HfsPKPlmyPyN2KEohoMXOhdMbHrvbpl2QaA=
 github.com/google/s2a-go v0.1.4 h1:1kZ/sQM3srePvKs3tXAvQzo66XfcReoqFpIpIccE7Oc=
 github.com/google/s2a-go v0.1.7/go.mod h1:50CgR4k1jNlWBu4UfS4AcfhVe1r6pdZPygJ3R8F0Qdw=
@@ -944,6 +945,7 @@ golang.org/x/mobile v0.0.0-20190719004257-d2bd2a29d028 h1:4+4C/Iv2U4fMZBiMCc98MG
 golang.org/x/mod v0.9.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
 golang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
 golang.org/x/mod v0.14.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=
+golang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=
 golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
 golang.org/x/net v0.14.0/go.mod h1:PpSgVXXLK0OxS0F31C1/tv6XNguvCrnXIDrFMspZIUI=
 golang.org/x/net v0.16.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=
@@ -951,6 +953,7 @@ golang.org/x/net v0.18.0/go.mod h1:/czyP5RqHAH4odGYxBJ1qz0+CE5WZ+2j1YgoEo8F2jQ=
 golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=
 golang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=
 golang.org/x/net v0.24.0/go.mod h1:2Q7sJY5mzlzWjKtYUEXSlBWCdyaioyXzRB2RtU8KVE8=
+golang.org/x/net v0.27.0/go.mod h1:dDi0PyhWNoiUOrAS8uXv/vnScO4wnHQO4mj9fn/RytE=
 golang.org/x/oauth2 v0.10.0/go.mod h1:kTpgurOux7LqtuxjuyZa4Gj2gdezIt/jQtGnNFfypQI=
 golang.org/x/oauth2 v0.11.0/go.mod h1:LdF7O/8bLR/qWK9DrpXmbHLTouvRHK0SgJl0GmDBchk=
 golang.org/x/oauth2 v0.13.0/go.mod h1:/JMhi4ZRXAf4HG9LiNmxvk+45+96RUlVThiH8FzNBn0=
@@ -958,18 +961,22 @@ golang.org/x/oauth2 v0.14.0/go.mod h1:lAtNWgaWfL4cm7j2OV8TxGi9Qb7ECORx8DktCY74Ow
 golang.org/x/oauth2 v0.15.0/go.mod h1:q48ptWNTY5XWf+JNten23lcvHpLJ0ZSxF5ttTHKVCAM=
 golang.org/x/oauth2 v0.17.0/go.mod h1:OzPDGQiuQMguemayvdylqddI7qcD9lnSDb+1FiwQ5HA=
 golang.org/x/sync v0.4.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=
+golang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
 golang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20220310020820-b874c991c1a5/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.19.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/sys v0.22.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/telemetry v0.0.0-20240208230135-b75ee8823808/go.mod h1:KG1lNk5ZFNssSZLrpVb4sMXKMpGwGXOxSG3rnu2gZQQ=
 golang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2 h1:IRJeR9r1pYWsHKTRe/IInb7lYvbBVIqOgsX/u0mbOWY=
 golang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=
+golang.org/x/telemetry v0.0.0-20240521205824-bda55230c457/go.mod h1:pRgIJT+bRLFKnoM1ldnzKoxTIn14Yxz928LQRYYgIN0=
 golang.org/x/term v0.18.0/go.mod h1:ILwASektA3OnRv7amZ1xhE/KTR+u50pbXfZ03+6Nx58=
 golang.org/x/term v0.21.0/go.mod h1:ooXLefLobQVslOqselCNF4SxFAaoS6KujMbsGzSDmX0=
 golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.12.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=
+golang.org/x/text v0.16.0/go.mod h1:GhwF1Be+LQoKShO3cGOHzqOgRrGaYc9AvblQOmPVHnI=
 golang.org/x/time v0.3.0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
 golang.org/x/tools v0.4.0/go.mod h1:UE5sM2OK9E/d67R0ANs2xJizIymRP5gJU295PvKXxjQ=
 golang.org/x/tools v0.12.0/go.mod h1:Sc0INKfu04TlqNoRA1hgpFZbhYXHPr4V5DzpSBTPqQM=
@@ -977,6 +984,8 @@ golang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58
 golang.org/x/tools v0.16.1/go.mod h1:kYVVN6I1mBNoB1OX+noeBjbRk4IUEPa7JJ+TJMEooJ0=
 golang.org/x/tools v0.18.0/go.mod h1:GL7B4CwcLLeo59yx/9UWWuNOW1n3VZ4f5axWfML7Lcg=
 golang.org/x/tools v0.20.0/go.mod h1:WvitBU7JJf6A4jOdg4S1tviW9bhUxkgeCui/0JHctQg=
+golang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=
+golang.org/x/tools v0.23.0/go.mod h1:pnu6ufv6vQkll6szChhK3C3L/ruaIv5eBeztNG8wtsI=
 golang.org/x/xerrors v0.0.0-20220907171357-04be3eba64a2 h1:H2TDz8ibqkAF6YGhCdN3jS9O0/s90v0rJh3X/OLHEUk=
 golang.org/x/xerrors v0.0.0-20220907171357-04be3eba64a2/go.mod h1:K8+ghG5WaK9qNqU5K3HdILfMLy1f3aNYFI/wnl100a8=
 golang.org/x/xerrors v0.0.0-20231012003039-104605ab7028/go.mod h1:NDW/Ps6MPRej6fsCIbMTohpP40sJ/P/vI1MoTEGwX90=
diff --git a/pkg/apis/ingress/types_equals.go b/pkg/apis/ingress/types_equals.go
index eeed9a06e..fb588ae4b 100644
--- a/pkg/apis/ingress/types_equals.go
+++ b/pkg/apis/ingress/types_equals.go
@@ -17,49 +17,60 @@ limitations under the License.
 package ingress
 
 import (
+	"fmt"
+
 	"k8s.io/ingress-nginx/pkg/util/sets"
 )
 
 // Equal tests for equality between two Configuration types
 func (c1 *Configuration) Equal(c2 *Configuration) bool {
 	if c1 == c2 {
+		fmt.Println("CONFIG: c1=c2")
 		return true
 	}
 	if c1 == nil || c2 == nil {
+		fmt.Println("CONFIG: c1 or c2 is nil")
 		return false
 	}
 
 	if !c1.DefaultSSLCertificate.Equal(c2.DefaultSSLCertificate) {
+		fmt.Println("CONFIG: default ssl certs aren't equal")
 		return false
 	}
 
 	match := compareBackends(c1.Backends, c2.Backends)
 	if !match {
+		fmt.Println("CONFIG: backends don't match")
 		return false
 	}
 
 	if len(c1.Servers) != len(c2.Servers) {
+		fmt.Println("CONFIG: servers lengts don't match")
 		return false
 	}
 
 	// Servers are sorted
 	for idx, c1s := range c1.Servers {
 		if !c1s.Equal(c2.Servers[idx]) {
+			fmt.Printf("CONFIG: server %s doesn't match %s\n", c1s.Hostname, c2.Servers[idx].Hostname)
 			return false
 		}
 	}
 
 	match = compareL4Service(c1.TCPEndpoints, c2.TCPEndpoints)
 	if !match {
+		fmt.Printf("CONFIG: l4 tcp endpoints don't match")
 		return false
 	}
 
 	match = compareL4Service(c1.UDPEndpoints, c2.UDPEndpoints)
 	if !match {
+		fmt.Printf("CONFIG: l4 udp endpoints don't match")
 		return false
 	}
 
 	if len(c1.PassthroughBackends) != len(c2.PassthroughBackends) {
+		fmt.Printf("CONFIG: passthrough backends don't match")
 		return false
 	}
 
@@ -72,10 +83,13 @@ func (c1 *Configuration) Equal(c2 *Configuration) bool {
 			}
 		}
 		if !found {
+			fmt.Printf("CONFIG: passthrough backends don't match 2")
 			return false
 		}
 	}
 
+	fmt.Printf("CONFIG: BackendConfigChecksums match %b\n", c1.BackendConfigChecksum == c2.BackendConfigChecksum)
+
 	return c1.BackendConfigChecksum == c2.BackendConfigChecksum
 }
 
@@ -269,19 +283,24 @@ func (s1 *Server) Equal(s2 *Server) bool {
 		return true
 	}
 	if s1 == nil || s2 == nil {
+		fmt.Println("CONFIG SERVER: nil")
 		return false
 	}
 	if s1.Hostname != s2.Hostname {
+		fmt.Println("CONFIG SERVER: hostame")
 		return false
 	}
 	if s1.SSLPassthrough != s2.SSLPassthrough {
+		fmt.Println("CONFIG SERVER: ssl passtrough")
 		return false
 	}
 	if !s1.SSLCert.Equal(s2.SSLCert) {
+		fmt.Println("CONFIG SERVER: ssl cert")
 		return false
 	}
 
 	if len(s1.Aliases) != len(s2.Aliases) {
+		fmt.Println("CONFIG SERVER: len aliases")
 		return false
 	}
 
@@ -294,39 +313,49 @@ func (s1 *Server) Equal(s2 *Server) bool {
 			}
 		}
 		if !found {
+		fmt.Println("CONFIG SERVER: aliases")
 			return false
 		}
 	}
 
 	if s1.RedirectFromToWWW != s2.RedirectFromToWWW {
+		fmt.Println("CONFIG SERVER: redirect from to www")
 		return false
 	}
 	if !(&s1.CertificateAuth).Equal(&s2.CertificateAuth) {
+		fmt.Println("CONFIG SERVER: auth cert")
 		return false
 	}
 	if s1.ServerSnippet != s2.ServerSnippet {
+		fmt.Println("CONFIG SERVER: serv snippet")
 		return false
 	}
 	if s1.SSLCiphers != s2.SSLCiphers {
+		fmt.Println("CONFIG SERVER: ssl cipher")
 		return false
 	}
 	if s1.SSLPreferServerCiphers != s2.SSLPreferServerCiphers {
+		fmt.Println("CONFIG SERVER: prefer ssl cipher")
 		return false
 	}
 	if s1.AuthTLSError != s2.AuthTLSError {
+		fmt.Println("CONFIG SERVER: auth tls error")
 		return false
 	}
 	if !(&s1.ProxySSL).Equal(&s2.ProxySSL) {
+		fmt.Println("CONFIG SERVER: proxy ssl")
 		return false
 	}
 
 	if len(s1.Locations) != len(s2.Locations) {
+		fmt.Println("CONFIG SERVER: len locations")
 		return false
 	}
 
 	// Location are sorted
 	for idx, s1l := range s1.Locations {
 		if !s1l.Equal(s2.Locations[idx]) {
+			fmt.Printf("CONFIG SERVER: location %s doesn't match location %s\n", s1l.Path, s2.Locations[idx].Path)
 			return false
 		}
 	}
@@ -342,131 +371,169 @@ func (l1 *Location) Equal(l2 *Location) bool {
 		return true
 	}
 	if l1 == nil || l2 == nil {
+		fmt.Println("CONFIG LOCATION: nil")
 		return false
 	}
 	if l1.Path != l2.Path {
+		fmt.Println("CONFIG LOCATION: path")
 		return false
 	}
 	if l1.IsDefBackend != l2.IsDefBackend {
+		fmt.Println("CONFIG LOCATION: def backend")
 		return false
 	}
 	if l1.Backend != l2.Backend {
+		fmt.Println("CONFIG LOCATION: backend")
 		return false
 	}
 
 	if l1.Service != l2.Service {
 		if l1.Service == nil || l2.Service == nil {
+		fmt.Println("CONFIG LOCATION: service nil")
 			return false
 		}
 		if l1.Service.GetNamespace() != l2.Service.GetNamespace() {
+		fmt.Println("CONFIG LOCATION: service namespace")
 			return false
 		}
 		if l1.Service.GetName() != l2.Service.GetName() {
+		fmt.Println("CONFIG LOCATION: service name")
 			return false
 		}
 	}
 
 	if l1.Port.String() != l2.Port.String() {
+		fmt.Println("CONFIG LOCATION: port")
 		return false
 	}
 	if !(&l1.BasicDigestAuth).Equal(&l2.BasicDigestAuth) {
+		fmt.Println("CONFIG LOCATION: basic digest auth")
 		return false
 	}
 	if l1.Denied != l2.Denied {
+		fmt.Println("CONFIG LOCATION: denied")
 		return false
 	}
 	if !(&l1.CorsConfig).Equal(&l2.CorsConfig) {
+		fmt.Println("CONFIG LOCATION: cors")
 		return false
 	}
 	if !(&l1.ExternalAuth).Equal(&l2.ExternalAuth) {
+		fmt.Println("CONFIG LOCATION: external auth")
 		return false
 	}
 	if l1.EnableGlobalAuth != l2.EnableGlobalAuth {
+		fmt.Println("CONFIG LOCATION: global auth")
 		return false
 	}
 	if l1.HTTP2PushPreload != l2.HTTP2PushPreload {
+		fmt.Println("CONFIG LOCATION: push reload")
 		return false
 	}
 	if !(&l1.RateLimit).Equal(&l2.RateLimit) {
+		fmt.Println("CONFIG LOCATION: rate limti")
 		return false
 	}
 	if !(&l1.GlobalRateLimit).Equal(&l2.GlobalRateLimit) {
+		fmt.Println("CONFIG LOCATION: global rate limti")
 		return false
 	}
 	if !(&l1.Redirect).Equal(&l2.Redirect) {
+		fmt.Println("CONFIG LOCATION: redirect")
 		return false
 	}
 	if !(&l1.Rewrite).Equal(&l2.Rewrite) {
+		fmt.Println("CONFIG LOCATION: rewrite")
 		return false
 	}
 	if !(&l1.Denylist).Equal(&l2.Denylist) {
+		fmt.Println("CONFIG LOCATION: deny list")
 		return false
 	}
 	if !(&l1.Allowlist).Equal(&l2.Allowlist) {
+		fmt.Println("CONFIG LOCATION: allow list")
 		return false
 	}
 	if !(&l1.Proxy).Equal(&l2.Proxy) {
+		fmt.Println("CONFIG LOCATION: proxy")
 		return false
 	}
 	if !(&l1.ProxySSL).Equal(&l2.ProxySSL) {
+		fmt.Println("CONFIG LOCATION: proxy ssl")
 		return false
 	}
 	if l1.UsePortInRedirects != l2.UsePortInRedirects {
+		fmt.Println("CONFIG LOCATION: port in redirect")
 		return false
 	}
 	if l1.ConfigurationSnippet != l2.ConfigurationSnippet {
+		fmt.Println("CONFIG LOCATION: configuration snippet")
 		return false
 	}
 	if l1.ClientBodyBufferSize != l2.ClientBodyBufferSize {
+		fmt.Println("CONFIG LOCATION: client body buffer size")
 		return false
 	}
 	if l1.UpstreamVhost != l2.UpstreamVhost {
+		fmt.Println("CONFIG LOCATION: upstream vhost")
 		return false
 	}
 	if l1.XForwardedPrefix != l2.XForwardedPrefix {
+		fmt.Println("CONFIG LOCATION: forward prefix")
 		return false
 	}
 	if !(&l1.Connection).Equal(&l2.Connection) {
+		fmt.Println("CONFIG LOCATION: connection")
 		return false
 	}
 	if !(&l1.Logs).Equal(&l2.Logs) {
+		fmt.Println("CONFIG LOCATION: logs")
 		return false
 	}
 
 	if l1.BackendProtocol != l2.BackendProtocol {
+		fmt.Println("CONFIG LOCATION: backend protocol")
 		return false
 	}
 
 	if !(&l1.FastCGI).Equal(&l2.FastCGI) {
+		fmt.Println("CONFIG LOCATION: fastcgi")
 		return false
 	}
 
 	match := compareInts(l1.CustomHTTPErrors, l2.CustomHTTPErrors)
 	if !match {
+		fmt.Println("CONFIG LOCATION: custom http error")
 		return false
 	}
 
 	if !(&l1.ModSecurity).Equal(&l2.ModSecurity) {
+		fmt.Println("CONFIG LOCATION: mod security")
 		return false
 	}
 
 	if l1.Satisfy != l2.Satisfy {
+		fmt.Println("CONFIG LOCATION: satisfy")
 		return false
 	}
 
 	if l1.DefaultBackendUpstreamName != l2.DefaultBackendUpstreamName {
+		fmt.Println("CONFIG LOCATION: default backend upstream")
 		return false
 	}
 
 	if !l1.Opentelemetry.Equal(&l2.Opentelemetry) {
+		fmt.Println("CONFIG LOCATION: open-telemetry")
 		return false
 	}
 
 	if !l1.Mirror.Equal(&l2.Mirror) {
+		fmt.Println("CONFIG LOCATION: mirror")
 		return false
 	}
 
 	if l1.DisableProxyInterceptErrors != l2.DisableProxyInterceptErrors {
+		fmt.Println("CONFIG LOCATION: disable proxy intercept errors")
 		return false
 	}
 
