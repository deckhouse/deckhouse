diff --git a/pkg/apis/ingress/types_equals.go b/pkg/apis/ingress/types_equals.go
index eeed9a06e..fb588ae4b 100644
--- a/pkg/apis/ingress/types_equals.go
+++ b/pkg/apis/ingress/types_equals.go
@@ -17,49 +17,60 @@ limitations under the License.
 package ingress
 
 import (
+	"fmt"
+
 	"k8s.io/ingress-nginx/pkg/util/sets"
 )
 
 // Equal tests for equality between two Configuration types
 func (c1 *Configuration) Equal(c2 *Configuration) bool {
 	if c1 == c2 {
+		fmt.Println("CONFIG: c1=c2")
 		return true
 	}
 	if c1 == nil || c2 == nil {
+		fmt.Println("CONFIG: c1 or c2 is nil")
 		return false
 	}
 
 	if !c1.DefaultSSLCertificate.Equal(c2.DefaultSSLCertificate) {
+		fmt.Println("CONFIG: default ssl certs aren't equal")
 		return false
 	}
 
 	match := compareBackends(c1.Backends, c2.Backends)
 	if !match {
+		fmt.Println("CONFIG: backends don't match")
 		return false
 	}
 
 	if len(c1.Servers) != len(c2.Servers) {
+		fmt.Println("CONFIG: servers lengts don't match")
 		return false
 	}
 
 	// Servers are sorted
 	for idx, c1s := range c1.Servers {
 		if !c1s.Equal(c2.Servers[idx]) {
+			fmt.Printf("CONFIG: server %s doesn't match %s\n", c1s.Hostname, c2.Servers[idx].Hostname)
 			return false
 		}
 	}
 
 	match = compareL4Service(c1.TCPEndpoints, c2.TCPEndpoints)
 	if !match {
+		fmt.Printf("CONFIG: l4 tcp endpoints don't match")
 		return false
 	}
 
 	match = compareL4Service(c1.UDPEndpoints, c2.UDPEndpoints)
 	if !match {
+		fmt.Printf("CONFIG: l4 udp endpoints don't match")
 		return false
 	}
 
 	if len(c1.PassthroughBackends) != len(c2.PassthroughBackends) {
+		fmt.Printf("CONFIG: passthrough backends don't match")
 		return false
 	}
 
@@ -72,10 +83,13 @@ func (c1 *Configuration) Equal(c2 *Configuration) bool {
 			}
 		}
 		if !found {
+			fmt.Printf("CONFIG: passthrough backends don't match 2")
 			return false
 		}
 	}
 
+	fmt.Printf("CONFIG: BackendConfigChecksums match %b\n", c1.BackendConfigChecksum == c2.BackendConfigChecksum)
+
 	return c1.BackendConfigChecksum == c2.BackendConfigChecksum
 }
 
@@ -269,19 +283,24 @@ func (s1 *Server) Equal(s2 *Server) bool {
 		return true
 	}
 	if s1 == nil || s2 == nil {
+		fmt.Println("CONFIG SERVER: nil")
 		return false
 	}
 	if s1.Hostname != s2.Hostname {
+		fmt.Println("CONFIG SERVER: hostame")
 		return false
 	}
 	if s1.SSLPassthrough != s2.SSLPassthrough {
+		fmt.Println("CONFIG SERVER: ssl passtrough")
 		return false
 	}
 	if !s1.SSLCert.Equal(s2.SSLCert) {
+		fmt.Println("CONFIG SERVER: ssl cert")
 		return false
 	}
 
 	if len(s1.Aliases) != len(s2.Aliases) {
+		fmt.Println("CONFIG SERVER: len aliases")
 		return false
 	}
 
@@ -294,39 +313,49 @@ func (s1 *Server) Equal(s2 *Server) bool {
 			}
 		}
 		if !found {
+		fmt.Println("CONFIG SERVER: aliases")
 			return false
 		}
 	}
 
 	if s1.RedirectFromToWWW != s2.RedirectFromToWWW {
+		fmt.Println("CONFIG SERVER: redirect from to www")
 		return false
 	}
 	if !(&s1.CertificateAuth).Equal(&s2.CertificateAuth) {
+		fmt.Println("CONFIG SERVER: auth cert")
 		return false
 	}
 	if s1.ServerSnippet != s2.ServerSnippet {
+		fmt.Println("CONFIG SERVER: serv snippet")
 		return false
 	}
 	if s1.SSLCiphers != s2.SSLCiphers {
+		fmt.Println("CONFIG SERVER: ssl cipher")
 		return false
 	}
 	if s1.SSLPreferServerCiphers != s2.SSLPreferServerCiphers {
+		fmt.Println("CONFIG SERVER: prefer ssl cipher")
 		return false
 	}
 	if s1.AuthTLSError != s2.AuthTLSError {
+		fmt.Println("CONFIG SERVER: auth tls error")
 		return false
 	}
 	if !(&s1.ProxySSL).Equal(&s2.ProxySSL) {
+		fmt.Println("CONFIG SERVER: proxy ssl")
 		return false
 	}
 
 	if len(s1.Locations) != len(s2.Locations) {
+		fmt.Println("CONFIG SERVER: len locations")
 		return false
 	}
 
 	// Location are sorted
 	for idx, s1l := range s1.Locations {
 		if !s1l.Equal(s2.Locations[idx]) {
+			fmt.Printf("CONFIG SERVER: location %s doesn't match location %s\n", s1l.Path, s2.Locations[idx].Path)
 			return false
 		}
 	}
@@ -342,131 +371,169 @@ func (l1 *Location) Equal(l2 *Location) bool {
 		return true
 	}
 	if l1 == nil || l2 == nil {
+		fmt.Println("CONFIG LOCATION: nil")
 		return false
 	}
 	if l1.Path != l2.Path {
+		fmt.Println("CONFIG LOCATION: path")
 		return false
 	}
 	if l1.IsDefBackend != l2.IsDefBackend {
+		fmt.Println("CONFIG LOCATION: def backend")
 		return false
 	}
 	if l1.Backend != l2.Backend {
+		fmt.Println("CONFIG LOCATION: backend")
 		return false
 	}
 
 	if l1.Service != l2.Service {
 		if l1.Service == nil || l2.Service == nil {
+		fmt.Println("CONFIG LOCATION: service nil")
 			return false
 		}
 		if l1.Service.GetNamespace() != l2.Service.GetNamespace() {
+		fmt.Println("CONFIG LOCATION: service namespace")
 			return false
 		}
 		if l1.Service.GetName() != l2.Service.GetName() {
+		fmt.Println("CONFIG LOCATION: service name")
 			return false
 		}
 	}
 
 	if l1.Port.String() != l2.Port.String() {
+		fmt.Println("CONFIG LOCATION: port")
 		return false
 	}
 	if !(&l1.BasicDigestAuth).Equal(&l2.BasicDigestAuth) {
+		fmt.Println("CONFIG LOCATION: basic digest auth")
 		return false
 	}
 	if l1.Denied != l2.Denied {
+		fmt.Println("CONFIG LOCATION: denied")
 		return false
 	}
 	if !(&l1.CorsConfig).Equal(&l2.CorsConfig) {
+		fmt.Println("CONFIG LOCATION: cors")
 		return false
 	}
 	if !(&l1.ExternalAuth).Equal(&l2.ExternalAuth) {
+		fmt.Println("CONFIG LOCATION: external auth")
 		return false
 	}
 	if l1.EnableGlobalAuth != l2.EnableGlobalAuth {
+		fmt.Println("CONFIG LOCATION: global auth")
 		return false
 	}
 	if l1.HTTP2PushPreload != l2.HTTP2PushPreload {
+		fmt.Println("CONFIG LOCATION: push reload")
 		return false
 	}
 	if !(&l1.RateLimit).Equal(&l2.RateLimit) {
+		fmt.Println("CONFIG LOCATION: rate limti")
 		return false
 	}
 	if !(&l1.GlobalRateLimit).Equal(&l2.GlobalRateLimit) {
+		fmt.Println("CONFIG LOCATION: global rate limti")
 		return false
 	}
 	if !(&l1.Redirect).Equal(&l2.Redirect) {
+		fmt.Println("CONFIG LOCATION: redirect")
 		return false
 	}
 	if !(&l1.Rewrite).Equal(&l2.Rewrite) {
+		fmt.Println("CONFIG LOCATION: rewrite")
 		return false
 	}
 	if !(&l1.Denylist).Equal(&l2.Denylist) {
+		fmt.Println("CONFIG LOCATION: deny list")
 		return false
 	}
 	if !(&l1.Allowlist).Equal(&l2.Allowlist) {
+		fmt.Println("CONFIG LOCATION: allow list")
 		return false
 	}
 	if !(&l1.Proxy).Equal(&l2.Proxy) {
+		fmt.Println("CONFIG LOCATION: proxy")
 		return false
 	}
 	if !(&l1.ProxySSL).Equal(&l2.ProxySSL) {
+		fmt.Println("CONFIG LOCATION: proxy ssl")
 		return false
 	}
 	if l1.UsePortInRedirects != l2.UsePortInRedirects {
+		fmt.Println("CONFIG LOCATION: port in redirect")
 		return false
 	}
 	if l1.ConfigurationSnippet != l2.ConfigurationSnippet {
+		fmt.Println("CONFIG LOCATION: configuration snippet")
 		return false
 	}
 	if l1.ClientBodyBufferSize != l2.ClientBodyBufferSize {
+		fmt.Println("CONFIG LOCATION: client body buffer size")
 		return false
 	}
 	if l1.UpstreamVhost != l2.UpstreamVhost {
+		fmt.Println("CONFIG LOCATION: upstream vhost")
 		return false
 	}
 	if l1.XForwardedPrefix != l2.XForwardedPrefix {
+		fmt.Println("CONFIG LOCATION: forward prefix")
 		return false
 	}
 	if !(&l1.Connection).Equal(&l2.Connection) {
+		fmt.Println("CONFIG LOCATION: connection")
 		return false
 	}
 	if !(&l1.Logs).Equal(&l2.Logs) {
+		fmt.Println("CONFIG LOCATION: logs")
 		return false
 	}
 
 	if l1.BackendProtocol != l2.BackendProtocol {
+		fmt.Println("CONFIG LOCATION: backend protocol")
 		return false
 	}
 
 	if !(&l1.FastCGI).Equal(&l2.FastCGI) {
+		fmt.Println("CONFIG LOCATION: fastcgi")
 		return false
 	}
 
 	match := compareInts(l1.CustomHTTPErrors, l2.CustomHTTPErrors)
 	if !match {
+		fmt.Println("CONFIG LOCATION: custom http error")
 		return false
 	}
 
 	if !(&l1.ModSecurity).Equal(&l2.ModSecurity) {
+		fmt.Println("CONFIG LOCATION: mod security")
 		return false
 	}
 
 	if l1.Satisfy != l2.Satisfy {
+		fmt.Println("CONFIG LOCATION: satisfy")
 		return false
 	}
 
 	if l1.DefaultBackendUpstreamName != l2.DefaultBackendUpstreamName {
+		fmt.Println("CONFIG LOCATION: default backend upstream")
 		return false
 	}
 
 	if !l1.Opentelemetry.Equal(&l2.Opentelemetry) {
+		fmt.Println("CONFIG LOCATION: open-telemetry")
 		return false
 	}
 
 	if !l1.Mirror.Equal(&l2.Mirror) {
+		fmt.Println("CONFIG LOCATION: mirror")
 		return false
 	}
 
 	if l1.DisableProxyInterceptErrors != l2.DisableProxyInterceptErrors {
+		fmt.Println("CONFIG LOCATION: disable proxy intercept errors")
 		return false
 	}
 
