diff --git a/internal/admission/controller/server.go b/internal/admission/controller/server.go
index 74f55fd01..dc7e7c776 100644
--- a/internal/admission/controller/server.go
+++ b/internal/admission/controller/server.go
@@ -17,6 +17,8 @@ limitations under the License.
 package controller

 import (
+	"crypto/x509"
+	"fmt"
 	"io"
 	"net/http"

@@ -45,20 +47,68 @@ type AdmissionController interface {
 // https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#validatingadmissionwebhook
 type AdmissionControllerServer struct {
 	AdmissionController AdmissionController
+	VerifyOptions       *VerifyOptions
 }

 // NewAdmissionControllerServer instantiates an admission controller server with
 // a default codec
-func NewAdmissionControllerServer(ac AdmissionController) *AdmissionControllerServer {
+func NewAdmissionControllerServer(ac AdmissionController, options *VerifyOptions) *AdmissionControllerServer {
 	return &AdmissionControllerServer{
 		AdmissionController: ac,
+		VerifyOptions:       options,
 	}
 }

+type VerifyOptions struct {
+	Enable                                  bool
+	ValidatingWebhookAllowCn                string
+	ValidatingWebhookAllowCaCertificatePool *x509.CertPool
+}
+
+type VerifyError struct {
+	Code int
+	Err  error
+}
+
+func (e *VerifyError) Error() string {
+	return e.Err.Error()
+}
+
+// verifyClient verifies the client TLS certificate and authenticates it by Common Name (CN).
+// It checks that a client certificate is present, validates it against the configured CA pool,
+// and ensures the certificate's CN matches the allowed CN.
+func verifyClient(req *http.Request, opts *VerifyOptions) *VerifyError {
+	if req.TLS == nil || len(req.TLS.PeerCertificates) == 0 {
+		return &VerifyError{Code: http.StatusUnauthorized, Err: fmt.Errorf("no client certificate provided")}
+	}
+
+	cert := req.TLS.PeerCertificates[0]
+	if _, err := cert.Verify(x509.VerifyOptions{
+		Roots: opts.ValidatingWebhookAllowCaCertificatePool,
+	}); err != nil {
+		return &VerifyError{Code: http.StatusUnauthorized, Err: fmt.Errorf("certificate verification failed: %w", err)}
+	}
+
+	if cert.Subject.CommonName != opts.ValidatingWebhookAllowCn {
+		return &VerifyError{Code: http.StatusForbidden, Err: fmt.Errorf("unauthorized CN: %s", cert.Subject.CommonName)}
+	}
+
+	return nil
+}
+
 // ServeHTTP implements http.Server method
 func (acs *AdmissionControllerServer) ServeHTTP(w http.ResponseWriter, req *http.Request) {
 	defer req.Body.Close()

+	// If flag --validating-verify-admission-requests is true
+	if acs.VerifyOptions.Enable {
+		if verr := verifyClient(req, acs.VerifyOptions); verr != nil {
+			klog.Errorf("Failed client TLS certificate verification in validating webhook: %v", verr)
+			http.Error(w, verr.Error(), verr.Code)
+			return
+		}
+	}
+
 	data, err := io.ReadAll(req.Body)
 	if err != nil {
 		klog.ErrorS(err, "Failed to read request body")
diff --git a/internal/ingress/controller/controller.go b/internal/ingress/controller/controller.go
index aa0707224..ad3396b20 100644
--- a/internal/ingress/controller/controller.go
+++ b/internal/ingress/controller/controller.go
@@ -17,6 +17,7 @@ limitations under the License.
 package controller

 import (
+	"crypto/x509"
 	"fmt"
 	"sort"
 	"strconv"
@@ -122,10 +123,13 @@ type Configuration struct {

 	IngressClassConfiguration *ingressclass.Configuration

-	ValidationWebhook         string
-	ValidationWebhookCertPath string
-	ValidationWebhookKeyPath  string
-	DisableFullValidationTest bool
+	ValidationWebhook                       string
+	ValidationWebhookCertPath               string
+	ValidationWebhookKeyPath                string
+	DisableFullValidationTest               bool
+	ValidatingVerifyAdmissionRequests       bool
+	ValidatingWebhookAllowCn                string
+	ValidatingWebhookAllowCaCertificatePool *x509.CertPool

 	GlobalExternalAuth  *ngx_config.GlobalExternalAuth
 	MaxmindEditionFiles *[]string
@@ -331,16 +335,19 @@ func (n *NGINXController) CheckIngress(ing *networking.Ingress) error {
 		}
 	}

-	// Do not attempt to validate an ingress that's not meant to be controlled by the current instance of the controller.
-	if ingressClass, err := n.store.GetIngressClass(ing, n.cfg.IngressClassConfiguration); ingressClass == "" {
-		klog.Warningf("ignoring ingress %v in %v based on annotation %v: %v", ing.Name, ing.ObjectMeta.Namespace, ingressClass, err)
-		return nil
-	}
+	// Commented out the ingress class check in the ingress validation logic to allow usage of the --watch-namespace flag
+	// in a broader or more flexible way.
+	//if ingressClass, err := n.store.GetIngressClass(ing, n.cfg.IngressClassConfiguration); ingressClass == "" {
+	//	klog.Warningf("ignoring ingress %v in %v based on annotation %v: %v", ing.Name, ing.ObjectMeta.Namespace, ingressClass, err)
+	//	return nil
+	//}

-	if n.cfg.Namespace != "" && ing.ObjectMeta.Namespace != n.cfg.Namespace {
-		klog.Warningf("ignoring ingress %v in namespace %v different from the namespace watched %s", ing.Name, ing.ObjectMeta.Namespace, n.cfg.Namespace)
-		return nil
-	}
+	// Commented out the namespace check in the ingress validation logic to allow usage of the --watch-namespace flag
+	// in a broader or more flexible way.
+	//if n.cfg.Namespace != "" && ing.ObjectMeta.Namespace != n.cfg.Namespace {
+	//	klog.Warningf("ignoring ingress %v in namespace %v different from the namespace watched %s", ing.Name, ing.ObjectMeta.Namespace, n.cfg.Namespace)
+	//	return nil
+	//}

 	if n.cfg.DisableCatchAll && ing.Spec.DefaultBackend != nil {
 		return fmt.Errorf("this deployment is trying to create a catch-all ingress while DisableCatchAll flag is set to true. Remove '.spec.defaultBackend' or set DisableCatchAll flag to false")
diff --git a/internal/ingress/controller/nginx.go b/internal/ingress/controller/nginx.go
index 0b6b3c237..c77ac68b1 100644
--- a/internal/ingress/controller/nginx.go
+++ b/internal/ingress/controller/nginx.go
@@ -116,12 +116,24 @@ func NewNGINXController(config *Configuration, mc metric.Collector) *NGINXContro
 	}

 	if n.cfg.ValidationWebhook != "" {
+
+		verifyOps := adm_controller.VerifyOptions{
+			Enable:                                  config.ValidatingVerifyAdmissionRequests,
+			ValidatingWebhookAllowCn:                config.ValidatingWebhookAllowCn,
+			ValidatingWebhookAllowCaCertificatePool: config.ValidatingWebhookAllowCaCertificatePool,
+		}
+
+		tlsConfig := ssl.NewTLSListener(n.cfg.ValidationWebhookCertPath, n.cfg.ValidationWebhookKeyPath).TLSConfig()
+		if config.ValidatingVerifyAdmissionRequests {
+			tlsConfig.ClientAuth = tls.RequestClientCert
+		}
+
 		n.validationWebhookServer = &http.Server{
 			Addr: config.ValidationWebhook,
 			// G112 (CWE-400): Potential Slowloris Attack
 			ReadHeaderTimeout: 10 * time.Second,
-			Handler:           adm_controller.NewAdmissionControllerServer(&adm_controller.IngressAdmission{Checker: n}),
-			TLSConfig:         ssl.NewTLSListener(n.cfg.ValidationWebhookCertPath, n.cfg.ValidationWebhookKeyPath).TLSConfig(),
+			Handler:           adm_controller.NewAdmissionControllerServer(&adm_controller.IngressAdmission{Checker: n}, &verifyOps),
+			TLSConfig:         tlsConfig,
 			// disable http/2
 			// https://github.com/kubernetes/kubernetes/issues/80313
 			// https://github.com/kubernetes/ingress-nginx/issues/6323#issuecomment-737239159
@@ -279,28 +291,29 @@ func (n *NGINXController) Start() {
 	// TODO: For now, as the the IngressClass logics has changed, is up to the
 	// cluster admin to create different Leader Election IDs.
 	// Should revisit this in a future
+	if n.cfg.ValidationWebhook == "" { // Disabled in validation mode
+		if !n.cfg.DisableLeaderElection {
+			electionID := n.cfg.ElectionID
+			setupLeaderElection(&leaderElectionConfig{
+				Client:      n.cfg.Client,
+				ElectionID:  electionID,
+				ElectionTTL: n.cfg.ElectionTTL,
+				OnStartedLeading: func(stopCh chan struct{}) {
+					if n.syncStatus != nil {
+						go n.syncStatus.Run(stopCh)
+					}

-	if !n.cfg.DisableLeaderElection {
-		electionID := n.cfg.ElectionID
-		setupLeaderElection(&leaderElectionConfig{
-			Client:      n.cfg.Client,
-			ElectionID:  electionID,
-			ElectionTTL: n.cfg.ElectionTTL,
-			OnStartedLeading: func(stopCh chan struct{}) {
-				if n.syncStatus != nil {
-					go n.syncStatus.Run(stopCh)
-				}
-
-				n.metricCollector.OnStartedLeading(electionID)
-				// manually update SSL expiration metrics
-				// (to not wait for a reload)
-				n.metricCollector.SetSSLExpireTime(n.runningConfig.Servers)
-				n.metricCollector.SetSSLInfo(n.runningConfig.Servers)
-			},
-			OnStoppedLeading: func() {
-				n.metricCollector.OnStoppedLeading(electionID)
-			},
-		})
+					n.metricCollector.OnStartedLeading(electionID)
+					// manually update SSL expiration metrics
+					// (to not wait for a reload)
+					n.metricCollector.SetSSLExpireTime(n.runningConfig.Servers)
+					n.metricCollector.SetSSLInfo(n.runningConfig.Servers)
+				},
+				OnStoppedLeading: func() {
+					n.metricCollector.OnStoppedLeading(electionID)
+				},
+			})
+		}
 	}

 	cmd := n.command.ExecCommand()
diff --git a/pkg/flags/flags.go b/pkg/flags/flags.go
index ce24160fd..faa5768fd 100644
--- a/pkg/flags/flags.go
+++ b/pkg/flags/flags.go
@@ -17,6 +17,8 @@ limitations under the License.
 package flags

 import (
+	"crypto/x509"
+	"encoding/pem"
 	"errors"
 	"flag"
 	"fmt"
@@ -209,6 +211,12 @@ Takes the form "<host>:port". If not provided, no admission controller is starte
 			`The path of the validating webhook certificate PEM.`)
 		validationWebhookKey = flags.String("validating-webhook-key", "",
 			`The path of the validating webhook key PEM.`)
+		validatingVerifyAdmissionRequests = flags.Bool("validating-verify-admission-requests", false,
+			`Enable verification and authentication of AdmissionReview requests.`)
+		validatingWebhookAllowCn = flags.String("validating-webhook-allow-cn", "",
+			`The valid Common Name (CN) from the API server certificate used to authenticate AdmissionReview requests.`)
+		validatingWebhookAllowCaFile = flags.String("validating-webhook-allow-ca-file", "",
+			`Path to CA certificate file for authenticating AdmissionReview requests to the validating webhook.`)
 		disableFullValidationTest = flags.Bool("disable-full-test", false,
 			`Disable full test of all merged ingresses at the admission stage and tests the template of the ingress being created or updated  (full test of all ingresses is enabled by default).`)

@@ -265,6 +273,44 @@ https://blog.maxmind.com/2019/12/significant-changes-to-accessing-and-using-geol
 	parser.AnnotationsPrefix = *annotationsPrefix
 	parser.EnableAnnotationValidation = *enableAnnotationValidation

+	// Perform custom flag validation if --validating-webhook is specified
+	validatingWebhookCaCertPool := x509.NewCertPool()
+	if *validatingVerifyAdmissionRequests {
+
+		if *validatingWebhookAllowCn == "" {
+			return false, nil, fmt.Errorf(
+				"use --validating-webhook-allow-cn to specify the client TLS certificate CN for authenticating AdmissionReview requests from the API server",
+			)
+		}
+
+		if *validatingWebhookAllowCaFile == "" {
+			return false, nil, fmt.Errorf(
+				"use --validating-webhook-allow-ca-file to specify a CA certificate for verifying TLS connections from the API server to the validating webhook",
+			)
+		}
+
+		caFileBytes, err := os.ReadFile(*validatingWebhookAllowCaFile)
+		if err != nil {
+			if os.IsNotExist(err) {
+				return false, nil, fmt.Errorf("failed to load CA file: file does not exist at path %s", *validatingWebhookAllowCaFile)
+			}
+			return false, nil, fmt.Errorf("failed to read CA file: %w", err)
+		}
+
+		block, _ := pem.Decode(caFileBytes)
+		if block == nil {
+			return false, nil, fmt.Errorf("invalid PEM format in CA file: %s", *validatingWebhookAllowCaFile)
+		}
+
+		cert, err := x509.ParseCertificate(block.Bytes)
+		if err != nil {
+			return false, nil, fmt.Errorf("invalid CA certificate format: %w", err)
+
+		}
+
+		validatingWebhookCaCertPool.AddCert(cert)
+	}
+
 	// check port collisions
 	if !ing_net.IsPortAvailable(*httpPort) {
 		return false, nil, fmt.Errorf("port %v is already in use. Please check the flag --http-port", *httpPort)
@@ -396,6 +442,10 @@ https://blog.maxmind.com/2019/12/significant-changes-to-accessing-and-using-geol
 		ValidationWebhookKeyPath:  *validationWebhookKey,
 		InternalLoggerAddress:     *internalLoggerAddress,
 		DisableSyncEvents:         *disableSyncEvents,
+
+		ValidatingVerifyAdmissionRequests:       *validatingVerifyAdmissionRequests,
+		ValidatingWebhookAllowCn:                *validatingWebhookAllowCn,
+		ValidatingWebhookAllowCaCertificatePool: validatingWebhookCaCertPool,
 	}

 	if *apiserverHost != "" {
