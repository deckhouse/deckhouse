{{- define "iptables_wrapper_init_resources" }}
cpu: 10m
memory: 10Mi
{{- end }}

{{- $context := . }}
{{- range $crd := $context.Values.ingressNginx.internal.ingressControllers }}
{{- $crdChecksum := toJson $crd | sha256sum }}
  {{- if eq $crd.spec.inlet "HostWithFailover" }}
    {{- if ($context.Values.global.enabledModules | has "vertical-pod-autoscaler") }}
---
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: proxy-{{ $crd.name }}-failover
  namespace: d8-ingress-nginx
  {{- include "helm_lib_module_labels" (list $context (dict "app" "proxy-failover" "name" $crd.name)) | nindent 2 }}
spec:
  targetRef:
    apiVersion: "apps.kruise.io/v1alpha1"
    kind: DaemonSet
    name: proxy-{{ $crd.name }}-failover
  updatePolicy:
    updateMode: "Off"
    {{- end }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: proxy-{{ $crd.name }}-failover
  namespace: d8-ingress-nginx
  {{- include "helm_lib_module_labels" (list $context (dict "app" "proxy-failover" "name" $crd.name)) | nindent 2 }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: proxy-failover
      name: {{ $crd.name }}
---
apiVersion: apps.kruise.io/v1alpha1
kind: DaemonSet
metadata:
  name: proxy-{{ $crd.name }}-failover
  namespace: d8-ingress-nginx
  {{- include "helm_lib_module_labels" (list $context (dict "app" "proxy-failover" "name" $crd.name)) | nindent 2 }}
  annotations:
    ingress-nginx-controller.deckhouse.io/checksum: {{ $crdChecksum }}
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  selector:
    matchLabels:
      app: proxy-failover
      name: {{ $crd.name }}
  template:
    metadata:
      annotations:
        {{ include "helm_lib_prevent_ds_eviction_annotation" . | nindent 8 }}
      labels:
        app: proxy-failover
        name: {{ $crd.name }}
    spec:
      automountServiceAccountToken: true
  {{- if $crd.spec.nodeSelector }}
      nodeSelector:
        {{- $crd.spec.nodeSelector | toYaml | nindent 8 }}
  {{- else }}
      {{- include "helm_lib_node_selector" (tuple $context "frontend") | nindent 6 }}
  {{- end }}
  {{- if $crd.spec.tolerations }}
      tolerations:
      {{- $crd.spec.tolerations | toYaml | nindent 6 }}
  {{- else }}
      {{- include "helm_lib_tolerations" (tuple $context "frontend") | nindent 6 }}
  {{- end }}
      {{- include "helm_lib_priority_class" (tuple $context "system-cluster-critical") | nindent 6 }}
      {{ include "helm_lib_module_pod_security_context_run_as_user_deckhouse" . | nindent 6 }}
      serviceAccountName: ingress-nginx
      hostNetwork: true
      {{- include "helm_lib_module_pod_security_context_run_as_user_deckhouse" . | nindent 6 }}
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: 300
      volumes:
        - name: additional-config
          configMap:
            name: proxy-{{ $crd.name }}-failover-config
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        - name: sbin
          emptyDir:
            medium: Memory
            sizeLimit: 4Mi
        - name: writable
          emptyDir:
            medium: Memory
      initContainers:
      - name: iptables-wrapper-init
        {{- include "helm_lib_module_container_security_context_read_only_root_filesystem_capabilities_drop_all_and_add" (list . (list "NET_ADMIN" "NET_RAW")) | nindent 8 }}
          runAsNonRoot: false
          runAsUser: 0
          runAsGroup: 0
        image: {{ include "helm_lib_module_image" (list $context "iptablesWrapperInit") }}
        command:
        - /bin/bash
        - -c
        - "/usr/bin/cp /iptables-wrapper /sbin/ -rv && /usr/bin/cp /_sbin/* /sbin/ -rv && /usr/bin/cp /relocate/sbin/* /sbin/ -rv && /sbin/iptables --version && /usr/bin/rm /sbin/iptables-wrapper -v"
        volumeMounts:
        - mountPath: /sbin
          name: sbin
        - name: xtables-lock
          mountPath: /run/xtables.lock
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_logs_with_extra" 10 | nindent 12 }}
        {{- if not ( $context.Values.global.enabledModules | has "vertical-pod-autoscaler") }}
            {{- include "iptables_wrapper_init_resources" . | nindent 12 }}
        {{- end }}
      containers:
      - image: {{ include "helm_lib_module_image" (list $context "proxyFailover") }}
        name: controller
        env:
        - name: CONTROLLER_NAME
          value: {{ $crd.name }}
        livenessProbe:
          httpGet:
            path: /status
            port: 10255
            host: 127.0.0.1
          initialDelaySeconds: 3
        readinessProbe:
          httpGet:
            path: /status
            port: 10255
            host: 127.0.0.1
          initialDelaySeconds: 3
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_only_logs" $context | nindent 12 }}
            memory: 500Mi
            cpu: 350m
        {{- include "helm_lib_module_container_security_context_read_only_root_filesystem_capabilities_drop_all_and_add" (list . (list "NET_ADMIN" "NET_RAW" "NET_BIND_SERVICE")) | nindent 8 }}
        volumeMounts:
          - name: additional-config
            mountPath: "/opt/nginx-static/additional-conf"
            readOnly: true
          - name: writable
            mountPath: "/opt/nginx-static/writable"
      - image: {{ include "helm_lib_module_image" (list $context "proxyFailoverIptables") }}
        name: iptables-loop
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_only_logs" . | nindent 12 }}
            memory: 20Mi
            cpu: 10m
        # containers messing with iptables and iptables-wrapper have to be run as root because iptables-legacy binary requires to be run as root (setsuid isn't an option).
        {{- include "helm_lib_module_container_security_context_read_only_root_filesystem_capabilities_drop_all_and_add" (list . (list "NET_ADMIN" "NET_RAW")) | nindent 8 }}
          runAsNonRoot: false
          runAsUser: 0
          runAsGroup: 0
        volumeMounts:
          - mountPath: /run/xtables.lock
            name: xtables-lock
            readOnly: false
          - mountPath: /sbin
            name: sbin
            readOnly: true
      - name: nginx-exporter
        image: {{ include "helm_lib_module_image" (list $context "nginxExporter") }}
        args:
        - "-web.listen-address=127.0.0.1:10354"
        - "-nginx.scrape-uri=http://127.0.0.1:10253/nginx_status"
        - "-nginx.ssl-verify=false"
        - "-nginx.retries=10"
        - "-nginx.retry-interval=6s"
        livenessProbe:
          httpGet:
            path: /metrics
            port: 10354
            host: 127.0.0.1
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_only_logs" $context | nindent 12 }}
            memory: 20Mi
            cpu: 10m
        {{ include "helm_lib_module_container_security_context_read_only_root_filesystem_capabilities_drop_all" . | nindent 8 }}
      - name: kube-rbac-proxy
        {{- include "helm_lib_module_container_security_context_pss_restricted_flexible" dict | nindent 8 }}
        image: {{ include "helm_lib_module_common_image" (list $context "kubeRbacProxy") }}
        {{ include "helm_lib_module_container_security_context_read_only_root_filesystem_capabilities_drop_all" . | nindent 8 }}
        args:
        - "--secure-listen-address=$(KUBE_RBAC_PROXY_LISTEN_ADDRESS):4208"
        - "--v=2"
        - "--logtostderr=true"
        - "--stale-cache-interval=1h30m"
        env:
        - name: KUBE_RBAC_PROXY_LISTEN_ADDRESS
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KUBE_RBAC_PROXY_CONFIG
          value: |
            upstreams:
            - upstream: http://127.0.0.1:10354/metrics
              path: /metrics
              authorization:
                resourceAttributes:
                  namespace: d8-ingress-nginx
                  apiGroup: apps
                  apiVersion: v1
                  resource: daemonsets
                  subresource: prometheus-metrics
                  name: proxy-failover
        ports:
        - containerPort: 4208
          name: https-metrics
          hostPort: 4208
        resources:
          requests:
            {{- include "helm_lib_module_ephemeral_storage_only_logs" $context | nindent 12 }}
            memory: 20Mi
            cpu: 10m
      imagePullSecrets:
      - name: deckhouse-registry
  {{- end }}
{{- end }}
