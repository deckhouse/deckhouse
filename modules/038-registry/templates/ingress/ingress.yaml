{{- $orchestrator := .Values.registry.internal.orchestrator -}}
{{- if (($orchestrator).state).ingress_enabled -}}
{{- if and (.Values.global.modules.publicDomainTemplate) (.Values.global.enabledModules | has "cert-manager") -}}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: registry
  namespace: d8-system
  {{- include "helm_lib_module_labels" (list . (dict "app" "registry")) | nindent 2 }}
  annotations:
    registry.deckhouse.io/config-hash: {{ $orchestrator.hash | quote }}
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_ssl_certificate /etc/nginx/ssl/client.crt;
      proxy_ssl_certificate_key /etc/nginx/ssl/client.key;
      proxy_ssl_protocols TLSv1.2;
      proxy_ssl_session_reuse on;
    {{- if .Values.registry.whitelistSourceRanges }}
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ .Values.registry.whitelistSourceRanges | join "," }}
    {{- end }}
spec:
  ingressClassName: {{ include "helm_lib_module_ingress_class" . | quote }}
  rules:
  - host: {{ include "helm_lib_module_public_domain" (list . "registry") }}
    http:
      paths:
      - backend:
          service:
            name: registry
            port:
              number: 5001
        path: /
        pathType: Prefix
  {{- /*
      TLS for the ingress
      Condition: enabled if mode == CustomCertificate or CertManager
      How it works:
          - if mode == CertManager - uses the certificate "registry-ingress-tls"
          - if mode == CustomCertificate - uses the certificate "registry-ingress-tls-customcertificate"
  */ -}}
  {{- if (include "helm_lib_module_https_ingress_tls_enabled" . ) }}
  tls:
  - hosts:
    - {{ include "helm_lib_module_public_domain" (list . "registry") }}
    secretName: {{ include "helm_lib_module_https_secret_name" (list . "registry-ingress-tls") }}
  {{- end }}

{{- end }}
{{- end }}
