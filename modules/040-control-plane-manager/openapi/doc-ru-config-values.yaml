properties:
  apiserver:
    description: |
      Параметры `kube-apiserver`.
    properties:
      serviceAccount:
        description: |
          Настройки выпуска ServiceAccounts.
        properties:
          additionalAPIAudiences:
            description: |
              Список API audiences, которые следует добавить при создании токенов ServiceAccount.
      admissionPlugins:
        description: |
          Включить дополнительные [admission plugin'ы](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers).

          Список admission plugin'ов, включенных всегда вдобавок к включенным в Kubernetes по умолчанию:
          1. ExtendedResourceToleration
          2. EventRateLimit с конфигурацией:

              ```yaml
              apiVersion: eventratelimit.admission.k8s.io/v1alpha1
              kind: Configuration
              limits:
              - type: Namespace
                qps: 50
                burst: 100
                cacheSize: 2000
              ```

          `PodNodeSelector` [не требует](https://github.com/kubernetes/kubernetes/blob/f0ea54070bec90dd829b7054117d670f9f90839f/plugin/pkg/admission/podnodeselector/admission.go#L74-L97) указания глобальной конфигурации, он использует только аннотации на Namespaces.

      bindToWildcard:
        description: |
          Cлушать ли на `0.0.0.0`.

          По умолчанию API-сервер слушает на hostIP, который обычно соответствует Internal адресу узла, но это зависит от типа кластера (Static или Cloud) и выбранной схемы размещения (layout).
      certSANs:
        description: |
          Массив строк, список дополнительных [SANs](https://en.wikipedia.org/wiki/Subject_Alternative_Name), с которыми будет сгенерирован сертификат API-сервера.

          Кроме переданного списка, всегда используется и следующий список:
          * `kubernetes`
          * `kubernetes.default`
          * `kubernetes.default.svc`
          * `kubernetes.default.svc.cluster.local`
          * `192.168.0.1`
          * `127.0.0.1`
          * *текущий_hostname*
          * *hostIP*
      authn:
        description: |
          Опциональные параметры аутентификации клиентов Kubernetes API. По умолчанию подтягиваются из ConfigMap, устанавливаемого модулем [`user-authn`](https://deckhouse.io/ru/documentation/v1/modules/150-user-authn/)
        properties:
          oidcIssuerURL:
            description: |
              URL OIDC-провайдера.
          oidcCA:
            description: |
              CA OIDC-провайдера.
          oidcIssuerAddress:
            description: |
              Сетевой адрес OIDC-провайдера.
          webhookURL:
            description: |
              URL аутентификационного webhook'а.
          webhookCA:
            description: |
              CA аутентификационного webhook'a.
      authz:
        description: |
          Параметры авторизации клиентов Kubernetes API. По умолчанию подтягиваются из ConfigMap, устанавливаемого модулем [`user-authz`](https://deckhouse.io/ru/documentation/v1/modules/140-user-authz/)
        properties:
          webhookURL:
            description: |
              URL авторизациионного webhook'а.
          webhookCA:
            description: |
              CA авторизациионного webhook'a.
      loadBalancer:
        description: |
          Если указано, будет создан сервис с типом `LoadBalancer` (`d8-control-plane-apiserver` в ns `kube-system`).
        properties:
          annotations:
            description: |
              Аннотации, которые будут проставлены сервису для гибкой настройки балансировщика.
              > **Внимание!** модуль не учитывает особенности указания аннотаций в различных облаках. Если аннотации для заказа load balancer'а применяются только при создании сервиса, то для обновления подобных параметров вам необходимо будет удалить и добавить параметр `apiserver.loadBalancer`.
          sourceRanges:
            description: |
              Список CIDR, которым разрешен доступ к API.

              Облачный провайдер может не поддерживать данную опцию и игнорировать её.
          port:
            description: |
              Внешний порт TCP балансировщика.
      auditPolicyEnabled:
        description: |
          Применять [дополнительные политики аудита](faq.html#как-настроить-дополнительные-политики-аудита) с конфигурацией из `Secret` (`audit-policy` в ns `kube-system`).
      basicAuditPolicyEnabled:
        description: |
          Применять базовые политики аудита Deckhouse.
      auditPolicy:
        description: Параметры аудита
        properties:
          output:
            description: Вывод логов.
          path:
            description: Путь к директории. Действует только в случае `output=file`.
      encryptionEnabled:
        description: |
          Включает режим [encrypting secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
          Генерирует secret `kube-system/d8-secret-encryption-key`, содержащий ключ шифрации.
          > **Важно!**  Этот режим нельзя отключить!!!

  etcd:
    description: |
      Параметры `etcd`.
    properties:
      externalMembersNames:
        description: |
          Массив имен внешних etcd member'ов (эти member'ы не будут удаляться).
  nodeMonitorGracePeriodSeconds:
    description: |
      Число секунд, через которое узел перейдёт в состояние `Unreachable` при потере с ним связи.
  failedNodePodEvictionTimeoutSeconds:
    description: |
      Количество секунд, по прошествии которых, с узла в статусе `Unreachable` будут удалены Pod'ы.
      > **Важно!** При изменении этого параметра потребуется перезапуск Pod'ов.
