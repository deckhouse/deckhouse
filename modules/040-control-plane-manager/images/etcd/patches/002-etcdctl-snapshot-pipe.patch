Subject: [PATCH] feature: support for piping snapshot to stdout
---
Index: client/v3/snapshot/v3_snapshot.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/v3/snapshot/v3_snapshot.go b/client/v3/snapshot/v3_snapshot.go
--- a/client/v3/snapshot/v3_snapshot.go	(revision a4708beb0f5dfba937145762516ac98f15797940)
+++ b/client/v3/snapshot/v3_snapshot.go	(date 1750164009008)
@@ -121,3 +121,46 @@
 	lg.Info("saved", zap.String("path", dbPath))
 	return resp.Version, nil
 }
+
+// Pipe fetches snapshot from remote etcd server and pipes data
+// into the stream. If the context "ctx" is canceled or timed out,
+// snapshot save stream will error out (e.g. context.Canceled,
+// context.DeadlineExceeded). Make sure to specify only one endpoint
+// in client configuration. Snapshot API must be requested to a
+// selected node, and saved snapshot is the point-in-time state of
+// the selected node.
+func Pipe(ctx context.Context, lg *zap.Logger, cfg clientv3.Config, dst io.Writer) error {
+	cfg.Logger = lg.Named("client")
+	if len(cfg.Endpoints) != 1 {
+		return fmt.Errorf("snapshot must be requested to one selected node, not multiple %v", cfg.Endpoints)
+	}
+	cli, err := clientv3.New(cfg)
+	if err != nil {
+		return err
+	}
+	defer cli.Close()
+
+	now := time.Now()
+	var rd io.ReadCloser
+	rd, err = cli.Snapshot(ctx)
+	if err != nil {
+		return err
+	}
+	lg.Info("fetching snapshot", zap.String("endpoint", cfg.Endpoints[0]))
+	var size int64
+	size, err = io.Copy(dst, rd)
+	if err != nil {
+		return err
+	}
+	if !hasChecksum(size) {
+		return fmt.Errorf("sha256 checksum not found [bytes: %d]", size)
+	}
+
+	lg.Info("fetched snapshot",
+		zap.String("endpoint", cfg.Endpoints[0]),
+		zap.String("size", humanize.Bytes(uint64(size))),
+		zap.String("took", humanize.Time(now)),
+	)
+
+	return nil
+}
Index: etcdctl/ctlv3/command/snapshot_command.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/etcdctl/ctlv3/command/snapshot_command.go b/etcdctl/ctlv3/command/snapshot_command.go
--- a/etcdctl/ctlv3/command/snapshot_command.go	(revision a4708beb0f5dfba937145762516ac98f15797940)
+++ b/etcdctl/ctlv3/command/snapshot_command.go	(date 1750164008881)
@@ -17,6 +17,7 @@
 import (
 	"context"
 	"fmt"
+	"os"
 
 	"github.com/spf13/cobra"
 	"go.uber.org/zap"
@@ -54,6 +55,7 @@
 		Example: snapshotExample,
 	}
 	cmd.AddCommand(NewSnapshotSaveCommand())
+	cmd.AddCommand(NewSnapshotPipeCommand())
 	return cmd
 }
 
@@ -66,6 +68,14 @@
 	}
 }
 
+func NewSnapshotPipeCommand() *cobra.Command {
+	return &cobra.Command{
+		Use:   "pipe",
+		Short: "Streams an etcd node backend snapshot to stdout",
+		Run:   snapshotPipeCommandFunc,
+	}
+}
+
 func snapshotSaveCommandFunc(cmd *cobra.Command, args []string) {
 	if len(args) != 1 {
 		err := fmt.Errorf("snapshot save expects one argument <filename>")
@@ -95,3 +105,23 @@
 		fmt.Printf("Server version %s\n", version)
 	}
 }
+
+func snapshotPipeCommandFunc(cmd *cobra.Command, args []string) {
+	lg, err := logutil.CreateDefaultZapLogger(zap.InfoLevel)
+	if err != nil {
+		cobrautl.ExitWithError(cobrautl.ExitError, err)
+	}
+	cfg := mustClientCfgFromCmd(cmd)
+
+	// if user does not specify "--command-timeout" flag, there will be no timeout for snapshot pipe command
+	ctx, cancel := context.WithCancel(context.Background())
+	if isCommandTimeoutFlagSet(cmd) {
+		ctx, cancel = commandCtx(cmd)
+	}
+	defer cancel()
+
+	err = snapshot.Pipe(ctx, lg, *cfg, os.Stdout)
+	if err != nil {
+		cobrautl.ExitWithError(cobrautl.ExitInterrupted, err)
+	}
+}
