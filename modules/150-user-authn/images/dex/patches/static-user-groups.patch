diff --git a/storage/kubernetes/types.go b/storage/kubernetes/types.go
--- a/storage/kubernetes/types.go	(revision 23efe9200ccd9e0a69242bf61cd221462370d1f4)
+++ b/storage/kubernetes/types.go	(date 1718355089197)
@@ -431,9 +431,10 @@
 	// This field is IMMUTABLE. Do not change.
 	Email string `json:"email,omitempty"`

-	Hash     []byte `json:"hash,omitempty"`
-	Username string `json:"username,omitempty"`
-	UserID   string `json:"userID,omitempty"`
+	Hash     []byte   `json:"hash,omitempty"`
+	Username string   `json:"username,omitempty"`
+	UserID   string   `json:"userID,omitempty"`
+	Groups   []string `json:"groups,omitempty"`
 }

 // PasswordList is a list of Passwords.
@@ -458,6 +459,7 @@
 		Hash:     p.Hash,
 		Username: p.Username,
 		UserID:   p.UserID,
+		Groups:   p.Groups,
 	}
 }

@@ -467,6 +469,7 @@
 		Hash:     p.Hash,
 		Username: p.Username,
 		UserID:   p.UserID,
+		Groups:   p.Groups,
 	}
 }

diff --git a/server/server.go b/server/server.go
--- a/server/server.go	(revision 23efe9200ccd9e0a69242bf61cd221462370d1f4)
+++ b/server/server.go	(date 1718355089194)
@@ -484,6 +484,7 @@
 		Username:      p.Username,
 		Email:         p.Email,
 		EmailVerified: true,
+		Groups:        p.Groups,
 	}, true, nil
 }

diff --git a/storage/sql/crud.go b/storage/sql/crud.go
--- a/storage/sql/crud.go	(revision 23efe9200ccd9e0a69242bf61cd221462370d1f4)
+++ b/storage/sql/crud.go	(date 1718355089201)
@@ -598,13 +598,13 @@
 	p.Email = strings.ToLower(p.Email)
 	_, err := c.Exec(`
 		insert into password (
-			email, hash, username, user_id
+			email, hash, username, user_id, groups
 		)
 		values (
-			$1, $2, $3, $4
+			$1, $2, $3, $4, $5
 		);
 	`,
-		p.Email, p.Hash, p.Username, p.UserID,
+		p.Email, p.Hash, p.Username, p.UserID, encoder(p.Groups),
 	)
 	if err != nil {
 		if c.alreadyExistsCheck(err) {
@@ -629,10 +629,10 @@
 		_, err = tx.Exec(`
 			update password
 			set
-				hash = $1, username = $2, user_id = $3
-			where email = $4;
+				hash = $1, username = $2, user_id = $3, groups = $4
+			where email = $5;
 		`,
-			np.Hash, np.Username, np.UserID, p.Email,
+			np.Hash, np.Username, np.UserID, encoder(p.Groups), p.Email,
 		)
 		if err != nil {
 			return fmt.Errorf("update password: %v", err)
@@ -648,7 +648,7 @@
 func getPassword(q querier, email string) (p storage.Password, err error) {
 	return scanPassword(q.QueryRow(`
 		select
-			email, hash, username, user_id
+			email, hash, username, user_id, groups
 		from password where email = $1;
 	`, strings.ToLower(email)))
 }
@@ -656,7 +656,7 @@
 func (c *conn) ListPasswords() ([]storage.Password, error) {
 	rows, err := c.Query(`
 		select
-			email, hash, username, user_id
+			email, hash, username, user_id, groups
 		from password;
 	`)
 	if err != nil {
@@ -680,7 +680,7 @@

 func scanPassword(s scanner) (p storage.Password, err error) {
 	err = s.Scan(
-		&p.Email, &p.Hash, &p.Username, &p.UserID,
+		&p.Email, &p.Hash, &p.Username, &p.UserID, decoder(&p.Groups),
 	)
 	if err != nil {
 		if err == sql.ErrNoRows {
diff --git a/cmd/dex/config.go b/cmd/dex/config.go
--- a/cmd/dex/config.go	(revision 23efe9200ccd9e0a69242bf61cd221462370d1f4)
+++ b/cmd/dex/config.go	(date 1718355089189)
@@ -94,11 +94,12 @@

 func (p *password) UnmarshalJSON(b []byte) error {
 	var data struct {
-		Email       string `json:"email"`
-		Username    string `json:"username"`
-		UserID      string `json:"userID"`
-		Hash        string `json:"hash"`
-		HashFromEnv string `json:"hashFromEnv"`
+		Email       string   `json:"email"`
+		Username    string   `json:"username"`
+		UserID      string   `json:"userID"`
+		Hash        string   `json:"hash"`
+		HashFromEnv string   `json:"hashFromEnv"`
+		Groups      []string `json:"groups"`
 	}
 	if err := json.Unmarshal(b, &data); err != nil {
 		return err
@@ -107,6 +108,7 @@
 		Email:    data.Email,
 		Username: data.Username,
 		UserID:   data.UserID,
+		Groups:   data.Groups,
 	})
 	if len(data.Hash) == 0 && len(data.HashFromEnv) > 0 {
 		data.Hash = os.Getenv(data.HashFromEnv)
diff --git a/storage/storage.go b/storage/storage.go
--- a/storage/storage.go	(revision 23efe9200ccd9e0a69242bf61cd221462370d1f4)
+++ b/storage/storage.go	(date 1718355089203)
@@ -354,6 +354,9 @@

 	// Randomly generated user ID. This is NOT the primary ID of the Password object.
 	UserID string `json:"userID"`
+
+	// Groups assigned to the user
+	Groups []string `json:"groups"`
 }

 // Connector is an object that contains the metadata about connectors used to login to Dex.
