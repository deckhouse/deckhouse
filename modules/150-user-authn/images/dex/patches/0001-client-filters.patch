diff --git i/server/handlers.go w/server/handlers.go
index a00b290b..29fad037 100644
--- i/server/handlers.go
+++ w/server/handlers.go
@@ -21,7 +21,10 @@ import (
 	"github.com/go-jose/go-jose/v4"
 	"github.com/gorilla/mux"
 
+	"slices"
+
 	"github.com/dexidp/dex/connector"
+	"github.com/dexidp/dex/pkg/groups"
 	"github.com/dexidp/dex/server/internal"
 	"github.com/dexidp/dex/storage"
 )
@@ -387,7 +390,7 @@ func (s *Server) handlePasswordLogin(w http.ResponseWriter, r *http.Request) {
 		redirectURL, canSkipApproval, err := s.finalizeLogin(r.Context(), identity, authReq, conn.Connector)
 		if err != nil {
 			s.logger.ErrorContext(r.Context(), "failed to finalize login", "err", err)
-			s.renderError(r, w, http.StatusInternalServerError, "Login error.")
+			s.renderError(r, w, http.StatusUnauthorized, fmt.Sprintf("Failed to authenticate: %v", err))
 			return
 		}
 
@@ -395,7 +398,7 @@ func (s *Server) handlePasswordLogin(w http.ResponseWriter, r *http.Request) {
 			authReq, err = s.storage.GetAuthRequest(ctx, authReq.ID)
 			if err != nil {
 				s.logger.ErrorContext(r.Context(), "failed to get finalized auth request", "err", err)
-				s.renderError(r, w, http.StatusInternalServerError, "Login error.")
+				s.renderError(r, w, http.StatusUnauthorized, fmt.Sprintf("Failed to authenticate: %v", err))
 				return
 			}
 			s.sendCodeResponse(w, r, authReq)
@@ -480,14 +483,14 @@ func (s *Server) handleConnectorCallback(w http.ResponseWriter, r *http.Request)
 
 	if err != nil {
 		s.logger.ErrorContext(r.Context(), "failed to authenticate", "err", err)
-		s.renderError(r, w, http.StatusInternalServerError, fmt.Sprintf("Failed to authenticate: %v", err))
+		s.renderError(r, w, http.StatusUnauthorized, fmt.Sprintf("Failed to authenticate: %v", err))
 		return
 	}
 
 	redirectURL, canSkipApproval, err := s.finalizeLogin(ctx, identity, authReq, conn.Connector)
 	if err != nil {
 		s.logger.ErrorContext(r.Context(), "failed to finalize login", "err", err)
-		s.renderError(r, w, http.StatusInternalServerError, "Login error.")
+		s.renderError(r, w, http.StatusUnauthorized, fmt.Sprintf("Failed to authenticate: %v", err))
 		return
 	}
 
@@ -495,7 +498,7 @@ func (s *Server) handleConnectorCallback(w http.ResponseWriter, r *http.Request)
 		authReq, err = s.storage.GetAuthRequest(ctx, authReq.ID)
 		if err != nil {
 			s.logger.ErrorContext(r.Context(), "failed to get finalized auth request", "err", err)
-			s.renderError(r, w, http.StatusInternalServerError, "Login error.")
+			s.renderError(r, w, http.StatusUnauthorized, fmt.Sprintf("Failed to authenticate: %v", err))
 			return
 		}
 		s.sendCodeResponse(w, r, authReq)
@@ -517,6 +520,25 @@ func (s *Server) finalizeLogin(ctx context.Context, identity connector.Identity,
 		Groups:            identity.Groups,
 	}
 
+	client, err := s.storage.GetClient(ctx, authReq.ClientID)
+	if err != nil {
+		return "", false, fmt.Errorf("failed to retrieve client")
+	}
+
+	if len(client.AllowedEmails) > 0 {
+		allowed := slices.Contains(client.AllowedEmails, claims.Email)
+		if !allowed {
+			return "", false, fmt.Errorf("user %q not in allowed emails: %v", claims.Username, claims.Email)
+		}
+	}
+
+	if len(client.AllowedGroups) > 0 {
+		claims.Groups = groups.Filter(claims.Groups, client.AllowedGroups)
+		if len(claims.Groups) == 0 {
+			return "", false, fmt.Errorf("user %q not in allowed groups: %v", claims.Username, claims.Groups)
+		}
+	}
+
 	updater := func(a storage.AuthRequest) (storage.AuthRequest, error) {
 		a.LoggedIn = true
 		a.Claims = claims
diff --git i/storage/kubernetes/types.go w/storage/kubernetes/types.go
index c126ddc0..4c1a1efa 100644
--- i/storage/kubernetes/types.go
+++ w/storage/kubernetes/types.go
@@ -251,6 +251,9 @@ type Client struct {
 
 	Name    string `json:"name,omitempty"`
 	LogoURL string `json:"logoURL,omitempty"`
+
+	AllowedEmails []string `json:"allowedEmails,omitempty"`
+	AllowedGroups []string `json:"allowedGroups,omitempty"`
 }
 
 // ClientList is a list of Clients.
@@ -270,25 +273,29 @@ func (cli *client) fromStorageClient(c storage.Client) Client {
 			Name:      cli.idToName(c.ID),
 			Namespace: cli.namespace,
 		},
-		ID:           c.ID,
-		Secret:       c.Secret,
-		RedirectURIs: c.RedirectURIs,
-		TrustedPeers: c.TrustedPeers,
-		Public:       c.Public,
-		Name:         c.Name,
-		LogoURL:      c.LogoURL,
+		ID:            c.ID,
+		Secret:        c.Secret,
+		RedirectURIs:  c.RedirectURIs,
+		TrustedPeers:  c.TrustedPeers,
+		Public:        c.Public,
+		Name:          c.Name,
+		LogoURL:       c.LogoURL,
+		AllowedEmails: c.AllowedEmails,
+		AllowedGroups: c.AllowedGroups,
 	}
 }
 
 func toStorageClient(c Client) storage.Client {
 	return storage.Client{
-		ID:           c.ID,
-		Secret:       c.Secret,
-		RedirectURIs: c.RedirectURIs,
-		TrustedPeers: c.TrustedPeers,
-		Public:       c.Public,
-		Name:         c.Name,
-		LogoURL:      c.LogoURL,
+		ID:            c.ID,
+		Secret:        c.Secret,
+		RedirectURIs:  c.RedirectURIs,
+		TrustedPeers:  c.TrustedPeers,
+		Public:        c.Public,
+		Name:          c.Name,
+		LogoURL:       c.LogoURL,
+		AllowedEmails: c.AllowedEmails,
+		AllowedGroups: c.AllowedGroups,
 	}
 }
 
diff --git i/storage/storage.go w/storage/storage.go
index 574b0a5a..dac3115c 100644
--- i/storage/storage.go
+++ w/storage/storage.go
@@ -171,6 +171,9 @@ type Client struct {
 	// Name and LogoURL used when displaying this client to the end user.
 	Name    string `json:"name" yaml:"name"`
 	LogoURL string `json:"logoURL" yaml:"logoURL"`
+
+	AllowedEmails []string `json:"allowedEmails,omitempty" yaml:"allowedEmails,omitempty"`
+	AllowedGroups []string `json:"allowedGroups,omitempty" yaml:"allowedGroups,omitempty"`
 }
 
 // Claims represents the ID Token claims supported by the server.
