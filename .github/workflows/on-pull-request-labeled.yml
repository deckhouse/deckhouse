#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# This workflow reacts to labels and restart workflows if needed.
# Cloud layout tests and deploy web are restarted only when PR is labeled.
# Validation workflow is restarted when PR is labeled or unlabeled.
name: Rerun workflows for pull request

on:
  pull_request_target:
    types: [labeled, unlabeled]
jobs:

  # <template: pull_request_info>
  pull_request_info:
    name: Get pull request reference
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.ref.outputs.ref }}
    # Skip the CI for automation PRs, e.g. changelog
    if: ${{ github.event.pull_request.user.login != 'deckhouse-BOaTswain' }}
    steps:
      - name: Check if allow to run tests
        id: check
        uses: actions/github-script@v5.1.0
        with:
          script: |
            // Assume workflow_dispatch is safe to run.
            // TODO add owner, repo, sha to inputs to check them here.
            if (context.eventName === 'workflow_dispatch') {
              core.info(`workflow_dispatch detected, set should_run to 'true'`);
              return core.setOutput('should_run', 'true');
            }

            if (!context.payload.pull_request) {
              return core.setFailed(`Unknown event, no pull request context. event_name=${context.eventName} action=${context.action} ref=${context.ref}`);
            }

            // Fetch fresh pull request state using sha.
            // Why? Workflow rerun of 'opened' pull request contains outdated labels.
            const owner = context.payload.pull_request.head.repo.owner.login
            const repo = context.payload.pull_request.head.repo.name
            const commit_sha = context.payload.pull_request.head.sha
            const head_label = context.payload.pull_request.head.label
            core.info(`Pull request: ${JSON.stringify({ owner, repo, commit_sha, head_label })}`);
            core.info(`Base repo: ${JSON.stringify({owner: context.repo.owner, repo: context.repo.repo})}`);
            const response = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: head_label
            });
            if (response.status != 200) {
              return core.setFailed(`Cannot list PRs for head ${head_label} (${commit_sha}): ${JSON.stringify(response)}`);
            }

            // No PR found, do not run next jobs.
            if (!response.data || response.data.length === 0) {
              return core.setFailed(`No pull_request found. event_name=${context.eventName} action=${context.action} ref=${context.ref}`);
            }

            const prRepo = context.payload.pull_request.head.repo.full_name;
            const targetRepo = context.payload.repository.full_name;
            const isInternal = prRepo === targetRepo;
            const isDependabot = (context.actor === 'dependabot[bot]');
            const isChangelog = context.payload.pull_request.head.ref.startsWith('changelog/v');
            const okToTest = response.data[0].labels.some((l) => l.name === 'status/ok-to-test');

            core.info(`PR internal?          ${isInternal}`)
            core.info(`PR from dependabot?   ${isDependabot}`)
            core.info(`PR changelog?         ${isChangelog}`)
            core.info(`PR has 'ok-to-test'?  ${okToTest}`)

            if (isInternal && !isDependabot) {
              // Ignore changelog pull requests.
              if (isChangelog) {
                return core.setFailed(`PR#${context.payload.pull_request.number} for changelog is ignored.`);
              }
            } else {
              // External and dependabot pull requests should be labeled with 'status/ok-to-test'.
              if (!okToTest) {
                return core.setFailed(`PR#${context.payload.pull_request.number} without label 'status/ok-to-test' is ignored.`);
              }
            }

      # Checkhout the head commit of the PR branch.
      - name: Checkout PR head commit
        uses: actions/checkout@v2.4.0
        with:
          ref: "refs/pull/${{ github.event.number }}/head"

      # Detect dangerous changes in external PR.
      - name: Check for dangerous changes
        uses: dorny/paths-filter@v2
        if: github.event.pull_request.head.repo.full_name != github.repository
        id: changes
        with:
          token: ${{ secrets.BOATSWAIN_GITHUB_TOKEN }}
          filters: |
            dangerous:
              - './.github/**'
              - './.gitlab/**'
              - './tools/**'
              - './testing/**'
              - './docs/**/js/**'
              - './docs/**/css/**'
              - './docs/**/images/**'
              - './docs/**/assets/**'

      # Stop workflow if external PR contains dangerous changes.
      - name: Fail workflow on dangerous changes
        if: steps.changes.outputs.dangerous == 'true'
        uses: actions/github-script@v5.1.0
        with:
          script: |
            core.setFailed('External PR contains dangerous changes.')

      # Set output.
      - name: Return PR head commit ref
        id: ref
        uses: actions/github-script@v5.1.0
        with:
          script: |
            const ref = `refs/pull/${ context.issue.number }/head`
            core.info(`ref: '${ref}'`)
            core.setOutput('ref', ref)
  # </template: pull_request_info>
  rerun_workflow_for_pull_request:
    name: Rerun workflow for pull request
    runs-on: ubuntu-latest
    needs:
      - pull_request_info
    steps:

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0

      # </template: checkout_step>
      - name: Rerun workflow
        uses: actions/github-script@v5.1.0
        with:
          github-token: ${{ secrets.BOATSWAIN_GITHUB_TOKEN }}
          script: |
            const ci = require('./.github/scripts/js/ci');
            const ref = "${{ needs.pull_request_info.outputs.ref }}"
            return await ci.runWorkflowForPullRequest({ github, context, core, ref });
