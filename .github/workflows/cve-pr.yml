#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# Copyright 2025 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Trivy CVE scan on PR'
on:
  pull_request:
    types: [opened, reopened, labeled, synchronize]

# Cancel in-progress jobs for the same PR (pull_request_target event) or for the same branch (push event).
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:
  test_cve_report_main:
    name: Trivy scan dev images
    if: |
      github.event.label.name == 'security/cve' ||
      (github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'security/cve'))
    runs-on: [self-hosted, large]
    env:
      IMAGE: "dev-registry.deckhouse.io/sys/deckhouse-oss"
      TAG: pr${{ github.event.number }}
    steps:

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Check dev registry credentials
        id: check_dev_registry
        env:
          HOST: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.DECKHOUSE_DEV_REGISTRY_HOST }}/deckhouse/site" >> $GITHUB_OUTPUT
          fi
      - name: Login to dev registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_dev_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: link_bin_step>
      - name: Link binary cache
        id: link_bin_step
        run: |
          ln -s ~/deckhouse-bin-cache bin
      # </template: link_bin_step>

      # <template: cve_tests_deckhouse_images>
      - name: Run Deckhouse images CVE tests on ${{env.TAG}}
        env:
          DEFECTDOJO_API_TOKEN: ${{secrets.DEFECTDOJO_API_TOKEN}}
          DEFECTDOJO_HOST: ${{secrets.DEFECTDOJO_HOST}}
          DECKHOUSE_PRIVATE_REPO: ${{secrets.DECKHOUSE_PRIVATE_REPO}}
          TRIVY_PROJECT_ID: "2181"
          TRIVY_DB_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-db:2
          TRIVY_JAVA_DB_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-java-db:1
          TRIVY_POLICY_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-bdu:1
          REGISTRY_USER: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
        run: |
          echo "‚öìÔ∏è üèé Running Deckhouse images CVE tests on ${TAG}..."
          make cve-report
      # </template: cve_tests_deckhouse_images>

      # <template: cve_tests_upload_reports_artifacts>
      - name: Archive report artifacts
        if: success()
        run: |
          tar -zcvf out/trivy_json_reports.tar.gz out/json
      - name: Create fail artifact
        if: failure()
        run: |
          echo "Trivy tests for ${TAG} have failed." > "out/${TAG}_test-failed.txt"
          tar -zcvf out/trivy_json_reports.tar.gz out/json
      - name: Upload report artifacts
        if: success()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cve-reports
          path: |
            out/trivy_json_reports.tar.gz
      - name: Upload fail artifact
        if: failure()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cve-reports
          path: |
            out/${{ env.TAG }}_test-failed.txt
            out/trivy_json_reports.tar.gz
      # </template: cve_tests_upload_reports_artifacts>

      # <template: unlink_bin_step>
      - name: Unlink binary cache
        id: unlink_bin_step
        if: always()
        run: |
          rm bin
      # </template: unlink_bin_step>
