#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# Copyright 2025 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Trivy CVE scan on PR'
on:
  pull_request:
    types: [opened, reopened, labeled, synchronize]

# Cancel in-progress jobs for the same PR (pull_request_target event) or for the same branch (push event).
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

jobs:

  # <template: git_info_job>

  git_info:
    name: Get git info
    runs-on: ubuntu-latest
    outputs:
      ci_commit_tag: ${{ steps.git_info.outputs.ci_commit_tag }}
      ci_commit_branch: ${{ steps.git_info.outputs.ci_commit_branch }}
      ci_commit_ref_name: ${{ steps.git_info.outputs.ci_commit_ref_name }}
      ci_commit_ref_slug: ${{ steps.git_info.outputs.ci_commit_ref_slug }}
      ref_full: ${{ steps.git_info.outputs.ref_full }}
      github_sha: ${{ steps.git_info.outputs.github_sha }}
      pr_number: ${{ steps.git_info.outputs.pr_number }}
    # Skip the CI for automation PRs, e.g. changelog, don't skip if Pull Request title contains "[run ci]".
    if: ${{ contains(github.event.pull_request.title, '[run ci]') || github.event.pull_request.user.login != 'deckhouse-BOaTswain' }}
    steps:
      - id: git_info
        name: Get tag name and SHA
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const { GITHUB_REF_TYPE, GITHUB_REF_NAME, GITHUB_REF } = process.env

            let refSlug = ''
            let refName = ''
            let refFull = ''
            let githubBranch = ''
            let githubTag = ''
            let githubSHA = ''
            let prNumber = ''
            if (context.eventName === "workflow_dispatch" && context.payload.inputs && context.payload.inputs.pull_request_ref) {
              // Trigger: workflow_dispatch with pull_request_ref.
              // Extract pull request number from 'refs/pull/<NUM>/merge'
              prNumber = context.payload.inputs.pull_request_ref.replace('refs/pull/', '').replace('/merge', '').replace('/head', '')

              refSlug       = `pr${prNumber}`
              refName       = context.payload.inputs.ci_commit_ref_name
              refFull       = context.payload.inputs.pull_request_ref
              githubBranch  = refName
              githubSHA     = context.payload.inputs.pull_request_sha
              core.info(`workflow_dispatch event: set git info from inputs. inputs: ${JSON.stringify(context.payload.inputs)}`)
            } else if (context.eventName === "pull_request" || context.eventName === "pull_request_target" ) {
              // For PRs from forks, tag images with `prXXX` to avoid clashes between branches.
              const targetRepo = context.payload.repository.full_name;
              const prRepo = context.payload.pull_request.head.repo.full_name
              const prRef = context.payload.pull_request.head.ref

              refSlug = `pr${context.issue.number}`;
              refName = (prRepo === targetRepo) ? prRef : refSlug;
              refFull = `refs/pull/${context.issue.number}/head`
              githubBranch = refName
              githubSHA = context.payload.pull_request.head.sha
              core.info(`pull request event: set git info from pull_request.head. pr:${prRepo}:${prRef} target:${targetRepo}:${context.ref}`)
              prNumber = context.issue.number
            } else {
              // Other triggers: workflow_dispatch without pull_request_ref, schedule, push...
              // refName is 'main' or tag name, so slugification is not necessary.
              refSlug       = GITHUB_REF_NAME
              refName       = GITHUB_REF_NAME
              refFull       = GITHUB_REF
              githubTag     = GITHUB_REF_TYPE == "tag"    ? refName : ""
              githubBranch  = GITHUB_REF_TYPE == "branch" ? refName : ""
              githubSHA     = context.sha
              core.info(`${context.eventName} event: set git info from context: ${JSON.stringify({GITHUB_REF_NAME, GITHUB_REF_TYPE, sha: context.sha })}`)
            }

            core.setCommandEcho(true)
            core.setOutput('ci_commit_ref_slug', refSlug)
            core.setOutput('ci_commit_ref_name', refName)
            core.setOutput(`ci_commit_tag`, githubTag)
            core.setOutput(`ci_commit_branch`, githubBranch)
            core.setOutput(`ref_full`, refFull)
            core.setOutput('github_sha', githubSHA)
            core.setOutput('pr_number', prNumber)
            core.setCommandEcho(false)

  # </template: git_info_job>

  # </template: block-until-image-is-not-ready>
  block-until-image-is-not-ready:
    name: Block until the docker image is not ready
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.2
      - name: Block until the docker image is not ready
        id: block-image-dont-ready
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const githubAction = require('./.github/scripts/js/helpers/github-actions')({github, context, core});
            const { isReleaseBranch } = require('./.github/scripts/js/helpers/utils');

            let branchName;
            let prNum;

            if (context.eventName === 'pull_request') {
              branchName = context.payload.pull_request.head.ref;
              prNum = context.payload.pull_request.number;
            } else if (context.eventName === 'workflow_dispatch') {
              branchName = context.payload.inputs.ci_commit_ref_name;
              prNum = context.payload.inputs.issue_number;
            }

            if (branchName) {
              let infoText = `Check build workflow is completed for branch: ${branchName}`;
              if (prNum) {
                infoText +=  ` PR: ${context.payload.repository.html_url}/pull/${prNum}`;
              }
              core.info(infoText);

              const { waitForJobInWorkflowIsCompletedWithSuccess } = require('./.github/scripts/js/validators/validate-job-in-workflow-is-ready')({ github, context, core });
              try {
                let workflowName = 'Build and test for dev branches';
                let jobName = 'Build FE';
                if (isReleaseBranch(branchName)) {
                  workflowName = 'Build and test for release branches';
                }
                if (branchName === 'main') {
                  return true;
                }
                await waitForJobInWorkflowIsCompletedWithSuccess(branchName, workflowName, jobName);
              } catch(error) {
                core.setFailed(error);
              }
            } else {
              core.setFailed("Branch name not found.");
            }

  # </template: block-until-image-is-not-ready>

  test_cve_report_main:
    name: Trivy scan dev images
    if: |
      github.event.label.name == 'security/cve' ||
      (github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, 'security/cve'))
    runs-on: [self-hosted, large]
    env:
      WORKDIR: "cve_scan"
      TAG: pr${{ github.event.number }}
    steps:

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: link_bin_step>
      - name: Link binary cache
        id: link_bin_step
        run: |
          ln -s ~/deckhouse-bin-cache bin
      # </template: link_bin_step>

      # <template: cve_scan_deckhouse_images>
      - name: Set scan target type
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_name }}" == "main" ]; then
            echo "SCAN_TARGET=only_main" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "SCAN_TARGET=pr" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" != "schedule" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "SCAN_TARGET=regular" >> $GITHUB_ENV
          fi
      - name: Run Deckhouse images CVE tests on ${{env.TAG}}
        env:
          DEFECTDOJO_API_TOKEN: ${{secrets.DEFECTDOJO_API_TOKEN}}
          DEFECTDOJO_HOST: ${{secrets.DEFECTDOJO_HOST}}
          DECKHOUSE_PRIVATE_REPO: ${{secrets.DECKHOUSE_PRIVATE_REPO}}
          DEV_REGISTRY: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          DEV_REGISTRY_USER: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          PROD_REGISTRY: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          PROD_REGISTRY_USER: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          PROD_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          TRIVY_BIN_VERSION: "v0.60.0"
          TRIVY_PROJECT_ID: "2181"
          TRIVY_DB_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-db:2
          TRIVY_JAVA_DB_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-java-db:1
          TRIVY_POLICY_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-bdu:1
          SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        run: |
          echo "‚öìÔ∏è üèé Running Deckhouse images CVE tests on ${TAG}..."
          ./.github/scripts/cve_scan.sh -r
      # </template: cve_scan_deckhouse_images>

      # <template: cve_tests_upload_reports_artifacts>
      - name: Archive report artifacts
        if: success()
        run: |
          tar -zcvf ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz ${{ env.WORKDIR }}/deckhouse
      - name: Create fail artifact
        if: failure()
        run: |
          echo "Trivy tests for ${TAG} have failed." > "${{ env.WORKDIR }}/artifacts/${TAG}_test-failed.txt"
          tar -zcvf ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz ${{ env.WORKDIR }}/deckhouse
      - name: Upload report artifacts
        if: success()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cve-reports
          path: |
            ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz
      - name: Upload fail artifact
        if: failure()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cve-reports
          path: |
            ${{ env.WORKDIR }}/artifacts/${{ env.TAG }}_test-failed.txt
            ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz
      - name: Remove workdir
        run: |
          rm -r ${{ env.WORKDIR }}
      # </template: cve_tests_upload_reports_artifacts>

      # <template: unlink_bin_step>
      - name: Unlink binary cache
        id: unlink_bin_step
        if: always()
        run: |
          rm bin
      # </template: unlink_bin_step>
