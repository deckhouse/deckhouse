#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# Copyright 2025 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Trivy CVE scan on PR'
on:
  workflow_dispatch:
    inputs:
      issue_id:
        description: 'ID of issue where label was set'
        required: false
      issue_number:
        description: 'Number of issue where label was set'
        required: false
      comment_id:
        description: 'ID of comment in issue where to put workflow run status'
        required: false
      ci_commit_ref_name:
        description: 'Git ref name for image tags'
        required: false
      pull_request_ref:
        description: 'Git ref for checkout PR sources'
        required: false
      pull_request_sha:
        description: 'Git SHA for restoring artifacts from cache'
        required: false
      pull_request_head_label:
        description: 'Head label of pull request. e.g. my_repo:my_feature_branch'
        required: false

jobs:

  # </template: block-until-image-is-not-ready>
  block-until-image-is-not-ready:
    name: Block until the docker image is not ready
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.2
      - name: Block until the docker image is not ready
        id: block-image-dont-ready
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const githubAction = require('./.github/scripts/js/helpers/github-actions')({github, context, core});
            const { isReleaseBranch } = require('./.github/scripts/js/helpers/utils');

            let branchName;
            let prNum;

            if (context.eventName === 'pull_request') {
              branchName = context.payload.pull_request.head.ref;
              prNum = context.payload.pull_request.number;
            } else {
              return true;
            }

            if (!branchName) {
              branchName = githubAction.GetBranchNameFromContext(context);
            }

            if (branchName) {
              let infoText = `Check build workflow is completed for branch: ${branchName}`;
              if (prNum) {
                infoText +=  ` PR: ${context.payload.repository.html_url}/pull/${prNum}`;
              }
              core.info(infoText);

              const { waitForJobInWorkflowIsCompletedWithSuccess } = require('./.github/scripts/js/validators/validate-job-in-workflow-is-ready')({ github, context, core });
              try {
                let workflowName = 'Build and test for dev branches';
                let jobName = 'Build FE';
                if (isReleaseBranch(branchName)) {
                  workflowName = 'Build and test for release branches';
                }
                if (branchName === 'main') {
                  return true;
                }
                await waitForJobInWorkflowIsCompletedWithSuccess(branchName, workflowName, jobName);
              } catch(error) {
                core.setFailed(error);
              }
            } else {
              core.setFailed("Branch name not found.");
            }

  # </template: block-until-image-is-not-ready>

  test_cve_report_main:
    name: Trivy scan dev images
    needs:
    - block-until-image-is-not-ready
    runs-on: [self-hosted, large]
    env:
      WORKDIR: "cve_scan"
    steps:

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: link_bin_step>
      - name: Link binary cache
        id: link_bin_step
        run: |
          ln -s ~/deckhouse-bin-cache bin
      # </template: link_bin_step>

      # <template: exctract_pr_number>
      - name: Extract PR number from ref
        id: extract_pr
        run: |
          echo "REF=${{ github.event.inputs.pull_request_ref }}"
          PR_NUMBER=$(echo "${{ github.event.inputs.pull_request_ref }}" | sed -E 's#refs/pull/([0-9]+)/head#\1#')
          echo "PR_NUMBER=$PR_NUMBER"
          echo "SOURCE_TAG=pr$PR_NUMBER" >> $GITHUB_ENV
      # </template: exctract_pr_number>

      # <template: add_ssh_keys_for_cve_tests>
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.CVE_TESTS_SSH_PRIVATE_KEY }}
      - name: Add ssh_known_hosts
        run: |
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{ secrets.CVE_TESTS_REPO_GIT }})
          echo "::add-mask::$HOST"
          IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
          for IP in $IPS; do
            echo "::add-mask::$IP"
          done
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
      # </template: add_ssh_keys_for_cve_tests>

      # <template: cve_scan_deckhouse_images>
      - name: Set scan target type
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_name }}" == "main" ]; then
            echo "SCAN_TARGET=only_main" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.pull_request_ref }}" ]; then
            echo "SCAN_TARGET=pr" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" != "schedule" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "SCAN_TARGET=regular" >> $GITHUB_ENV
          fi

      - name: Download CVE scan script from private GitLab
        run: |
          echo "Cloning CVE scan script from private GitLab..."

          mkdir -p ${{ env.WORKDIR }}/scripts
          git clone ${{ secrets.CVE_TESTS_REPO_GIT }} ${{ env.WORKDIR }}/scripts
          chmod +x "${{ env.WORKDIR }}/scripts/cve_scan.sh"

          echo "CVE scan script cloned successfully"

      - name: Run Deckhouse images CVE tests on ${{env.SOURCE_TAG}}
        env:
          SOURCE_TAG: ${{env.SOURCE_TAG}}
          CASE: "deckhouse"          
          DD_URL: ${{secrets.DD_DEV_URL}}
          DD_TOKEN: ${{secrets.DD_DEV_TOKEN}}
          DEFAULT_BRANCH: ${{github.default_branch}}
          COMMIT_TAG: ${{github.ref_name}}
          COMMIT_SHA: ${{github.sha}}
          EVENT_NAME: ${{github.event_name}}
          TAG_TYPE: "release"
          SCAN_SEVERAL_LATEST_RELEASES: "false"
          MODULE_NAME: "Deckhouse"
          DECKHOUSE_PRIVATE_REPO: ${{secrets.DECKHOUSE_PRIVATE_REPO}}
          DEV_REGISTRY: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          DEV_REGISTRY_USER: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          PROD_REGISTRY: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          PROD_REGISTRY_USER: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          PROD_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          TRIVY_BIN_VERSION: "v0.63.0"
          TRIVY_PROJECT_ID: "2181"
          TRIVY_DB_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-db:2
          TRIVY_JAVA_DB_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-java-db:1
          TRIVY_POLICY_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-bdu:1
          SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        run: |
          echo "‚öìÔ∏è üèé Running Deckhouse images CVE tests on ${SOURCE_TAG}..."
          ${{ env.WORKDIR }}/scripts/cve_scan.sh
      # </template: cve_scan_deckhouse_images>

      # <template: cve_tests_upload_reports_artifacts>
      - name: Archive report artifacts
        if: success()
        run: |
          tar -zcvf ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz ${{ env.WORKDIR }}/deckhouse
      - name: Create fail artifact
        if: failure()
        run: |
          echo "Trivy tests for ${SOURCE_TAG} have failed." > "${{ env.WORKDIR }}/artifacts/${SOURCE_TAG}_test-failed.txt"
          tar -zcvf ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz ${{ env.WORKDIR }}/deckhouse
      - name: Upload report artifacts
        if: success()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cve-reports
          path: |
            ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz
      - name: Upload fail artifact
        if: failure()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cve-reports
          path: |
            ${{ env.WORKDIR }}/artifacts/${{ env.SOURCE_TAG }}_test-failed.txt
            ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz
      - name: Remove workdir
        run: |
          rm -r ${{ env.WORKDIR }}
      # </template: cve_tests_upload_reports_artifacts>

      # <template: unlink_bin_step>
      - name: Unlink binary cache
        id: unlink_bin_step
        if: always()
        run: |
          rm bin
      # </template: unlink_bin_step>
      # <template: update_comment_on_finish>
      - name: Update comment on finish
        id: update_comment_on_finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        uses: actions/github-script@v6.4.1
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          retries: 3
          script: |
            const statusConfig = 'workflow,final,no-skipped,restore-separate';
            const name = 'Trivy CVE scan on PR';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);
            const stepsContext = JSON.parse(process.env.STEPS_CONTEXT);
            let jobNames = null
            if (process.env.JOB_NAMES) {
              jobNames = JSON.parse(process.env.JOB_NAMES);
            }

            core.info(`needsContext: ${JSON.stringify(needsContext)}`);
            core.info(`jobContext: ${JSON.stringify(jobContext)}`);
            core.info(`stepsContext: ${JSON.stringify(stepsContext)}`);
            core.info(`jobNames: ${JSON.stringify(jobNames)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusConfig, name, needsContext, jobContext, stepsContext, jobNames});
      # </template: update_comment_on_finish>

  # <template: remove_labels_job>
  remove_labels:
    name: Remove labels
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
    steps:

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2

      # </template: checkout_step>
      - name: Remove labels
        id: remove
        uses: actions/github-script@v6.4.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const label = "security/cve";
            const ci = require('./.github/scripts/js/ci');
            const issue_number = context.payload.inputs.issue_number;
            console.log("Issue number is", issue_number);
            return await ci.removeLabel({github, context, core, issue_number, label});
  # </template: remove_labels_job>


  # <template: set_security_scan_requirement_status>
  set_security_scan_requirement_status: 
    name: Set commit status after security scan run
    runs-on: ubuntu-latest
    needs: test_cve_report_main
    if: ${{ always() && github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
    steps:

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2

      # </template: checkout_step>
      - name: Install GitHub CLI
        run: sudo apt-get install gh -y
      - name: Auth with GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Set PR Label
        env:
          PR_NUMBER: ${{ inputs.issue_number }}
        run: |
          echo "PR Number: $PR_NUMBER"
          if [ "${{ needs.test_cve_report_main.result }}" == "success" ]; then
            gh pr edit "$PR_NUMBER" --add-label "security/cve/success"
          else
            gh pr edit "$PR_NUMBER" --add-label "security/cve/failed"
          fi
  # </template: set_security_scan_requirement_status>
