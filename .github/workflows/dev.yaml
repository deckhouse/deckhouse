# on every push to dev branches
name: Build and test
on:
  push:
    branches-ignore:
      - 'main'
      - 'release-*'

env:
  # ci_includes/image_versions.yml
  BASE_ALPINE: "registry.deckhouse.io/base_images/alpine:3.12.1@sha256:c0e9560cda118f9ec63ddefb4a173a2b2a0347082d7dff7dc14272e7841a5b5a"
  BASE_DEBIAN: "registry.deckhouse.io/base_images/debian:buster-20210111@sha256:b16f66714660c4b3ea14d273ad8c35079b81b35d65d1e206072d226c7ff78299"
  BASE_GOLANG_ALPINE: "registry.deckhouse.io/base_images/golang:1.15.3-alpine3.12@sha256:df0119b970c8e5e9f0f5c40f6b55edddf616bab2b911927ebc3b361c469ea29c"
  BASE_GOLANG_16_ALPINE: "registry.deckhouse.io/base_images/golang:1.16.3-alpine3.12@sha256:371dc6bf7e0c7ce112a29341b000c40d840aef1dbb4fdcb3ae5c0597e28f3061"
  BASE_GOLANG_BUSTER: "registry.deckhouse.io/base_images/golang:1.15.3-buster@sha256:fb04edf20446eed8af9eb6137d02fdf607f47028a0a806131f8b175a09620aab"
  BASE_GOLANG_16_BUSTER: "registry.deckhouse.io/base_images/golang:1.16.3-buster@sha256:9d64369fd3c633df71d7465d67d43f63bb31192193e671742fa1c26ebc3a6210"
  BASE_NGINX_ALPINE: "registry.deckhouse.io/base_images/nginx:1.15.12-alpine@sha256:57a226fb6ab6823027c0704a9346a890ffb0cacde06bc19bbc234c8720673555"
  BASE_PYTHON_ALPINE: "registry.deckhouse.io/base_images/python:3.7.9-alpine3.12@sha256:8c224566c41fcc1674f9b78ff2a364a1209370a5b7e7619e8ead2bdcd0fd8b52"
  BASE_SHELL_OPERATOR: "registry.deckhouse.io/base_images/shell-operator:v1.0.1@sha256:51dbdbad17303c31265af389c6acc73d1b6b6c66bd2112542e09b42566ac05bf"
  BASE_UBUNTU: "registry.deckhouse.io/base_images/ubuntu:bionic-20210118@sha256:ea188fdc5be9b25ca048f1e882b33f1bc763fb976a8a4fea446b38ed0efcbeba"
  # ci_includes/terraform_versions.yml
  TF_VERSION: 0.13.4
  TF_AWS_NAMESPACE: hashicorp
  TF_AWS_TYPE: aws
  TF_AWS_VERSION: 3.6.0
  TF_AZURE_NAMESPACE: hashicorp
  TF_AZURE_TYPE: azurerm
  TF_AZURE_VERSION: 2.36.0
  TF_GCP_NAMESPACE: hashicorp
  TF_GCP_TYPE: google
  TF_GCP_VERSION: 3.48.0
  TF_OPENSTACK_NAMESPACE: terraform-provider-openstack
  TF_OPENSTACK_TYPE: openstack
  TF_OPENSTACK_VERSION: 1.32.0
  TF_YANDEX_NAMESPACE: yandex-cloud
  TF_YANDEX_TYPE: yandex
  TF_YANDEX_VERSION: 0.45.1
  TF_VSPHERE_NAMESPACE: hashicorp
  TF_VSPHERE_TYPE: vsphere
  TF_VSPHERE_VERSION: 1.24.2

  # Don't forget to update .gitlab-ci-simple.yml if necessary
  WERF_CHANNEL: "ea"
  WERF_ENV: FE
  # We use stapel image from own registry due to docker hub pull amount limitation.
  # To re-push stapel image from docker hub use command:
  # `skopeo copy docker://flant/werf-stapel:0.6.1 docker://registry-write.deckhouse.io/flant/werf-stapel:0.6.1`
  WERF_STAPEL_IMAGE_NAME: "${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}/flant/werf-stapel"
  WERF_STAPEL_IMAGE_VERSION: "0.6.1"
  TEST_TIMEOUT: "15m"
  # Use fixed string 'sys/deckhouse-oss' for repo name, CI_PROJECT_PATH not set on Github.
  # DEV_REGISTRY_PATH: "${DECKHOUSE_DEV_REGISTRY_HOST}/${CI_PROJECT_PATH}"
  DEV_REGISTRY_PATH: "${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}/sys/deckhouse-oss"

# Analog of Gitlab's "interruptible: true" behaviour.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  save_file:
    name: Save
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v2.3.4
      - name: gen file
        run: |
          cat <<EOF > ./modules/images_FE.json
            qwd
          qwd
            qwd
          EOF

      - name: Save images_tags file
        uses: actions/upload-artifact@v2
        with:
          name: images_tags_json
          path: modules/images_tags_${{env.WERF_ENV}}.json

  restore_file:
    name: Restore
    needs:
      - save_file
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v2.3.4
      - name: Restore images_tags file
        uses: actions/download-artifact@v2
        with:
          name: images_tags_json
          path: modules
      - name: ls
        run: |
          ls -la .
          ls -la ./modules
          cat ./modules/images_FE.json
          exit 1

  # jobs for stage 'build_modules_images' from gitlab
  setup_envs:
    name: Setup common envs
    needs:
      - restore_file
    runs-on: ubuntu-latest
    steps:
#      - name: Base images versions from file
#        run: |
#
#          echo ..
#      - name: Terraform versions from file
#        run: |
#          echo ..

      - name: Other environment variables
        run: |
          # Support WERF_CHANNEL from secrets?
          #werf_channel=${{secrets.WERF_CHANNEL}}
          echo "WERF_CHANNEL=${WERF_CHANNEL:-ea}" >> "${GITHUB_ENV}"

          # detect git tag for release
          gitTag=${GITHUB_REF#refs/tags/}
          if [[ ${GITHUB_REF} == $gitTag ]] ; then
            gitTag=
          fi
          echo "CI_COMMIT_TAG=$gitTag" >> ${GITHUB_ENV}

  build_modules_images_fe:
    name: Build Modules Images FE
    needs:
      - setup_envs
    #runs-on: werf-distributed
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v2.3.4

      - name: setup envs
        run: |
          # copy some secrets
          echo "DECKHOUSE_REGISTRY_HOST=${{secrets.DECKHOUSE_REGISTRY_HOST}}" >> "${GITHUB_ENV}"
          echo "REPO_MCM_USER=${{secrets.REPO_MCM_USER}}" >> "${GITHUB_ENV}"
          echo "REPO_MCM_TOKEN=${{secrets.REPO_MCM_TOKEN}}" >> "${GITHUB_ENV}"

      - name: dev registry login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}

      - name: registry login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}

      - name: registry readonly login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}

      - name: Install werf CLI
        uses: werf/actions/install@v1.2.0
        with:
          channel: ${{env.WERF_CHANNEL}}

      - name: Run werf bp for modules
        run: |
          ./modules_images_werf bp

      - name: Save images_tags file
        uses: actions/upload-artifact@v2
        with:
          name: images_tags_json
          path: modules/images_tags_${{env.WERF_ENV}}.json

  go_generate:
    name: Go Generate
    needs:
      - setup_envs
    #runs-on: werf-distributed
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v2.3.4

      - name: registry readonly login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}

      - name: go generate
        run: |
          docker run -v $(pwd):/deckhouse -w /deckhouse/tools ${BASE_GOLANG_ALPINE} go generate .

      - name: check generated code
        run: |
          git diff --exit-code

  # jobs for stage 'build' from gitlab

  build_fe:
    name: Build FE
    needs:
      - build_modules_images_fe
      - go_generate
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v2.3.4

      - name: Restore images_tags file
        uses: actions/download-artifact@v2
        with:
          name: images_tags_json
          if-no-files-found: error

      - name: setup envs
        run: |
          ls -la .
          ls -la ./modules
          # copy some secrets
          echo "DECKHOUSE_REGISTRY_HOST=${{secrets.DECKHOUSE_REGISTRY_HOST}}" >> "${GITHUB_ENV}"
#          echo "REPO_MCM_USER=${{secrets.REPO_MCM_USER}}" >> "${GITHUB_ENV}"
#          echo "REPO_MCM_TOKEN=${{secrets.REPO_MCM_TOKEN}}" >> "${GITHUB_ENV}"

      - name: dev registry login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}

      - name: registry login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}

      - name: registry readonly login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}

      - name: Install werf CLI
        uses: werf/actions/install@v1.2.0
        with:
          channel: ${{env.WERF_CHANNEL}}

      - name: Build and push
        run: |
          type werf && source $(werf ci-env gitlab --verbose --as-file)
          export WERF_REPO="${DEV_REGISTRY_PATH}"
          werf build
          # Put tags on produced images and push to dev and release repositories.
          docker pull $(werf stage image dev)
          docker pull $(werf stage image dev/install)
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]') # CE/EE/FE -> ce/ee/fe
          if [[ -n ${CI_COMMIT_TAG} ]]; then
            # Copy from dev repo to release repo.
            werf build --repo ${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX} --secondary-repo ${WERF_REPO};
            DESTINATION_IMAGE=${DEV_REGISTRY_PATH}:${CI_COMMIT_TAG};
            DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/install:${CI_COMMIT_TAG};
            DECKHOUSE_DESTINATION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}:${CI_COMMIT_TAG};
            DECKHOUSE_DESTINATION_INSTALL_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/install:${CI_COMMIT_TAG};
            docker image tag $(werf stage image dev) ${DESTINATION_IMAGE};
            docker image tag $(werf stage image dev) ${DECKHOUSE_DESTINATION_IMAGE};
            docker image tag $(werf stage image dev/install) ${DESTINATION_INSTALL_IMAGE};
            docker image tag $(werf stage image dev/install) ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
            docker image push ${DESTINATION_IMAGE};
            docker image push ${DESTINATION_INSTALL_IMAGE};
            docker image push ${DECKHOUSE_DESTINATION_IMAGE};
            docker image push ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
            docker image rmi ${DESTINATION_IMAGE};
            docker image rmi ${DESTINATION_INSTALL_IMAGE};
            docker image rmi ${DECKHOUSE_DESTINATION_IMAGE};
            docker image rmi ${DECKHOUSE_DESTINATION_INSTALL_IMAGE};
          fi
          if [[ -n ${CI_COMMIT_BRANCH} ]]; then
            DESTINATION_IMAGE=${DEV_REGISTRY_PATH}/dev:${CI_COMMIT_BRANCH};
            DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/dev/install:${CI_COMMIT_BRANCH};
            docker image tag $(werf stage image dev) ${DESTINATION_IMAGE};
            docker image tag $(werf stage image dev/install) ${DESTINATION_INSTALL_IMAGE};
            docker image push ${DESTINATION_IMAGE};
            docker image push ${DESTINATION_INSTALL_IMAGE};
            docker image rmi ${DESTINATION_IMAGE};
            docker image rmi ${DESTINATION_INSTALL_IMAGE};
          fi

  doc_web_build:
    name: Doc web build
    needs:
      - build_modules_images_fe
    runs-on: ubuntu-latest
    steps:
      - name: doc
        run: |
          echo Doc web build

  main_web_build:
    name: Main web build
    needs:
      - build_modules_images_fe
    runs-on: ubuntu-latest
    steps:
      - name: main
        run: |
          echo Main web build

  # jobs for stage 'tests' from gitlab

  # Gitlab use anchors:
  # needs: &needs
  # and needs: *needs for below jobs.
  # Github has no support:
  # The workflow is not valid. .github/workflows/release.yaml: Anchors are not currently supported. Remove the anchor 'needs'
  tests:
    name: Tests
    needs:
      - build_modules_images_fe
      - build_fe
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v2.3.4

      - name: setup envs
        run: |
          # detect git tag for release
          #gitTag=${GITHUB_REF#refs/tags/}
          #if [[ ${GITHUB_REF} == $gitTag ]] ; then
          #  gitTag=
          #fi
          #echo "CI_COMMIT_TAG=$gitTag" >> ${GITHUB_ENV}

          # copy some secrets
          #echo "DECKHOUSE_REGISTRY_HOST=${{secrets.DECKHOUSE_REGISTRY_HOST}}" >> "${GITHUB_ENV}"

      - name: dev registry login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}

      - name: registry login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}

      - name: registry readonly login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}

      - name: Run tests
        uses: werf/actions/run@v1.2.0
        with:
          channel: ${{env.WERF_CHANNEL}}
          image: tests
          args: go test -timeout=${TEST_TIMEOUT} -vet=off ./modules/... ./global-hooks/...
        env:
          WERF_DOCKER_OPTIONS: "-w /deckhouse"

  matrix_tests:
    name: Matrix tests
    needs:
      - build_modules_images_fe
      - build_fe
    runs-on: ubuntu-latest
    steps:
      - name: run test
        run: |
          echo matrix

  dhctl_tests:
    name: Dhctl Tests
    needs:
      - build_modules_images_fe
      - build_fe
    runs-on: ubuntu-latest
    steps:
      - name: run test
        run: |
          echo Dhctl Tests

  golangci_lint:
    name: GolangCI Lint
    needs:
      - build_modules_images_fe
      - build_fe
    runs-on: ubuntu-latest
    steps:
      - name: run test
        run: |
          echo GolangCI Lint

  openapi_test_cases:
    name: OpenAPI Test Cases
    needs:
      - build_modules_images_fe
      - build_fe
    runs-on: ubuntu-latest
    steps:
      - name: run test
        run: |
          echo OpenAPI Test Cases

  hooks_configuration_tests:
    name: Hooks Configuration Tests
    needs:
      - build_modules_images_fe
      - build_fe
    runs-on: ubuntu-latest
    steps:
      - name: run test
        run: |
          echo Hooks Configuration Tests

  web_links_test:
    name: Web links test
    needs:
      - doc_web_build
      - main_web_build
    runs-on: ubuntu-latest
    steps:
      - name: run test
        run: |
          echo check web links

