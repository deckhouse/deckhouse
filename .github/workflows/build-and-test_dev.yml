#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# on every push to dev branches
name: Build and test for dev branches
on:
  pull_request_target:
     types:
      - opened
      - synchronize
      - reopened

env:

  # <template: werf_envs>
  WERF_CHANNEL: "ea"
  WERF_ENV: "FE"
  # We use stapel image from own registry due to docker hub pull amount limitation.
  # To re-push stapel image from docker hub use command:
  # `skopeo copy docker://flant/werf-stapel:0.6.1 docker://registry-write.deckhouse.io/flant/werf-stapel:0.6.1`
  WERF_STAPEL_IMAGE_NAME: "${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}/flant/werf-stapel"
  WERF_STAPEL_IMAGE_VERSION: "0.6.1"
  TEST_TIMEOUT: "15m"
  # Use fixed string 'sys/deckhouse-oss' for repo name. ${CI_PROJECT_PATH} is not available here in Github.
  DEV_REGISTRY_PATH: "${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}/sys/deckhouse-oss"
  BASE_IMAGES_REGISTRY_PATH: "registry.deckhouse.io/base_images/"
  # Registry for additional repositories used for testing Github Actions workflows.
  GHA_TEST_REGISTRY_PATH: "ghcr.io/${{ github.repository }}"
  # </template: werf_envs>


  # <template: image_versions_envs>
  BASE_ALPINE: "registry.deckhouse.io/base_images/alpine:3.12.12@sha256:cb64bbe7fa613666c234e1090e91427314ee18ec6420e9426cf4e7f314056813"
  BASE_ALPINE_3_15: "registry.deckhouse.io/base_images/alpine:3.15.4@sha256:a777c9c66ba177ccfea23f2a216ff6721e78a662cd17019488c417135299cd89"
  BASE_DEBIAN: "registry.deckhouse.io/base_images/debian:buster-20210111@sha256:b16f66714660c4b3ea14d273ad8c35079b81b35d65d1e206072d226c7ff78299"
  BASE_DEBIAN_BULLSEYE: "registry.deckhouse.io/base_images/debian:bullseye@sha256:039f72a400b48c272c6348f0a3f749509b18e611901a21379abc7eb6edd53392"
  BASE_ETCD: "gcr.io/etcd-development/etcd:v3.5.3@sha256:9b47062ce7956efc15cd5ce48f22b0219585bed802f36fb739408b6825cb7813"
  BASE_GOLANG_16_ALPINE: "registry.deckhouse.io/base_images/golang:1.16.3-alpine3.12@sha256:371dc6bf7e0c7ce112a29341b000c40d840aef1dbb4fdcb3ae5c0597e28f3061"
  BASE_GOLANG_16_BUSTER: "registry.deckhouse.io/base_images/golang:1.16.3-buster@sha256:9d64369fd3c633df71d7465d67d43f63bb31192193e671742fa1c26ebc3a6210"
  BASE_GOLANG_17_ALPINE: "registry.deckhouse.io/base_images/golang:1.17.3-alpine3.14@sha256:78a88e6a712e60f9d942450e02508f3c0d8aa931853f02793a4c3aa30063eae0"
  BASE_GOLANG_17_BUSTER: "registry.deckhouse.io/base_images/golang:1.17.3-buster@sha256:be7aa81b44dc85ddf4008bc5f3d5a5acfca8517620d0c4a393601c8e0495fb05"
  BASE_GOLANG_18_BULLSEYE: "registry.deckhouse.io/base_images/golang:1.18.2-bullseye@sha256:cce22ced9c7e52c3c669c20c01792ea584045213843a580634d9aec652d199a4"
  BASE_GOLANG_ALPINE: "registry.deckhouse.io/base_images/golang:1.15.3-alpine3.12@sha256:df0119b970c8e5e9f0f5c40f6b55edddf616bab2b911927ebc3b361c469ea29c"
  BASE_GOLANG_BUSTER: "registry.deckhouse.io/base_images/golang:1.15.3-buster@sha256:fb04edf20446eed8af9eb6137d02fdf607f47028a0a806131f8b175a09620aab"
  BASE_JEKYLL: "registry.deckhouse.io/base_images/jekyll/jekyll:3.8@sha256:9521c8aae4739fcbc7137ead19f91841b833d671542f13e91ca40280e88d6e34"
  BASE_NGINX_ALPINE: "registry.deckhouse.io/base_images/nginx:1.21.6-alpine@sha256:050385609d832fae11b007fbbfba77d0bba12bf72bc0dca0ac03e09b1998580f"
  BASE_NODE_16_ALPINE: "registry.deckhouse.io/base_images/node:16.13.0-alpine3.14@sha256:5277c7d171e02ee76417bb290ef488aa80e4e64572119eec0cb9fffbcffb8f6a"
  BASE_PYTHON_ALPINE: "registry.deckhouse.io/base_images/python:3.7.9-alpine3.12@sha256:8c224566c41fcc1674f9b78ff2a364a1209370a5b7e7619e8ead2bdcd0fd8b52"
  BASE_RUST: "registry.deckhouse.io/base_images/rust:1.57.0@sha256:7d2592d1a6a73055fbadc0c76868046736ce5fa834ed5c201e3b21f27c28947e"
  BASE_SCRATCH: "registry.deckhouse.io/base_images/spotify/scratch@sha256:db4cabf15c8b9eb70dabe1da385b6d9b2cac6d658b813fbb57dc5231ddd52420"
  BASE_SHELL_OPERATOR: "registry.deckhouse.io/base_images/flant/shell-operator:v1.0.1@sha256:51dbdbad17303c31265af389c6acc73d1b6b6c66bd2112542e09b42566ac05bf"
  BASE_UBUNTU: "registry.deckhouse.io/base_images/ubuntu:bionic-20210118@sha256:ea188fdc5be9b25ca048f1e882b33f1bc763fb976a8a4fea446b38ed0efcbeba"
  # </template: image_versions_envs>

  # <template: terraform_versions_envs>
  # Terraform settings
  TF_AWS_NAMESPACE: hashicorp
  TF_AWS_TYPE: aws
  TF_AWS_VERSION: 4.16.0
  TF_AZURE_NAMESPACE: hashicorp
  TF_AZURE_TYPE: azurerm
  TF_AZURE_VERSION: 2.36.0
  TF_GCP_NAMESPACE: hashicorp
  TF_GCP_TYPE: google
  TF_GCP_VERSION: 3.48.0
  TF_OPENSTACK_NAMESPACE: terraform-provider-openstack
  TF_OPENSTACK_TYPE: openstack
  TF_OPENSTACK_VERSION: 1.32.0
  TF_VERSION: 0.13.4
  TF_VSPHERE_NAMESPACE: hashicorp
  TF_VSPHERE_TYPE: vsphere
  TF_VSPHERE_VERSION: 2.0.2
  TF_YANDEX_NAMESPACE: yandex-cloud
  TF_YANDEX_TYPE: yandex
  TF_YANDEX_VERSION: 0.74.0
  # </template: terraform_versions_envs>

# Analog of Gitlab's "interruptible: true" behaviour.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.event.number }}-dev
  cancel-in-progress: true

jobs:

  # <template: pull_request_info>
  pull_request_info:
    name: Get pull request reference
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.ref.outputs.ref }}
      edition: ${{ steps.check_pr.outputs.edition || steps.check_push.outputs.edition }}
    # Skip pull_request and pull_request_target triggers for PRs authored by deckhouse-BOaTswain, e.g. changelog PRs.
    if: ${{ ! (startsWith(github.event_name, 'pull_request') && github.event.pull_request.user.login == 'deckhouse-BOaTswain') }}
    steps:
      - name: Check push trigger
        id: check_push
        if: ${{ github.event_name == 'push' }}
        uses: actions/github-script@v5.0.0
        with:
          script: |
            // Support 'push' trigger: use FE edition by default.
            const edition = 'FE';
            core.notice(`Enable default '${edition}' edition for 'push' trigger.`);
            return core.setOutput('edition', edition);

      - name: Check if allow to run tests
        id: check_pr
        if: ${{ startsWith(github.event_name, 'pull_request') }}
        uses: actions/github-script@v5.0.0
        with:
          script: |
            if (!context.payload.pull_request) {
              return core.setFailed(`Unknown event, no pull request context. event_name=${context.eventName} action=${context.action} ref=${context.ref}`);
            }

            // Fetch fresh pull request state using sha.
            // Why? Workflow rerun of 'opened' pull request contains outdated labels.
            const owner = context.payload.pull_request.head.repo.owner.login
            const repo = context.payload.pull_request.head.repo.name
            const commit_sha = context.payload.pull_request.head.sha
            const head_label = context.payload.pull_request.head.label
            core.info(`Pull request: ${JSON.stringify({ owner, repo, commit_sha, head_label })}`);
            core.info(`Base repo: ${JSON.stringify({owner: context.repo.owner, repo: context.repo.repo})}`);
            const response = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              head: head_label
            });
            if (response.status != 200) {
              return core.setFailed(`Cannot list PRs for head ${head_label} (${commit_sha}): ${JSON.stringify(response)}`);
            }

            // No PR found, do not run next jobs.
            if (!response.data || response.data.length === 0) {
              return core.setFailed(`No pull_request found. event_name=${context.eventName} action=${context.action} ref=${context.ref}`);
            }

            core.info(`Labels: ${JSON.stringify(response.data[0].labels)}`);

            const prRepo = context.payload.pull_request.head.repo.full_name;
            const targetRepo = context.payload.repository.full_name;
            const isInternal = prRepo === targetRepo;
            const isDependabot = (context.actor === 'dependabot[bot]');
            const isChangelog = context.payload.pull_request.head.ref.startsWith('changelog/v');
            const okToTest = response.data[0].labels.some((l) => l.name === 'status/ok-to-test');

            core.info(`PR internal?          ${isInternal}`)
            core.info(`PR from dependabot?   ${isDependabot}`)
            core.info(`PR changelog?         ${isChangelog}`)
            core.info(`PR has 'ok-to-test'?  ${okToTest}`)

            if (isInternal && !isDependabot) {
              // Ignore changelog pull requests.
              if (isChangelog) {
                return core.setFailed(`PR#${context.payload.pull_request.number} for changelog is ignored.`);
              }
            } else {
              // External and dependabot pull requests should be labeled with 'status/ok-to-test'.
              if (!okToTest) {
                return core.setFailed(`PR#${context.payload.pull_request.number} without label 'status/ok-to-test' is ignored.`);
              }
            }

            const isEE = response.data[0].labels.some((l) => l.name === 'edition/ee');
            const isCE = response.data[0].labels.some((l) => l.name === 'edition/ce');
            const edition = isCE ? 'CE' : (isEE ? 'EE' : process.env.WERF_ENV);
            core.info(`PR has 'edition/*'?   ${isCE || isEE} (${edition})`);
            core.notice(`Enable '${edition}' edition.`);
            core.setOutput('edition', edition);

      # Checkhout the head commit of the PR branch.
      - name: Checkout PR head commit
        if: ${{ startsWith(github.event_name, 'pull_request') }}
        uses: actions/checkout@v2.4.0
        with:
          ref: "refs/pull/${{ github.event.number }}/head"

      # Detect dangerous changes in external PR.
      - name: Check for dangerous changes
        uses: dorny/paths-filter@v2
        if: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.repo.full_name != github.repository }}
        id: changes
        with:
          token: ${{ secrets.BOATSWAIN_GITHUB_TOKEN }}
          filters: |
            dangerous:
              - './.github/**'
              - './tools/**'
              - './testing/**'
              - './docs/**/js/**'
              - './docs/**/css/**'
              - './docs/**/images/**'
              - './docs/**/assets/**'

      # Stop workflow if external PR contains dangerous changes.
      - name: Fail workflow on dangerous changes
        if: steps.changes.outputs.dangerous == 'true'
        uses: actions/github-script@v5.0.0
        with:
          script: |
            core.setFailed('External PR contains dangerous changes.')

      # Set output.
      - name: Return PR head commit ref
        id: ref
        uses: actions/github-script@v5.0.0
        with:
          script: |
            // context.ref is set for 'push' and 'workflow_dispatch' triggers.
            let ref = context.ref;
            if (context.eventName.startsWith('pull_request')) {
              ref = `refs/pull/${ context.issue.number }/head`
            }
            if (context.eventName === 'workflow_dispatch' &&  context.payload.inputs && context.payload.inputs.pull_request_ref) {
              ref = context.payload.inputs.pull_request_ref;
            }
            core.info(`ref: '${ref}'`)
            core.setOutput('ref', ref)
  # </template: pull_request_info>

  # <template: git_info_job>

  git_info:
    name: Get git info
    runs-on: ubuntu-latest
    outputs:
      ci_commit_tag: ${{ steps.git_info.outputs.ci_commit_tag }}
      ci_commit_branch: ${{ steps.git_info.outputs.ci_commit_branch }}
      ci_commit_ref_name: ${{ steps.git_info.outputs.ci_commit_ref_name }}
      ci_commit_ref_slug: ${{ steps.git_info.outputs.ci_commit_ref_slug }}
      ref_full: ${{ steps.git_info.outputs.ref_full }}
      github_sha: ${{ steps.git_info.outputs.github_sha }}
    # Skip the CI for automation PRs, e.g. changelog
    if: ${{ github.event.pull_request.user.login != 'deckhouse-BOaTswain' }}
    steps:
      - id: git_info
        name: Get tag name and SHA
        uses: actions/github-script@v5.0.0
        with:
          script: |
            const { GITHUB_REF_TYPE, GITHUB_REF_NAME, GITHUB_REF } = process.env

            let refSlug = ''
            let refName = ''
            let refFull = ''
            let githubBranch = ''
            let githubTag = ''
            let githubSHA = ''
            if (context.eventName === "workflow_dispatch" && context.payload.inputs && context.payload.inputs.pull_request_ref) {
              // Trigger: workflow_dispatch with pull_request_ref.
              // Extract pull request number from 'refs/pull/<NUM>/merge'
              const prNum   = context.payload.inputs.pull_request_ref.replace('refs/pull/', '').replace('/merge', '').replace('/head', '')

              refSlug       = `pr${prNum}`
              refName       = context.payload.inputs.ci_commit_ref_name
              refFull       = context.payload.inputs.pull_request_ref
              githubBranch  = refName
              githubSHA     = context.payload.inputs.pull_request_sha
              core.info(`workflow_dispatch event: set git info from inputs. inputs: ${JSON.stringify(context.payload.inputs)}`)
            } else if (context.eventName === "pull_request" || context.eventName === "pull_request_target" ) {
              // For PRs from forks, tag images with `prXXX` to avoid clashes between branches.
              const targetRepo = context.payload.repository.full_name;
              const prRepo = context.payload.pull_request.head.repo.full_name
              const prRef = context.payload.pull_request.head.ref

              refSlug = `pr${context.issue.number}`;
              refName = (prRepo === targetRepo) ? prRef : refSlug;
              refFull = `refs/pull/${context.issue.number}/head`
              githubBranch = refName
              githubSHA = context.payload.pull_request.head.sha
              core.info(`pull request event: set git info from pull_request.head. pr:${prRepo}:${prRef} target:${targetRepo}:${context.ref}`)
            } else {
              // Other triggers: workflow_dispatch without pull_request_ref, schedule, push...
              // refName is 'main' or tag name, so slugification is not necessary.
              refSlug       = GITHUB_REF_NAME
              refName       = GITHUB_REF_NAME
              refFull       = GITHUB_REF
              githubTag     = GITHUB_REF_TYPE == "tag"    ? refName : ""
              githubBranch  = GITHUB_REF_TYPE == "branch" ? refName : ""
              githubSHA     = context.sha
              core.info(`${context.eventName} event: set git info from context: ${JSON.stringify({GITHUB_REF_NAME, GITHUB_REF_TYPE, sha: context.sha })}`)
            }

            core.setCommandEcho(true)
            core.setOutput('ci_commit_ref_slug', refSlug)
            core.setOutput('ci_commit_ref_name', refName)
            core.setOutput(`ci_commit_tag`, githubTag)
            core.setOutput(`ci_commit_branch`, githubBranch)
            core.setOutput(`ref_full`, refFull)
            core.setOutput('github_sha', githubSHA)
            core.setCommandEcho(false)

  # </template: git_info_job>

  enable_fe:
    if: ${{ needs.pull_request_info.outputs.edition == 'FE' }}
    name: Enable FE
    needs:
      - pull_request_info
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo Enable ${{ needs.pull_request_info.outputs.edition }}

  enable_ee:
    if: ${{ needs.pull_request_info.outputs.edition == 'EE' }}
    name: Enable EE
    needs:
      - pull_request_info
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo Enable ${{ needs.pull_request_info.outputs.edition }}

  enable_ce:
    if: ${{ needs.pull_request_info.outputs.edition == 'CE' }}
    name: Enable CE
    needs:
      - pull_request_info
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo Enable ${{ needs.pull_request_info.outputs.edition }}

  go_generate:
    name: Go Generate
    needs:
      - git_info
      - pull_request_info

    # <template: go_generate_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_step>

      # <template: login_readonly_registry_step>
      - name: Check readonly registry credentials
        id: check_readonly_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to readonly registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_readonly_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false
      # </template: login_readonly_registry_step>

      - name: Run go generate
        run: |
          docker run -v $(pwd):/deckhouse -v ~/go-pkg-cache:/go/pkg -w /deckhouse/tools ${BASE_GOLANG_ALPINE} go generate .
          docker run -v $(pwd):/deckhouse -v ~/go-pkg-cache:/go/pkg -w /deckhouse/modules/500-upmeter/hooks/smokemini/internal/snapshot ${BASE_GOLANG_ALPINE} go generate .

      - name: Check generated code
        run: |
          git diff --exit-code
    # </template: go_generate_template>


  build_deckhouse:
    name: Build Deckhouse
    needs:
      - git_info
      - pull_request_info
      - go_generate
    env:
      WERF_ENV: ${{ needs.pull_request_info.outputs.edition }}
    # <template: build_template>
    runs-on: [self-hosted, regular]
    outputs:
      tests_image_name: ${{ steps.build.outputs.tests_image_name }}
    steps:


      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Check dev registry credentials
        id: check_dev_registry
        env:
          HOST: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_dev_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_readonly_registry_step>
      - name: Check readonly registry credentials
        id: check_readonly_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to readonly registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_readonly_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false
      # </template: login_readonly_registry_step>

      # <template: login_rw_registry_step>
      - name: Check rw registry credentials
        id: check_rw_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}
      # </template: werf_install_step>

      - name: Build and push deckhouse images
        id: build
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
        run: |
          # Extract REPO_SUFFIX from repository name: trim prefix 'deckhouse/deckhouse-'.
          REPO_SUFFIX=${GITHUB_REPOSITORY#deckhouse/deckhouse-}
          if [[ $REPO_SUFFIX == $GITHUB_REPOSITORY ]] ; then
            # REPO_SUFFIX should be empty for main repo 'deckhouse/deckhouse'.
            REPO_SUFFIX=
          fi

          # Put tags on produced images and push to dev and release repositories.
          #
          # There are 2 modes: "dev" and "release".
          # The "dev" mode builds branches only:
          # - Build using dev-registry as primary and deckhouse registry as secondary.
          # - Push dev and dev/install images with prNUM tags and push to dev-registry.
          # The "release" mode builds branches and tags:
          # - Build using dev-registry as primary and deckhouse registry as secondary.
          # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
          # - Build using deckhouse registry as primary and dev-registry as secondary.
          # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

          # SRC_NAME is a name of image from werf.yaml.
          # SRC is a source image name (stage name from werf build report).
          # DST is an image name for docker push.
          function pull_push_rmi() {
            SRC_NAME=$1
            SRC=$2
            DST=$3
            echo "⚓️ 📥 [$(date -u)] Pull '${SRC_NAME}' image as ${SRC}."
            docker pull ${SRC}
            echo "⚓️ 🏷 [$(date -u)] Tag '${SRC_NAME}' image as ${DST}."
            docker image tag ${SRC} ${DST}
            echo "⚓️ 📤 [$(date -u)] Push '${SRC_NAME}' image as ${DST}."
            docker image push ${DST}
            echo "⚓️ 🧹 [$(date -u)] Remove local tag for '${SRC_NAME}'."
            docker image rmi ${DST} || true;
          }

          if [[ -n "${DEV_REGISTRY_PATH}" ]]; then export WERF_REPO="${DEV_REGISTRY_PATH}"; fi
          type werf && source $(werf ci-env github --verbose --as-file)

          # CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          # Registry path to publish images for Git branches.
          BRANCH_REGISTRY_PATH=
          # Registry path to publish images for Git tags.
          SEMVER_REGISTRY_PATH=

          if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
            # Build using dev-registry as primary repo and prod registry as secondary (ro) repo.
            # This build will put stages to "dev" registry. If "dev" registry is empty, existing stages are copied from prod registry.
            werf build \
              --secondary-repo ${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX} \
              --parallel=true --parallel-tasks-limit=5 \
              --report-path images_tags_werf.json
            BRANCH_REGISTRY_PATH="${DEV_REGISTRY_PATH}"
            SEMVER_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
          else
            # DECKHOUSE_REGISTRY_HOST is empty, so this repo is not the main repo.
            # Build using dev-registry as a single primary repo and push:
            # - branches to Dev registry to run e2e tests.
            # - semver tags to Github Container Registry for testing release process.
            werf build \
              --parallel=true --parallel-tasks-limit=5 \
              --report-path images_tags_werf.json
            BRANCH_REGISTRY_PATH="${DEV_REGISTRY_PATH}"
            SEMVER_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
            echo "⚓️ 🧪 [$(date -u)] DECKHOUSE_REGISTRY_HOST is empty. Publish to Github Container Registry '${PROD_REGISTRY_PATH}'"
          fi

          # Publish images for Git branch.
          if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
            # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
            # Use it as image tag. Add suffix to not overlap with PRs in main repo.
            IMAGE_TAG=${CI_COMMIT_REF_SLUG}${REPO_SUFFIX:+-${REPO_SUFFIX}}

            echo "⚓️ 💫 [$(date -u)] Publish images to dev-registry for branch '${CI_COMMIT_BRANCH}' and edition '${WERF_ENV}' using tag '${IMAGE_TAG}' ..."

            echo "⚓️ 💫 [$(date -u)] Publish 'dev' image to dev-registry using tag ${IMAGE_TAG}".
            DECKHOUSE_IMAGE_SRC="$(jq -r '.Images."dev".DockerImageName' images_tags_werf.json)"
            DECKHOUSE_IMAGE=${BRANCH_REGISTRY_PATH}:${IMAGE_TAG}
            pull_push_rmi 'dev' ${DECKHOUSE_IMAGE_SRC} ${DECKHOUSE_IMAGE}

            echo "⚓️ 💫 [$(date -u)] Publish 'dev/install' image to dev-registry using tag ${IMAGE_TAG}".
            INSTALL_IMAGE_SRC="$(jq -r '.Images."dev/install".DockerImageName' images_tags_werf.json)"
            INSTALL_IMAGE=${BRANCH_REGISTRY_PATH}/install:${IMAGE_TAG}
            pull_push_rmi 'dev/install' ${INSTALL_IMAGE_SRC} ${INSTALL_IMAGE}
          fi



          # Save 'tests' image name to pass it as output for 'tests' jobs.
          TESTS_IMAGE_NAME="$(jq -r '.Images."tests".DockerImageName' images_tags_werf.json)"
          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          # Encode as gzip+base64 to evade github's SecretMasker error: "Skip output since it may contain secret".
          echo "::set-output name=tests_image_name::$(echo ${TESTS_IMAGE_NAME} | gzip | base64 -w0)"

      - name: Cleanup
        if: ${{ always() }}
        run: |
          rm -f images_tags_werf.json
    # </template: build_template>


  doc_web_build:
    name: Doc web build
    # Wait for success build of modules.
    needs:
      - git_info
      - pull_request_info
    # <template: doc_web_build_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_readonly_registry_step>
      - name: Check readonly registry credentials
        id: check_readonly_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to readonly registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_readonly_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false
      # </template: login_readonly_registry_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "::set-output name=has_flant_credentials::true"
            echo "::set-output name=web_registry_path::${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss"
          else
            echo "::set-output name=web_registry_path::${GHA_TEST_REGISTRY_PATH}"
          fi
      - name: Login to flant registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      - name: Run doc web build
        uses: werf/actions/build@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}
        env:
          WERF_DIR: "docs/documentation"
          WERF_LOG_VERBOSE: "on"
          WERF_REPO: ${{steps.check_flant_registry.outputs.web_registry_path}}
    # </template: doc_web_build_template>

  main_web_build:
    name: Main web build
    # Wait for success build of modules.
    needs:
      - git_info
      - pull_request_info
    # <template: main_web_build_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_readonly_registry_step>
      - name: Check readonly registry credentials
        id: check_readonly_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to readonly registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_readonly_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false
      # </template: login_readonly_registry_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "::set-output name=has_flant_credentials::true"
            echo "::set-output name=web_registry_path::${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss"
          else
            echo "::set-output name=web_registry_path::${GHA_TEST_REGISTRY_PATH}"
          fi
      - name: Login to flant registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      - name: Run main web build
        uses: werf/actions/build@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}
        env:
          WERF_DIR: "docs/site"
          WERF_LOG_VERBOSE: "on"
          WERF_REPO: ${{steps.check_flant_registry.outputs.web_registry_path}}
    # </template: main_web_build_template>

  tests:
    name: Tests
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse

    # <template: tests_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Check dev registry credentials
        id: check_dev_registry
        env:
          HOST: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_dev_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_rw_registry_step>
      - name: Check rw registry credentials
        id: check_rw_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>
      - name: Run tests
        env:
          TESTS_IMAGE_NAME: ${{needs.build_deckhouse.outputs.tests_image_name}}
        run: |
          if [[ -z ${TESTS_IMAGE_NAME} ]] ; then
            echo "TESTS_IMAGE_NAME is empty"
            exit 1
          fi

          # Decode image name from gzip+base64.
          TESTS_IMAGE_NAME=$(echo ${TESTS_IMAGE_NAME} | base64 -d | gunzip)

          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          echo "⚓️ 📥 [$(date -u)] Pull 'tests' image..."
          docker pull ${TESTS_IMAGE_NAME}
          echo "⚓️ 🏎 [$(date -u)] Run tests..."
          docker run -w /deckhouse -v ${{env.HOME}}/go-pkg-cache:/go/pkg ${TESTS_IMAGE_NAME} go test -timeout=${{env.TEST_TIMEOUT}} -vet=off ./modules/... ./global-hooks/...
    # </template: tests_template>

  matrix_tests:
    name: Matrix tests
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse

    # <template: tests_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Check dev registry credentials
        id: check_dev_registry
        env:
          HOST: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_dev_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_rw_registry_step>
      - name: Check rw registry credentials
        id: check_rw_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>
      - name: Run tests
        env:
          TESTS_IMAGE_NAME: ${{needs.build_deckhouse.outputs.tests_image_name}}
        run: |
          if [[ -z ${TESTS_IMAGE_NAME} ]] ; then
            echo "TESTS_IMAGE_NAME is empty"
            exit 1
          fi

          # Decode image name from gzip+base64.
          TESTS_IMAGE_NAME=$(echo ${TESTS_IMAGE_NAME} | base64 -d | gunzip)

          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          echo "⚓️ 📥 [$(date -u)] Pull 'tests' image..."
          docker pull ${TESTS_IMAGE_NAME}
          echo "⚓️ 🏎 [$(date -u)] Run tests..."
          docker run -w /deckhouse -v ${{env.HOME}}/go-pkg-cache:/go/pkg ${TESTS_IMAGE_NAME} go test -timeout=${{env.TEST_TIMEOUT}} ./testing/matrix/ -v
    # </template: tests_template>

  dhctl_tests:
    name: Dhctl Tests
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse

    # <template: tests_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Check dev registry credentials
        id: check_dev_registry
        env:
          HOST: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_dev_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_rw_registry_step>
      - name: Check rw registry credentials
        id: check_rw_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>
      - name: Run tests
        env:
          TESTS_IMAGE_NAME: ${{needs.build_deckhouse.outputs.tests_image_name}}
        run: |
          if [[ -z ${TESTS_IMAGE_NAME} ]] ; then
            echo "TESTS_IMAGE_NAME is empty"
            exit 1
          fi

          # Decode image name from gzip+base64.
          TESTS_IMAGE_NAME=$(echo ${TESTS_IMAGE_NAME} | base64 -d | gunzip)

          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          echo "⚓️ 📥 [$(date -u)] Pull 'tests' image..."
          docker pull ${TESTS_IMAGE_NAME}
          echo "⚓️ 🏎 [$(date -u)] Run tests..."
          docker run -w /deckhouse/dhctl -v ${{env.HOME}}/go-pkg-cache:/go/pkg ${TESTS_IMAGE_NAME} make ci
    # </template: tests_template>

  golangci_lint:
    name: GolangCI Lint
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse

    # <template: tests_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Check dev registry credentials
        id: check_dev_registry
        env:
          HOST: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_dev_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_rw_registry_step>
      - name: Check rw registry credentials
        id: check_rw_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>
      - name: Run tests
        env:
          TESTS_IMAGE_NAME: ${{needs.build_deckhouse.outputs.tests_image_name}}
        run: |
          if [[ -z ${TESTS_IMAGE_NAME} ]] ; then
            echo "TESTS_IMAGE_NAME is empty"
            exit 1
          fi

          # Decode image name from gzip+base64.
          TESTS_IMAGE_NAME=$(echo ${TESTS_IMAGE_NAME} | base64 -d | gunzip)

          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          echo "⚓️ 📥 [$(date -u)] Pull 'tests' image..."
          docker pull ${TESTS_IMAGE_NAME}
          echo "⚓️ 🏎 [$(date -u)] Run tests..."
          docker run -w /deckhouse -v ${{github.workspace}}:/deckhouse -e "TERM=xterm-256color" -v ${{env.HOME}}/go-pkg-cache:/go/pkg ${TESTS_IMAGE_NAME} sh -c "go generate tools/register.go && golangci-lint run"
    # </template: tests_template>

  openapi_test_cases:
    name: OpenAPI Test Cases
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse

    # <template: tests_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Check dev registry credentials
        id: check_dev_registry
        env:
          HOST: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_dev_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_rw_registry_step>
      - name: Check rw registry credentials
        id: check_rw_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>
      - name: Run tests
        env:
          TESTS_IMAGE_NAME: ${{needs.build_deckhouse.outputs.tests_image_name}}
        run: |
          if [[ -z ${TESTS_IMAGE_NAME} ]] ; then
            echo "TESTS_IMAGE_NAME is empty"
            exit 1
          fi

          # Decode image name from gzip+base64.
          TESTS_IMAGE_NAME=$(echo ${TESTS_IMAGE_NAME} | base64 -d | gunzip)

          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          echo "⚓️ 📥 [$(date -u)] Pull 'tests' image..."
          docker pull ${TESTS_IMAGE_NAME}
          echo "⚓️ 🏎 [$(date -u)] Run tests..."
          docker run -v ${{github.workspace}}:/deckhouse -w /deckhouse -v ${{env.HOME}}/go-pkg-cache:/go/pkg ${TESTS_IMAGE_NAME} ginkgo -vet=off ./testing/openapi_cases/
    # </template: tests_template>

  web_links_test:
    name: Web links test
    needs:
      - git_info
      - pull_request_info
      - doc_web_build
      - main_web_build
    continue-on-error: true
    # <template: web_links_test_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_readonly_registry_step>
      - name: Check readonly registry credentials
        id: check_readonly_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to readonly registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_readonly_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false
      # </template: login_readonly_registry_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "::set-output name=has_flant_credentials::true"
            echo "::set-output name=web_registry_path::${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss"
          else
            echo "::set-output name=web_registry_path::${GHA_TEST_REGISTRY_PATH}"
          fi
      - name: Login to flant registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}
      # </template: werf_install_step>

      - name: Prepare site structure
        env:
          WEB_REGISTRY_PATH: ${{steps.check_flant_registry.outputs.web_registry_path}}
        run: |
          type werf
          werf version

          BASEDIR=$(pwd)/docs
          _TMPDIR=$(mktemp -d -t -p ${BASEDIR})
          # Save TMPDIR to clean it later.
          echo "_TMPDIR=$_TMPDIR" >> ${GITHUB_ENV}
          echo "_TMPDIR=$_TMPDIR"

          export WERF_REPO="${WEB_REGISTRY_PATH}"
          echo -n 'use werf_repo'
          echo $WERF_REPO | tr 'a-z' 'A-Z'

          # Extract web-backend content to the tmp directory.
          export WERF_DIR=$BASEDIR/site
          echo "Use werf_dir $WERF_DIR"
          type werf && source $(werf ci-env github --verbose --as-file)
          echo "werf stage image web-backend:"
          werf stage image web-backend | tr 'a-z' 'A-Z'
          echo "Run 'docker pull' from werf stage image web-backend"
          docker pull $(werf stage image web-backend) || true
          echo "Run 'docker cp' from werf stage image web-backend"
          docker cp $(docker create --rm $(werf stage image web-backend)):/app/root/ ${_TMPDIR}/site/

          # Extract web content to the tmp directory.
          export WERF_DIR=$BASEDIR/documentation
          type werf && source $(werf ci-env github --verbose --as-file)
          echo "werf stage image web:"
          werf stage image web | tr 'a-z' 'A-Z'
          echo "Run 'docker pull' from werf stage image web"
          docker pull $(werf stage image web)
          echo "Run 'docker cp' from werf stage image web-backend"
          docker cp $(docker create --rm $(werf stage image web)):/app/ ${_TMPDIR}/site/doc/

          # Create site structure.
          echo "Create site structure in '${_TMPDIR}/site'"
          touch ${_TMPDIR}/site/index.html
          rm -Rf ${_TMPDIR}/site/doc/compare/
          cp -Rf ${_TMPDIR}/site/doc/assets/ ${_TMPDIR}/site/doc/ru/
          cp -Rf ${_TMPDIR}/site/doc/assets/ ${_TMPDIR}/site/doc/en/
          cp -Rf ${_TMPDIR}/site/doc/css/ ${_TMPDIR}/site/doc/ru/
          cp -Rf ${_TMPDIR}/site/doc/css/ ${_TMPDIR}/site/doc/en/
          cp -Rf ${_TMPDIR}/site/doc/images/ ${_TMPDIR}/site/doc/ru/
          cp -Rf ${_TMPDIR}/site/doc/images/ ${_TMPDIR}/site/doc/en/
          cp -Rf ${_TMPDIR}/site/doc/js/ ${_TMPDIR}/site/doc/ru/
          cp -Rf ${_TMPDIR}/site/doc/js/ ${_TMPDIR}/site/doc/en/

      - name: Check links with html-proofer
        run: |
          # Do not exit on html-proofer error.
          set +e
          docker run --rm -v "${_TMPDIR}/site:/src:ro" klakegg/html-proofer:3.19.1 \
            --allow-hash-href --check-html --empty-alt-ignore \
            --url-ignore "/localhost/,/https\:\/\/t.me/,/gitlab.com\/profile/,/example.com/,/vmware.com/,/.slack.com/,/habr.com/,/flant.ru/,/bcrypt-generator.com/,/candi\/bashible\/bashbooster/,/..\/..\/compare\//,/compare\/ru\//,/compare\/en\//,/\.yml$/,/\.yaml$/,/\.tmpl$/,/\.tpl$/" \
            --url-swap "https\:\/\/deckhouse.io\/:/,\/ru\/documentation\/$:/doc/ru/,\/ru\/documentation\/v1\/:/doc/ru/,\/ru\/documentation\/latest\/:/doc/ru/,\/en\/documentation\/$:/doc/en/,\/en\/documentation\/v1\/:/doc/en/,\/en\/documentation\/latest\/:/doc/en/,\/docs\/documentation\/images\/:/doc/images/" --http-status-ignore "0,429" ${1}
          # Emulate 'allow_failure: true' from Gitlab. Github has only two state: success and failure.
          exit 0

      - name: Clean TMPDIR
        if: always()
        run: |
          if [[ -n $_TMPDIR ]] ; then
            rm -rf $_TMPDIR
          fi
    # </template: web_links_test_template>

  validators:
    name: Validators
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse

    # <template: tests_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "::set-output name=started_at::${unixTimestamp}"
      # </template: started_at_output>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
          ref: ${{ needs.pull_request_info.outputs.ref }}
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Check dev registry credentials
        id: check_dev_registry
        env:
          HOST: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_dev_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_rw_registry_step>
      - name: Check rw registry credentials
        id: check_rw_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then echo "::set-output name=has_credentials::true"; fi
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v1.10.0
        if: ${{ steps.check_rw_registry.outputs.has_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>
      - name: Run tests
        env:
          TESTS_IMAGE_NAME: ${{needs.build_deckhouse.outputs.tests_image_name}}
        run: |
          if [[ -z ${TESTS_IMAGE_NAME} ]] ; then
            echo "TESTS_IMAGE_NAME is empty"
            exit 1
          fi

          # Decode image name from gzip+base64.
          TESTS_IMAGE_NAME=$(echo ${TESTS_IMAGE_NAME} | base64 -d | gunzip)

          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          echo "⚓️ 📥 [$(date -u)] Pull 'tests' image..."
          docker pull ${TESTS_IMAGE_NAME}
          echo "⚓️ 🏎 [$(date -u)] Run tests..."
          docker run -w /deckhouse -v ${{env.HOME}}/go-pkg-cache:/go/pkg ${TESTS_IMAGE_NAME} go test -tags=validation -run Validation -timeout=${{env.TEST_TIMEOUT}} ./testing/...
    # </template: tests_template>
