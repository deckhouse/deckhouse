#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# Copyright 2022 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# on push to tags

name: Build and test for release

on:
  workflow_dispatch:
    inputs:
      issue_id:
        description: 'Id of issue where label was set'
        required: false
      issue_number:
        description: 'Number of issue where label was set'
        required: false
      comment_id:
        description: 'Id of comment in issue where to put workflow run status'
        required: false
      editions:
        description: 'Comma-separated list of editions to build'
        required: false
        type: string
      svace_enabled:
        description: 'Enable svace build and analyze'
        type: boolean
        required: false

env:

  # <template: werf_envs>
  WERF_VERSION: "v2.46.0"
  WERF_ENV: "FE"
  TEST_TIMEOUT: "15m"
  # Use fixed string 'sys/deckhouse-oss' for repo name. ${CI_PROJECT_PATH} is not available here in GitHub.
  DEV_REGISTRY_PATH: "${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}/sys/deckhouse-oss"
  STAGE_REGISTRY_PATH: "${{ secrets.DECKHOUSE_STAGE_REGISTRY_HOST }}/sys/deckhouse-oss"
  # Registry for additional repositories used for testing Github Actions workflows.
  GHA_TEST_REGISTRY_PATH: "ghcr.io/${{ github.repository }}"
  # Need for ssh: default.
  DOCKER_BUILDKIT: "1"
  WERF_DOCKER_REGISTRY_DEBUG: "1"
  WERF_FINAL_IMAGES_ONLY: true
  WERF_LOG_TERMINAL_WIDTH: "200"
  WERF_LOG_TIME: true
  WERF_GIT_WORK_TREE_POOL_LIMIT: "10"
  # </template: werf_envs>

  # <template: git_source_envs>
  # source repo git@my-repo.com:group
  SOURCE_REPO: "${{secrets.SOURCE_REPO_GIT}}"
  # cloud providers source repo should contain creds for repo for ex https://user:password@my-repo.com/group
  CLOUD_PROVIDERS_SOURCE_REPO: "${{secrets.CLOUD_PROVIDERS_SOURCE_REPO}}"
  GOPROXY: "${{vars.GOPROXY}}"
  # observability source repo should contain creds for repo for ex https://user:password@my-repo.com/group
  OBSERVABILITY_SOURCE_REPO: "${{secrets.OBSERVABILITY_SOURCE_REPO}}"
  DECKHOUSE_PRIVATE_REPO: "${{secrets.DECKHOUSE_PRIVATE_REPO}}"
  # </template: git_source_envs>

# Cancel in-progress jobs for the same tag/branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

jobs:

  # <template: git_info_job>

  git_info:
    name: Get git info
    runs-on: "regular"
    outputs:
      ci_commit_tag: ${{ steps.git_info.outputs.ci_commit_tag }}
      ci_commit_branch: ${{ steps.git_info.outputs.ci_commit_branch }}
      ci_commit_ref_name: ${{ steps.git_info.outputs.ci_commit_ref_name }}
      ci_commit_ref_slug: ${{ steps.git_info.outputs.ci_commit_ref_slug }}
      ref_full: ${{ steps.git_info.outputs.ref_full }}
      github_sha: ${{ steps.git_info.outputs.github_sha }}
      pr_number: ${{ steps.git_info.outputs.pr_number }}
    # Skip the CI for automation PRs, e.g. changelog, don't skip if Pull Request title contains "[run ci]".
    if: ${{ contains(github.event.pull_request.title, '[run ci]') || github.event.pull_request.user.login != 'deckhouse-BOaTswain' }}
    steps:
      - id: git_info
        name: Get tag name and SHA
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const { GITHUB_REF_TYPE, GITHUB_REF_NAME, GITHUB_REF } = process.env

            let refSlug = ''
            let refName = ''
            let refFull = ''
            let githubBranch = ''
            let githubTag = ''
            let githubSHA = ''
            let prNumber = ''
            if (context.eventName === "workflow_dispatch" && context.payload.inputs && context.payload.inputs.pull_request_ref) {
              // Trigger: workflow_dispatch with pull_request_ref.
              // Extract pull request number from 'refs/pull/<NUM>/merge'
              prNumber = context.payload.inputs.pull_request_ref.replace('refs/pull/', '').replace('/merge', '').replace('/head', '')

              refSlug       = `pr${prNumber}`
              refName       = context.payload.inputs.ci_commit_ref_name
              refFull       = context.payload.inputs.pull_request_ref
              githubBranch  = refName
              githubSHA     = context.payload.inputs.pull_request_sha
              core.info(`workflow_dispatch event: set git info from inputs. inputs: ${JSON.stringify(context.payload.inputs)}`)
            } else if (context.eventName === "pull_request" || context.eventName === "pull_request_target" ) {
              // For PRs from forks, tag images with `prXXX` to avoid clashes between branches.
              const targetRepo = context.payload.repository.full_name;
              const prRepo = context.payload.pull_request.head.repo.full_name
              const prRef = context.payload.pull_request.head.ref

              refSlug = `pr${context.issue.number}`;
              refName = (prRepo === targetRepo) ? prRef : refSlug;
              refFull = `refs/pull/${context.issue.number}/head`
              githubBranch = refName
              githubSHA = context.payload.pull_request.head.sha
              core.info(`pull request event: set git info from pull_request.head. pr:${prRepo}:${prRef} target:${targetRepo}:${context.ref}`)
              prNumber = context.issue.number
            } else {
              // Other triggers: workflow_dispatch without pull_request_ref, schedule, push...
              // refName is 'main' or tag name, so slugification is not necessary.
              refSlug       = GITHUB_REF_NAME
              refName       = GITHUB_REF_NAME
              refFull       = GITHUB_REF
              githubTag     = GITHUB_REF_TYPE == "tag"    ? refName : ""
              githubBranch  = GITHUB_REF_TYPE == "branch" ? refName : ""
              githubSHA     = context.sha
              core.info(`${context.eventName} event: set git info from context: ${JSON.stringify({GITHUB_REF_NAME, GITHUB_REF_TYPE, sha: context.sha })}`)
            }

            core.setCommandEcho(true)
            core.setOutput('ci_commit_ref_slug', refSlug)
            core.setOutput('ci_commit_ref_name', refName)
            core.setOutput(`ci_commit_tag`, githubTag)
            core.setOutput(`ci_commit_branch`, githubBranch)
            core.setOutput(`ref_full`, refFull)
            core.setOutput('github_sha', githubSHA)
            core.setOutput('pr_number', prNumber)
            core.setCommandEcho(false)

  # </template: git_info_job>
  detect_editions:
    name: Detect editions
    runs-on: "regular"
    outputs:
      BUILD_CE: ${{steps.detect_editions.outputs.BUILD_CE}}
      BUILD_EE: ${{steps.detect_editions.outputs.BUILD_EE}}
      BUILD_BE: ${{steps.detect_editions.outputs.BUILD_BE}}
      BUILD_SE: ${{steps.detect_editions.outputs.BUILD_SE}}
      BUILD_SE-plus: ${{steps.detect_editions.outputs.BUILD_SE-plus}}
    steps:
      - name: Detect editions
        id: detect_editions
        env:
          EDITIONS: ${{ github.event.inputs.editions }}
        run: |
          echo "Input allowed editions: '${EDITIONS}'"

          EMPTY_EDITIONS=yes

          for edition in CE EE BE SE SE-plus ; do
            if grep -i ",${edition}," <<<",${EDITIONS}," 2>/dev/null 1>&2 ; then
              echo "  - enable build of ${edition} edition."
              echo "BUILD_${edition}=true" >> $GITHUB_OUTPUT
              EMPTY_EDITIONS=no
            fi
          done

          if [[ $EMPTY_EDITIONS == "yes" ]] ; then
            echo "No editions requested. Building only FE."
          fi


  # <template: check_changelog_template>
  check_changelog:
    name: Check changelog
    runs-on: "regular"
    steps:

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2

      # </template: checkout_step>
      - name: Check for tag
        run: |
          if [[ "${GITHUB_REF}" != refs/tags/* ]]; then
            echo "Not a tag push, skipping changelog check."
            exit 0
          fi

          TAG_VERSION="${GITHUB_REF#refs/tags/}"
          FILE="./CHANGELOG/CHANGELOG-${TAG_VERSION}.yml"

          if [ ! -f "$FILE" ]; then
            echo "❌ Expected changelog file $FILE not found. Please create it before pushing the release tag."
            exit 1
          else
            echo "✅ Changelog file $FILE found."
          fi
  # </template: check_changelog_template>


  build_fe:
    name: Build FE
    needs:
      - git_info
      - check_changelog
    env:
      WERF_ENV: "FE"
      SVACE_ANALYZE_HOST: "${{ secrets.SVACE_ANALYZE_HOST }}"
      SVACE_ANALYZE_SSH_USER: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
      SVACE_ENABLED: ${{ github.event.inputs.svace_enabled }}
    # <template: build_template>
    runs-on: [self-hosted, stage]
    outputs:
      tests_image_name: ${{ steps.build.outputs.tests_image_name }}
    steps:


      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "started_at=${unixTimestamp}" >> $GITHUB_OUTPUT
      # </template: started_at_output>


      # <template: import_secrets>
      - name: Split repository name
        id: split
        env:
          REPO: ${{ github.repository }}
        run: echo "name=${REPO##*/}" >> $GITHUB_OUTPUT
      - name: Import secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://seguro.flant.com
          path: github
          role: "${{ steps.split.outputs.name }}"
          method: jwt
          jwtGithubAudience: github-access-aud
          secrets: |
            projects/data/6db2f1ee-9b6f-4f4f-8381-2fb43060478a/github/cosign_key access_token | access_token
      # </template: import_secrets>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_flant_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss" >> $GITHUB_OUTPUT
          else
            echo "web_registry_path=${GHA_TEST_REGISTRY_PATH}" >> $GITHUB_OUTPUT
          fi
      - name: Login to flant registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      # <template: login_stage_registry_step>
      - name: Check stage registry credentials
        id: check_stage_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}/deckhouse/site" >> $GITHUB_OUTPUT
          fi
      - name: Login to stage registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_stage_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_PASSWORD }}
          logout: false
      # </template: login_stage_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v2
        with:
          version: ${{env.WERF_VERSION}}
      # </template: werf_install_step>

      # <template: add_ssh_keys>
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{secrets.SOURCE_REPO_SSH_KEY}}
            ${{ secrets.SVACE_ANALYZE_SSH_PRIVATE_KEY }}
      - name: Add ssh_known_hosts
        run: |
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{secrets.SOURCE_REPO_GIT}})
          echo "::add-mask::$HOST"
          IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
          for IP in $IPS; do
            echo "::add-mask::$IP"
          done
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
      - name: Add svace analyze server to ssh_known_hosts
        continue-on-error: true
        run: |
          host=${{ secrets.SVACE_ANALYZE_HOST }}
          host_ip=$(nslookup "$host" | awk '/^Address: / { print $2 }')
          echo "::add-mask::$host_ip"
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$host" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
              CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
              if grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
                  ssh-keygen -R $host
                  ssh-keygen -R $host_ip
              fi
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
          done <<< "$HOST_KEYS"
      # </template: add_ssh_keys>

      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Run go generate
        run: |
          (make generate)
          (cd modules/500-upmeter/hooks/smokemini/internal/snapshot && go generate -v)

      - name: Check generated code
        run: git diff --exit-code || (echo 'Regenerated code does not match source, please run "make generate"' && exit 1)

      - name: Build and push deckhouse images
        id: build
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          DECKHOUSE_STAGE_REGISTRY_HOST: ${{secrets.DECKHOUSE_STAGE_REGISTRY_HOST}}
          DECKHOUSE_DEV_REGISTRY_USER : ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          DECKHOUSE_DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          GHCR_IO_REGISTRY_USER: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          GHCR_IO_REGISTRY_PASSWORD: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          DECKHOUSE_REGISTRY_USER : ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          DECKHOUSE_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
        run: |
          # Extract REPO_SUFFIX from repository name: trim prefix 'deckhouse/deckhouse-'.
          REPO_SUFFIX=${GITHUB_REPOSITORY#deckhouse/deckhouse-}
          if [[ $REPO_SUFFIX == $GITHUB_REPOSITORY ]] ; then
            # REPO_SUFFIX should be empty for main repo 'deckhouse/deckhouse'.
            REPO_SUFFIX=
          fi

          # Put tags on produced images and push to dev and release repositories.
          #
          # There are 2 modes: "dev" and "release".
          # The "dev" mode builds branches only:
          # - Build using dev-registry as primary and deckhouse registry as secondary.
          # - Push dev and dev/install images with prNUM tags and push to dev-registry.
          # The "release" mode builds branches and tags:
          # - Build using deckhouse registry as final and dev-registry as primary.
          # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
          # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

          # IMAGE_NAME is a name of image from werf.yaml.
          # IMAGE_DST is an image name for docker push.
          function publish_image() {
            IMAGE_NAME=$1
            IMAGE_DST=$2
            IMAGE_SRC="$(jq -r ".Images.\"${IMAGE_NAME}\".DockerImageName" images_tags_werf.json)"
            echo "⚓️ 💫 [$(date -u)] Publishing '${IMAGE_NAME}' image to ${IMAGE_DST}".
            echo "⚓️ 📥 [$(date -u)] Pull '${IMAGE_NAME}' image as ${IMAGE_SRC}."
            docker pull "${IMAGE_SRC}"
            echo "⚓️ 🏷 [$(date -u)] Tag '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image tag "${IMAGE_SRC}" "${IMAGE_DST}"
            echo "⚓️ 📤 [$(date -u)] Push '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image push "${IMAGE_DST}"
            echo "⚓️ 🧹 [$(date -u)] Remove local tag for '${IMAGE_NAME}'."
            docker image rmi "${IMAGE_DST}" || true;
          }

          # CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          # Temporary directory is moved to ensure
          TEMP_WORKDIR="$(dirname "${{github.workspace}}")/${{github.run_id}}-$REGISTRY_SUFFIX"
          echo "build_report_dir=$(echo ${TEMP_WORKDIR})" >> $GITHUB_OUTPUT
          mkdir -p "$TEMP_WORKDIR"

          # Registry path to publish images for Git tags.
          if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
            SEMVER_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
          else
            SEMVER_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
            export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
          fi
          export REGISTRY_PATH="${DECKHOUSE_STAGE_REGISTRY_HOST}"
          export WERF_REPO="${DECKHOUSE_STAGE_REGISTRY_HOST}"

          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Release tag build, set deckhouse registry as final
            export WERF_FINAL_REPO="${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}"

            # Set cosign auth values
            if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
              export REGISTRY_USER="${DECKHOUSE_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${DECKHOUSE_REGISTRY_PASSWORD}"
            else
              export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
            fi
            export COSIGN_VAULT_KEY="dh-2025-aug"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer"
            AUTH_ROLE="dh-signer_dh-signer"

            # The Git tag may contain a '+' sign, so use slugify for this situation.
            # Slugify doesn't change a tag with safe-only characters.
            IMAGE_TAG=$(werf slugify --format docker-tag "${CI_COMMIT_TAG}")

            export WERF_DISABLE_META_TAGS=true
          else

            # Set cosign auth values
            export REGISTRY_USER="${DECKHOUSE_DEV_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${DECKHOUSE_DEV_REGISTRY_PASSWORD}"
            export COSIGN_VAULT_KEY="dh-2025-aug-dev"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer-dev"
            AUTH_ROLE="dh-signer-dev_dh-signer-dev"

            # Determine image tag
            if [[ -n ${WERF_ENV} && ${WERF_ENV,,} != "fe" ]]; then
              IMAGE_EDITION=${WERF_ENV,,}
            fi
            # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
            # Use it as image tag. Add suffix to not overlap with PRs in main repo.
            IMAGE_TAG=${CI_COMMIT_REF_SLUG}${IMAGE_EDITION:+-${IMAGE_EDITION}}${REPO_SUFFIX:+-${REPO_SUFFIX}}
          fi
          # Set cosign auth values
          export COSIGN_VAULT_ADRESS="https://seguro.flant.com"
          ACTIONS_ID_TOKEN=$(jq -r .value <<< $(curl -fsH "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github-access-aud" ))
          export COSIGN_VAULT_TOKEN="$(curl -X POST "${COSIGN_VAULT_ADRESS}/v1/auth/github/login" -d '{"role":"'${AUTH_ROLE}'","jwt":"'${ACTIONS_ID_TOKEN}'"}' | jq -r '.auth.client_token')"
          ACTIONS_ID_TOKEN="null" #clear value
          AUTH_ROLE="null" #clear value

          type werf && source $(werf ci-env github --verbose --as-file)
          echo
          printenv | base64 #TODO: to delete, debug
          echo
          werf build \
            --parallel=true --parallel-tasks-limit=10 \
            --save-build-report=true \
            --tmp-dir="$TEMP_WORKDIR" \
            --build-report-path images_tags_werf.json

          cp images_tags_werf.json "$TEMP_WORKDIR"

          # Publish images for Git branch.
          if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images to dev-registry for branch '${CI_COMMIT_BRANCH}' and edition '${WERF_ENV}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${REGISTRY_PATH}:${IMAGE_TAG}"
            publish_image 'dev/install' "${REGISTRY_PATH}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:${IMAGE_TAG}"
            publish_image 'e2e-opentofu-eks' "${REGISTRY_PATH}/e2e-opentofu-eks:${IMAGE_TAG}"

            # For release branches, also push release-channel to dev
            if [[ ${WERF_ENV,,} == "fe" && "${CI_COMMIT_BRANCH}" =~ release-([0-9]+\.[0-9]+) ]]; then
              publish_image 'dev' "${REGISTRY_PATH}:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install' "${REGISTRY_PATH}/install:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:v${BASH_REMATCH[1]}.0"
              publish_image 'release-channel-version' "${REGISTRY_PATH}/release-channel:v${BASH_REMATCH[1]}.0"
            fi
          else
            echo "Branch unset, skipping branch publish."
          fi

          # Publish images for Git tag.
          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images for Git tag '${CI_COMMIT_TAG}' and registry suffix '${REGISTRY_SUFFIX}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${IMAGE_TAG}"
            publish_image 'dev/install' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install-standalone:${IMAGE_TAG}"
            publish_image 'release-channel-version' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${IMAGE_TAG}"
          else
            echo "Not a release tag, skipping tag publish."
          fi

          # Save 'tests' image name to pass it as output for 'tests' jobs.
          TESTS_IMAGE_NAME="$(jq -r '.Images."tests".DockerImageName' images_tags_werf.json)"
          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          # Encode as gzip+base64 to evade github's SecretMasker error: "Skip output since it may contain secret".
          echo "tests_image_name=$(echo ${TESTS_IMAGE_NAME} | gzip | base64 -w0)" >> $GITHUB_OUTPUT

          # Filter out data from build report
          egrep -v '(DockerRepo|DockerImageName)' "$TEMP_WORKDIR/images_tags_werf.json" > "$TEMP_WORKDIR/images_tags_werf_filtered.json"
          mv "$TEMP_WORKDIR/images_tags_werf_filtered.json" "$TEMP_WORKDIR/images_tags_werf.json"

      - name: Check DKP images manifests in public registry
        if: ${{ github.repository == 'deckhouse/deckhouse' && startsWith(github.ref, 'refs/tags/v') }}
        id: check_images
        env:
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
          DECKHOUSE_REGISTRY_READ_HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          EDITION=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          ./tools/check-release-images.sh --tag ${CI_COMMIT_REF_SLUG} --edition ${EDITION} --images-path ${DECKHOUSE_REGISTRY_READ_HOST}/deckhouse/

      - name: Save build report
        if: ${{ always() && (steps.build.outcome == 'success' || steps.build.outcome == 'failure') }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: build_report_${{ env.WERF_ENV }}
          path: |
            ${{ steps.build.outputs.build_report_dir }}/images_tags_werf.json

    # </template: build_template>


      # <template: send_fail_report>
      - name: Send fail report
        if: ${{ failure() && github.repository == 'deckhouse/deckhouse' }}
        env:
          LOOP_SERVICE_NOTIFICATIONS: ${{ secrets.LOOP_SERVICE_NOTIFICATIONS }}
          JOB_NAME: ${{ github.job }}
          WORKFLOW_NAME: ${{ github.workflow }}
          WORKFLOW_URL: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}/
        run: |
          bash ./.github/scripts/send-report.sh
      # </template: send_fail_report>

  build_ee:
    name: Build EE
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_EE == 'true') }}
    needs:
      - git_info
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "EE"
    # <template: build_template>
    runs-on: [self-hosted, stage]
    outputs:
      tests_image_name: ${{ steps.build.outputs.tests_image_name }}
    steps:


      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "started_at=${unixTimestamp}" >> $GITHUB_OUTPUT
      # </template: started_at_output>


      # <template: import_secrets>
      - name: Split repository name
        id: split
        env:
          REPO: ${{ github.repository }}
        run: echo "name=${REPO##*/}" >> $GITHUB_OUTPUT
      - name: Import secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://seguro.flant.com
          path: github
          role: "${{ steps.split.outputs.name }}"
          method: jwt
          jwtGithubAudience: github-access-aud
          secrets: |
            projects/data/6db2f1ee-9b6f-4f4f-8381-2fb43060478a/github/cosign_key access_token | access_token
      # </template: import_secrets>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_flant_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss" >> $GITHUB_OUTPUT
          else
            echo "web_registry_path=${GHA_TEST_REGISTRY_PATH}" >> $GITHUB_OUTPUT
          fi
      - name: Login to flant registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      # <template: login_stage_registry_step>
      - name: Check stage registry credentials
        id: check_stage_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}/deckhouse/site" >> $GITHUB_OUTPUT
          fi
      - name: Login to stage registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_stage_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_PASSWORD }}
          logout: false
      # </template: login_stage_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v2
        with:
          version: ${{env.WERF_VERSION}}
      # </template: werf_install_step>

      # <template: add_ssh_keys>
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{secrets.SOURCE_REPO_SSH_KEY}}
            ${{ secrets.SVACE_ANALYZE_SSH_PRIVATE_KEY }}
      - name: Add ssh_known_hosts
        run: |
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{secrets.SOURCE_REPO_GIT}})
          echo "::add-mask::$HOST"
          IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
          for IP in $IPS; do
            echo "::add-mask::$IP"
          done
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
      - name: Add svace analyze server to ssh_known_hosts
        continue-on-error: true
        run: |
          host=${{ secrets.SVACE_ANALYZE_HOST }}
          host_ip=$(nslookup "$host" | awk '/^Address: / { print $2 }')
          echo "::add-mask::$host_ip"
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$host" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
              CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
              if grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
                  ssh-keygen -R $host
                  ssh-keygen -R $host_ip
              fi
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
          done <<< "$HOST_KEYS"
      # </template: add_ssh_keys>

      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Run go generate
        run: |
          (make generate)
          (cd modules/500-upmeter/hooks/smokemini/internal/snapshot && go generate -v)

      - name: Check generated code
        run: git diff --exit-code || (echo 'Regenerated code does not match source, please run "make generate"' && exit 1)

      - name: Build and push deckhouse images
        id: build
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          DECKHOUSE_STAGE_REGISTRY_HOST: ${{secrets.DECKHOUSE_STAGE_REGISTRY_HOST}}
          DECKHOUSE_DEV_REGISTRY_USER : ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          DECKHOUSE_DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          GHCR_IO_REGISTRY_USER: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          GHCR_IO_REGISTRY_PASSWORD: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          DECKHOUSE_REGISTRY_USER : ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          DECKHOUSE_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
        run: |
          # Extract REPO_SUFFIX from repository name: trim prefix 'deckhouse/deckhouse-'.
          REPO_SUFFIX=${GITHUB_REPOSITORY#deckhouse/deckhouse-}
          if [[ $REPO_SUFFIX == $GITHUB_REPOSITORY ]] ; then
            # REPO_SUFFIX should be empty for main repo 'deckhouse/deckhouse'.
            REPO_SUFFIX=
          fi

          # Put tags on produced images and push to dev and release repositories.
          #
          # There are 2 modes: "dev" and "release".
          # The "dev" mode builds branches only:
          # - Build using dev-registry as primary and deckhouse registry as secondary.
          # - Push dev and dev/install images with prNUM tags and push to dev-registry.
          # The "release" mode builds branches and tags:
          # - Build using deckhouse registry as final and dev-registry as primary.
          # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
          # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

          # IMAGE_NAME is a name of image from werf.yaml.
          # IMAGE_DST is an image name for docker push.
          function publish_image() {
            IMAGE_NAME=$1
            IMAGE_DST=$2
            IMAGE_SRC="$(jq -r ".Images.\"${IMAGE_NAME}\".DockerImageName" images_tags_werf.json)"
            echo "⚓️ 💫 [$(date -u)] Publishing '${IMAGE_NAME}' image to ${IMAGE_DST}".
            echo "⚓️ 📥 [$(date -u)] Pull '${IMAGE_NAME}' image as ${IMAGE_SRC}."
            docker pull "${IMAGE_SRC}"
            echo "⚓️ 🏷 [$(date -u)] Tag '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image tag "${IMAGE_SRC}" "${IMAGE_DST}"
            echo "⚓️ 📤 [$(date -u)] Push '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image push "${IMAGE_DST}"
            echo "⚓️ 🧹 [$(date -u)] Remove local tag for '${IMAGE_NAME}'."
            docker image rmi "${IMAGE_DST}" || true;
          }

          # CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          # Temporary directory is moved to ensure
          TEMP_WORKDIR="$(dirname "${{github.workspace}}")/${{github.run_id}}-$REGISTRY_SUFFIX"
          echo "build_report_dir=$(echo ${TEMP_WORKDIR})" >> $GITHUB_OUTPUT
          mkdir -p "$TEMP_WORKDIR"

          # Registry path to publish images for Git tags.
          if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
            SEMVER_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
          else
            SEMVER_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
            export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
          fi
          export REGISTRY_PATH="${DECKHOUSE_STAGE_REGISTRY_HOST}"
          export WERF_REPO="${DECKHOUSE_STAGE_REGISTRY_HOST}"

          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Release tag build, set deckhouse registry as final
            export WERF_FINAL_REPO="${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}"

            # Set cosign auth values
            if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
              export REGISTRY_USER="${DECKHOUSE_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${DECKHOUSE_REGISTRY_PASSWORD}"
            else
              export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
            fi
            export COSIGN_VAULT_KEY="dh-2025-aug"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer"
            AUTH_ROLE="dh-signer_dh-signer"

            # The Git tag may contain a '+' sign, so use slugify for this situation.
            # Slugify doesn't change a tag with safe-only characters.
            IMAGE_TAG=$(werf slugify --format docker-tag "${CI_COMMIT_TAG}")

            export WERF_DISABLE_META_TAGS=true
          else

            # Set cosign auth values
            export REGISTRY_USER="${DECKHOUSE_DEV_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${DECKHOUSE_DEV_REGISTRY_PASSWORD}"
            export COSIGN_VAULT_KEY="dh-2025-aug-dev"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer-dev"
            AUTH_ROLE="dh-signer-dev_dh-signer-dev"

            # Determine image tag
            if [[ -n ${WERF_ENV} && ${WERF_ENV,,} != "fe" ]]; then
              IMAGE_EDITION=${WERF_ENV,,}
            fi
            # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
            # Use it as image tag. Add suffix to not overlap with PRs in main repo.
            IMAGE_TAG=${CI_COMMIT_REF_SLUG}${IMAGE_EDITION:+-${IMAGE_EDITION}}${REPO_SUFFIX:+-${REPO_SUFFIX}}
          fi
          # Set cosign auth values
          export COSIGN_VAULT_ADRESS="https://seguro.flant.com"
          ACTIONS_ID_TOKEN=$(jq -r .value <<< $(curl -fsH "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github-access-aud" ))
          export COSIGN_VAULT_TOKEN="$(curl -X POST "${COSIGN_VAULT_ADRESS}/v1/auth/github/login" -d '{"role":"'${AUTH_ROLE}'","jwt":"'${ACTIONS_ID_TOKEN}'"}' | jq -r '.auth.client_token')"
          ACTIONS_ID_TOKEN="null" #clear value
          AUTH_ROLE="null" #clear value

          type werf && source $(werf ci-env github --verbose --as-file)
          echo
          printenv | base64 #TODO: to delete, debug
          echo
          werf build \
            --parallel=true --parallel-tasks-limit=10 \
            --save-build-report=true \
            --tmp-dir="$TEMP_WORKDIR" \
            --build-report-path images_tags_werf.json

          cp images_tags_werf.json "$TEMP_WORKDIR"

          # Publish images for Git branch.
          if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images to dev-registry for branch '${CI_COMMIT_BRANCH}' and edition '${WERF_ENV}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${REGISTRY_PATH}:${IMAGE_TAG}"
            publish_image 'dev/install' "${REGISTRY_PATH}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:${IMAGE_TAG}"
            publish_image 'e2e-opentofu-eks' "${REGISTRY_PATH}/e2e-opentofu-eks:${IMAGE_TAG}"

            # For release branches, also push release-channel to dev
            if [[ ${WERF_ENV,,} == "fe" && "${CI_COMMIT_BRANCH}" =~ release-([0-9]+\.[0-9]+) ]]; then
              publish_image 'dev' "${REGISTRY_PATH}:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install' "${REGISTRY_PATH}/install:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:v${BASH_REMATCH[1]}.0"
              publish_image 'release-channel-version' "${REGISTRY_PATH}/release-channel:v${BASH_REMATCH[1]}.0"
            fi
          else
            echo "Branch unset, skipping branch publish."
          fi

          # Publish images for Git tag.
          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images for Git tag '${CI_COMMIT_TAG}' and registry suffix '${REGISTRY_SUFFIX}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${IMAGE_TAG}"
            publish_image 'dev/install' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install-standalone:${IMAGE_TAG}"
            publish_image 'release-channel-version' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${IMAGE_TAG}"
          else
            echo "Not a release tag, skipping tag publish."
          fi

          # Save 'tests' image name to pass it as output for 'tests' jobs.
          TESTS_IMAGE_NAME="$(jq -r '.Images."tests".DockerImageName' images_tags_werf.json)"
          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          # Encode as gzip+base64 to evade github's SecretMasker error: "Skip output since it may contain secret".
          echo "tests_image_name=$(echo ${TESTS_IMAGE_NAME} | gzip | base64 -w0)" >> $GITHUB_OUTPUT

          # Filter out data from build report
          egrep -v '(DockerRepo|DockerImageName)' "$TEMP_WORKDIR/images_tags_werf.json" > "$TEMP_WORKDIR/images_tags_werf_filtered.json"
          mv "$TEMP_WORKDIR/images_tags_werf_filtered.json" "$TEMP_WORKDIR/images_tags_werf.json"

      - name: Check DKP images manifests in public registry
        if: ${{ github.repository == 'deckhouse/deckhouse' && startsWith(github.ref, 'refs/tags/v') }}
        id: check_images
        env:
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
          DECKHOUSE_REGISTRY_READ_HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          EDITION=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          ./tools/check-release-images.sh --tag ${CI_COMMIT_REF_SLUG} --edition ${EDITION} --images-path ${DECKHOUSE_REGISTRY_READ_HOST}/deckhouse/

      - name: Save build report
        if: ${{ always() && (steps.build.outcome == 'success' || steps.build.outcome == 'failure') }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: build_report_${{ env.WERF_ENV }}
          path: |
            ${{ steps.build.outputs.build_report_dir }}/images_tags_werf.json

    # </template: build_template>


      # <template: send_fail_report>
      - name: Send fail report
        if: ${{ failure() && github.repository == 'deckhouse/deckhouse' }}
        env:
          LOOP_SERVICE_NOTIFICATIONS: ${{ secrets.LOOP_SERVICE_NOTIFICATIONS }}
          JOB_NAME: ${{ github.job }}
          WORKFLOW_NAME: ${{ github.workflow }}
          WORKFLOW_URL: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}/
        run: |
          bash ./.github/scripts/send-report.sh
      # </template: send_fail_report>

  build_se:
    name: Build SE
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_SE == 'true') }}
    needs:
      - git_info
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "SE"
    # <template: build_template>
    runs-on: [self-hosted, stage]
    outputs:
      tests_image_name: ${{ steps.build.outputs.tests_image_name }}
    steps:


      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "started_at=${unixTimestamp}" >> $GITHUB_OUTPUT
      # </template: started_at_output>


      # <template: import_secrets>
      - name: Split repository name
        id: split
        env:
          REPO: ${{ github.repository }}
        run: echo "name=${REPO##*/}" >> $GITHUB_OUTPUT
      - name: Import secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://seguro.flant.com
          path: github
          role: "${{ steps.split.outputs.name }}"
          method: jwt
          jwtGithubAudience: github-access-aud
          secrets: |
            projects/data/6db2f1ee-9b6f-4f4f-8381-2fb43060478a/github/cosign_key access_token | access_token
      # </template: import_secrets>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_flant_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss" >> $GITHUB_OUTPUT
          else
            echo "web_registry_path=${GHA_TEST_REGISTRY_PATH}" >> $GITHUB_OUTPUT
          fi
      - name: Login to flant registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      # <template: login_stage_registry_step>
      - name: Check stage registry credentials
        id: check_stage_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}/deckhouse/site" >> $GITHUB_OUTPUT
          fi
      - name: Login to stage registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_stage_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_PASSWORD }}
          logout: false
      # </template: login_stage_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v2
        with:
          version: ${{env.WERF_VERSION}}
      # </template: werf_install_step>

      # <template: add_ssh_keys>
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{secrets.SOURCE_REPO_SSH_KEY}}
            ${{ secrets.SVACE_ANALYZE_SSH_PRIVATE_KEY }}
      - name: Add ssh_known_hosts
        run: |
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{secrets.SOURCE_REPO_GIT}})
          echo "::add-mask::$HOST"
          IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
          for IP in $IPS; do
            echo "::add-mask::$IP"
          done
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
      - name: Add svace analyze server to ssh_known_hosts
        continue-on-error: true
        run: |
          host=${{ secrets.SVACE_ANALYZE_HOST }}
          host_ip=$(nslookup "$host" | awk '/^Address: / { print $2 }')
          echo "::add-mask::$host_ip"
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$host" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
              CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
              if grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
                  ssh-keygen -R $host
                  ssh-keygen -R $host_ip
              fi
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
          done <<< "$HOST_KEYS"
      # </template: add_ssh_keys>

      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Run go generate
        run: |
          (make generate)
          (cd modules/500-upmeter/hooks/smokemini/internal/snapshot && go generate -v)

      - name: Check generated code
        run: git diff --exit-code || (echo 'Regenerated code does not match source, please run "make generate"' && exit 1)

      - name: Build and push deckhouse images
        id: build
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          DECKHOUSE_STAGE_REGISTRY_HOST: ${{secrets.DECKHOUSE_STAGE_REGISTRY_HOST}}
          DECKHOUSE_DEV_REGISTRY_USER : ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          DECKHOUSE_DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          GHCR_IO_REGISTRY_USER: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          GHCR_IO_REGISTRY_PASSWORD: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          DECKHOUSE_REGISTRY_USER : ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          DECKHOUSE_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
        run: |
          # Extract REPO_SUFFIX from repository name: trim prefix 'deckhouse/deckhouse-'.
          REPO_SUFFIX=${GITHUB_REPOSITORY#deckhouse/deckhouse-}
          if [[ $REPO_SUFFIX == $GITHUB_REPOSITORY ]] ; then
            # REPO_SUFFIX should be empty for main repo 'deckhouse/deckhouse'.
            REPO_SUFFIX=
          fi

          # Put tags on produced images and push to dev and release repositories.
          #
          # There are 2 modes: "dev" and "release".
          # The "dev" mode builds branches only:
          # - Build using dev-registry as primary and deckhouse registry as secondary.
          # - Push dev and dev/install images with prNUM tags and push to dev-registry.
          # The "release" mode builds branches and tags:
          # - Build using deckhouse registry as final and dev-registry as primary.
          # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
          # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

          # IMAGE_NAME is a name of image from werf.yaml.
          # IMAGE_DST is an image name for docker push.
          function publish_image() {
            IMAGE_NAME=$1
            IMAGE_DST=$2
            IMAGE_SRC="$(jq -r ".Images.\"${IMAGE_NAME}\".DockerImageName" images_tags_werf.json)"
            echo "⚓️ 💫 [$(date -u)] Publishing '${IMAGE_NAME}' image to ${IMAGE_DST}".
            echo "⚓️ 📥 [$(date -u)] Pull '${IMAGE_NAME}' image as ${IMAGE_SRC}."
            docker pull "${IMAGE_SRC}"
            echo "⚓️ 🏷 [$(date -u)] Tag '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image tag "${IMAGE_SRC}" "${IMAGE_DST}"
            echo "⚓️ 📤 [$(date -u)] Push '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image push "${IMAGE_DST}"
            echo "⚓️ 🧹 [$(date -u)] Remove local tag for '${IMAGE_NAME}'."
            docker image rmi "${IMAGE_DST}" || true;
          }

          # CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          # Temporary directory is moved to ensure
          TEMP_WORKDIR="$(dirname "${{github.workspace}}")/${{github.run_id}}-$REGISTRY_SUFFIX"
          echo "build_report_dir=$(echo ${TEMP_WORKDIR})" >> $GITHUB_OUTPUT
          mkdir -p "$TEMP_WORKDIR"

          # Registry path to publish images for Git tags.
          if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
            SEMVER_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
          else
            SEMVER_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
            export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
          fi
          export REGISTRY_PATH="${DECKHOUSE_STAGE_REGISTRY_HOST}"
          export WERF_REPO="${DECKHOUSE_STAGE_REGISTRY_HOST}"

          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Release tag build, set deckhouse registry as final
            export WERF_FINAL_REPO="${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}"

            # Set cosign auth values
            if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
              export REGISTRY_USER="${DECKHOUSE_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${DECKHOUSE_REGISTRY_PASSWORD}"
            else
              export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
            fi
            export COSIGN_VAULT_KEY="dh-2025-aug"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer"
            AUTH_ROLE="dh-signer_dh-signer"

            # The Git tag may contain a '+' sign, so use slugify for this situation.
            # Slugify doesn't change a tag with safe-only characters.
            IMAGE_TAG=$(werf slugify --format docker-tag "${CI_COMMIT_TAG}")

            export WERF_DISABLE_META_TAGS=true
          else

            # Set cosign auth values
            export REGISTRY_USER="${DECKHOUSE_DEV_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${DECKHOUSE_DEV_REGISTRY_PASSWORD}"
            export COSIGN_VAULT_KEY="dh-2025-aug-dev"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer-dev"
            AUTH_ROLE="dh-signer-dev_dh-signer-dev"

            # Determine image tag
            if [[ -n ${WERF_ENV} && ${WERF_ENV,,} != "fe" ]]; then
              IMAGE_EDITION=${WERF_ENV,,}
            fi
            # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
            # Use it as image tag. Add suffix to not overlap with PRs in main repo.
            IMAGE_TAG=${CI_COMMIT_REF_SLUG}${IMAGE_EDITION:+-${IMAGE_EDITION}}${REPO_SUFFIX:+-${REPO_SUFFIX}}
          fi
          # Set cosign auth values
          export COSIGN_VAULT_ADRESS="https://seguro.flant.com"
          ACTIONS_ID_TOKEN=$(jq -r .value <<< $(curl -fsH "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github-access-aud" ))
          export COSIGN_VAULT_TOKEN="$(curl -X POST "${COSIGN_VAULT_ADRESS}/v1/auth/github/login" -d '{"role":"'${AUTH_ROLE}'","jwt":"'${ACTIONS_ID_TOKEN}'"}' | jq -r '.auth.client_token')"
          ACTIONS_ID_TOKEN="null" #clear value
          AUTH_ROLE="null" #clear value

          type werf && source $(werf ci-env github --verbose --as-file)
          echo
          printenv | base64 #TODO: to delete, debug
          echo
          werf build \
            --parallel=true --parallel-tasks-limit=10 \
            --save-build-report=true \
            --tmp-dir="$TEMP_WORKDIR" \
            --build-report-path images_tags_werf.json

          cp images_tags_werf.json "$TEMP_WORKDIR"

          # Publish images for Git branch.
          if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images to dev-registry for branch '${CI_COMMIT_BRANCH}' and edition '${WERF_ENV}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${REGISTRY_PATH}:${IMAGE_TAG}"
            publish_image 'dev/install' "${REGISTRY_PATH}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:${IMAGE_TAG}"
            publish_image 'e2e-opentofu-eks' "${REGISTRY_PATH}/e2e-opentofu-eks:${IMAGE_TAG}"

            # For release branches, also push release-channel to dev
            if [[ ${WERF_ENV,,} == "fe" && "${CI_COMMIT_BRANCH}" =~ release-([0-9]+\.[0-9]+) ]]; then
              publish_image 'dev' "${REGISTRY_PATH}:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install' "${REGISTRY_PATH}/install:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:v${BASH_REMATCH[1]}.0"
              publish_image 'release-channel-version' "${REGISTRY_PATH}/release-channel:v${BASH_REMATCH[1]}.0"
            fi
          else
            echo "Branch unset, skipping branch publish."
          fi

          # Publish images for Git tag.
          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images for Git tag '${CI_COMMIT_TAG}' and registry suffix '${REGISTRY_SUFFIX}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${IMAGE_TAG}"
            publish_image 'dev/install' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install-standalone:${IMAGE_TAG}"
            publish_image 'release-channel-version' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${IMAGE_TAG}"
          else
            echo "Not a release tag, skipping tag publish."
          fi

          # Save 'tests' image name to pass it as output for 'tests' jobs.
          TESTS_IMAGE_NAME="$(jq -r '.Images."tests".DockerImageName' images_tags_werf.json)"
          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          # Encode as gzip+base64 to evade github's SecretMasker error: "Skip output since it may contain secret".
          echo "tests_image_name=$(echo ${TESTS_IMAGE_NAME} | gzip | base64 -w0)" >> $GITHUB_OUTPUT

          # Filter out data from build report
          egrep -v '(DockerRepo|DockerImageName)' "$TEMP_WORKDIR/images_tags_werf.json" > "$TEMP_WORKDIR/images_tags_werf_filtered.json"
          mv "$TEMP_WORKDIR/images_tags_werf_filtered.json" "$TEMP_WORKDIR/images_tags_werf.json"

      - name: Check DKP images manifests in public registry
        if: ${{ github.repository == 'deckhouse/deckhouse' && startsWith(github.ref, 'refs/tags/v') }}
        id: check_images
        env:
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
          DECKHOUSE_REGISTRY_READ_HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          EDITION=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          ./tools/check-release-images.sh --tag ${CI_COMMIT_REF_SLUG} --edition ${EDITION} --images-path ${DECKHOUSE_REGISTRY_READ_HOST}/deckhouse/

      - name: Save build report
        if: ${{ always() && (steps.build.outcome == 'success' || steps.build.outcome == 'failure') }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: build_report_${{ env.WERF_ENV }}
          path: |
            ${{ steps.build.outputs.build_report_dir }}/images_tags_werf.json

    # </template: build_template>


  build_se_plus:
    name: Build SE-plus
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_SE-plus == 'true') }}
    needs:
      - git_info
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "SE-plus"
    # <template: build_template>
    runs-on: [self-hosted, stage]
    outputs:
      tests_image_name: ${{ steps.build.outputs.tests_image_name }}
    steps:


      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "started_at=${unixTimestamp}" >> $GITHUB_OUTPUT
      # </template: started_at_output>


      # <template: import_secrets>
      - name: Split repository name
        id: split
        env:
          REPO: ${{ github.repository }}
        run: echo "name=${REPO##*/}" >> $GITHUB_OUTPUT
      - name: Import secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://seguro.flant.com
          path: github
          role: "${{ steps.split.outputs.name }}"
          method: jwt
          jwtGithubAudience: github-access-aud
          secrets: |
            projects/data/6db2f1ee-9b6f-4f4f-8381-2fb43060478a/github/cosign_key access_token | access_token
      # </template: import_secrets>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_flant_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss" >> $GITHUB_OUTPUT
          else
            echo "web_registry_path=${GHA_TEST_REGISTRY_PATH}" >> $GITHUB_OUTPUT
          fi
      - name: Login to flant registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      # <template: login_stage_registry_step>
      - name: Check stage registry credentials
        id: check_stage_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}/deckhouse/site" >> $GITHUB_OUTPUT
          fi
      - name: Login to stage registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_stage_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_PASSWORD }}
          logout: false
      # </template: login_stage_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v2
        with:
          version: ${{env.WERF_VERSION}}
      # </template: werf_install_step>

      # <template: add_ssh_keys>
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{secrets.SOURCE_REPO_SSH_KEY}}
            ${{ secrets.SVACE_ANALYZE_SSH_PRIVATE_KEY }}
      - name: Add ssh_known_hosts
        run: |
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{secrets.SOURCE_REPO_GIT}})
          echo "::add-mask::$HOST"
          IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
          for IP in $IPS; do
            echo "::add-mask::$IP"
          done
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
      - name: Add svace analyze server to ssh_known_hosts
        continue-on-error: true
        run: |
          host=${{ secrets.SVACE_ANALYZE_HOST }}
          host_ip=$(nslookup "$host" | awk '/^Address: / { print $2 }')
          echo "::add-mask::$host_ip"
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$host" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
              CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
              if grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
                  ssh-keygen -R $host
                  ssh-keygen -R $host_ip
              fi
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
          done <<< "$HOST_KEYS"
      # </template: add_ssh_keys>

      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Run go generate
        run: |
          (make generate)
          (cd modules/500-upmeter/hooks/smokemini/internal/snapshot && go generate -v)

      - name: Check generated code
        run: git diff --exit-code || (echo 'Regenerated code does not match source, please run "make generate"' && exit 1)

      - name: Build and push deckhouse images
        id: build
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          DECKHOUSE_STAGE_REGISTRY_HOST: ${{secrets.DECKHOUSE_STAGE_REGISTRY_HOST}}
          DECKHOUSE_DEV_REGISTRY_USER : ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          DECKHOUSE_DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          GHCR_IO_REGISTRY_USER: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          GHCR_IO_REGISTRY_PASSWORD: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          DECKHOUSE_REGISTRY_USER : ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          DECKHOUSE_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
        run: |
          # Extract REPO_SUFFIX from repository name: trim prefix 'deckhouse/deckhouse-'.
          REPO_SUFFIX=${GITHUB_REPOSITORY#deckhouse/deckhouse-}
          if [[ $REPO_SUFFIX == $GITHUB_REPOSITORY ]] ; then
            # REPO_SUFFIX should be empty for main repo 'deckhouse/deckhouse'.
            REPO_SUFFIX=
          fi

          # Put tags on produced images and push to dev and release repositories.
          #
          # There are 2 modes: "dev" and "release".
          # The "dev" mode builds branches only:
          # - Build using dev-registry as primary and deckhouse registry as secondary.
          # - Push dev and dev/install images with prNUM tags and push to dev-registry.
          # The "release" mode builds branches and tags:
          # - Build using deckhouse registry as final and dev-registry as primary.
          # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
          # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

          # IMAGE_NAME is a name of image from werf.yaml.
          # IMAGE_DST is an image name for docker push.
          function publish_image() {
            IMAGE_NAME=$1
            IMAGE_DST=$2
            IMAGE_SRC="$(jq -r ".Images.\"${IMAGE_NAME}\".DockerImageName" images_tags_werf.json)"
            echo "⚓️ 💫 [$(date -u)] Publishing '${IMAGE_NAME}' image to ${IMAGE_DST}".
            echo "⚓️ 📥 [$(date -u)] Pull '${IMAGE_NAME}' image as ${IMAGE_SRC}."
            docker pull "${IMAGE_SRC}"
            echo "⚓️ 🏷 [$(date -u)] Tag '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image tag "${IMAGE_SRC}" "${IMAGE_DST}"
            echo "⚓️ 📤 [$(date -u)] Push '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image push "${IMAGE_DST}"
            echo "⚓️ 🧹 [$(date -u)] Remove local tag for '${IMAGE_NAME}'."
            docker image rmi "${IMAGE_DST}" || true;
          }

          # CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          # Temporary directory is moved to ensure
          TEMP_WORKDIR="$(dirname "${{github.workspace}}")/${{github.run_id}}-$REGISTRY_SUFFIX"
          echo "build_report_dir=$(echo ${TEMP_WORKDIR})" >> $GITHUB_OUTPUT
          mkdir -p "$TEMP_WORKDIR"

          # Registry path to publish images for Git tags.
          if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
            SEMVER_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
          else
            SEMVER_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
            export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
          fi
          export REGISTRY_PATH="${DECKHOUSE_STAGE_REGISTRY_HOST}"
          export WERF_REPO="${DECKHOUSE_STAGE_REGISTRY_HOST}"

          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Release tag build, set deckhouse registry as final
            export WERF_FINAL_REPO="${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}"

            # Set cosign auth values
            if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
              export REGISTRY_USER="${DECKHOUSE_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${DECKHOUSE_REGISTRY_PASSWORD}"
            else
              export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
            fi
            export COSIGN_VAULT_KEY="dh-2025-aug"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer"
            AUTH_ROLE="dh-signer_dh-signer"

            # The Git tag may contain a '+' sign, so use slugify for this situation.
            # Slugify doesn't change a tag with safe-only characters.
            IMAGE_TAG=$(werf slugify --format docker-tag "${CI_COMMIT_TAG}")

            export WERF_DISABLE_META_TAGS=true
          else

            # Set cosign auth values
            export REGISTRY_USER="${DECKHOUSE_DEV_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${DECKHOUSE_DEV_REGISTRY_PASSWORD}"
            export COSIGN_VAULT_KEY="dh-2025-aug-dev"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer-dev"
            AUTH_ROLE="dh-signer-dev_dh-signer-dev"

            # Determine image tag
            if [[ -n ${WERF_ENV} && ${WERF_ENV,,} != "fe" ]]; then
              IMAGE_EDITION=${WERF_ENV,,}
            fi
            # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
            # Use it as image tag. Add suffix to not overlap with PRs in main repo.
            IMAGE_TAG=${CI_COMMIT_REF_SLUG}${IMAGE_EDITION:+-${IMAGE_EDITION}}${REPO_SUFFIX:+-${REPO_SUFFIX}}
          fi
          # Set cosign auth values
          export COSIGN_VAULT_ADRESS="https://seguro.flant.com"
          ACTIONS_ID_TOKEN=$(jq -r .value <<< $(curl -fsH "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github-access-aud" ))
          export COSIGN_VAULT_TOKEN="$(curl -X POST "${COSIGN_VAULT_ADRESS}/v1/auth/github/login" -d '{"role":"'${AUTH_ROLE}'","jwt":"'${ACTIONS_ID_TOKEN}'"}' | jq -r '.auth.client_token')"
          ACTIONS_ID_TOKEN="null" #clear value
          AUTH_ROLE="null" #clear value

          type werf && source $(werf ci-env github --verbose --as-file)
          echo
          printenv | base64 #TODO: to delete, debug
          echo
          werf build \
            --parallel=true --parallel-tasks-limit=10 \
            --save-build-report=true \
            --tmp-dir="$TEMP_WORKDIR" \
            --build-report-path images_tags_werf.json

          cp images_tags_werf.json "$TEMP_WORKDIR"

          # Publish images for Git branch.
          if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images to dev-registry for branch '${CI_COMMIT_BRANCH}' and edition '${WERF_ENV}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${REGISTRY_PATH}:${IMAGE_TAG}"
            publish_image 'dev/install' "${REGISTRY_PATH}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:${IMAGE_TAG}"
            publish_image 'e2e-opentofu-eks' "${REGISTRY_PATH}/e2e-opentofu-eks:${IMAGE_TAG}"

            # For release branches, also push release-channel to dev
            if [[ ${WERF_ENV,,} == "fe" && "${CI_COMMIT_BRANCH}" =~ release-([0-9]+\.[0-9]+) ]]; then
              publish_image 'dev' "${REGISTRY_PATH}:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install' "${REGISTRY_PATH}/install:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:v${BASH_REMATCH[1]}.0"
              publish_image 'release-channel-version' "${REGISTRY_PATH}/release-channel:v${BASH_REMATCH[1]}.0"
            fi
          else
            echo "Branch unset, skipping branch publish."
          fi

          # Publish images for Git tag.
          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images for Git tag '${CI_COMMIT_TAG}' and registry suffix '${REGISTRY_SUFFIX}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${IMAGE_TAG}"
            publish_image 'dev/install' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install-standalone:${IMAGE_TAG}"
            publish_image 'release-channel-version' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${IMAGE_TAG}"
          else
            echo "Not a release tag, skipping tag publish."
          fi

          # Save 'tests' image name to pass it as output for 'tests' jobs.
          TESTS_IMAGE_NAME="$(jq -r '.Images."tests".DockerImageName' images_tags_werf.json)"
          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          # Encode as gzip+base64 to evade github's SecretMasker error: "Skip output since it may contain secret".
          echo "tests_image_name=$(echo ${TESTS_IMAGE_NAME} | gzip | base64 -w0)" >> $GITHUB_OUTPUT

          # Filter out data from build report
          egrep -v '(DockerRepo|DockerImageName)' "$TEMP_WORKDIR/images_tags_werf.json" > "$TEMP_WORKDIR/images_tags_werf_filtered.json"
          mv "$TEMP_WORKDIR/images_tags_werf_filtered.json" "$TEMP_WORKDIR/images_tags_werf.json"

      - name: Check DKP images manifests in public registry
        if: ${{ github.repository == 'deckhouse/deckhouse' && startsWith(github.ref, 'refs/tags/v') }}
        id: check_images
        env:
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
          DECKHOUSE_REGISTRY_READ_HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          EDITION=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          ./tools/check-release-images.sh --tag ${CI_COMMIT_REF_SLUG} --edition ${EDITION} --images-path ${DECKHOUSE_REGISTRY_READ_HOST}/deckhouse/

      - name: Save build report
        if: ${{ always() && (steps.build.outcome == 'success' || steps.build.outcome == 'failure') }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: build_report_${{ env.WERF_ENV }}
          path: |
            ${{ steps.build.outputs.build_report_dir }}/images_tags_werf.json

    # </template: build_template>


  build_be:
    name: Build BE
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_BE == 'true') }}
    needs:
      - git_info
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "BE"
    # <template: build_template>
    runs-on: [self-hosted, stage]
    outputs:
      tests_image_name: ${{ steps.build.outputs.tests_image_name }}
    steps:


      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "started_at=${unixTimestamp}" >> $GITHUB_OUTPUT
      # </template: started_at_output>


      # <template: import_secrets>
      - name: Split repository name
        id: split
        env:
          REPO: ${{ github.repository }}
        run: echo "name=${REPO##*/}" >> $GITHUB_OUTPUT
      - name: Import secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://seguro.flant.com
          path: github
          role: "${{ steps.split.outputs.name }}"
          method: jwt
          jwtGithubAudience: github-access-aud
          secrets: |
            projects/data/6db2f1ee-9b6f-4f4f-8381-2fb43060478a/github/cosign_key access_token | access_token
      # </template: import_secrets>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_flant_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss" >> $GITHUB_OUTPUT
          else
            echo "web_registry_path=${GHA_TEST_REGISTRY_PATH}" >> $GITHUB_OUTPUT
          fi
      - name: Login to flant registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      # <template: login_stage_registry_step>
      - name: Check stage registry credentials
        id: check_stage_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}/deckhouse/site" >> $GITHUB_OUTPUT
          fi
      - name: Login to stage registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_stage_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_PASSWORD }}
          logout: false
      # </template: login_stage_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v2
        with:
          version: ${{env.WERF_VERSION}}
      # </template: werf_install_step>

      # <template: add_ssh_keys>
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{secrets.SOURCE_REPO_SSH_KEY}}
            ${{ secrets.SVACE_ANALYZE_SSH_PRIVATE_KEY }}
      - name: Add ssh_known_hosts
        run: |
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{secrets.SOURCE_REPO_GIT}})
          echo "::add-mask::$HOST"
          IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
          for IP in $IPS; do
            echo "::add-mask::$IP"
          done
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
      - name: Add svace analyze server to ssh_known_hosts
        continue-on-error: true
        run: |
          host=${{ secrets.SVACE_ANALYZE_HOST }}
          host_ip=$(nslookup "$host" | awk '/^Address: / { print $2 }')
          echo "::add-mask::$host_ip"
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$host" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
              CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
              if grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
                  ssh-keygen -R $host
                  ssh-keygen -R $host_ip
              fi
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
          done <<< "$HOST_KEYS"
      # </template: add_ssh_keys>

      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Run go generate
        run: |
          (make generate)
          (cd modules/500-upmeter/hooks/smokemini/internal/snapshot && go generate -v)

      - name: Check generated code
        run: git diff --exit-code || (echo 'Regenerated code does not match source, please run "make generate"' && exit 1)

      - name: Build and push deckhouse images
        id: build
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          DECKHOUSE_STAGE_REGISTRY_HOST: ${{secrets.DECKHOUSE_STAGE_REGISTRY_HOST}}
          DECKHOUSE_DEV_REGISTRY_USER : ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          DECKHOUSE_DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          GHCR_IO_REGISTRY_USER: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          GHCR_IO_REGISTRY_PASSWORD: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          DECKHOUSE_REGISTRY_USER : ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          DECKHOUSE_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
        run: |
          # Extract REPO_SUFFIX from repository name: trim prefix 'deckhouse/deckhouse-'.
          REPO_SUFFIX=${GITHUB_REPOSITORY#deckhouse/deckhouse-}
          if [[ $REPO_SUFFIX == $GITHUB_REPOSITORY ]] ; then
            # REPO_SUFFIX should be empty for main repo 'deckhouse/deckhouse'.
            REPO_SUFFIX=
          fi

          # Put tags on produced images and push to dev and release repositories.
          #
          # There are 2 modes: "dev" and "release".
          # The "dev" mode builds branches only:
          # - Build using dev-registry as primary and deckhouse registry as secondary.
          # - Push dev and dev/install images with prNUM tags and push to dev-registry.
          # The "release" mode builds branches and tags:
          # - Build using deckhouse registry as final and dev-registry as primary.
          # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
          # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

          # IMAGE_NAME is a name of image from werf.yaml.
          # IMAGE_DST is an image name for docker push.
          function publish_image() {
            IMAGE_NAME=$1
            IMAGE_DST=$2
            IMAGE_SRC="$(jq -r ".Images.\"${IMAGE_NAME}\".DockerImageName" images_tags_werf.json)"
            echo "⚓️ 💫 [$(date -u)] Publishing '${IMAGE_NAME}' image to ${IMAGE_DST}".
            echo "⚓️ 📥 [$(date -u)] Pull '${IMAGE_NAME}' image as ${IMAGE_SRC}."
            docker pull "${IMAGE_SRC}"
            echo "⚓️ 🏷 [$(date -u)] Tag '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image tag "${IMAGE_SRC}" "${IMAGE_DST}"
            echo "⚓️ 📤 [$(date -u)] Push '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image push "${IMAGE_DST}"
            echo "⚓️ 🧹 [$(date -u)] Remove local tag for '${IMAGE_NAME}'."
            docker image rmi "${IMAGE_DST}" || true;
          }

          # CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          # Temporary directory is moved to ensure
          TEMP_WORKDIR="$(dirname "${{github.workspace}}")/${{github.run_id}}-$REGISTRY_SUFFIX"
          echo "build_report_dir=$(echo ${TEMP_WORKDIR})" >> $GITHUB_OUTPUT
          mkdir -p "$TEMP_WORKDIR"

          # Registry path to publish images for Git tags.
          if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
            SEMVER_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
          else
            SEMVER_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
            export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
          fi
          export REGISTRY_PATH="${DECKHOUSE_STAGE_REGISTRY_HOST}"
          export WERF_REPO="${DECKHOUSE_STAGE_REGISTRY_HOST}"

          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Release tag build, set deckhouse registry as final
            export WERF_FINAL_REPO="${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}"

            # Set cosign auth values
            if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
              export REGISTRY_USER="${DECKHOUSE_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${DECKHOUSE_REGISTRY_PASSWORD}"
            else
              export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
            fi
            export COSIGN_VAULT_KEY="dh-2025-aug"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer"
            AUTH_ROLE="dh-signer_dh-signer"

            # The Git tag may contain a '+' sign, so use slugify for this situation.
            # Slugify doesn't change a tag with safe-only characters.
            IMAGE_TAG=$(werf slugify --format docker-tag "${CI_COMMIT_TAG}")

            export WERF_DISABLE_META_TAGS=true
          else

            # Set cosign auth values
            export REGISTRY_USER="${DECKHOUSE_DEV_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${DECKHOUSE_DEV_REGISTRY_PASSWORD}"
            export COSIGN_VAULT_KEY="dh-2025-aug-dev"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer-dev"
            AUTH_ROLE="dh-signer-dev_dh-signer-dev"

            # Determine image tag
            if [[ -n ${WERF_ENV} && ${WERF_ENV,,} != "fe" ]]; then
              IMAGE_EDITION=${WERF_ENV,,}
            fi
            # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
            # Use it as image tag. Add suffix to not overlap with PRs in main repo.
            IMAGE_TAG=${CI_COMMIT_REF_SLUG}${IMAGE_EDITION:+-${IMAGE_EDITION}}${REPO_SUFFIX:+-${REPO_SUFFIX}}
          fi
          # Set cosign auth values
          export COSIGN_VAULT_ADRESS="https://seguro.flant.com"
          ACTIONS_ID_TOKEN=$(jq -r .value <<< $(curl -fsH "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github-access-aud" ))
          export COSIGN_VAULT_TOKEN="$(curl -X POST "${COSIGN_VAULT_ADRESS}/v1/auth/github/login" -d '{"role":"'${AUTH_ROLE}'","jwt":"'${ACTIONS_ID_TOKEN}'"}' | jq -r '.auth.client_token')"
          ACTIONS_ID_TOKEN="null" #clear value
          AUTH_ROLE="null" #clear value

          type werf && source $(werf ci-env github --verbose --as-file)
          echo
          printenv | base64 #TODO: to delete, debug
          echo
          werf build \
            --parallel=true --parallel-tasks-limit=10 \
            --save-build-report=true \
            --tmp-dir="$TEMP_WORKDIR" \
            --build-report-path images_tags_werf.json

          cp images_tags_werf.json "$TEMP_WORKDIR"

          # Publish images for Git branch.
          if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images to dev-registry for branch '${CI_COMMIT_BRANCH}' and edition '${WERF_ENV}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${REGISTRY_PATH}:${IMAGE_TAG}"
            publish_image 'dev/install' "${REGISTRY_PATH}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:${IMAGE_TAG}"
            publish_image 'e2e-opentofu-eks' "${REGISTRY_PATH}/e2e-opentofu-eks:${IMAGE_TAG}"

            # For release branches, also push release-channel to dev
            if [[ ${WERF_ENV,,} == "fe" && "${CI_COMMIT_BRANCH}" =~ release-([0-9]+\.[0-9]+) ]]; then
              publish_image 'dev' "${REGISTRY_PATH}:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install' "${REGISTRY_PATH}/install:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:v${BASH_REMATCH[1]}.0"
              publish_image 'release-channel-version' "${REGISTRY_PATH}/release-channel:v${BASH_REMATCH[1]}.0"
            fi
          else
            echo "Branch unset, skipping branch publish."
          fi

          # Publish images for Git tag.
          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images for Git tag '${CI_COMMIT_TAG}' and registry suffix '${REGISTRY_SUFFIX}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${IMAGE_TAG}"
            publish_image 'dev/install' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install-standalone:${IMAGE_TAG}"
            publish_image 'release-channel-version' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${IMAGE_TAG}"
          else
            echo "Not a release tag, skipping tag publish."
          fi

          # Save 'tests' image name to pass it as output for 'tests' jobs.
          TESTS_IMAGE_NAME="$(jq -r '.Images."tests".DockerImageName' images_tags_werf.json)"
          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          # Encode as gzip+base64 to evade github's SecretMasker error: "Skip output since it may contain secret".
          echo "tests_image_name=$(echo ${TESTS_IMAGE_NAME} | gzip | base64 -w0)" >> $GITHUB_OUTPUT

          # Filter out data from build report
          egrep -v '(DockerRepo|DockerImageName)' "$TEMP_WORKDIR/images_tags_werf.json" > "$TEMP_WORKDIR/images_tags_werf_filtered.json"
          mv "$TEMP_WORKDIR/images_tags_werf_filtered.json" "$TEMP_WORKDIR/images_tags_werf.json"

      - name: Check DKP images manifests in public registry
        if: ${{ github.repository == 'deckhouse/deckhouse' && startsWith(github.ref, 'refs/tags/v') }}
        id: check_images
        env:
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
          DECKHOUSE_REGISTRY_READ_HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          EDITION=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          ./tools/check-release-images.sh --tag ${CI_COMMIT_REF_SLUG} --edition ${EDITION} --images-path ${DECKHOUSE_REGISTRY_READ_HOST}/deckhouse/

      - name: Save build report
        if: ${{ always() && (steps.build.outcome == 'success' || steps.build.outcome == 'failure') }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: build_report_${{ env.WERF_ENV }}
          path: |
            ${{ steps.build.outputs.build_report_dir }}/images_tags_werf.json

    # </template: build_template>


  build_ce:
    name: Build CE
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_CE == 'true') }}
    needs:
      - git_info
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "CE"
    # <template: build_template>
    runs-on: [self-hosted, stage]
    outputs:
      tests_image_name: ${{ steps.build.outputs.tests_image_name }}
    steps:


      # <template: started_at_output>
      - name: Job started timestamp
        id: started_at
        run: |
          unixTimestamp=$(date +%s)
          echo "started_at=${unixTimestamp}" >> $GITHUB_OUTPUT
      # </template: started_at_output>


      # <template: import_secrets>
      - name: Split repository name
        id: split
        env:
          REPO: ${{ github.repository }}
        run: echo "name=${REPO##*/}" >> $GITHUB_OUTPUT
      - name: Import secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://seguro.flant.com
          path: github
          role: "${{ steps.split.outputs.name }}"
          method: jwt
          jwtGithubAudience: github-access-aud
          secrets: |
            projects/data/6db2f1ee-9b6f-4f4f-8381-2fb43060478a/github/cosign_key access_token | access_token
      # </template: import_secrets>

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: login_flant_registry_step>
      - name: Check flant registry credentials
        id: check_flant_registry
        env:
          HOST: ${{secrets.FLANT_REGISTRY_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_flant_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss" >> $GITHUB_OUTPUT
          else
            echo "web_registry_path=${GHA_TEST_REGISTRY_PATH}" >> $GITHUB_OUTPUT
          fi
      - name: Login to flant registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials == 'true' }}
        with:
          registry: ${{ secrets.FLANT_REGISTRY_HOST }}
          username: ${{ secrets.FLANT_REGISTRY_USER }}
          password: ${{ secrets.FLANT_REGISTRY_PASSWORD }}
          logout: false
      - name: Login to Github Container Registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_flant_registry.outputs.has_flant_credentials != 'true' }}
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          password: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_flant_registry_step>

      # <template: login_stage_registry_step>
      - name: Check stage registry credentials
        id: check_stage_registry
        env:
          HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          if [[ -n $HOST ]]; then
            echo "has_credentials=true" >> $GITHUB_OUTPUT
            echo "web_registry_path=${{secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}/deckhouse/site" >> $GITHUB_OUTPUT
          fi
      - name: Login to stage registry
        uses: docker/login-action@v2.1.0
        if: ${{ steps.check_stage_registry.outputs.has_credentials == 'true' }}
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_STAGE_PASSWORD }}
          logout: false
      # </template: login_stage_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v2
        with:
          version: ${{env.WERF_VERSION}}
      # </template: werf_install_step>

      # <template: add_ssh_keys>
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{secrets.SOURCE_REPO_SSH_KEY}}
            ${{ secrets.SVACE_ANALYZE_SSH_PRIVATE_KEY }}
      - name: Add ssh_known_hosts
        run: |
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{secrets.SOURCE_REPO_GIT}})
          echo "::add-mask::$HOST"
          IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
          for IP in $IPS; do
            echo "::add-mask::$IP"
          done
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
      - name: Add svace analyze server to ssh_known_hosts
        continue-on-error: true
        run: |
          host=${{ secrets.SVACE_ANALYZE_HOST }}
          host_ip=$(nslookup "$host" | awk '/^Address: / { print $2 }')
          echo "::add-mask::$host_ip"
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$host" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
              CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
              if grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
                  ssh-keygen -R $host
                  ssh-keygen -R $host_ip
              fi
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
          done <<< "$HOST_KEYS"
      # </template: add_ssh_keys>

      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Run go generate
        run: |
          (make generate)
          (cd modules/500-upmeter/hooks/smokemini/internal/snapshot && go generate -v)

      - name: Check generated code
        run: git diff --exit-code || (echo 'Regenerated code does not match source, please run "make generate"' && exit 1)

      - name: Build and push deckhouse images
        id: build
        env:
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          DECKHOUSE_STAGE_REGISTRY_HOST: ${{secrets.DECKHOUSE_STAGE_REGISTRY_HOST}}
          DECKHOUSE_DEV_REGISTRY_USER : ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          DECKHOUSE_DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          GHCR_IO_REGISTRY_USER: ${{ secrets.GHCR_IO_REGISTRY_USER }}
          GHCR_IO_REGISTRY_PASSWORD: ${{ secrets.GHCR_IO_REGISTRY_PASSWORD }}
          DECKHOUSE_REGISTRY_USER : ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          DECKHOUSE_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
        run: |
          # Extract REPO_SUFFIX from repository name: trim prefix 'deckhouse/deckhouse-'.
          REPO_SUFFIX=${GITHUB_REPOSITORY#deckhouse/deckhouse-}
          if [[ $REPO_SUFFIX == $GITHUB_REPOSITORY ]] ; then
            # REPO_SUFFIX should be empty for main repo 'deckhouse/deckhouse'.
            REPO_SUFFIX=
          fi

          # Put tags on produced images and push to dev and release repositories.
          #
          # There are 2 modes: "dev" and "release".
          # The "dev" mode builds branches only:
          # - Build using dev-registry as primary and deckhouse registry as secondary.
          # - Push dev and dev/install images with prNUM tags and push to dev-registry.
          # The "release" mode builds branches and tags:
          # - Build using deckhouse registry as final and dev-registry as primary.
          # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
          # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

          # IMAGE_NAME is a name of image from werf.yaml.
          # IMAGE_DST is an image name for docker push.
          function publish_image() {
            IMAGE_NAME=$1
            IMAGE_DST=$2
            IMAGE_SRC="$(jq -r ".Images.\"${IMAGE_NAME}\".DockerImageName" images_tags_werf.json)"
            echo "⚓️ 💫 [$(date -u)] Publishing '${IMAGE_NAME}' image to ${IMAGE_DST}".
            echo "⚓️ 📥 [$(date -u)] Pull '${IMAGE_NAME}' image as ${IMAGE_SRC}."
            docker pull "${IMAGE_SRC}"
            echo "⚓️ 🏷 [$(date -u)] Tag '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image tag "${IMAGE_SRC}" "${IMAGE_DST}"
            echo "⚓️ 📤 [$(date -u)] Push '${IMAGE_NAME}' image as ${IMAGE_DST}."
            docker image push "${IMAGE_DST}"
            echo "⚓️ 🧹 [$(date -u)] Remove local tag for '${IMAGE_NAME}'."
            docker image rmi "${IMAGE_DST}" || true;
          }

          # CE/EE/FE -> ce/ee/fe
          REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          # Temporary directory is moved to ensure
          TEMP_WORKDIR="$(dirname "${{github.workspace}}")/${{github.run_id}}-$REGISTRY_SUFFIX"
          echo "build_report_dir=$(echo ${TEMP_WORKDIR})" >> $GITHUB_OUTPUT
          mkdir -p "$TEMP_WORKDIR"

          # Registry path to publish images for Git tags.
          if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
            SEMVER_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
          else
            SEMVER_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
            export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
          fi
          export REGISTRY_PATH="${DECKHOUSE_STAGE_REGISTRY_HOST}"
          export WERF_REPO="${DECKHOUSE_STAGE_REGISTRY_HOST}"

          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Release tag build, set deckhouse registry as final
            export WERF_FINAL_REPO="${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}"

            # Set cosign auth values
            if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
              export REGISTRY_USER="${DECKHOUSE_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${DECKHOUSE_REGISTRY_PASSWORD}"
            else
              export REGISTRY_USER="${GHCR_IO_REGISTRY_USER}"
              export REGISTRY_PASSWORD="${GHCR_IO_REGISTRY_PASSWORD}"
            fi
            export COSIGN_VAULT_KEY="dh-2025-aug"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer"
            AUTH_ROLE="dh-signer_dh-signer"

            # The Git tag may contain a '+' sign, so use slugify for this situation.
            # Slugify doesn't change a tag with safe-only characters.
            IMAGE_TAG=$(werf slugify --format docker-tag "${CI_COMMIT_TAG}")

            export WERF_DISABLE_META_TAGS=true
          else

            # Set cosign auth values
            export REGISTRY_USER="${DECKHOUSE_DEV_REGISTRY_USER}"
            export REGISTRY_PASSWORD="${DECKHOUSE_DEV_REGISTRY_PASSWORD}"
            export COSIGN_VAULT_KEY="dh-2025-aug-dev"
            export COSIGN_TRANSIT_SECRET_ENGINE_PATH="dh-signer-dev"
            AUTH_ROLE="dh-signer-dev_dh-signer-dev"

            # Determine image tag
            if [[ -n ${WERF_ENV} && ${WERF_ENV,,} != "fe" ]]; then
              IMAGE_EDITION=${WERF_ENV,,}
            fi
            # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
            # Use it as image tag. Add suffix to not overlap with PRs in main repo.
            IMAGE_TAG=${CI_COMMIT_REF_SLUG}${IMAGE_EDITION:+-${IMAGE_EDITION}}${REPO_SUFFIX:+-${REPO_SUFFIX}}
          fi
          # Set cosign auth values
          export COSIGN_VAULT_ADRESS="https://seguro.flant.com"
          ACTIONS_ID_TOKEN=$(jq -r .value <<< $(curl -fsH "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github-access-aud" ))
          export COSIGN_VAULT_TOKEN="$(curl -X POST "${COSIGN_VAULT_ADRESS}/v1/auth/github/login" -d '{"role":"'${AUTH_ROLE}'","jwt":"'${ACTIONS_ID_TOKEN}'"}' | jq -r '.auth.client_token')"
          ACTIONS_ID_TOKEN="null" #clear value
          AUTH_ROLE="null" #clear value

          type werf && source $(werf ci-env github --verbose --as-file)
          echo
          printenv | base64 #TODO: to delete, debug
          echo
          werf build \
            --parallel=true --parallel-tasks-limit=10 \
            --save-build-report=true \
            --tmp-dir="$TEMP_WORKDIR" \
            --build-report-path images_tags_werf.json

          cp images_tags_werf.json "$TEMP_WORKDIR"

          # Publish images for Git branch.
          if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images to dev-registry for branch '${CI_COMMIT_BRANCH}' and edition '${WERF_ENV}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${REGISTRY_PATH}:${IMAGE_TAG}"
            publish_image 'dev/install' "${REGISTRY_PATH}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:${IMAGE_TAG}"
            publish_image 'e2e-opentofu-eks' "${REGISTRY_PATH}/e2e-opentofu-eks:${IMAGE_TAG}"

            # For release branches, also push release-channel to dev
            if [[ ${WERF_ENV,,} == "fe" && "${CI_COMMIT_BRANCH}" =~ release-([0-9]+\.[0-9]+) ]]; then
              publish_image 'dev' "${REGISTRY_PATH}:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install' "${REGISTRY_PATH}/install:v${BASH_REMATCH[1]}.0"
              publish_image 'dev/install-standalone' "${REGISTRY_PATH}/install-standalone:v${BASH_REMATCH[1]}.0"
              publish_image 'release-channel-version' "${REGISTRY_PATH}/release-channel:v${BASH_REMATCH[1]}.0"
            fi
          else
            echo "Branch unset, skipping branch publish."
          fi

          # Publish images for Git tag.
          if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "⚓️ 💫 [$(date -u)] Publish images for Git tag '${CI_COMMIT_TAG}' and registry suffix '${REGISTRY_SUFFIX}' using tag '${IMAGE_TAG}' ..."
            publish_image 'dev' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${IMAGE_TAG}"
            publish_image 'dev/install' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${IMAGE_TAG}"
            publish_image 'dev/install-standalone' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install-standalone:${IMAGE_TAG}"
            publish_image 'release-channel-version' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${IMAGE_TAG}"
          else
            echo "Not a release tag, skipping tag publish."
          fi

          # Save 'tests' image name to pass it as output for 'tests' jobs.
          TESTS_IMAGE_NAME="$(jq -r '.Images."tests".DockerImageName' images_tags_werf.json)"
          # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
          echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
          # Encode as gzip+base64 to evade github's SecretMasker error: "Skip output since it may contain secret".
          echo "tests_image_name=$(echo ${TESTS_IMAGE_NAME} | gzip | base64 -w0)" >> $GITHUB_OUTPUT

          # Filter out data from build report
          egrep -v '(DockerRepo|DockerImageName)' "$TEMP_WORKDIR/images_tags_werf.json" > "$TEMP_WORKDIR/images_tags_werf_filtered.json"
          mv "$TEMP_WORKDIR/images_tags_werf_filtered.json" "$TEMP_WORKDIR/images_tags_werf.json"

      - name: Check DKP images manifests in public registry
        if: ${{ github.repository == 'deckhouse/deckhouse' && startsWith(github.ref, 'refs/tags/v') }}
        id: check_images
        env:
          CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
          DECKHOUSE_REGISTRY_READ_HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
        run: |
          EDITION=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

          ./tools/check-release-images.sh --tag ${CI_COMMIT_REF_SLUG} --edition ${EDITION} --images-path ${DECKHOUSE_REGISTRY_READ_HOST}/deckhouse/

      - name: Save build report
        if: ${{ always() && (steps.build.outcome == 'success' || steps.build.outcome == 'failure') }}
        uses: actions/upload-artifact@v4.4.0
        with:
          name: build_report_${{ env.WERF_ENV }}
          path: |
            ${{ steps.build.outputs.build_report_dir }}/images_tags_werf.json

    # </template: build_template>


  analyze_deckhouse:
    if: ${{ github.event.inputs.svace_enabled == 'true' }}
    name: Deckhouse static analysis
    needs:
      - build_fe
    runs-on: [self-hosted, regular]
    steps:
      - uses: deckhouse/modules-actions/svace_analyze@v4
        with:
          project_group: "DKP"
          ci_commit_ref_name: ${{ github.ref_name }}
          ci_commit_hash: ${{ github.sha }}
          svace_analyze_host: "${{ secrets.SVACE_ANALYZE_HOST }}"
          svace_analyze_ssh_user: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
          svacer_url: "${{ secrets.SVACER_URL }}"
          svacer_import_user: "${{ secrets.SVACER_IMPORT_USER }}"
          svacer_import_password: "${{ secrets.SVACER_IMPORT_PASSWORD }}"
          svace_analyze_ssh_private_key: "${{ secrets.SVACE_ANALYZE_SSH_PRIVATE_KEY }}"

  compare_internal_modules:
    name: Compare internal modules
    needs:
      - build_fe
      - build_ee
      - build_ce
      - build_be
      - build_se
      - build_se_plus
    if: ${{ always() && needs.build_fe.result == 'success' }}
    runs-on: regular
    steps:
      - uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.12.3'

      # <template: checkout_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2

      # </template: checkout_step>
      - name: Get artifacts
        uses: actions/download-artifact@v4.1.8
      - name: Compare modules
        run: python .github/scripts/python/compare_internal_modules.py
