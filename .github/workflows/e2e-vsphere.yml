#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

name: 'e2e: vSphere'
on:
  push:
    branches-ignore:
      - 'main'
      - 'release-*'
      - 'alpha'
      - 'beta'
      - 'early-access'
      - 'stable'
      - 'rock-solid'
      - 'changelog/*'
  workflow_dispatch:
    inputs:
      issue_id:
        description: 'ID of issue where label was set'
        required: true
      issue_number:
        description: 'Number of issue where label was set'
        required: true
      comment_id:
        description: 'ID of comment in issue where to put workflow run status'
        required: true
env:

  # Don't forget to update .gitlab-ci-simple.yml if necessary
  WERF_CHANNEL: "ea"
  WERF_ENV: "FE"
  # We use stapel image from own registry due to docker hub pull amount limitation.
  # To re-push stapel image from docker hub use command:
  # `skopeo copy docker://flant/werf-stapel:0.6.1 docker://registry-write.deckhouse.io/flant/werf-stapel:0.6.1`
  WERF_STAPEL_IMAGE_NAME: "${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}/flant/werf-stapel"
  WERF_STAPEL_IMAGE_VERSION: "0.6.1"
  TEST_TIMEOUT: "15m"
  # Use fixed string 'sys/deckhouse-oss' for repo name. ${CI_PROJECT_PATH} is not available here in Github.
  DEV_REGISTRY_PATH: "${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}/sys/deckhouse-oss"
  BASE_IMAGES_REGISTRY_PATH: "registry.deckhouse.io/base_images/"

  FLANT_REGISTRY_PATH: "${{ secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss"


  # command to copy image to our registry - crane copy alpine:3.12.1@sha256:HASHVALUE ${OUR_PRIVATE_REGISTRY}/base_images/alpine:3.12.1@sha256:HASHVALUE
  # https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane.md
  BASE_ALPINE: "registry.deckhouse.io/base_images/alpine:3.12.1@sha256:c0e9560cda118f9ec63ddefb4a173a2b2a0347082d7dff7dc14272e7841a5b5a"
  BASE_DEBIAN: "registry.deckhouse.io/base_images/debian:buster-20210111@sha256:b16f66714660c4b3ea14d273ad8c35079b81b35d65d1e206072d226c7ff78299"
  BASE_ETCD: "k8s.gcr.io/etcd:3.4.13-0@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2"
  BASE_GOLANG_16_ALPINE: "registry.deckhouse.io/base_images/golang:1.16.3-alpine3.12@sha256:371dc6bf7e0c7ce112a29341b000c40d840aef1dbb4fdcb3ae5c0597e28f3061"
  BASE_GOLANG_16_BUSTER: "registry.deckhouse.io/base_images/golang:1.16.3-buster@sha256:9d64369fd3c633df71d7465d67d43f63bb31192193e671742fa1c26ebc3a6210"
  BASE_GOLANG_17_ALPINE: "registry.deckhouse.io/base_images/golang:1.17.3-alpine3.14@sha256:78a88e6a712e60f9d942450e02508f3c0d8aa931853f02793a4c3aa30063eae0"
  BASE_GOLANG_17_BUSTER: "registry.deckhouse.io/base_images/golang:1.17.3-buster@sha256:be7aa81b44dc85ddf4008bc5f3d5a5acfca8517620d0c4a393601c8e0495fb05"
  BASE_GOLANG_ALPINE: "registry.deckhouse.io/base_images/golang:1.15.3-alpine3.12@sha256:df0119b970c8e5e9f0f5c40f6b55edddf616bab2b911927ebc3b361c469ea29c"
  BASE_GOLANG_BUSTER: "registry.deckhouse.io/base_images/golang:1.15.3-buster@sha256:fb04edf20446eed8af9eb6137d02fdf607f47028a0a806131f8b175a09620aab"
  BASE_JEKYLL: "registry.deckhouse.io/base_images/jekyll/jekyll:3.8@sha256:9521c8aae4739fcbc7137ead19f91841b833d671542f13e91ca40280e88d6e34"
  BASE_NGINX_ALPINE: "registry.deckhouse.io/base_images/nginx:1.15.12-alpine@sha256:57a226fb6ab6823027c0704a9346a890ffb0cacde06bc19bbc234c8720673555"
  BASE_NODE_16_ALPINE: "registry.deckhouse.io/base_images/node:16.13.0-alpine3.14@sha256:5277c7d171e02ee76417bb290ef488aa80e4e64572119eec0cb9fffbcffb8f6a"
  BASE_PYTHON_ALPINE: "registry.deckhouse.io/base_images/python:3.7.9-alpine3.12@sha256:8c224566c41fcc1674f9b78ff2a364a1209370a5b7e7619e8ead2bdcd0fd8b52"
  BASE_SHELL_OPERATOR: "registry.deckhouse.io/base_images/flant/shell-operator:v1.0.1@sha256:51dbdbad17303c31265af389c6acc73d1b6b6c66bd2112542e09b42566ac05bf"
  BASE_UBUNTU: "registry.deckhouse.io/base_images/ubuntu:bionic-20210118@sha256:ea188fdc5be9b25ca048f1e882b33f1bc763fb976a8a4fea446b38ed0efcbeba"

  # Terraform settings
  TF_AWS_NAMESPACE: hashicorp
  TF_AWS_TYPE: aws
  TF_AWS_VERSION: 3.56.0
  TF_AZURE_NAMESPACE: hashicorp
  TF_AZURE_TYPE: azurerm
  TF_AZURE_VERSION: 2.36.0
  TF_GCP_NAMESPACE: hashicorp
  TF_GCP_TYPE: google
  TF_GCP_VERSION: 3.48.0
  TF_OPENSTACK_NAMESPACE: terraform-provider-openstack
  TF_OPENSTACK_TYPE: openstack
  TF_OPENSTACK_VERSION: 1.32.0
  TF_VERSION: 0.13.4
  TF_VSPHERE_NAMESPACE: hashicorp
  TF_VSPHERE_TYPE: vsphere
  TF_VSPHERE_VERSION: 2.0.2
  TF_YANDEX_NAMESPACE: yandex-cloud
  TF_YANDEX_TYPE: yandex
  TF_YANDEX_VERSION: 0.45.1

# Analog of Gitlab's "interruptible: true" behaviour.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.ref }}-e2e-vsphere
  cancel-in-progress: true

jobs:

  git_info:
    name: Get git info
    runs-on: ubuntu-latest
    outputs:
      ci_commit_tag: ${{ steps.git_info.outputs.ci_commit_tag }}
      ci_commit_branch: ${{ steps.git_info.outputs.ci_commit_branch }}
      ci_commit_ref_name: ${{ steps.git_info.outputs.ci_commit_ref_name }}
      ci_pipeline_created_at: ${{ steps.git_info.outputs.ci_pipeline_created_at }}
      github_sha: ${{ steps.git_info.outputs.github_sha }}
    steps:
      - id: git_info
        name: Get tag name and SHA
        run: |
          # Detect git tag for release.
          gitTag=${GITHUB_REF#refs/tags/}
          if [[ ${GITHUB_REF} == $gitTag ]] ; then
            gitTag=
          fi
          echo "::set-output name=ci_commit_tag::${gitTag}"
          echo "ci_commit_tag='${gitTag}'"

          # Detect git branch.
          gitBranch=${GITHUB_REF#refs/heads/}
          if [[ ${GITHUB_REF} == $gitBranch ]] ; then
            gitBranch=
          fi
          echo "::set-output name=ci_commit_branch::${gitBranch}"
          echo "ci_commit_branch='${gitBranch}'"

          # CI_COMMIT_REF_NAME for main werf.yaml
          commitRefName=
          [[ -n $gitBranch ]] && commitRefName=$gitBranch
          [[ -n $gitTag ]] && commitRefName=$gitTag
          echo "::set-output name=ci_commit_ref_name::${commitRefName}"
          echo "ci_commit_ref_name='${commitRefName}'"

          # CI_PIPELINE_CREATED_AT for main werf.yaml
          pipelineCreatedAt=$(date -u +%Y-%m-%dT%H:%M:%S+00:00)
          echo "::set-output name=ci_pipeline_created_at::${pipelineCreatedAt}"
          echo "ci_pipeline_created_at='${pipelineCreatedAt}'"

          # Determine sha of commit.
          # push event
          githubSha=${GITHUB_SHA}
          echo "github_sha for push '${githubSha}'"
          # workflow_dispatch event
          if [[ -z $githubSha ]] ; then
            githubSha = $(jq '.head_commit.id' "${GITHUB_EVENT_PATH}")
            echo "github_sha for workflow_dispatch '${githubSha}'"
          fi
          echo "::set-output name=github_sha::$githubSha"
          echo "github_sha='${githubSha}'"

  check_e2e_labels:
    name: Check e2e labels
    runs-on: ubuntu-latest
    outputs:

      run_docker_1_19: ${{ steps.check.outputs.run_docker_1_19 }}
      run_docker_1_20: ${{ steps.check.outputs.run_docker_1_20 }}
      run_docker_1_21: ${{ steps.check.outputs.run_docker_1_21 }}
      run_containerd_1_19: ${{ steps.check.outputs.run_containerd_1_19 }}
      run_containerd_1_20: ${{ steps.check.outputs.run_containerd_1_20 }}
      run_containerd_1_21: ${{ steps.check.outputs.run_containerd_1_21 }}
    steps:

      - name: Checkout sources
        uses: actions/checkout@v2.4.0
      - name: Check e2e labels
        id: check
        uses: actions/github-script@v5.0.0
        with:
          script: |
            const provider = 'vsphere';
            const defaults = {"criName":"Containerd","kubernetesVersion":"1.21"};
            const criNames = ["Docker","Containerd"];
            const kubernetesVersions = ["1.19","1.20","1.21"];

            const ci = require('./.github/scripts/js/ci');
            return await ci.checkE2ELabels({github, context, core, provider, defaults, criNames, kubernetesVersions});


  run_docker_1_19:
    name: "Docker, k8s 1.19"
    needs:
      - check_e2e_labels
      - git_info
    if: needs.check_e2e_labels.outputs.run_docker_1_19 == 'true'
    env:
      PROVIDER: vSphere
      CRI: Docker
      LAYOUT: Standard
      KUBERNETES_VERSION: 1.19
      EVENT_LABEL: ${{ github.event.label.name }}
    runs-on: [self-hosted, e2e-vsphere]
    steps:
      - name: Setup
        id: setup
        run: |
          # Random delay to sparse 'update comment' steps in time.
          delay=$[ $RANDOM % 5 ].$[ ( $RANDOM % 4 ) * 250 ]
          echo Delay for $delay
          sleep $delay

          # Calculate unique prefix for e2e test.
          prefix=${GITHUB_RUN_ID}-$(echo ${KUBERNETES_VERSION} | tr '.' '-')
          echo "::set-output name=prefix::${prefix}"
          echo "prefix=${prefix}"

          # Create tmppath for test script.
          tmppath=/mnt/cloud-layouts/layouts/${prefix}
          if [[ -d "${tmppath}" ]] ; then
            echo "Temporary dir already exists: ${tmppath}. ERROR!"
            ls -la ${tmppath}
            exit 1
          else
            echo "Create temporary dir for job: ${tmppath}."
            mkdir -p "${tmppath}"
          fi
          echo "::set-output name=tmppath::${tmppath}"


      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.ref }}
          fetch-depth: 0
      - name: Update comment on start
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const name = 'e2e: vSphere, Docker, k8s 1.19';

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnStart({github, context, core, name})

      - name: Restore images_tags_json from cache
        id: images-tags-json
        uses: actions/cache@v2.1.7
        with:
          path: modules/images_tags_${{env.WERF_ENV}}.json
          key: images_tags_json-${{env.WERF_ENV}}-${{needs.git_info.outputs.github_sha}}
      - name: Fail if not found
        if: steps.images-tags-json.outputs.cache-hit != 'true'
        run: |
          echo images_tags_${WERF_ENV}.json file not found in cache: restart build modules job.
          exit 1

      - name: Login to dev registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false

      - name: Login to readonly registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false

      - name: Login to rw registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false

      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}

      - name: "Run e2e test: vSphere/Docker/1.19"
        env:
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.19"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh run-test' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh run-test
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Cleanup bootstrapped cluster
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.19"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh cleanup' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh cleanup
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Save test results
        uses: actions/upload-artifact@v2
        with:
          name: test_output
          path: |
            modules/images_tags_${{env.WERF_ENV}}.json
            testing/cloud_layouts/

      - name: Cleanup temp directory
        if: always()
        env:
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
        run: |
          echo "Remove temporary directory '${TMPPATH}' ..."
          if [[ -d "${TMPPATH}" && ${#TMPPATH} > 1 ]] ; then
            rm -rf "${TMPPATH}"
          else
            echo Not a directory.
          fi

      - name: Update comment on finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const statusSource = 'job';
            const name = 'e2e: vSphere, Kubernetes 1.19';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);

            console.log(`needsContext: ${JSON.stringify(needsContext)}`);
            console.log(`jobContext: ${JSON.stringify(jobContext)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusSource, name, needsContext, jobContext});

      - name: Alert on fail in default branch
        if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && (cancelled() || failure()) }}
        env:
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.19"
        run: |
          WORKFLOW_URL="${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          echo $WORKFLOW_URL

          alertData=$(cat <<EOF
          {
            "labels": {
              "severity_level": 7,
              "trigger": "CloudLayoutTestFailed",
              "provider": "${PROVIDER}",
              "layout": "${LAYOUT}",
              "cri": "${CRI}",
              "kubernetes_version": "${KUBERNETES_VERSION}"
            },
            "annotations": {
              "summary": "Cloud Layout Test failed",
              "description": "Check Github workflow log for more information",
              "plk_protocol_version": "1",
              "plk_link_url/job": "${WORKFLOW_URL}",
              "plk_link_title_en/job": "Github job run",
              "plk_create_group_if_not_exists/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider",
              "plk_grouped_by/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider"
            }
          }
          EOF
          )

          curl -sS -X "POST" "https://madison.flant.com/api/events/custom/${CLOUD_LAYOUT_TESTS_MADISON_KEY}" \
            -H 'Content-Type: application/json' \
            -d "${alertData}"


  run_docker_1_20:
    name: "Docker, k8s 1.20"
    needs:
      - check_e2e_labels
      - git_info
    if: needs.check_e2e_labels.outputs.run_docker_1_20 == 'true'
    env:
      PROVIDER: vSphere
      CRI: Docker
      LAYOUT: Standard
      KUBERNETES_VERSION: 1.20
      EVENT_LABEL: ${{ github.event.label.name }}
    runs-on: [self-hosted, e2e-vsphere]
    steps:
      - name: Setup
        id: setup
        run: |
          # Random delay to sparse 'update comment' steps in time.
          delay=$[ $RANDOM % 5 ].$[ ( $RANDOM % 4 ) * 250 ]
          echo Delay for $delay
          sleep $delay

          # Calculate unique prefix for e2e test.
          prefix=${GITHUB_RUN_ID}-$(echo ${KUBERNETES_VERSION} | tr '.' '-')
          echo "::set-output name=prefix::${prefix}"
          echo "prefix=${prefix}"

          # Create tmppath for test script.
          tmppath=/mnt/cloud-layouts/layouts/${prefix}
          if [[ -d "${tmppath}" ]] ; then
            echo "Temporary dir already exists: ${tmppath}. ERROR!"
            ls -la ${tmppath}
            exit 1
          else
            echo "Create temporary dir for job: ${tmppath}."
            mkdir -p "${tmppath}"
          fi
          echo "::set-output name=tmppath::${tmppath}"


      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.ref }}
          fetch-depth: 0
      - name: Update comment on start
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const name = 'e2e: vSphere, Docker, k8s 1.20';

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnStart({github, context, core, name})

      - name: Restore images_tags_json from cache
        id: images-tags-json
        uses: actions/cache@v2.1.7
        with:
          path: modules/images_tags_${{env.WERF_ENV}}.json
          key: images_tags_json-${{env.WERF_ENV}}-${{needs.git_info.outputs.github_sha}}
      - name: Fail if not found
        if: steps.images-tags-json.outputs.cache-hit != 'true'
        run: |
          echo images_tags_${WERF_ENV}.json file not found in cache: restart build modules job.
          exit 1

      - name: Login to dev registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false

      - name: Login to readonly registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false

      - name: Login to rw registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false

      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}

      - name: "Run e2e test: vSphere/Docker/1.20"
        env:
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.20"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh run-test' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh run-test
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Cleanup bootstrapped cluster
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.20"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh cleanup' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh cleanup
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Save test results
        uses: actions/upload-artifact@v2
        with:
          name: test_output
          path: |
            modules/images_tags_${{env.WERF_ENV}}.json
            testing/cloud_layouts/

      - name: Cleanup temp directory
        if: always()
        env:
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
        run: |
          echo "Remove temporary directory '${TMPPATH}' ..."
          if [[ -d "${TMPPATH}" && ${#TMPPATH} > 1 ]] ; then
            rm -rf "${TMPPATH}"
          else
            echo Not a directory.
          fi

      - name: Update comment on finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const statusSource = 'job';
            const name = 'e2e: vSphere, Kubernetes 1.20';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);

            console.log(`needsContext: ${JSON.stringify(needsContext)}`);
            console.log(`jobContext: ${JSON.stringify(jobContext)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusSource, name, needsContext, jobContext});

      - name: Alert on fail in default branch
        if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && (cancelled() || failure()) }}
        env:
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.20"
        run: |
          WORKFLOW_URL="${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          echo $WORKFLOW_URL

          alertData=$(cat <<EOF
          {
            "labels": {
              "severity_level": 7,
              "trigger": "CloudLayoutTestFailed",
              "provider": "${PROVIDER}",
              "layout": "${LAYOUT}",
              "cri": "${CRI}",
              "kubernetes_version": "${KUBERNETES_VERSION}"
            },
            "annotations": {
              "summary": "Cloud Layout Test failed",
              "description": "Check Github workflow log for more information",
              "plk_protocol_version": "1",
              "plk_link_url/job": "${WORKFLOW_URL}",
              "plk_link_title_en/job": "Github job run",
              "plk_create_group_if_not_exists/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider",
              "plk_grouped_by/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider"
            }
          }
          EOF
          )

          curl -sS -X "POST" "https://madison.flant.com/api/events/custom/${CLOUD_LAYOUT_TESTS_MADISON_KEY}" \
            -H 'Content-Type: application/json' \
            -d "${alertData}"


  run_docker_1_21:
    name: "Docker, k8s 1.21"
    needs:
      - check_e2e_labels
      - git_info
    if: needs.check_e2e_labels.outputs.run_docker_1_21 == 'true'
    env:
      PROVIDER: vSphere
      CRI: Docker
      LAYOUT: Standard
      KUBERNETES_VERSION: 1.21
      EVENT_LABEL: ${{ github.event.label.name }}
    runs-on: [self-hosted, e2e-vsphere]
    steps:
      - name: Setup
        id: setup
        run: |
          # Random delay to sparse 'update comment' steps in time.
          delay=$[ $RANDOM % 5 ].$[ ( $RANDOM % 4 ) * 250 ]
          echo Delay for $delay
          sleep $delay

          # Calculate unique prefix for e2e test.
          prefix=${GITHUB_RUN_ID}-$(echo ${KUBERNETES_VERSION} | tr '.' '-')
          echo "::set-output name=prefix::${prefix}"
          echo "prefix=${prefix}"

          # Create tmppath for test script.
          tmppath=/mnt/cloud-layouts/layouts/${prefix}
          if [[ -d "${tmppath}" ]] ; then
            echo "Temporary dir already exists: ${tmppath}. ERROR!"
            ls -la ${tmppath}
            exit 1
          else
            echo "Create temporary dir for job: ${tmppath}."
            mkdir -p "${tmppath}"
          fi
          echo "::set-output name=tmppath::${tmppath}"


      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.ref }}
          fetch-depth: 0
      - name: Update comment on start
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const name = 'e2e: vSphere, Docker, k8s 1.21';

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnStart({github, context, core, name})

      - name: Restore images_tags_json from cache
        id: images-tags-json
        uses: actions/cache@v2.1.7
        with:
          path: modules/images_tags_${{env.WERF_ENV}}.json
          key: images_tags_json-${{env.WERF_ENV}}-${{needs.git_info.outputs.github_sha}}
      - name: Fail if not found
        if: steps.images-tags-json.outputs.cache-hit != 'true'
        run: |
          echo images_tags_${WERF_ENV}.json file not found in cache: restart build modules job.
          exit 1

      - name: Login to dev registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false

      - name: Login to readonly registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false

      - name: Login to rw registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false

      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}

      - name: "Run e2e test: vSphere/Docker/1.21"
        env:
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.21"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh run-test' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh run-test
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Cleanup bootstrapped cluster
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.21"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh cleanup' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh cleanup
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Save test results
        uses: actions/upload-artifact@v2
        with:
          name: test_output
          path: |
            modules/images_tags_${{env.WERF_ENV}}.json
            testing/cloud_layouts/

      - name: Cleanup temp directory
        if: always()
        env:
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
        run: |
          echo "Remove temporary directory '${TMPPATH}' ..."
          if [[ -d "${TMPPATH}" && ${#TMPPATH} > 1 ]] ; then
            rm -rf "${TMPPATH}"
          else
            echo Not a directory.
          fi

      - name: Update comment on finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const statusSource = 'job';
            const name = 'e2e: vSphere, Kubernetes 1.21';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);

            console.log(`needsContext: ${JSON.stringify(needsContext)}`);
            console.log(`jobContext: ${JSON.stringify(jobContext)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusSource, name, needsContext, jobContext});

      - name: Alert on fail in default branch
        if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && (cancelled() || failure()) }}
        env:
          PROVIDER: vSphere
          CRI: Docker
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.21"
        run: |
          WORKFLOW_URL="${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          echo $WORKFLOW_URL

          alertData=$(cat <<EOF
          {
            "labels": {
              "severity_level": 7,
              "trigger": "CloudLayoutTestFailed",
              "provider": "${PROVIDER}",
              "layout": "${LAYOUT}",
              "cri": "${CRI}",
              "kubernetes_version": "${KUBERNETES_VERSION}"
            },
            "annotations": {
              "summary": "Cloud Layout Test failed",
              "description": "Check Github workflow log for more information",
              "plk_protocol_version": "1",
              "plk_link_url/job": "${WORKFLOW_URL}",
              "plk_link_title_en/job": "Github job run",
              "plk_create_group_if_not_exists/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider",
              "plk_grouped_by/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider"
            }
          }
          EOF
          )

          curl -sS -X "POST" "https://madison.flant.com/api/events/custom/${CLOUD_LAYOUT_TESTS_MADISON_KEY}" \
            -H 'Content-Type: application/json' \
            -d "${alertData}"


  run_containerd_1_19:
    name: "Containerd, k8s 1.19"
    needs:
      - check_e2e_labels
      - git_info
    if: needs.check_e2e_labels.outputs.run_containerd_1_19 == 'true'
    env:
      PROVIDER: vSphere
      CRI: Containerd
      LAYOUT: Standard
      KUBERNETES_VERSION: 1.19
      EVENT_LABEL: ${{ github.event.label.name }}
    runs-on: [self-hosted, e2e-vsphere]
    steps:
      - name: Setup
        id: setup
        run: |
          # Random delay to sparse 'update comment' steps in time.
          delay=$[ $RANDOM % 5 ].$[ ( $RANDOM % 4 ) * 250 ]
          echo Delay for $delay
          sleep $delay

          # Calculate unique prefix for e2e test.
          prefix=${GITHUB_RUN_ID}-$(echo ${KUBERNETES_VERSION} | tr '.' '-')
          echo "::set-output name=prefix::${prefix}"
          echo "prefix=${prefix}"

          # Create tmppath for test script.
          tmppath=/mnt/cloud-layouts/layouts/${prefix}
          if [[ -d "${tmppath}" ]] ; then
            echo "Temporary dir already exists: ${tmppath}. ERROR!"
            ls -la ${tmppath}
            exit 1
          else
            echo "Create temporary dir for job: ${tmppath}."
            mkdir -p "${tmppath}"
          fi
          echo "::set-output name=tmppath::${tmppath}"


      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.ref }}
          fetch-depth: 0
      - name: Update comment on start
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const name = 'e2e: vSphere, Containerd, k8s 1.19';

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnStart({github, context, core, name})

      - name: Restore images_tags_json from cache
        id: images-tags-json
        uses: actions/cache@v2.1.7
        with:
          path: modules/images_tags_${{env.WERF_ENV}}.json
          key: images_tags_json-${{env.WERF_ENV}}-${{needs.git_info.outputs.github_sha}}
      - name: Fail if not found
        if: steps.images-tags-json.outputs.cache-hit != 'true'
        run: |
          echo images_tags_${WERF_ENV}.json file not found in cache: restart build modules job.
          exit 1

      - name: Login to dev registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false

      - name: Login to readonly registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false

      - name: Login to rw registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false

      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}

      - name: "Run e2e test: vSphere/Containerd/1.19"
        env:
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.19"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh run-test' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh run-test
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Cleanup bootstrapped cluster
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.19"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh cleanup' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh cleanup
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Save test results
        uses: actions/upload-artifact@v2
        with:
          name: test_output
          path: |
            modules/images_tags_${{env.WERF_ENV}}.json
            testing/cloud_layouts/

      - name: Cleanup temp directory
        if: always()
        env:
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
        run: |
          echo "Remove temporary directory '${TMPPATH}' ..."
          if [[ -d "${TMPPATH}" && ${#TMPPATH} > 1 ]] ; then
            rm -rf "${TMPPATH}"
          else
            echo Not a directory.
          fi

      - name: Update comment on finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const statusSource = 'job';
            const name = 'e2e: vSphere, Kubernetes 1.19';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);

            console.log(`needsContext: ${JSON.stringify(needsContext)}`);
            console.log(`jobContext: ${JSON.stringify(jobContext)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusSource, name, needsContext, jobContext});

      - name: Alert on fail in default branch
        if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && (cancelled() || failure()) }}
        env:
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.19"
        run: |
          WORKFLOW_URL="${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          echo $WORKFLOW_URL

          alertData=$(cat <<EOF
          {
            "labels": {
              "severity_level": 7,
              "trigger": "CloudLayoutTestFailed",
              "provider": "${PROVIDER}",
              "layout": "${LAYOUT}",
              "cri": "${CRI}",
              "kubernetes_version": "${KUBERNETES_VERSION}"
            },
            "annotations": {
              "summary": "Cloud Layout Test failed",
              "description": "Check Github workflow log for more information",
              "plk_protocol_version": "1",
              "plk_link_url/job": "${WORKFLOW_URL}",
              "plk_link_title_en/job": "Github job run",
              "plk_create_group_if_not_exists/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider",
              "plk_grouped_by/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider"
            }
          }
          EOF
          )

          curl -sS -X "POST" "https://madison.flant.com/api/events/custom/${CLOUD_LAYOUT_TESTS_MADISON_KEY}" \
            -H 'Content-Type: application/json' \
            -d "${alertData}"


  run_containerd_1_20:
    name: "Containerd, k8s 1.20"
    needs:
      - check_e2e_labels
      - git_info
    if: needs.check_e2e_labels.outputs.run_containerd_1_20 == 'true'
    env:
      PROVIDER: vSphere
      CRI: Containerd
      LAYOUT: Standard
      KUBERNETES_VERSION: 1.20
      EVENT_LABEL: ${{ github.event.label.name }}
    runs-on: [self-hosted, e2e-vsphere]
    steps:
      - name: Setup
        id: setup
        run: |
          # Random delay to sparse 'update comment' steps in time.
          delay=$[ $RANDOM % 5 ].$[ ( $RANDOM % 4 ) * 250 ]
          echo Delay for $delay
          sleep $delay

          # Calculate unique prefix for e2e test.
          prefix=${GITHUB_RUN_ID}-$(echo ${KUBERNETES_VERSION} | tr '.' '-')
          echo "::set-output name=prefix::${prefix}"
          echo "prefix=${prefix}"

          # Create tmppath for test script.
          tmppath=/mnt/cloud-layouts/layouts/${prefix}
          if [[ -d "${tmppath}" ]] ; then
            echo "Temporary dir already exists: ${tmppath}. ERROR!"
            ls -la ${tmppath}
            exit 1
          else
            echo "Create temporary dir for job: ${tmppath}."
            mkdir -p "${tmppath}"
          fi
          echo "::set-output name=tmppath::${tmppath}"


      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.ref }}
          fetch-depth: 0
      - name: Update comment on start
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const name = 'e2e: vSphere, Containerd, k8s 1.20';

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnStart({github, context, core, name})

      - name: Restore images_tags_json from cache
        id: images-tags-json
        uses: actions/cache@v2.1.7
        with:
          path: modules/images_tags_${{env.WERF_ENV}}.json
          key: images_tags_json-${{env.WERF_ENV}}-${{needs.git_info.outputs.github_sha}}
      - name: Fail if not found
        if: steps.images-tags-json.outputs.cache-hit != 'true'
        run: |
          echo images_tags_${WERF_ENV}.json file not found in cache: restart build modules job.
          exit 1

      - name: Login to dev registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false

      - name: Login to readonly registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false

      - name: Login to rw registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false

      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}

      - name: "Run e2e test: vSphere/Containerd/1.20"
        env:
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.20"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh run-test' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh run-test
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Cleanup bootstrapped cluster
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.20"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh cleanup' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh cleanup
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Save test results
        uses: actions/upload-artifact@v2
        with:
          name: test_output
          path: |
            modules/images_tags_${{env.WERF_ENV}}.json
            testing/cloud_layouts/

      - name: Cleanup temp directory
        if: always()
        env:
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
        run: |
          echo "Remove temporary directory '${TMPPATH}' ..."
          if [[ -d "${TMPPATH}" && ${#TMPPATH} > 1 ]] ; then
            rm -rf "${TMPPATH}"
          else
            echo Not a directory.
          fi

      - name: Update comment on finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const statusSource = 'job';
            const name = 'e2e: vSphere, Kubernetes 1.20';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);

            console.log(`needsContext: ${JSON.stringify(needsContext)}`);
            console.log(`jobContext: ${JSON.stringify(jobContext)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusSource, name, needsContext, jobContext});

      - name: Alert on fail in default branch
        if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && (cancelled() || failure()) }}
        env:
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.20"
        run: |
          WORKFLOW_URL="${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          echo $WORKFLOW_URL

          alertData=$(cat <<EOF
          {
            "labels": {
              "severity_level": 7,
              "trigger": "CloudLayoutTestFailed",
              "provider": "${PROVIDER}",
              "layout": "${LAYOUT}",
              "cri": "${CRI}",
              "kubernetes_version": "${KUBERNETES_VERSION}"
            },
            "annotations": {
              "summary": "Cloud Layout Test failed",
              "description": "Check Github workflow log for more information",
              "plk_protocol_version": "1",
              "plk_link_url/job": "${WORKFLOW_URL}",
              "plk_link_title_en/job": "Github job run",
              "plk_create_group_if_not_exists/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider",
              "plk_grouped_by/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider"
            }
          }
          EOF
          )

          curl -sS -X "POST" "https://madison.flant.com/api/events/custom/${CLOUD_LAYOUT_TESTS_MADISON_KEY}" \
            -H 'Content-Type: application/json' \
            -d "${alertData}"


  run_containerd_1_21:
    name: "Containerd, k8s 1.21"
    needs:
      - check_e2e_labels
      - git_info
    if: needs.check_e2e_labels.outputs.run_containerd_1_21 == 'true'
    env:
      PROVIDER: vSphere
      CRI: Containerd
      LAYOUT: Standard
      KUBERNETES_VERSION: 1.21
      EVENT_LABEL: ${{ github.event.label.name }}
    runs-on: [self-hosted, e2e-vsphere]
    steps:
      - name: Setup
        id: setup
        run: |
          # Random delay to sparse 'update comment' steps in time.
          delay=$[ $RANDOM % 5 ].$[ ( $RANDOM % 4 ) * 250 ]
          echo Delay for $delay
          sleep $delay

          # Calculate unique prefix for e2e test.
          prefix=${GITHUB_RUN_ID}-$(echo ${KUBERNETES_VERSION} | tr '.' '-')
          echo "::set-output name=prefix::${prefix}"
          echo "prefix=${prefix}"

          # Create tmppath for test script.
          tmppath=/mnt/cloud-layouts/layouts/${prefix}
          if [[ -d "${tmppath}" ]] ; then
            echo "Temporary dir already exists: ${tmppath}. ERROR!"
            ls -la ${tmppath}
            exit 1
          else
            echo "Create temporary dir for job: ${tmppath}."
            mkdir -p "${tmppath}"
          fi
          echo "::set-output name=tmppath::${tmppath}"


      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.ref }}
          fetch-depth: 0
      - name: Update comment on start
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const name = 'e2e: vSphere, Containerd, k8s 1.21';

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnStart({github, context, core, name})

      - name: Restore images_tags_json from cache
        id: images-tags-json
        uses: actions/cache@v2.1.7
        with:
          path: modules/images_tags_${{env.WERF_ENV}}.json
          key: images_tags_json-${{env.WERF_ENV}}-${{needs.git_info.outputs.github_sha}}
      - name: Fail if not found
        if: steps.images-tags-json.outputs.cache-hit != 'true'
        run: |
          echo images_tags_${WERF_ENV}.json file not found in cache: restart build modules job.
          exit 1

      - name: Login to dev registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false

      - name: Login to readonly registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false

      - name: Login to rw registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false

      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}

      - name: "Run e2e test: vSphere/Containerd/1.21"
        env:
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.21"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh run-test' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh run-test
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Cleanup bootstrapped cluster
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.21"
          LAYOUT_DECKHOUSE_DOCKERCFG: ${{ secrets.LAYOUT_DECKHOUSE_DOCKERCFG }}
          LAYOUT_SSH_KEY: ${{ secrets.LAYOUT_SSH_KEY}}
          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
          CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
          PREFIX: ${{ steps.setup.outputs.prefix}}
          LAYOUT_VSPHERE_PASSWORD: ${{ secrets.LAYOUT_VSPHERE_PASSWORD }}
          LAYOUT_VSPHERE_BASE_DOMAIN: ${{ secrets.LAYOUT_VSPHERE_BASE_DOMAIN }}
        run: |
          echo "Workflow url: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"

          werfRunProg=$(cat <<'END_WERF_RUN'

          # WERF_REPO should be set by caller.
          type werf && source $(werf ci-env github --verbose --as-file)

          echo "Execute 'script.sh cleanup' via 'werf run' ...
          Use environment:
            PREFIX=${PREFIX}
            TMPPATH=${TMPPATH}
            DEV_BRANCH=${CI_COMMIT_REF_NAME}
            PROVIDER=${PROVIDER}
            CRI=${CRI}
            LAYOUT=${LAYOUT}
            KUBERNETES_VERSION=${KUBERNETES_VERSION}
            CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY}
            JOB_STATUS=${JOB_STATUS}
          "

          git status

          werf run dev/install --dev \
          --docker-options=" \
            -e CLOUD_TESTS_RUN_BOOTSTRAP_ONLY=${CLOUD_TESTS_RUN_BOOTSTRAP_ONLY} \
            -e CLOUD_TESTS_RUN_ACTION=${CLOUD_TESTS_RUN_ACTION} \
            -e DECKHOUSE_DOCKERCFG=${LAYOUT_DECKHOUSE_DOCKERCFG} \
            -e PREFIX=${PREFIX} \
            -e DEV_BRANCH=${CI_COMMIT_REF_NAME} \
            -e KUBERNETES_VERSION=${KUBERNETES_VERSION} \
            -e CRI=${CRI} \
            -e PROVIDER=${PROVIDER:-not_provided} \
            -e LAYOUT=${LAYOUT:-not_provided} \
            -e SSH_KEY=${LAYOUT_SSH_KEY:-not_provided} \
            -e LAYOUT_VSPHERE_PASSWORD=${LAYOUT_VSPHERE_PASSWORD:-not_provided} \
            -e LAYOUT_VSPHERE_BASE_DOMAIN=${LAYOUT_VSPHERE_BASE_DOMAIN:-not_provided} \
            -v $(pwd)/testing:/deckhouse/testing \
            -v ${TMPPATH}:/tmp \
            --user $(id -u):$(id -u) \
            -v /etc/group:/etc/group:ro \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/shadow:/etc/shadow:ro \
            -w /deckhouse" -- \
          bash /deckhouse/testing/cloud_layouts/script.sh cleanup
          END_WERF_RUN
          )
          # Run werf in a subshell to fix 'Cancel workflow'. Actually, better not press this button.
          bash <<<"$werfRunProg"

      - name: Save test results
        uses: actions/upload-artifact@v2
        with:
          name: test_output
          path: |
            modules/images_tags_${{env.WERF_ENV}}.json
            testing/cloud_layouts/

      - name: Cleanup temp directory
        if: always()
        env:
          TMPPATH: ${{ steps.setup.outputs.tmppath}}
        run: |
          echo "Remove temporary directory '${TMPPATH}' ..."
          if [[ -d "${TMPPATH}" && ${#TMPPATH} > 1 ]] ; then
            rm -rf "${TMPPATH}"
          else
            echo Not a directory.
          fi

      - name: Update comment on finish
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        continue-on-error: true
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{secrets.BOATSWAIN_GITHUB_TOKEN}}
          script: |
            const statusSource = 'job';
            const name = 'e2e: vSphere, Kubernetes 1.21';
            const needsContext = JSON.parse(process.env.NEEDS_CONTEXT);
            const jobContext = JSON.parse(process.env.JOB_CONTEXT);

            console.log(`needsContext: ${JSON.stringify(needsContext)}`);
            console.log(`jobContext: ${JSON.stringify(jobContext)}`);

            const ci = require('./.github/scripts/js/ci');
            return await ci.updateCommentOnFinish({github, context, core, statusSource, name, needsContext, jobContext});

      - name: Alert on fail in default branch
        if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && (cancelled() || failure()) }}
        env:
          PROVIDER: vSphere
          CRI: Containerd
          LAYOUT: Standard
          KUBERNETES_VERSION: "1.21"
        run: |
          WORKFLOW_URL="${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}"
          echo $WORKFLOW_URL

          alertData=$(cat <<EOF
          {
            "labels": {
              "severity_level": 7,
              "trigger": "CloudLayoutTestFailed",
              "provider": "${PROVIDER}",
              "layout": "${LAYOUT}",
              "cri": "${CRI}",
              "kubernetes_version": "${KUBERNETES_VERSION}"
            },
            "annotations": {
              "summary": "Cloud Layout Test failed",
              "description": "Check Github workflow log for more information",
              "plk_protocol_version": "1",
              "plk_link_url/job": "${WORKFLOW_URL}",
              "plk_link_title_en/job": "Github job run",
              "plk_create_group_if_not_exists/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider",
              "plk_grouped_by/cloudlayouttestfailed": "CloudLayoutTestFailedGroup,provider=~provider"
            }
          }
          EOF
          )

          curl -sS -X "POST" "https://madison.flant.com/api/events/custom/${CLOUD_LAYOUT_TESTS_MADISON_KEY}" \
            -H 'Content-Type: application/json' \
            -d "${alertData}"

