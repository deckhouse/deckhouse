# Validations are independent from build process.
# Run them in parallel on every push to dev branches.
name: Validation
on:
  push:
    branches-ignore:
      - 'main'
      - 'release-*'

env:
  # ci_includes/image_versions.yml
  BASE_ALPINE: "registry.deckhouse.io/base_images/alpine:3.12.1@sha256:c0e9560cda118f9ec63ddefb4a173a2b2a0347082d7dff7dc14272e7841a5b5a"
  BASE_DEBIAN: "registry.deckhouse.io/base_images/debian:buster-20210111@sha256:b16f66714660c4b3ea14d273ad8c35079b81b35d65d1e206072d226c7ff78299"
  BASE_GOLANG_ALPINE: "registry.deckhouse.io/base_images/golang:1.15.3-alpine3.12@sha256:df0119b970c8e5e9f0f5c40f6b55edddf616bab2b911927ebc3b361c469ea29c"
  BASE_GOLANG_16_ALPINE: "registry.deckhouse.io/base_images/golang:1.16.3-alpine3.12@sha256:371dc6bf7e0c7ce112a29341b000c40d840aef1dbb4fdcb3ae5c0597e28f3061"
  BASE_GOLANG_BUSTER: "registry.deckhouse.io/base_images/golang:1.15.3-buster@sha256:fb04edf20446eed8af9eb6137d02fdf607f47028a0a806131f8b175a09620aab"
  BASE_GOLANG_16_BUSTER: "registry.deckhouse.io/base_images/golang:1.16.3-buster@sha256:9d64369fd3c633df71d7465d67d43f63bb31192193e671742fa1c26ebc3a6210"
  BASE_NGINX_ALPINE: "registry.deckhouse.io/base_images/nginx:1.15.12-alpine@sha256:57a226fb6ab6823027c0704a9346a890ffb0cacde06bc19bbc234c8720673555"
  BASE_PYTHON_ALPINE: "registry.deckhouse.io/base_images/python:3.7.9-alpine3.12@sha256:8c224566c41fcc1674f9b78ff2a364a1209370a5b7e7619e8ead2bdcd0fd8b52"
  BASE_SHELL_OPERATOR: "registry.deckhouse.io/base_images/shell-operator:v1.0.1@sha256:51dbdbad17303c31265af389c6acc73d1b6b6c66bd2112542e09b42566ac05bf"
  BASE_UBUNTU: "registry.deckhouse.io/base_images/ubuntu:bionic-20210118@sha256:ea188fdc5be9b25ca048f1e882b33f1bc763fb976a8a4fea446b38ed0efcbeba"

  # Don't forget to update .gitlab-ci-simple.yml if necessary
  WERF_CHANNEL: "ea"
  WERF_ENV: FE
  # We use stapel image from own registry due to docker hub pull amount limitation.
  # To re-push stapel image from docker hub use command:
  # `skopeo copy docker://flant/werf-stapel:0.6.1 docker://registry-write.deckhouse.io/flant/werf-stapel:0.6.1`
  WERF_STAPEL_IMAGE_NAME: "${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}/flant/werf-stapel"
  WERF_STAPEL_IMAGE_VERSION: "0.6.1"
  TEST_TIMEOUT: "15m"
  # Use fixed string 'sys/deckhouse-oss' for repo name, CI_PROJECT_PATH not set on Github.
  # DEV_REGISTRY_PATH: "${DECKHOUSE_DEV_REGISTRY_HOST}/${CI_PROJECT_PATH}"
  DEV_REGISTRY_PATH: "${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}/sys/deckhouse-oss"
  FLANT_REGISTRY_PATH: "${{ secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss"

# Analog of Gitlab's "interruptible: true" behaviour.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.ref }}-validation
  cancel-in-progress: true

jobs:
#  # jobs for stage 'build_modules_images' from gitlab
#  setup_envs:
#    name: Setup common envs
#    runs-on: ubuntu-latest
#    outputs:
#      ci_commit_tag: ${{ steps.env.outputs.ci_commit_tag }}
#    steps:
#      - id: env
#        name: Calculate common environment variables
#        run: |
#          # Support WERF_CHANNEL from secrets?
#          #werf_channel=${{secrets.WERF_CHANNEL}}
#          echo "WERF_CHANNEL=${WERF_CHANNEL:-ea}" >> "${GITHUB_ENV}"
#
#          # detect git tag for release
#          gitTag=${GITHUB_REF#refs/tags/}
#          if [[ ${GITHUB_REF} == $gitTag ]] ; then
#            gitTag=
#          fi
#          echo "::set-output name=ci_commit_tag::$gitTag"
#
#  openapi_validation:
#    name: OpenAPI Validation
#    needs:
#      - setup_envs
#    runs-on: werf-distributed
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2.3.4
#
#      - name: Login to dev registry
#        uses: docker/login-action@v1.10.0
#        with:
#          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
#          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
#          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
#
#      - name: Login to registry
#        uses: docker/login-action@v1.10.0
#        with:
#          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
#          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
#          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
#
#      - name: Login to readonly registry
#        uses: docker/login-action@v1.10.0
#        with:
#          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
#          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
#          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
#
#      - name: Run tests
#        uses: werf/actions/run@v1.2.0
#        with:
#          channel: ${{env.WERF_CHANNEL}}
#          image: tests
#          args: ginkgo -timeout=${{env.TEST_TIMEOUT}} -vet=off --slowSpecThreshold=30 ./testing/openapi_validation/
#        env:
#          WERF_DOCKER_OPTIONS: "-w /deckhouse"
#          WERF_REPO: ${{env.DEV_REGISTRY_PATH}}
#          CI_COMMIT_TAG: ${{needs.setup_envs.outputs.ci_commit_tag}}

  no_cyrillic_validation:
    name: No Cyrillic Validation
    runs-on: ubuntu-latest
    steps:
      - name: validate
        run: |
          echo validate cyrillic

  doc_validation:
    name: Doc Validation
    runs-on: ubuntu-latest
    steps:
      - name: validate
        run: |
          echo validate docs

  copyright_validation:
    name: Copyright Validation
    runs-on: ubuntu-latest
    steps:
      - name: validate
        run: |
          echo validate copyrights
