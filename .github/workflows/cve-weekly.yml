#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# Copyright 2022 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Weekly CVE tests'
on:
  schedule:
    - cron: '0 02 * * *'
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'release version in semver minor format, example: 1.68'
        required: false

concurrency:
  group: cve-daily

jobs:

  # <template: skip_tests_repos>
  skip_tests_repos:
    name: Skip tests repos
    runs-on: ubuntu-latest
    if: ${{ false || github.repository == 'deckhouse/deckhouse' }}
    steps:
    - name: Do nothing
      run: echo "Empty action to fulfil Github requirements."
  # </template: skip_tests_repos>
  test_cve_report_main:
    name: Main
    needs:
      - skip_tests_repos
    runs-on: [self-hosted, large]
    env:
      WORKDIR: "cve_scan"
      TAG: ${{ github.event.inputs.release_branch || 'main' }}
    steps:

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: link_bin_step>
      - name: Link binary cache
        id: link_bin_step
        run: |
          ln -s ~/deckhouse-bin-cache bin
      # </template: link_bin_step>

      # <template: add_ssh_keys_for_cve_tests>
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ steps.secrets.outputs.CVE_TESTS_SSH_PRIVATE_KEY }}
      - name: Add ssh_known_hosts
        run: |
          HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{ steps.secrets.outputs.CVE_TESTS_REPO_GIT }})
          echo "::add-mask::$HOST"
          IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
          for IP in $IPS; do
            echo "::add-mask::$IP"
          done
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
          while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
              echo "$KEY_LINE" >> ~/.ssh/known_hosts
            fi
          done <<< "$HOST_KEYS"
      # </template: add_ssh_keys_for_cve_tests>

      # <template: cve_scan_deckhouse_images>
      # <template: import_secrets>
      - name: Split repository name
        id: split
        env:
          REPO: ${{ github.repository }}
        run: echo "name=${REPO##*/}" >> $GITHUB_OUTPUT
      - name: Import secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://seguro.flant.com
          path: github
          role: "${{ steps.split.outputs.name }}"
          method: jwt
          jwtGithubAudience: github-access-aud
          secrets: |
            projects/data/b050f3bd-733f-4746-9640-9df80d484074/DefectDojo/Dev/TrivyReporter token | DD_DEV_TOKEN ;
            projects/data/b050f3bd-733f-4746-9640-9df80d484074/DefectDojo/Dev/URL URL | DD_DEV_URL ;
            projects/data/b050f3bd-733f-4746-9640-9df80d484074/CODEOWNERS_REPO_TOKEN CODEOWNERS_REPO_TOKEN | CODEOWNERS_REPO_TOKEN ;
            projects/data/24cb1d7c-717a-4f92-8547-26f632916a7a/Trivy_CVE_Scan_CI_Secrets DECKHOUSE_PRIVATE_REPO | DECKHOUSE_PRIVATE_REPO ;
            projects/data/24cb1d7c-717a-4f92-8547-26f632916a7a/Trivy_CVE_Scan_CI_Secrets DEV_REGISTRY_URL | DECKHOUSE_DEV_REGISTRY_HOST ;
            projects/data/24cb1d7c-717a-4f92-8547-26f632916a7a/Trivy_CVE_Scan_CI_Secrets PROD_READ_REGISTRY | DECKHOUSE_REGISTRY_READ_HOST ;
            projects/data/24cb1d7c-717a-4f92-8547-26f632916a7a/Trivy_CVE_Scan_CI_Secrets PROD_READ_REGISTRY_USER | DECKHOUSE_REGISTRY_READ_USER ;
            projects/data/24cb1d7c-717a-4f92-8547-26f632916a7a/Trivy_CVE_Scan_CI_Secrets PROD_READ_REGISTRY_PASSWORD | DECKHOUSE_REGISTRY_READ_PASSWORD ;
            projects/data/24cb1d7c-717a-4f92-8547-26f632916a7a/Trivy_CVE_Scan_CI_Secrets CVE_TESTS_REPO_GIT | CVE_TESTS_REPO_GIT ;
            projects/data/24cb1d7c-717a-4f92-8547-26f632916a7a/Trivy_CVE_Scan_CI_Secrets CVE_TESTS_SSH_PRIVATE_KEY | CVE_TESTS_SSH_PRIVATE_KEY ;
            projects/data/101ceaca-97cd-462f-aed5-070d9b9de175/dev-registry/writetoken password | DECKHOUSE_DEV_REGISTRY_PASSWORD ;
            projects/data/101ceaca-97cd-462f-aed5-070d9b9de175/dev-registry/writetoken login | DECKHOUSE_DEV_REGISTRY_USER ;

      # </template: import_secrets>

      - name: Set scan target type
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_name }}" == "main" ]; then
            echo "SCAN_TARGET=only_main" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.pull_request_ref }}" ]; then
            echo "SCAN_TARGET=pr" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" != "schedule" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "SCAN_TARGET=regular" >> $GITHUB_ENV
          fi

      - name: Download CVE scan script from private GitLab
        run: |
          echo "Cloning CVE scan script from private GitLab..."

          mkdir -p ${{ env.WORKDIR }}/scripts
          git clone ${{ steps.secrets.outputs.CVE_TESTS_REPO_GIT }} ${{ env.WORKDIR }}/scripts
          chmod +x "${{ env.WORKDIR }}/scripts/cve_scan.sh"

          echo "CVE scan script cloned successfully"

      - name: Run Deckhouse images CVE tests on ${{env.SOURCE_TAG}}
        env:
          SOURCE_TAG: ${{env.SOURCE_TAG}}
          CASE: "deckhouse"          
          DD_URL: ${{steps.secrets.outputs.DD_DEV_URL}}
          DD_TOKEN: ${{steps.secrets.outputs.DD_DEV_TOKEN}}
          DEFAULT_BRANCH: ${{github.default_branch}}
          COMMIT_TAG: ${{github.ref_name}}
          COMMIT_SHA: ${{github.sha}}
          EVENT_NAME: ${{github.event_name}}
          TAG_TYPE: "release"
          SCAN_SEVERAL_LATEST_RELEASES: "false"
          MODULE_NAME: "Deckhouse"
          DECKHOUSE_PRIVATE_REPO: ${{steps.secrets.outputs.DECKHOUSE_PRIVATE_REPO}}
          CODEOWNERS_REPO_TOKEN: ${{steps.secrets.outputs.CODEOWNERS_REPO_TOKEN}}
          DEV_REGISTRY: ${{steps.secrets.outputs.DECKHOUSE_DEV_REGISTRY_HOST}}
          DEV_REGISTRY_USER: ${{steps.secrets.outputs.DECKHOUSE_DEV_REGISTRY_USER}}
          DEV_REGISTRY_PASSWORD: ${{steps.secrets.outputs.DECKHOUSE_DEV_REGISTRY_PASSWORD}}
          PROD_REGISTRY: ${{steps.secrets.outputs.DECKHOUSE_REGISTRY_READ_HOST}}
          PROD_REGISTRY_USER: ${{steps.secrets.outputs.DECKHOUSE_REGISTRY_READ_USER}}
          PROD_REGISTRY_PASSWORD: ${{steps.secrets.outputs.DECKHOUSE_REGISTRY_READ_PASSWORD}}
          TRIVY_BIN_VERSION: "v0.63.0"
          TRIVY_PROJECT_ID: "2181"
          TRIVY_DB_URL: ${{steps.secrets.outputs.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-db:2
          TRIVY_JAVA_DB_URL: ${{steps.secrets.outputs.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-java-db:1
          TRIVY_POLICY_URL: ${{steps.secrets.outputs.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-bdu:1
          SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        run: |
          echo "‚öìÔ∏è üèé Running Deckhouse images CVE tests on ${SOURCE_TAG}..."
          ${{ env.WORKDIR }}/scripts/cve_scan.sh
      # </template: cve_scan_deckhouse_images>

      # <template: cve_tests_upload_reports_artifacts>
      - name: Archive report artifacts
        if: success()
        run: |
          tar -zcvf ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz ${{ env.WORKDIR }}/deckhouse
      - name: Create fail artifact
        if: failure()
        run: |
          echo "Trivy tests for ${SOURCE_TAG} have failed." > "${{ env.WORKDIR }}/artifacts/${SOURCE_TAG}_test-failed.txt"
          tar -zcvf ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz ${{ env.WORKDIR }}/deckhouse
      - name: Upload report artifacts
        if: success()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cve-reports
          path: |
            ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz
      - name: Upload fail artifact
        if: failure()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cve-reports
          path: |
            ${{ env.WORKDIR }}/artifacts/${{ env.SOURCE_TAG }}_test-failed.txt
            ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz
      - name: Remove workdir
        run: |
          rm -r ${{ env.WORKDIR }}
      # </template: cve_tests_upload_reports_artifacts>

      # <template: unlink_bin_step>
      - name: Unlink binary cache
        id: unlink_bin_step
        if: always()
        run: |
          rm bin
      # </template: unlink_bin_step>

      # <template: send_fail_report>
      - name: Send fail report
        if: ${{ failure() && github.repository == 'deckhouse/deckhouse' }}
        env:
          LOOP_SERVICE_NOTIFICATIONS: ${{ secrets.LOOP_SERVICE_NOTIFICATIONS }}
          JOB_NAME: ${{ github.job }}
          WORKFLOW_NAME: ${{ github.workflow }}
          WORKFLOW_URL: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}/
        run: |
          bash ./.github/scripts/send-report.sh --webhook "ci_fail"
      # </template: send_fail_report>