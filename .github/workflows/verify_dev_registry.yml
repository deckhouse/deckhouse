#
# THIS FILE IS GENERATED, PLEASE DO NOT EDIT.
#

# on every push to dev branches
name: Verify dev registry
on:
  push:
    branches:
    - main

env:

  # <template: werf_envs>
  # Don't forget to update .gitlab-ci-simple.yml if necessary
  WERF_CHANNEL: "ea"
  WERF_ENV: "FE"
  # We use stapel image from own registry due to docker hub pull amount limitation.
  # To re-push stapel image from docker hub use command:
  # `skopeo copy docker://flant/werf-stapel:0.6.1 docker://registry-write.deckhouse.io/flant/werf-stapel:0.6.1`
  WERF_STAPEL_IMAGE_NAME: "${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}/flant/werf-stapel"
  WERF_STAPEL_IMAGE_VERSION: "0.6.1"
  TEST_TIMEOUT: "15m"
  # Use fixed string 'sys/deckhouse-oss' for repo name. ${CI_PROJECT_PATH} is not available here in Github.
  DEV_REGISTRY_PATH: "${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}/sys/deckhouse-oss"
  BASE_IMAGES_REGISTRY_PATH: "registry.deckhouse.io/base_images/"

  FLANT_REGISTRY_PATH: "${{ secrets.FLANT_REGISTRY_HOST }}/sys/deckhouse-oss"
  # </template: werf_envs>


  # command to copy image to our registry - crane copy alpine:3.12.1@sha256:HASHVALUE ${OUR_PRIVATE_REGISTRY}/base_images/alpine:3.12.1@sha256:HASHVALUE
  # https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane.md
  BASE_ALPINE: "registry.deckhouse.io/base_images/alpine:3.12.1@sha256:c0e9560cda118f9ec63ddefb4a173a2b2a0347082d7dff7dc14272e7841a5b5a"
  BASE_ALPINE_3_15: "registry.deckhouse.io/base_images/alpine:3.15@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300"
  BASE_DEBIAN: "registry.deckhouse.io/base_images/debian:buster-20210111@sha256:b16f66714660c4b3ea14d273ad8c35079b81b35d65d1e206072d226c7ff78299"
  BASE_ETCD: "k8s.gcr.io/etcd:3.5.1-0@sha256:64b9ea357325d5db9f8a723dcf503b5a449177b17ac87d69481e126bb724c263"
  BASE_GOLANG_16_ALPINE: "registry.deckhouse.io/base_images/golang:1.16.3-alpine3.12@sha256:371dc6bf7e0c7ce112a29341b000c40d840aef1dbb4fdcb3ae5c0597e28f3061"
  BASE_GOLANG_16_BUSTER: "registry.deckhouse.io/base_images/golang:1.16.3-buster@sha256:9d64369fd3c633df71d7465d67d43f63bb31192193e671742fa1c26ebc3a6210"
  BASE_GOLANG_17_ALPINE: "registry.deckhouse.io/base_images/golang:1.17.3-alpine3.14@sha256:78a88e6a712e60f9d942450e02508f3c0d8aa931853f02793a4c3aa30063eae0"
  BASE_GOLANG_17_BUSTER: "registry.deckhouse.io/base_images/golang:1.17.3-buster@sha256:be7aa81b44dc85ddf4008bc5f3d5a5acfca8517620d0c4a393601c8e0495fb05"
  BASE_GOLANG_ALPINE: "registry.deckhouse.io/base_images/golang:1.15.3-alpine3.12@sha256:df0119b970c8e5e9f0f5c40f6b55edddf616bab2b911927ebc3b361c469ea29c"
  BASE_GOLANG_BUSTER: "registry.deckhouse.io/base_images/golang:1.15.3-buster@sha256:fb04edf20446eed8af9eb6137d02fdf607f47028a0a806131f8b175a09620aab"
  BASE_JEKYLL: "registry.deckhouse.io/base_images/jekyll/jekyll:3.8@sha256:9521c8aae4739fcbc7137ead19f91841b833d671542f13e91ca40280e88d6e34"
  BASE_NGINX_ALPINE: "registry.deckhouse.io/base_images/nginx:1.15.12-alpine@sha256:57a226fb6ab6823027c0704a9346a890ffb0cacde06bc19bbc234c8720673555"
  BASE_NODE_16_ALPINE: "registry.deckhouse.io/base_images/node:16.13.0-alpine3.14@sha256:5277c7d171e02ee76417bb290ef488aa80e4e64572119eec0cb9fffbcffb8f6a"
  BASE_PYTHON_ALPINE: "registry.deckhouse.io/base_images/python:3.7.9-alpine3.12@sha256:8c224566c41fcc1674f9b78ff2a364a1209370a5b7e7619e8ead2bdcd0fd8b52"
  BASE_SCRATCH: "registry.deckhouse.io/base_images/spotify/scratch@sha256:db4cabf15c8b9eb70dabe1da385b6d9b2cac6d658b813fbb57dc5231ddd52420"
  BASE_SHELL_OPERATOR: "registry.deckhouse.io/base_images/flant/shell-operator:v1.0.1@sha256:51dbdbad17303c31265af389c6acc73d1b6b6c66bd2112542e09b42566ac05bf"
  BASE_UBUNTU: "registry.deckhouse.io/base_images/ubuntu:bionic-20210118@sha256:ea188fdc5be9b25ca048f1e882b33f1bc763fb976a8a4fea446b38ed0efcbeba"

  # Terraform settings
  TF_AWS_NAMESPACE: hashicorp
  TF_AWS_TYPE: aws
  TF_AWS_VERSION: 3.56.0
  TF_AZURE_NAMESPACE: hashicorp
  TF_AZURE_TYPE: azurerm
  TF_AZURE_VERSION: 2.36.0
  TF_GCP_NAMESPACE: hashicorp
  TF_GCP_TYPE: google
  TF_GCP_VERSION: 3.48.0
  TF_OPENSTACK_NAMESPACE: terraform-provider-openstack
  TF_OPENSTACK_TYPE: openstack
  TF_OPENSTACK_VERSION: 1.32.0
  TF_VERSION: 0.13.4
  TF_VSPHERE_NAMESPACE: hashicorp
  TF_VSPHERE_TYPE: vsphere
  TF_VSPHERE_VERSION: 2.0.2
  TF_YANDEX_NAMESPACE: yandex-cloud
  TF_YANDEX_TYPE: yandex
  TF_YANDEX_VERSION: 0.45.1

# Analog of Gitlab's "interruptible: true" behaviour.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.event.number }}-dev
  cancel-in-progress: true

jobs:
  check_modules_images_fe:
    name: Build Modules Images FE

    # <template: build_modules_images_template>
    runs-on: [self-hosted, regular]
    steps:

      # <template: checkout_full_step>
      - name: Checkout sources
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      # </template: checkout_full_step>

      # <template: login_dev_registry_step>
      - name: Login to dev registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_dev_registry_step>

      # <template: login_readonly_registry_step>
      - name: Login to readonly registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
          logout: false
      # </template: login_readonly_registry_step>

      # <template: login_rw_registry_step>
      - name: Login to rw registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ secrets.DECKHOUSE_REGISTRY_HOST }}
          username: ${{ secrets.DECKHOUSE_REGISTRY_USER }}
          password: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
          logout: false
      # </template: login_rw_registry_step>

      # <template: werf_install_step>
      - name: Install werf CLI
        uses: werf/actions/install@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}
      # </template: werf_install_step>

      - name: Build modules images 
        env:
          CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
          DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
          REPO_MCM_USER: ${{secrets.REPO_MCM_USER}}
          REPO_MCM_TOKEN: ${{secrets.REPO_MCM_TOKEN}}
          MODULES_IMAGES_WERF_KEEP_REPORT: "true"
        run: |
          #export WERF_REPO="${DEV_REGISTRY_PATH}"
          #type werf && source $(werf ci-env github --verbose --as-file)

          ./modules_images_werf bp

      - name: Verify modules images 
        run: |
          for img in $(cat images_tags_werf.json | jq .Images[].DockerImageName -r) ; do crane manifest $img >/dev/null || touch .failed ; done ; if [ -f .failed ]; then exit 1 ; fi
          rm -f images_tags_werf.json

      #- name: Build and push modules images
      #  if: always()
      #  run: |
      #    if [[ $WERF_DOCKER_CONFIG == $(pwd)/* ]] ; then
      #      echo Cleanup temp docker config directory $WERF_DOCKER_CONFIG
      #      rm -rf $WERF_DOCKER_CONFIG
      #    fi

      # <template: save_images_tags_json_step>
      - name: Save images_tags file
        uses: actions/upload-artifact@v2
        with:
          name: images_tags_json_${{env.WERF_ENV}}
          path: modules/images_tags_${{env.WERF_ENV}}.json
      # </template: save_images_tags_json_step>

      # <template: save_images_tags_json_to_cache_step>
      - name: Save images_tags file
        uses: actions/cache@v2.1.7
        with:
          path: modules/images_tags_${{env.WERF_ENV}}.json
          key: images_tags_json-${{env.WERF_ENV}}-${{needs.git_info.outputs.github_sha}}
      # </template: save_images_tags_json_to_cache_step>
    # </template: build_modules_images_template>
