{!{- $pullRequestContext := coll.Dict "pullRequestRefField" "needs.pull_request_info.outputs.ref" -}!}
{!{- $ctx := coll.Merge $pullRequestContext . -}!}

# on every push to dev branches
name: Build and test for dev branches
on:
  pull_request_target:
     types:
      - opened
      - synchronize
      - reopened

env:
{!{ tmpl.Exec "werf_envs" | strings.Indent 2 }!}
{!{ tmpl.Exec "image_versions_envs" | strings.Indent 2 }!}
{!{ tmpl.Exec "terraform_versions_envs" | strings.Indent 2 }!}

# Analog of Gitlab's "interruptible: true" behaviour.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.event.number }}-dev
  cancel-in-progress: true

jobs:
{!{ tmpl.Exec "pull_request_info_job" $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "git_info_job" $ctx | strings.Indent 2 }!}

  enable_fe:
    if: ${{ needs.pull_request_info.outputs.edition == 'FE' }}
    name: Enable FE
    needs:
      - pull_request_info
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo Enable ${{ needs.pull_request_info.outputs.edition }}

  enable_ee:
    if: ${{ needs.pull_request_info.outputs.edition == 'EE' }}
    name: Enable EE
    needs:
      - pull_request_info
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo Enable ${{ needs.pull_request_info.outputs.edition }}

  enable_ce:
    if: ${{ needs.pull_request_info.outputs.edition == 'CE' }}
    name: Enable CE
    needs:
      - pull_request_info
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo Enable ${{ needs.pull_request_info.outputs.edition }}

  go_generate:
    name: Go Generate
    needs:
      - git_info
      - pull_request_info
{!{ tmpl.Exec "go_generate_template" $ctx | strings.Indent 4 }!}

  build_deckhouse:
    name: Build Deckhouse
    needs:
      - git_info
      - pull_request_info
      - go_generate
    env:
      WERF_ENV: ${{ needs.pull_request_info.outputs.edition }}
{!{ tmpl.Exec "build_template" (slice $ctx "dev") | strings.Indent 4 }!}

  doc_web_build:
    name: Doc web build
    # Wait for success build of modules.
    needs:
      - git_info
      - pull_request_info
{!{ tmpl.Exec "doc_web_build_template" $ctx | strings.Indent 4 }!}

  main_web_build:
    name: Main web build
    # Wait for success build of modules.
    needs:
      - git_info
      - pull_request_info
{!{ tmpl.Exec "main_web_build_template" $ctx | strings.Indent 4 }!}

  tests:
    name: Tests
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse
{!{ tmpl.Exec "tests_template" (slice $ctx "unit" "build_deckhouse") | strings.Indent 4 }!}

  matrix_tests:
    name: Matrix tests
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse
{!{ tmpl.Exec "tests_template" (slice $ctx "matrix" "build_deckhouse") | strings.Indent 4 }!}

  dhctl_tests:
    name: Dhctl Tests
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse
{!{ tmpl.Exec "tests_template" (slice $ctx "dhctl" "build_deckhouse") | strings.Indent 4 }!}

  golangci_lint:
    name: GolangCI Lint
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse
{!{ tmpl.Exec "tests_template" (slice $ctx "golangci_lint" "build_deckhouse") | strings.Indent 4 }!}

  openapi_test_cases:
    name: OpenAPI Test Cases
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse
{!{ tmpl.Exec "tests_template" (slice $ctx "openapi_test_cases" "build_deckhouse") | strings.Indent 4 }!}

  web_links_test:
    name: Web links test
    needs:
      - git_info
      - pull_request_info
      - doc_web_build
      - main_web_build
    continue-on-error: true
{!{ tmpl.Exec "web_links_test_template" $ctx | strings.Indent 4 }!}

  validators:
    name: Validators
    needs:
      - git_info
      - pull_request_info
      - build_deckhouse
{!{ tmpl.Exec "tests_template" (slice $ctx "validators" "build_deckhouse") | strings.Indent 4 }!}
