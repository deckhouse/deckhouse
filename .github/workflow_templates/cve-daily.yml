{!{- $workflowName              := "Daily CVE tests" -}!}
{!{- $enableWorkflowOnTestRepos := true -}!}
{!{- $testAllReleaseChannels    := true -}!}
{!{- $dependOnBaseImageTest     := false -}!}


{!{ define "cve_tests" }!}
# <template: cve_tests>
{!{- $ctx       := index . 0 }!}
{!{- $args_name := index . 1 }!}
{!{- $ref_name  := index . 2 }!}
{!{- $args      := printf "cve-%s" $args_name }!}
runs-on: [self-hosted, regular]
steps:
{!{ tmpl.Exec "started_at_output"            $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "checkout_full_step"           $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "login_dev_registry_step"      $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "login_readonly_registry_step" $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "link_bin_step"                     | strings.Indent 2 }!}
  - name: Run CVE tests
    run: |
      echo "‚öìÔ∏è üì§ Checking out candi/image_versions.yml from {!{ $ref_name }!} channel..."
      git checkout --force refs/remotes/origin/{!{ $ref_name }!} -- candi/image_versions.yml
      echo "‚öìÔ∏è üèé Running CVE tests on {!{ $ref_name }!}..."
      make {!{ $args }!}
{!{ tmpl.Exec "unlink_bin_step" | strings.Indent 2 }!}
# </template: cve_tests>
{!{- end -}!}


{!{- $ctx := . -}!}

name: '{!{ $workflowName }!}'
on:
  schedule:
  - cron: '0 23 * * 1-5'
  workflow_dispatch:

# Always run a single job at a time.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: cve-daily

jobs:
  skip_tests_repos:
    name: Skip tests repos
    runs-on: ubuntu-latest
    if: ${{ {!{ $enableWorkflowOnTestRepos }!} || github.repository == 'deckhouse/deckhouse' }}
    steps:
    - name: Do nothing
      run: echo "Empty action to fulfil Github requirements."


{!{/* Jobs for each release channel */}!}
{!{- $channel_names := slice "main" -}!}
{!{- if $testAllReleaseChannels -}!}
{!{-   $channel_names = $channel_names | coll.Append (slice "alpha" "beta" "early-access" "stable" "rock-solid") | coll.Flatten -}!}
{!{- end -}!}
{!{- range $ref_name := $channel_names -}!}
{!{-   $repo := "registry.deckhouse.io/deckhouse/fe" -}!}
{!{-   if eq $ref_name "main" -}!}
{!{-     $repo = "dev-registry.deckhouse.io/sys/deckhouse-oss" -}!}
{!{-   else -}!}
{!{-     $repo = "registry.deckhouse.io/deckhouse/fe" -}!}
{!{    end }!}

  test_cve_base_images_{!{$ref_name}!}:
    name: Base images on {!{$ref_name}!}
    needs:
      - skip_tests_repos
{!{ tmpl.Exec "cve_tests" (slice $ctx "base-images" $ref_name) | strings.Indent 4 }!}

  test_cve_report_{!{$ref_name}!}:
    name: Deckhouse images on {!{$ref_name}!}
    needs:
      - skip_tests_repos
{!{- if $dependOnBaseImageTest }!}
      - test_cve_base_images_{!{$ref_name}!}
{!{- end }!}
    env:
      REPO: {!{$repo}!}
      TAG: {!{$ref_name}!}
{!{- tmpl.Exec "cve_tests" (slice $ctx "report" $ref_name) | strings.Indent 4 -}!}
{!{- end }!}
