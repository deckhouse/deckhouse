{!{- $workflowName              := "Daily CVE tests" -}!}
{!{- $enableWorkflowOnTestRepos := true -}!}
{!{- $testAllReleaseChannels    := true -}!}
{!{- $dependOnBaseImageTest     := true -}!}


{!{ define "cve_tests" }!}
# <template: cve_tests>
{!{- $ctx       := index . 0 }!}
{!{- $args_name := index . 1 }!}
{!{- $ref_name  := index . 2 }!}
{!{- $args      := printf "cve-%s" $args_name }!}
runs-on: [self-hosted, regular]
steps:
{!{ tmpl.Exec "started_at_output"            $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "checkout_full_step"           $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "login_dev_registry_step"      $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "login_readonly_registry_step" $ctx | strings.Indent 2 }!}
{!{ tmpl.Exec "link_bin_step"                     | strings.Indent 2 }!}
  - name: Run CVE tests
    run: |
      echo "⚓️ 📤 Checking out candi/image_versions.yml from {!{ $ref_name }!} channel..."
      git checkout --force refs/remotes/origin/{!{ $ref_name }!} -- candi/image_versions.yml
      echo "⚓️ 🏎 Running CVE tests on {!{ $ref_name }!}..."
      make {!{ $args }!}
{!{ tmpl.Exec "unlink_bin_step" | strings.Indent 2 }!}
# </template: cve_tests>
{!{- end -}!}


{!{- $ctx := . -}!}

name: '{!{ $workflowName }!}'
on:
  schedule:
  - cron: '0 23 * * 1-5'
  workflow_dispatch:

# Always run a single job at a time.
# Note: Concurrency is currently in beta and subject to change.
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: cve-daily

jobs:
  skip_tests_repos:
    name: Skip tests repos
    runs-on: ubuntu-latest
    if: ${{ {!{ $enableWorkflowOnTestRepos }!} || github.repository == 'deckhouse/deckhouse' }}
    steps:
    - name: Do nothing
      run: echo "Empty action to fulfil Github requirements."

  fetch_tags_for_test:
    name: Fetch release channel tags for test
    runs-on: ubuntu-latest
    needs:
      - skip_tests_repos
    steps:
      - name: Fetch tags and map to release channels
        id: fetch_tags
        run: echo 'tag_matrix=["v1.38.0","v1.37.6"]' >> $GITHUB_OUTPUT
    outputs:
      tag_matrix: ${{ steps.fetch_tags.outputs.tag_matrix }}

  test_job_with_matrix_strategy:
    name: test job
    runs-on: ubuntu-latest
    needs: fetch_tags_for_test
    strategy:
      matrix:
        tag: ${{ fromJson(needs.fetch_tags_for_test.outputs.tag_matrix) }}
    steps:
      - run: |
          echo "Testing matrix strategy:"
          echo ${{ matrix.tag }}
