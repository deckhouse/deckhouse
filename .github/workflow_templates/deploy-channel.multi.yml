# Copyright 2022 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{!{/*
  Multifile generator of deploy to channel workflows.

  One workflow file for each channel: deploy-alpha.yml, deploy-beta.yml, etc.

  The only reason to use separate files for each channel
  is a filtering on 'Actions' page.

*/}!}

{!{- range $channel := slice "alpha" "beta" "early-access" "stable" "rock-solid" -}!}
{!{-   $ctx := dict "channel" $channel }!}
{!{-   $outFile := printf "deploy-%s.yml" $channel }!}
{!{-   $outPath := filepath.Join (getenv "OUTDIR") (toLower $outFile) }!}
{!{-   tmpl.Exec "deploy_channel_workflow_template" $ctx | file.Write $outPath }!}
{!{- end -}!}

{!{- define "deploy_channel_workflow_template" -}!}
{!{- $channel := .channel -}!}
{!{- $workflowName := printf "Deploy to %s" $channel -}!}
# Copyright 2022 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: '{!{ $workflowName }!}'

on:
  workflow_dispatch:
    inputs:
      issue_id:
        description: 'Id of issue where label was set'
        required: false
      issue_number:
        description: 'Number of issue where label was set'
        required: false
      comment_id:
        description: 'Id of comment in issue where to put workflow run status'
        required: false
      editions:
        description: 'Comma separated editions to deploy. Example: ee,fe,ce,be,se,se-plus'
        required: false
      cooldown:
        description: 'Postpone release until specified datetime (YYYY-MM-DD HH:MM) UTC only. Example: 2026-06-06 16:16'
        required: false

env:
{!{ tmpl.Exec "werf_envs" | strings.Indent 2 }!}
  DEPLOY_CHANNEL: {!{ .channel }!}

jobs:
{!{ tmpl.Exec "git_info_job" . | strings.Indent 2 }!}
  detect_editions:
    name: Detect editions
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_CE: ${{steps.detect_editions.outputs.DEPLOY_CE}}
      DEPLOY_EE: ${{steps.detect_editions.outputs.DEPLOY_EE}}
      DEPLOY_FE: ${{steps.detect_editions.outputs.DEPLOY_FE}}
      DEPLOY_BE: ${{steps.detect_editions.outputs.DEPLOY_BE}}
      DEPLOY_SE: ${{steps.detect_editions.outputs.DEPLOY_SE}}
      DEPLOY_SE-plus: ${{steps.detect_editions.outputs.DEPLOY_SE-plus}}
    steps:
      - name: Detect editions
        id: detect_editions
        env:
          EDITIONS: ${{ github.event.inputs.editions }}
        run: |
          echo "Input allowed editions: '${EDITIONS}'"

          RESTRICTED=no

          for edition in CE EE FE BE SE SE-plus ; do
            if grep -i ",${edition}," <<<",${EDITIONS}," 2>/dev/null 1>&2 ; then
              echo "  - enable deploy of ${edition} edition."
              echo "DEPLOY_${edition}=true" >> $GITHUB_OUTPUT
              RESTRICTED=yes
            fi
          done

          if [[ $RESTRICTED == "no" ]] ; then
            echo "No restrictions. Enable deploy to all editions."
            for edition in CE EE FE BE SE SE-plus ; do
              echo "DEPLOY_${edition}=true" >> $GITHUB_OUTPUT
            done
          fi

{!{/*
Jobs for visual control allowed editions when approving deploy to environments.
*/}!}
{!{ range $werfEnv := slice "CE" "EE" "FE" "BE" "SE" "SE-plus" }!}
  enable_{!{$werfEnv}!}:
    if: ${{ needs.detect_editions.outputs.DEPLOY_{!{$werfEnv}!} == 'true' }}
    name: Enable {!{$werfEnv}!}
    needs:
      - detect_editions
    runs-on: ubuntu-latest
    steps:
      - run: ": Enable {!{$werfEnv}!}"
{!{ end }!}

  run_deploy:
    name: Deploy ${{needs.git_info.outputs.ci_commit_tag}} to {!{ .channel }!}
    environment:
      name: {!{ .channel }!}
    needs:
      - git_info
      - detect_editions
    runs-on: [self-hosted, regular]
    steps:

      - name: Run deploy stub
        run: exit 0

  prepare_channel_releases:
    name: Prepare channel releases
    runs-on: [self-hosted, regular]
    needs:
      - run_deploy
    steps:
      {!{- tmpl.Exec "checkout_step" . | strings.Indent 6 }!}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: pip install ghapi fastcore

      - name: Prepare files for collecting and deployment
        run: |
          mkdir -p publish-channels/.helm/templates
          tee publish-channels/werf.yaml << EOF
          project: deckhouse-channels
          configVersion: 1
          EOF

          tee publish-channels/.helm/templates/configmap.yaml << EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: release-channels-data
          data:
            channels.yaml: |
          {{ $.Files.Get "channels.yaml" | indent 4 }}
          EOF

      - name: Generate channel releases config map
        run: python .github/scripts/python/generate-channel-releases-cm.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload artifacts
        uses: {!{ index (ds "actions") "actions/upload-artifact" }!}
        with:
          name: channels-artifact
          path: publish-channels
          include-hidden-files: true

{!{- $envs := yaml `
# production:
#   job: deploy_channels_cm_prod
#   job_name: Deploy channels to production
#   kubeconfig: KUBECONFIG_BASE64_PROD_25
#   werf_namespace: deckhouse-web-production
#   werf_env: web-production
# oldproduction:
#   job: deploy_channels_cm_prod_old
#   job_name: '[OLD] Deploy channels to production'
#   kubeconfig: KUBECONFIG_BASE64_PROD_SEL
#   werf_namespace: deckhouse-web-production
#   werf_env: web-production
stage:
  job: deploy_channels_cm_stage
  job_name: Deploy channels to staging
  kubeconfig: KUBECONFIG_BASE64_DEV
  werf_namespace: deckhouse-web-stage
  werf_env: web-stage
` }!}

{!{ range $env, $env_properties := $envs }!}
  {!{ $env_properties.job }!}:
    name: "{!{ $env_properties.job_name }!}"
    runs-on: [self-hosted, regular]
    needs:
      - prepare_channel_releases
    env:
      WERF_CHANNEL: "ea"
    steps:
      {!{- tmpl.Exec "checkout_step" . | strings.Indent 6 }!}
      
      - name: Download artifacts
        uses: {!{ index (ds "actions") "actions/download-artifact" }!}
        with:
          name: channels-artifact
          path: publish-channels

      - name: Check artifacts
        run: |
          echo "Check working file structure"
          ls -1AR publish-channels

          echo "Print content of werf.yaml"
          cat publish-channels/werf.yaml

          echo "Print content of configmap.yaml"
          cat publish-channels/.helm/templates/configmap.yaml

          echo "Print content of channels.yaml"
          cat publish-channels/.helm/channels.yaml

      - name: Converge
        uses: werf/actions/converge@v1.2
        with:
          channel: ${{env.WERF_CHANNEL}}
          kube-config-base64-data: "${{ secrets.{!{ $env_properties.kubeconfig }!} }}"
          env: {!{ $env_properties.werf_env }!}
        env:
          WERF_NAMESPACE: "{!{ $env_properties.werf_namespace }!}"
          WERF_DIR: "publish-channels"
          WERF_DEV: "true"

{!{ end -}!}

{!{ end -}!}
