# Copyright 2022 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# on push to default branch or on tags
{!{- $ctx := dict -}!}
{!{- $ctx = coll.Merge $ctx . }!}

name: Build and test for release

on:
  workflow_dispatch:
    inputs:
      issue_id:
        description: 'Id of issue where label was set'
        required: false
      issue_number:
        description: 'Number of issue where label was set'
        required: false
      comment_id:
        description: 'Id of comment in issue where to put workflow run status'
        required: false
      editions:
        description: 'Comma-separated list of editions to build'
        required: false
        type: string
      svace_enabled:
        description: 'A boolean value which indicates whether svace analyze will be performed'
        type: boolean
        required: false

env:
{!{ tmpl.Exec "werf_envs" | strings.Indent 2 }!}
{!{ tmpl.Exec "git_source_envs" | strings.Indent 2 }!}

# Cancel in-progress jobs for the same tag/branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
{!{ tmpl.Exec "git_info_job" $ctx | strings.Indent 2 }!}
  detect_editions:
    name: Detect editions
    runs-on: ubuntu-latest
    outputs:
      BUILD_CE: ${{steps.detect_editions.outputs.BUILD_CE}}
      BUILD_EE: ${{steps.detect_editions.outputs.BUILD_EE}}
      BUILD_BE: ${{steps.detect_editions.outputs.BUILD_BE}}
      BUILD_SE: ${{steps.detect_editions.outputs.BUILD_SE}}
      BUILD_SE-plus: ${{steps.detect_editions.outputs.BUILD_SE-plus}}
    steps:
      - name: Detect editions
        id: detect_editions
        env:
          EDITIONS: ${{ github.event.inputs.editions }}
        run: |
          echo "Input allowed editions: '${EDITIONS}'"

          EMPTY_EDITIONS=yes

          for edition in CE EE BE SE SE-plus ; do
            if grep -i ",${edition}," <<<",${EDITIONS}," 2>/dev/null 1>&2 ; then
              echo "  - enable build of ${edition} edition."
              echo "BUILD_${edition}=true" >> $GITHUB_OUTPUT
              EMPTY_EDITIONS=no
            fi
          done

          if [[ $EMPTY_EDITIONS == "yes" ]] ; then
            echo "No editions requested. Building only FE."
          fi

  check_branch_name:
    name: Check branch name
    runs-on: ubuntu-latest
    steps:
{!{ tmpl.Exec "checkout_step" . | strings.Indent 4 }!}
      with:
        fetch-depth: 0
    - name: Check branch name
      id: check_branch_name
      env:
        CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
      run: |
        if [ -z "${CI_COMMIT_TAG}" ]; then
          exit 0 # Skip job if there is no tag
        fi
        TAG_NAME="${GITHUB_REF#refs/tags/}" # Remove "refs/tags/" prefix
        echo "TAG_NAME=${TAG_NAME}"
        MAJOR=$(echo "$TAG_NAME" | cut -d'.' -f1 | tr -d 'v')
        MINOR=$(echo "$TAG_NAME" | cut -d'.' -f2)
        RELEASE_BRANCH_NAME="release-${MAJOR}.${MINOR}"
        echo "RELEASE_BRANCH_NAME=${RELEASE_BRANCH_NAME}"
        echo "GITHUB_SHA=${GITHUB_SHA}"
        echo "Current commit in branch:"
        git branch -r --contains ${GITHUB_SHA}
        # grep returns exit code 1 if branch not found
        git branch -r --contains ${GITHUB_SHA} | grep ${RELEASE_BRANCH_NAME}

  go_generate:
    name: Go Generate
    needs:
      - git_info
      - check_branch_name
{!{ tmpl.Exec "go_generate_template" $ctx | strings.Indent 4 }!}

  workflow_render:
    name: Render workflow
    needs:
      - git_info
      - check_branch_name
{!{ tmpl.Exec "workflow_render_template" $ctx | strings.Indent 4 }!}

  build_fe:
    name: Build FE
    needs:
      - git_info
      - go_generate
      - workflow_render
    env:
      WERF_ENV: "FE"
      SVACE_ANALYZE_HOST: "${{ secrets.SVACE_ANALYZE_HOST }}"
      SVACE_ANALYZE_SSH_USER: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
      SVACE_ENABLED: ${{ github.event.inputs.svace_enabled }}      
{!{ tmpl.Exec "build_template" (slice $ctx "release") | strings.Indent 4 }!}
{!{ tmpl.Exec "send_fail_report" . | strings.Indent 6 }!}

  build_ee:
    name: Build EE
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_EE == 'true') }}
    needs:
      - git_info
      - go_generate
      - workflow_render
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "EE"
      SVACE_ANALYZE_HOST: "${{ secrets.SVACE_ANALYZE_HOST }}"
      SVACE_ANALYZE_SSH_USER: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
      SVACE_ENABLED: ${{ github.event.inputs.svace_enabled }}
{!{ tmpl.Exec "build_template" (slice $ctx "release") | strings.Indent 4 }!}
{!{ tmpl.Exec "send_fail_report" . | strings.Indent 6 }!}

  build_se:
    name: Build SE
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_SE == 'true') }}
    needs:
      - git_info
      - go_generate
      - workflow_render
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "SE"
      SVACE_ANALYZE_HOST: "${{ secrets.SVACE_ANALYZE_HOST }}"
      SVACE_ANALYZE_SSH_USER: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
      SVACE_ENABLED: ${{ github.event.inputs.svace_enabled }}      
{!{ tmpl.Exec "build_template" (slice $ctx "release") | strings.Indent 4 }!}

  build_se_plus:
    name: Build SE-plus
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_SE-plus == 'true') }}
    needs:
      - git_info
      - go_generate
      - workflow_render
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "SE-plus"
      SVACE_ANALYZE_HOST: "${{ secrets.SVACE_ANALYZE_HOST }}"
      SVACE_ANALYZE_SSH_USER: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
      SVACE_ENABLED: ${{ github.event.inputs.svace_enabled }}      
{!{ tmpl.Exec "build_template" (slice $ctx "release") | strings.Indent 4 }!}

  build_be:
    name: Build BE
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_BE == 'true') }}
    needs:
      - git_info
      - go_generate
      - workflow_render
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "BE"
      SVACE_ANALYZE_HOST: "${{ secrets.SVACE_ANALYZE_HOST }}"
      SVACE_ANALYZE_SSH_USER: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
      SVACE_ENABLED: ${{ github.event.inputs.svace_enabled }}      
{!{ tmpl.Exec "build_template" (slice $ctx "release") | strings.Indent 4 }!}

  build_ce:
    name: Build CE
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (needs.detect_editions.outputs.BUILD_CE == 'true') }}
    needs:
      - git_info
      - go_generate
      - workflow_render
      - build_fe
      - detect_editions
    env:
      WERF_ENV: "CE"
      SVACE_ANALYZE_HOST: "${{ secrets.SVACE_ANALYZE_HOST }}"
      SVACE_ANALYZE_SSH_USER: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
      SVACE_ENABLED: ${{ github.event.inputs.svace_enabled }}      
{!{ tmpl.Exec "build_template" (slice $ctx "release") | strings.Indent 4 }!}

  analyze_deckhouse:
    if: ${{ (github.event.inputs.svace_enabled == 'true') && always() }}
    name: Deckhouse static analysis
    needs:
      - build_fe
    runs-on: [self-hosted]
    steps:
      - uses: deckhouse/modules-actions/svace_analyze@svace-analyze
        with:
          project_group: ${{ github.event.repository.name }}
          ci_commit_ref_name: ${{ github.ref_name }}
          ci_commit_hash: ${{ github.sha }}
          svace_analyze_host: "${{ secrets.SVACE_ANALYZE_HOST }}"
          svace_analyze_ssh_user: "${{ secrets.SVACE_ANALYZE_SSH_USER }}"
          svacer_url: "${{ secrets.SVACER_URL }}"
          svacer_import_user: "${{ secrets.SVACER_IMPORT_USER }}"
          svacer_import_password: "${{ secrets.SVACER_IMPORT_PASSWORD }}"
          svace_analyze_ssh_private_key: "${{ secrets.SVACE_ANALYZE_SSH_PRIVATE_KEY }}"

  doc_web_build:
    name: Doc web build
    if: ${{ needs.git_info.outputs.ci_commit_ref_name == 'main' && github.repository == 'deckhouse/deckhouse' }}
    # Wait for success build of modules.
    needs:
      - git_info
{!{ tmpl.Exec "web_build_template" (slice $ctx "doc" "release") | strings.Indent 4 }!}

  main_web_build:
    name: Main web build
    if: ${{ needs.git_info.outputs.ci_commit_ref_name == 'main' && github.repository == 'deckhouse/deckhouse' }}
    # Wait for success build of modules.
    needs:
      - git_info
{!{ tmpl.Exec "web_build_template" (slice $ctx "main" "release") | strings.Indent 4 }!}

  tests:
    name: Tests
    needs:
      - git_info
      - check_branch_name
{!{ tmpl.Exec "tests_before_build_template" (slice $ctx "unit") | strings.Indent 4 }!}

  tests_python_webhooks:
    name: Tests python webhooks
    needs:
      - git_info
{!{ tmpl.Exec "tests_webhooks_template" (slice $ctx) | strings.Indent 4 }!}

  tests_dmt_lint:
    name: Tests DMT lint
    needs:
    - git_info
{!{ tmpl.Exec "tests_dmt_lint" (slice $ctx) | strings.Indent 4 }!}

  dhctl_tests:
    name: Dhctl Tests
    needs:
      - git_info
      - build_fe
{!{ tmpl.Exec "tests_template" (slice $ctx "dhctl" "build_fe") | strings.Indent 4 }!}

  golangci_lint:
    name: GolangCI Lint
    needs:
      - git_info
      - build_fe
{!{ tmpl.Exec "tests_template" (slice $ctx "golangci_lint" "build_fe") | strings.Indent 4 }!}

  openapi_test_cases:
    name: OpenAPI Test Cases
    needs:
      - git_info
      - build_fe
{!{ tmpl.Exec "tests_template" (slice $ctx "openapi_test_cases" "build_fe") | strings.Indent 4 }!}

  web_links_test:
    name: Web links test
    if: ${{ needs.git_info.outputs.ci_commit_ref_name == 'main' && github.repository == 'deckhouse/deckhouse' }}
    needs:
      - git_info
      - doc_web_build
      - main_web_build
{!{ tmpl.Exec "web_links_test_template" (slice $ctx "release") | strings.Indent 4 }!}

  validators:
    name: Validators
    needs:
      - git_info
      - build_fe
{!{ tmpl.Exec "tests_template" (slice $ctx "validators" "build_fe") | strings.Indent 4 }!}
