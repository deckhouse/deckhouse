{!{ define "check_changelog_template" }!}
# <template: check_changelog_template>
check_changelog:
  name: Check changelog
  runs-on: ubuntu-latest
  steps:
  {!{ tmpl.Exec "checkout_step" . | strings.Indent 4 }!}
    - name: Check for tag
      run: |
        if [[ "${GITHUB_REF}" != refs/tags/* ]]; then
          echo "Not a tag push, skipping changelog check."
          exit 0
        fi

        TAG_VERSION="${GITHUB_REF#refs/tags/}"
        FILE="./CHANGELOG/CHANGELOG-${TAG_VERSION}.yml"

        if [ ! -f "$FILE" ]; then
          echo "‚ùå Expected changelog file $FILE not found. Please create it before pushing the release tag."
          exit 1
        else
          echo "‚úÖ Changelog file $FILE found."
        fi
# </template: check_changelog_template>
{!{ end }!}

{!{ define "build_template" }!}
{!{- $ctx := index . 0 -}!}
{!{- $buildType := index . 1 -}!}
# <template: build_template>
runs-on: [self-hosted, large]
outputs:
  tests_image_name: ${{ steps.build.outputs.tests_image_name }}
steps:
{!{ if eq $buildType "release" }!}
  {!{ tmpl.Exec "started_at_output" $ctx | strings.Indent 2 }!}
{!{ end }!}
  {!{ tmpl.Exec "checkout_full_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_dev_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_rw_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "werf_install_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "add_ssh_keys" $ctx | strings.Indent 2 }!}

  - name: Set up Go 1.24
    uses: actions/setup-go@v5
    with:
      go-version: '1.24'
      cache: false

  - name: Run go generate
    run: |
      (make generate)
      (cd modules/500-upmeter/hooks/smokemini/internal/snapshot && go generate -v)

  - name: Check generated code
    run: git diff --exit-code || (echo 'Regenerated code does not match source, please run "make generate"' && exit 1)

  - name: Build and push deckhouse images
    id: build
    env:
{!{- if eq $buildType "dev" }!}
      WERF_DISABLE_PUBLISH_TAG_CACHE_SYNC: 1
{!{- end }!}
      DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
      DECKHOUSE_DEV_REGISTRY_USER : ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
      DECKHOUSE_DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
      DECKHOUSE_REGISTRY_USER : ${{ secrets.DECKHOUSE_REGISTRY_USER }}
      DECKHOUSE_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_PASSWORD }}
      ACTIONS_ID_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
      CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
      CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
{!{- if or (eq $buildType "release") (eq $buildType "pre-release") }!}
      CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
{!{- else }!}
      CI_COMMIT_REF_SLUG: ${{needs.pull_request_info.outputs.ref_slug}}
{!{- end }!}
    run: |
      # Extract REPO_SUFFIX from repository name: trim prefix 'deckhouse/deckhouse-'.
      REPO_SUFFIX=${GITHUB_REPOSITORY#deckhouse/deckhouse-}
      if [[ $REPO_SUFFIX == $GITHUB_REPOSITORY ]] ; then
        # REPO_SUFFIX should be empty for main repo 'deckhouse/deckhouse'.
        REPO_SUFFIX=
      fi

      # Put tags on produced images and push to dev and release repositories.
      #
      # There are 2 modes: "dev" and "release".
      # The "dev" mode builds branches only:
      # - Build using dev-registry as primary and deckhouse registry as secondary.
      # - Push dev and dev/install images with prNUM tags and push to dev-registry.
      # The "release" mode builds branches and tags:
      # - Build using deckhouse registry as final and dev-registry as primary.
      # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
      # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

      # IMAGE_NAME is a name of image from werf.yaml.
      # IMAGE_DST is an image name for docker push.
      function publish_image() {
        IMAGE_NAME=$1
        IMAGE_DST=$2
        IMAGE_SRC="$(jq -r ".Images.\"${IMAGE_NAME}\".DockerImageName" images_tags_werf.json)"
        echo "‚öìÔ∏è üí´ [$(date -u)] Publishing '${IMAGE_NAME}' image to ${IMAGE_DST}".
        echo "‚öìÔ∏è üì• [$(date -u)] Pull '${IMAGE_NAME}' image as ${IMAGE_SRC}."
        docker pull "${IMAGE_SRC}"
        echo "‚öìÔ∏è üè∑ [$(date -u)] Tag '${IMAGE_NAME}' image as ${IMAGE_DST}."
        docker image tag "${IMAGE_SRC}" "${IMAGE_DST}"
        echo "‚öìÔ∏è üì§ [$(date -u)] Push '${IMAGE_NAME}' image as ${IMAGE_DST}."
        docker image push "${IMAGE_DST}"
        echo "‚öìÔ∏è üßπ [$(date -u)] Remove local tag for '${IMAGE_NAME}'."
        docker image rmi "${IMAGE_DST}" || true;
      }

      # CE/EE/FE -> ce/ee/fe
      REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

      # Temporary directory is moved to ensure
      TEMP_WORKDIR="$(dirname "${{github.workspace}}")/${{github.run_id}}-$REGISTRY_SUFFIX"
      echo "build_report_dir=$(echo ${TEMP_WORKDIR})" >> $GITHUB_OUTPUT
      mkdir -p "$TEMP_WORKDIR"

      # Registry path to publish images for Git tags.
      if [[ -n ${DECKHOUSE_REGISTRY_HOST:-} ]] ; then
        SEMVER_REGISTRY_PATH="${DECKHOUSE_REGISTRY_HOST}/deckhouse"
      else
        SEMVER_REGISTRY_PATH="${GHA_TEST_REGISTRY_PATH}"
      fi

      export WERF_REPO="${DEV_REGISTRY_PATH}"
      if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        # Release tag build, set deckhouse registry as final
        export WERF_FINAL_REPO="${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}"

        # Set cosign auth values
        export COSIGN_LOGIN="${DECKHOUSE_REGISTRY_USER}"
        export COSIGN_PASSWORD="${DECKHOUSE_REGISTRY_PASSWORD}"
        export COSIGN_ACCESS_TOKEN="${COSIGN_ACCESS_TOKEN}"

        # The Git tag may contain a '+' sign, so use slugify for this situation.
        # Slugify doesn't change a tag with safe-only characters.
        IMAGE_TAG=$(werf slugify --format docker-tag "${CI_COMMIT_TAG}")

        export WERF_DISABLE_META_TAGS=true
      else
        # Other build, set deckhouse registry as secondary
        export WERF_SECONDARY_REPO="${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}"

        # Set cosign auth values
        export COSIGN_LOGIN="${DECKHOUSE_DEV_REGISTRY_USER}"
        export COSIGN_PASSWORD="${DECKHOUSE_DEV_REGISTRY_PASSWORD}"

        # Determine image tag
        if [[ -n ${WERF_ENV} && ${WERF_ENV,,} != "fe" ]]; then
          IMAGE_EDITION=${WERF_ENV,,}
        fi
        # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
        # Use it as image tag. Add suffix to not overlap with PRs in main repo.
        IMAGE_TAG=${CI_COMMIT_REF_SLUG}${IMAGE_EDITION:+-${IMAGE_EDITION}}${REPO_SUFFIX:+-${REPO_SUFFIX}}
      fi
      type werf && source $(werf ci-env github --verbose --as-file)

      werf config render > werf-rendered.yaml

      werf build \
        --dev \
        --config werf-rendered.yaml \
        --parallel=true --parallel-tasks-limit=10 \
        --save-build-report=true \
        --tmp-dir="$TEMP_WORKDIR" \
        --build-report-path images_tags_werf.json

      cp images_tags_werf.json "$TEMP_WORKDIR"

      # Encrypting the rendered build file before dumping it into artifacts
      echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCxvEtHR2d9rO6F3ooHAWFxIJdMKAgNVGx5cbP3F576ltMsUauBHAC02ti5vCggORHJlq3BmAyrDXLbfDFS+evxL8oOGEVFlp+lHiUSTQZCxAnhJFVkjgJ8poCYno35ZYhlOTZGI6fqIWV2HuHIJSk3fL0rqRwjCVV2pqQniR6SYUNYISN/RmPnchGVFw4mRLo5HxkXHVPBE3OSX7ihODhS09c+8nyErd8iDf8YljFqB8Oepe3f7nwxWQM/mUjsU70hAL4DEuORrtPwSqeLcUrX4uzc3vQFzPR81AdbtAZ8Vh4CbF7v5dLIqKR1AkCGc8nENEGLu/AWbCjyb9epqmbjKpMT+ogyzJZjNlRjJ2PaImIUhGCMQ8wN1W68pB6Kx9rXKYXpK57nwWwbG33JrmMFWZK7Lj4oRNJZjHRRhOGccCT1gXATmTXzCikehBV4KVHfmOjzK1K0lfUb5DihfhXoAQ+YCIwZaUwtL5BBeq6oRuD1UxsNcczfjgZ22bmdDDs= root@04c20a0dffea" > id_rsa.pub
      ssh-keygen -f id_rsa.pub -e -m PEM > id_rsa.pub.pem
      openssl rand -out key.bin 32
      openssl enc -aes-256-cbc -pbkdf2 -salt -in werf-rendered.yaml -out ${TEMP_WORKDIR}/werf-rendered.yaml.enc -pass file:./key.bin
      openssl pkeyutl -encrypt -pubin -inkey id_rsa.pub.pem -in key.bin -out ${TEMP_WORKDIR}/key.bin.enc
      rm -f ./key.bin
      rm -f ./werf-rendered.yaml

      # Publish images for Git branch.
      if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
        echo "‚öìÔ∏è üí´ [$(date -u)] Publish images to dev-registry for branch '${CI_COMMIT_BRANCH}' and edition '${WERF_ENV}' using tag '${IMAGE_TAG}' ..."
        publish_image 'dev' "${DEV_REGISTRY_PATH}:${IMAGE_TAG}"
        publish_image 'dev/install' "${DEV_REGISTRY_PATH}/install:${IMAGE_TAG}"
        publish_image 'dev/install-standalone' "${DEV_REGISTRY_PATH}/install-standalone:${IMAGE_TAG}"
        publish_image 'e2e-opentofu-eks' "${DEV_REGISTRY_PATH}/e2e-opentofu-eks:${IMAGE_TAG}"
      else
        echo "Branch unset, skipping branch publish."
      fi

      # Publish images for Git tag.
      if [[ "${CI_COMMIT_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "‚öìÔ∏è üí´ [$(date -u)] Publish images for Git tag '${CI_COMMIT_TAG}' and registry suffix '${REGISTRY_SUFFIX}' using tag '${IMAGE_TAG}' ..."
        publish_image 'dev' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}:${IMAGE_TAG}"
        publish_image 'dev/install' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install:${IMAGE_TAG}"
        publish_image 'dev/install-standalone' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/install-standalone:${IMAGE_TAG}"
        publish_image 'release-channel-version' "${SEMVER_REGISTRY_PATH}/${REGISTRY_SUFFIX}/release-channel:${IMAGE_TAG}"
      else
        echo "Not a release tag, skipping tag publish."
      fi

      # Save 'tests' image name to pass it as output for 'tests' jobs.
      TESTS_IMAGE_NAME="$(jq -r '.Images."tests".DockerImageName' images_tags_werf.json)"
      # Print image name in uppercase to prevent hiding non-secret registry host stored in secret.
      echo "Tests image name: '${TESTS_IMAGE_NAME}'" | tr '[:lower:]' '[:upper:]'
      # Encode as gzip+base64 to evade github's SecretMasker error: "Skip output since it may contain secret".
      echo "tests_image_name=$(echo ${TESTS_IMAGE_NAME} | gzip | base64 -w0)" >> $GITHUB_OUTPUT

      # Filter out data from build report
      egrep -v '(DockerRepo|DockerImageName)' "$TEMP_WORKDIR/images_tags_werf.json" > "$TEMP_WORKDIR/images_tags_werf_filtered.json"
      mv "$TEMP_WORKDIR/images_tags_werf_filtered.json" "$TEMP_WORKDIR/images_tags_werf.json"

  - name: Check DKP images manifests in public registry
    if: ${{ github.repository == 'deckhouse/deckhouse' && startsWith(github.ref, 'refs/tags/v') }}
    id: check_images
    env:
      CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
      DECKHOUSE_REGISTRY_READ_HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
    run: |
      EDITION=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

      ./tools/check-release-images.sh --tag ${CI_COMMIT_REF_SLUG} --edition ${EDITION} --images-path ${DECKHOUSE_REGISTRY_READ_HOST}/deckhouse/

  - name: Save build report
    if: ${{ always() && (steps.build.outcome == 'success' || steps.build.outcome == 'failure') }}
    uses: {!{ index (ds "actions") "actions/upload-artifact" }!}
    with:
      name: build_report_${{ env.WERF_ENV }}
      path: |
        ${{ steps.build.outputs.build_report_dir }}/images_tags_werf.json
        ${{ steps.build.outputs.build_report_dir }}/werf-rendered.yaml.enc
        ${{ steps.build.outputs.build_report_dir }}/key.bin.enc

# </template: build_template>
{!{ end }!}
