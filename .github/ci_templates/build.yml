{!{ define "go_generate_template" }!}
# <template: go_generate_template>
runs-on: [self-hosted, regular]
steps:
  {!{ tmpl.Exec "started_at_output"            . | strings.Indent 2 }!}
  {!{ tmpl.Exec "checkout_step"                . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "werf_install_step"            . | strings.Indent 2 }!}

  - name: Set up Go 1.23
    uses: actions/setup-go@v3
    with:
      go-version: '1.23'

  - name: Run go generate
    run: |
      {!{/* TODO replace with 'make generate' when make become available on runners */}!}
      (cd tools && go generate)
      (cd modules/500-upmeter/hooks/smokemini/internal/snapshot && go generate)

  - name: Check generated code
    run: |
      git diff --exit-code
# </template: go_generate_template>
{!{ end }!}

{!{ define "workflow_render_template" }!}
# <template: workflow_render_template>
runs-on: [self-hosted, regular]
steps:
  {!{ tmpl.Exec "started_at_output"            . | strings.Indent 2 }!}
  {!{ tmpl.Exec "checkout_step"                . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" . | strings.Indent 2 }!}

  - name: Render GitHub workflow
    run: |
      cd .github
      ./render-workflows.sh

  - name: Check rendered files
    run: |
      git diff --exit-code
# </template: workflow_render_template>
{!{ end }!}

{!{ define "build_template" }!}
{!{- $ctx := index . 0 -}!}
{!{- $buildType := index . 1 -}!}
# <template: build_template>
runs-on: [self-hosted, regular, selectel]
outputs:
  tests_image_name: ${{ steps.build.outputs.tests_image_name }}
steps:
{!{ if eq $buildType "release" }!}
  {!{ tmpl.Exec "started_at_output" $ctx | strings.Indent 2 }!}
{!{ end }!}
  {!{ tmpl.Exec "checkout_full_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_dev_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_rw_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "werf_install_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_git_step" $ctx | strings.Indent 2 }!}

  - name: Build and push deckhouse images
    id: build
    env:
      DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
      CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
      CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
      CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
{!{- if or (eq $buildType "release") (eq $buildType "pre-release") }!}
      CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
{!{- else }!}
      CI_COMMIT_REF_SLUG: ${{needs.pull_request_info.outputs.ref_slug}}
{!{- end }!}
    run: |
      #BREAKING CHANGE HERE
      exit 1

{!{- if eq $buildType "release" }!}
  - name: Check DKP images manifests in public registry
    if: ${{ github.repository == 'deckhouse/deckhouse' && startsWith(github.ref, 'refs/tags/v') }}
    id: check_images
    env:
      CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
      DECKHOUSE_REGISTRY_READ_HOST: ${{secrets.DECKHOUSE_REGISTRY_READ_HOST}}
    run: |
      EDITION=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]')

      ./tools/check-release-images.sh --tag ${CI_COMMIT_REF_SLUG} --edition ${EDITION} --images-path ${DECKHOUSE_REGISTRY_READ_HOST}/deckhouse/
{!{- end }!}

  - name: Cleanup
    if: ${{ always() }}
    run: |
      rm -f images_tags_werf.json
# </template: build_template>
{!{ end }!}
