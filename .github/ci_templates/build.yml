{!{ define "go_generate_template" }!}
# <template: go_generate_template>
runs-on: ubuntu-latest
steps:
  {!{ tmpl.Exec "checkout_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" . | strings.Indent 2 }!}

  - name: Run go generate
    run: |
      docker run -v $(pwd):/deckhouse -w /deckhouse/tools ${BASE_GOLANG_ALPINE} go generate .
      docker run -v $(pwd):/deckhouse -w /deckhouse/modules/500-upmeter/hooks/smokemini/internal/snapshot ${BASE_GOLANG_ALPINE} go generate .

  - name: Check generated code
    run: |
      git diff --exit-code
# </template: go_generate_template>
{!{ end }!}

{!{ define "build_modules_images_template" }!}
# <template: build_modules_images_template>
runs-on: [self-hosted, regular]
steps:
  {!{ tmpl.Exec "checkout_full_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_dev_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_rw_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "werf_install_step" . | strings.Indent 2 }!}

  - name: Build and push modules images
    env:
      CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
      DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
      REPO_MCM_USER: ${{secrets.REPO_MCM_USER}}
      REPO_MCM_TOKEN: ${{secrets.REPO_MCM_TOKEN}}
    run: |
      #export WERF_REPO="${DEV_REGISTRY_PATH}"
      #type werf && source $(werf ci-env github --verbose --as-file)

      ./modules_images_werf bp

  #- name: Build and push modules images
  #  if: always()
  #  run: |
  #    if [[ $WERF_DOCKER_CONFIG == $(pwd)/* ]] ; then
  #      echo Cleanup temp docker config directory $WERF_DOCKER_CONFIG
  #      rm -rf $WERF_DOCKER_CONFIG
  #    fi

  {!{ tmpl.Exec "save_images_tags_json_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "save_images_tags_json_to_cache_step" . | strings.Indent 2 }!}
# </template: build_modules_images_template>
{!{ end }!}

{!{ define "build_template" }!}
{!{- $ctx := index . 0 -}!}
{!{- $buildType := index . 1 -}!}
# <template: build_template>
runs-on: [self-hosted, regular]
steps:
  {!{ tmpl.Exec "checkout_full_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_dev_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_rw_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_flant_registry_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "werf_install_step" $ctx | strings.Indent 2 }!}
  {!{ tmpl.Exec "restore_images_tags_json_step" $ctx | strings.Indent 2 }!}

  - name: Build and push deckhouse images
    env:
      DECKHOUSE_REGISTRY_HOST: ${{secrets.DECKHOUSE_REGISTRY_HOST}}
      CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
      CI_COMMIT_BRANCH: ${{needs.git_info.outputs.ci_commit_branch}}
      CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
      CI_COMMIT_REF_SLUG: ${{needs.git_info.outputs.ci_commit_ref_slug}}
      CI_PIPELINE_CREATED_AT: ${{needs.git_info.outputs.ci_pipeline_created_at}}
    run: |
      ## Source: .gitlab/ci_templates/build.yml
      # Put tags on produced images and push to dev and release repositories.
      #
      # There are 2 modes: "dev" and "release".
      # The "dev" mode builds branches only:
      # - Build using dev-registry as primary and deckhouse registry as secondary.
      # - Push dev and dev/install images with prNUM tags and push to dev-registry.
      # The "release" mode builds branches and tags:
      # - Build using dev-registry as primary and deckhouse registry as secondary.
      # - Push dev and dev/install images to dev-registry with tag equal to a branch name (main or release-X.Y).
      # - Build using deckhouse registry as primary and dev-registry as secondary.
      # - Push dev, dev/install and release-channel-version images to deckhouse registry with tag equels to a Git tag.

      # SOURCE_IMAGE_NAME is a name of image from werf.yaml.
      # WERF_STAGE is a stage image name (from werf stage output).
      # DESTINATION_IMAGE is an image name for docker push.
      function pull_push() {
        SOURCE_IMAGE_NAME=$1
        WERF_STAGE=$2
        DESTINATION_IMAGE=$3
        echo "  Pull '${SOURCE_IMAGE_NAME}' image as ${WERF_STAGE}."
        docker pull ${WERF_STAGE}
        echo "  Tag '${SOURCE_IMAGE_NAME}' image as ${DESTINATION_IMAGE}."
        docker image tag ${WERF_STAGE} ${DESTINATION_IMAGE}
        echo "  Push '${SOURCE_IMAGE_NAME}' image as ${DESTINATION_IMAGE}."
        docker image push ${DESTINATION_IMAGE}
      }

      if [[ -n "${DEV_REGISTRY_PATH}" ]]; then export WERF_REPO="${DEV_REGISTRY_PATH}"; fi
      type werf && source $(werf ci-env github --verbose --as-file)

      # This build put stages to "dev" registry.
      # If "dev" registry is empty, stages are copied from FE cache.
      REGISTRY_SUFFIX=$(echo ${WERF_ENV} | tr '[:upper:]' '[:lower:]') # CE/EE/FE -> ce/ee/fe
      werf build --secondary-repo ${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}

      # Publish images for Git branch.
      if [[ -n "${CI_COMMIT_BRANCH}" ]]; then
        # CI_COMMIT_REF_SLUG is a 'prNUM' for dev branches or 'main' for default branch.
        # Use it as image tag.
        IMAGE_TAG=${CI_COMMIT_REF_SLUG}

        echo "Publish images to dev-registry for branch ${CI_COMMIT_BRANCH} using tag ${IMAGE_TAG}"

        if [[ -n "${DEV_REGISTRY_PATH}" ]]; then
          DESTINATION_IMAGE=${DEV_REGISTRY_PATH}/dev:${IMAGE_TAG}
          DESTINATION_INSTALL_IMAGE=${DEV_REGISTRY_PATH}/dev/install:${IMAGE_TAG}
        else
          DESTINATION_IMAGE=${CI_REGISTRY_IMAGE}/dev:${IMAGE_TAG}
          DESTINATION_INSTALL_IMAGE=${CI_REGISTRY_IMAGE}/dev/install:${IMAGE_TAG}
        fi

        echo "Publish 'dev' image to dev-registry using tag ${IMAGE_TAG}".
        pull_push 'dev' $(werf stage image dev) ${DESTINATION_IMAGE}

        echo "Publish 'dev/install' image to dev-registry using tag ${IMAGE_TAG}".
        pull_push 'dev/install' $(werf stage image dev/install) ${DESTINATION_INSTALL_IMAGE}

        echo Remove local tags.
        docker image rmi ${DESTINATION_IMAGE} || true
        docker image rmi ${DESTINATION_INSTALL_IMAGE} || true
      fi

{!{ if eq $buildType "release" }!}
      # Publish images for Git tag.
      if [[ -n "${CI_COMMIT_TAG}" ]]; then
        if [[ -n "${DECKHOUSE_REGISTRY_HOST}" ]]; then
          # The Git tag may contain a '+' sign, so use slugify for this situation.
          # Slugify doesn't change a tag with safe-only characters.
          IMAGE_TAG=$(werf slugify --format docker-tag "${CI_COMMIT_TAG}")

          echo "Publish images for Git tag '${CI_COMMIT_TAG}' and registry suffix '${REGISTRY_SUFFIX}' using tag '${IMAGE_TAG}' ..."
          # Copy stages to deckhouse registry from dev registry.
          werf build --repo ${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX} --secondary-repo $WERF_REPO

          echo "Publish 'dev' image to deckhouse registry using tag ${IMAGE_TAG} ..."
          DECKHOUSE_DESTINATION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}:${IMAGE_TAG}
          pull_push 'dev' $(werf stage image dev) ${DECKHOUSE_DESTINATION_IMAGE}

          echo "Publish 'dev/install' image to deckhouse registry using tag ${IMAGE_TAG} ..."
          DECKHOUSE_DESTINATION_INSTALL_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/install:${IMAGE_TAG}
          pull_push 'dev/install' $(werf stage image dev/install) ${DECKHOUSE_DESTINATION_INSTALL_IMAGE}

          echo "Publish 'release-channel-version' image to deckhouse registry using tag ${IMAGE_TAG} ..."
          DESTINATION_RELEASE_CHANNEL_VERSION_IMAGE=${DECKHOUSE_REGISTRY_HOST}/deckhouse/${REGISTRY_SUFFIX}/release-channel:${IMAGE_TAG}
          pull_push 'release-channel-version' $(werf stage image release-channel-version) ${DESTINATION_RELEASE_CHANNEL_VERSION_IMAGE}

          echo Remove local tags.
          docker image rmi ${DECKHOUSE_DESTINATION_IMAGE} || true
          docker image rmi ${DECKHOUSE_DESTINATION_INSTALL_IMAGE} || true
          docker image rmi ${DESTINATION_RELEASE_CHANNEL_VERSION_IMAGE} || true
        else
          echo "DECKHOUSE_REGISTRY_HOST is empty. No publishing."
        fi
      fi
{!{- end }!}
# </template: build_template>
{!{ end }!}
