{!{/* Source: .gitlab/ci_templates/tests.yml */}!}

{!{ define "unit_run_args" }!}
args: 'go test -timeout=${{env.TEST_TIMEOUT}} -vet=off ./modules/... ./global-hooks/...'
docker_options: '-w /deckhouse'
{!{- end -}!}

{!{ define "matrix_run_args" }!}
args: 'ginkgo -timeout=${{env.TEST_TIMEOUT}} -vet=off --slowSpecThreshold=30 ./testing/matrix/'
docker_options: '-w /deckhouse'
{!{- end -}!}

{!{ define "dhctl_run_args" }!}
image: dhctl-tests
args: 'make ci'
docker_options: '-v ${{github.workspace}}:/deckhouse -w /deckhouse/dhctl'
{!{- end -}!}

{!{ define "golangci_lint_run_args" }!}
args: 'sh -c "go generate tools/register.go && golangci-lint run"'
docker_options: '-w /deckhouse -v ${{github.workspace}}:/deckhouse -e "TERM=xterm-256color"'
{!{- end -}!}

{!{ define "openapi_test_cases_run_args" }!}
args: 'ginkgo -vet=off ./testing/openapi_cases/'
docker_options: '-v ${{github.workspace}}:/deckhouse -w /deckhouse'
{!{- end -}!}

{!{ define "validators_run_args" }!}
args: 'go test -tags=validation -run Validation -timeout=${{env.TEST_TIMEOUT}} ./testing/...'
docker_options: '-w /deckhouse'
{!{- end -}!}

{!{ define "tests_template" }!}
  {!{- $args_name := . }!}
  {!{- $args_tmpl := printf "%s_run_args" $args_name }!}
  {!{- $default := dict "image" "tests" "args" "echo no args" "docker_options" "" }!}
  {!{- $ctx := coll.Merge (tmpl.Exec $args_tmpl | yaml) $default }!}
runs-on: self-hosted
steps:
  {!{ tmpl.Exec "checkout_full_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_dev_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "restore_images_tags_json_step" . | strings.Indent 2 }!}
  - name: Run tests
    uses: {!{ index (ds "actions") "werf/actions/run" }!}
    with:
      channel: ${{env.WERF_CHANNEL}}
      image: {!{ $ctx.image }!}
      args: {!{ $ctx.args | squote }!}
    env:
      WERF_SKIP_BUILD: "true"
      WERF_DOCKER_OPTIONS: {!{ $ctx.docker_options | squote }!}
      WERF_REPO: ${{ env.DEV_REGISTRY_PATH }}
      CI_COMMIT_TAG: ${{ needs.git_info.outputs.ci_commit_tag }}
      CI_COMMIT_REF_NAME: ${{ needs.git_info.outputs.ci_commit_ref_name }}
      CI_PIPELINE_CREATED_AT: ${{ needs.git_info.outputs.ci_pipeline_created_at }}
{!{- end -}!}

