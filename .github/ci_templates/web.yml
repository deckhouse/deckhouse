{!{- define "doc_web_build_template" -}!}
# <template: doc_web_build_template>
runs-on: [self-hosted, regular]
steps:
  {!{ tmpl.Exec "started_at_output"            . | strings.Indent 2 }!}
  {!{ tmpl.Exec "checkout_full_step"           . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_flant_registry_step"    . | strings.Indent 2 }!}

  - name: Run doc web build
    uses: {!{ index (ds "actions") "werf/actions/build" }!}
    with:
      channel: ${{env.WERF_CHANNEL}}
    env:
      WERF_DIR: "docs/documentation"
      WERF_LOG_VERBOSE: "on"
      WERF_REPO: ${{steps.check_flant_registry.outputs.web_registry_path}}
# </template: doc_web_build_template>
{!{- end -}!}

{!{- define "main_web_build_template" -}!}
# <template: main_web_build_template>
runs-on: [self-hosted, regular]
steps:
  {!{ tmpl.Exec "started_at_output"            . | strings.Indent 2 }!}
  {!{ tmpl.Exec "checkout_full_step"           . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_flant_registry_step"    . | strings.Indent 2 }!}

  - name: Run main web build
    uses: {!{ index (ds "actions") "werf/actions/build" }!}
    with:
      channel: ${{env.WERF_CHANNEL}}
    env:
      WERF_DIR: "docs/site"
      WERF_LOG_VERBOSE: "on"
      WERF_REPO: ${{steps.check_flant_registry.outputs.web_registry_path}}
# </template: main_web_build_template>
{!{- end -}!}

{!{- define "web_links_test_template" -}!}
# <template: web_links_test_template>
runs-on: [self-hosted, regular]
steps:
  {!{ tmpl.Exec "started_at_output"            . | strings.Indent 2 }!}
  {!{ tmpl.Exec "checkout_full_step"           . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_readonly_registry_step" . | strings.Indent 2 }!}
  {!{ tmpl.Exec "login_flant_registry_step"    . | strings.Indent 2 }!}
  {!{ tmpl.Exec "werf_install_step"            . | strings.Indent 2 }!}

  - name: Prepare site structure
    env:
      WEB_REGISTRY_PATH: ${{steps.check_flant_registry.outputs.web_registry_path}}
    run: |
      type werf
      werf version

      BASEDIR=$(pwd)/docs
      _TMPDIR=$(mktemp -d -t -p ${BASEDIR})
      # Save TMPDIR to clean it later.
      echo "_TMPDIR=$_TMPDIR" >> ${GITHUB_ENV}
      echo "_TMPDIR=$_TMPDIR"

      export WERF_REPO="${WEB_REGISTRY_PATH}"
      echo -n 'use werf_repo'
      echo $WERF_REPO | tr 'a-z' 'A-Z'

      # Extract web-backend content to the tmp directory.
      export WERF_DIR=$BASEDIR/site
      echo "Use werf_dir $WERF_DIR"
      type werf && source $(werf ci-env github --verbose --as-file)
      echo "werf stage image web-backend:"
      werf stage image web-backend | tr 'a-z' 'A-Z'
      echo "Run 'docker pull' from werf stage image web-backend"
      docker pull $(werf stage image web-backend) || true
      echo "Run 'docker cp' from werf stage image web-backend"
      docker cp $(docker create --rm $(werf stage image web-backend)):/app/root/ ${_TMPDIR}/site/

      # Extract web content to the tmp directory.
      export WERF_DIR=$BASEDIR/documentation
      type werf && source $(werf ci-env github --verbose --as-file)
      echo "werf stage image web:"
      werf stage image web | tr 'a-z' 'A-Z'
      echo "Run 'docker pull' from werf stage image web"
      docker pull $(werf stage image web)
      echo "Run 'docker cp' from werf stage image web-backend"
      docker cp $(docker create --rm $(werf stage image web)):/app/ ${_TMPDIR}/site/doc/

      # Create site structure.
      echo "Create site structure in '${_TMPDIR}/site'"
      touch ${_TMPDIR}/site/index.html
      rm -Rf ${_TMPDIR}/site/doc/compare/
      cp -Rf ${_TMPDIR}/site/doc/assets/ ${_TMPDIR}/site/doc/ru/
      cp -Rf ${_TMPDIR}/site/doc/assets/ ${_TMPDIR}/site/doc/en/
      cp -Rf ${_TMPDIR}/site/doc/css/ ${_TMPDIR}/site/doc/ru/
      cp -Rf ${_TMPDIR}/site/doc/css/ ${_TMPDIR}/site/doc/en/
      cp -Rf ${_TMPDIR}/site/doc/images/ ${_TMPDIR}/site/doc/ru/
      cp -Rf ${_TMPDIR}/site/doc/images/ ${_TMPDIR}/site/doc/en/
      cp -Rf ${_TMPDIR}/site/doc/js/ ${_TMPDIR}/site/doc/ru/
      cp -Rf ${_TMPDIR}/site/doc/js/ ${_TMPDIR}/site/doc/en/

  - name: Check links with html-proofer
    run: |
      # Do not exit on html-proofer error.
      set +e
      # TODO: Fix this
      docker run --rm -v "${_TMPDIR}/site:/src:ro" klakegg/html-proofer:3.19.1 \
        --allow-hash-href --check-html --empty-alt-ignore --external_only \
        --url-ignore "/localhost/,/https\:\/\/t.me/,/gitlab.com\/profile/,/dash.cloudflare.com\/profile/,/example.com/,/vmware.com/,/.slack.com/,/habr.com/,/flant.ru/,/bcrypt-generator.com/,/candi\/bashible\/bashbooster/,/..\/..\/compare\//,/compare\/ru\//,/compare\/en\//,/\.yml$/,/\.yaml$/,/\.tmpl$/,/\.tpl$/" \
        --url-swap "https\:\/\/deckhouse.io\/:/,https\:\/\/deckhouse.ru\/:/,\/documentation\/$:/doc/en/,\/documentation\/v1\/:/doc/en/,\/documentation\/latest\/:/doc/en/,\/en\/documentation\/$:/doc/en/,\/en\/documentation\/v1\/:/doc/en/,\/en\/documentation\/latest\/:/doc/en/,\/docs\/documentation\/images\/:/doc/images/" --http-status-ignore "0,429" ${1}
      # Emulate 'allow_failure: true' from Gitlab. Github has only two state: success and failure.
      exit 0

  - name: Clean TMPDIR
    if: always()
    run: |
      if [[ -n $_TMPDIR ]] ; then
        rm -rf $_TMPDIR
      fi
# </template: web_links_test_template>
{!{- end -}!}

{!{/* doc version is a tag name or 'latest' for main branch and pull requests */}!}
{!{/* ci_commit_ref_name is a tagname or branch name */}!}
{!{ define "doc_version_template" }!}
# <template: doc_version_template>
- name: Set documentation version
  env:
    CI_COMMIT_TAG: ${{needs.git_info.outputs.ci_commit_tag}}
  run: |
    echo "DOC_VERSION=${CI_COMMIT_TAG:-latest}" >> $GITHUB_ENV
# </template: doc_version_template>
{!{- end -}!}

{!{ define "doc_release_version_template" }!}
{!{/* ci_commit_ref_name is a tagname or branch name */}!}
# <template: doc_release_version_template>
- name: Set documentation version
  env:
    CI_COMMIT_REF_NAME: ${{needs.git_info.outputs.ci_commit_ref_name}}
  run: |
    echo "DOC_VERSION=${CI_COMMIT_REF_NAME/release-/v}" >> $GITHUB_ENV
# </template: doc_release_version_template>
{!{- end -}!}

{!{ define "deploy_doc_template" }!}
{!{- $env := . -}!}
{!{- $webEnv := printf "web-%s" $env -}!}
{!{- $ns := printf "deckhouse-web-%s" $env -}!}
{!{- $url := printf "deckhouse.%s.flant.com" $env -}!}
{!{- $urlRu := printf "deckhouse.ru.%s.flant.com" $env -}!}
{!{- $kubeConfig := "${{ secrets.KUBECONFIG_BASE64_DEV }}" -}!}
{!{- if eq $env "production" -}!}
  {!{- $url = "deckhouse.io" -}!}
  {!{- $urlRu = "deckhouse.ru" -}!}
  {!{- $kubeConfig = "${{ secrets.KUBECONFIG_BASE64_PROD }}" -}!}
{!{- end -}!}

# <template: deploy_doc_template>
- name: Deploy documentation to {!{ $env }!}
  uses: {!{ index (ds "actions") "werf/actions/converge" }!}
  with:
    channel: ${{env.WERF_CHANNEL}}
    kube-config-base64-data: "{!{ $kubeConfig }!}"
    env: {!{ $webEnv }!}
  env:
    WERF_REPO: ${{steps.check_flant_registry.outputs.web_registry_path}}
    WERF_DIR: "docs/documentation"
    WERF_RELEASE: "deckhouse-doc-${{ env.DOC_VERSION }}"
    WERF_NAMESPACE: {!{ $ns }!}
    WERF_SET_DOC_VERSION: "global.doc_version=${{ env.DOC_VERSION }}"
    WERF_SET_URL: "global.url={!{ $url }!}"
    WERF_SET_URL_RU: "global.url_ru={!{ $urlRu }!}"
    WERF_SET_WEB_ENV: "web.env={!{ $webEnv }!}"
# </template: deploy_doc_template>
{!{- end -}!}

{!{ define "deploy_site_template" }!}
{!{- $env := . -}!}
{!{- $webEnv := printf "web-%s" $env -}!}
{!{- $ns := printf "deckhouse-web-%s" $env -}!}
{!{- $url := printf "deckhouse.%s.flant.com" $env -}!}
{!{- $urlRu := printf "deckhouse.ru.%s.flant.com" $env -}!}
{!{- $kubeConfig := "${{ secrets.KUBECONFIG_BASE64_DEV }}" -}!}
{!{- if eq $env "production" -}!}
  {!{- $url = "deckhouse.io" -}!}
  {!{- $urlRu = "deckhouse.ru" -}!}
  {!{- $kubeConfig = "${{ secrets.KUBECONFIG_BASE64_PROD }}" -}!}
{!{- end -}!}
{!{- $siteDomainMap := printf "{\"en\" : \"%s\", \"ru\" : \"%s\"}" $url $urlRu -}!}

# <template: deploy_site_template>
- name: Deploy site to {!{ $env }!}
  uses: {!{ index (ds "actions") "werf/actions/converge" }!}
  with:
    channel: ${{env.WERF_CHANNEL}}
    kube-config-base64-data: "{!{ $kubeConfig }!}"
    env: {!{ $webEnv }!}
  env:
    WERF_REPO: ${{steps.check_flant_registry.outputs.web_registry_path}}
    WERF_DIR: "docs/site"
    WERF_RELEASE: "deckhouse-site"
    WERF_NAMESPACE: {!{ $ns }!}
    WERF_SET_DOC_VERSION: "global.doc_version=${{ env.DOC_VERSION }}"
    WERF_SET_ACTIVE_RELEASE: "global.active_release=v1"
    WERF_SET_URL: "global.url={!{ $url }!}"
    WERF_SET_URL_RU: "global.url_ru={!{ $urlRu }!}"
    WERF_SET_WEB_ENV: "web.env={!{ $webEnv }!}"
    WERF_SET_DOMAIN_MAP: "global.domain_map={!{ base64.Encode $siteDomainMap }!}"
# </template: deploy_site_template>
{!{- end -}!}
