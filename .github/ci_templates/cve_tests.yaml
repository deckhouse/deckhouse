{!{ define "set_security_scan_requirement_status" }!}

# <template: set_security_scan_requirement_status>
set_security_scan_requirement_status: 
  name: Set commit status after security scan run
  runs-on: ubuntu-latest
  needs: test_cve_report_main
  if: ${{ always() && github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
  steps:
{!{ tmpl.Exec "checkout_step" . | strings.Indent 4 }!}
    - name: Install GitHub CLI
      run: sudo apt-get install gh -y
    - name: Auth with GitHub CLI
      run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    - name: Set PR Label
      env:
        PR_NUMBER: ${{ inputs.issue_number }}
      run: |
        echo "PR Number: $PR_NUMBER"
        if [ "${{ needs.test_cve_report_main.result }}" == "success" ]; then
          gh pr edit "$PR_NUMBER" --add-label "security/cve/success"
        else
          gh pr edit "$PR_NUMBER" --add-label "security/cve/failed"
        fi
# </template: set_security_scan_requirement_status>
{!{- end -}!}

{!{ define "remove_labels_job" }!}
{!{- $ctx := . -}!}
# <template: remove_labels_job>
remove_labels:
  name: Remove labels
  runs-on: ubuntu-latest
  if: ${{ always() && github.event_name == 'workflow_dispatch' && !!github.event.inputs.issue_number }}
  steps:
{!{ tmpl.Exec "checkout_step" . | strings.Indent 4 }!}
    - name: Remove labels
      id: remove
      uses: {!{ index (ds "actions") "actions/github-script" }!}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const label = "security/cve";
          const ci = require('./.github/scripts/js/ci');
          const issue_number = context.payload.inputs.issue_number;
          console.log("Issue number is", issue_number);
          return await ci.removeLabel({github, context, core, issue_number, label});
# </template: remove_labels_job>
{!{- end -}!}

{!{ define "exctract_pr_number" }!}
# <template: exctract_pr_number>
- name: Extract PR number from ref
  id: extract_pr
  run: |
    echo "REF=${{ github.event.inputs.pull_request_ref }}"
    PR_NUMBER=$(echo "${{ github.event.inputs.pull_request_ref }}" | sed -E 's#refs/pull/([0-9]+)/head#\1#')
    echo "PR_NUMBER=$PR_NUMBER"
    echo "TAG=pr$PR_NUMBER" >> $GITHUB_ENV
# </template: exctract_pr_number>
{!{- end -}!}
{!{ define "cve_scan_deckhouse_images" }!}
# <template: cve_scan_deckhouse_images>
- name: Set scan target type
  run: |
    if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_name }}" == "main" ]; then
      echo "SCAN_TARGET=only_main" >> $GITHUB_ENV
    elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.pull_request_ref }}" ]; then
      echo "SCAN_TARGET=pr" >> $GITHUB_ENV
    elif [ "${{ github.event_name }}" != "schedule" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
      echo "SCAN_TARGET=regular" >> $GITHUB_ENV
    fi

- name: Download CVE scan script from private GitLab
  env:
    DECKHOUSE_PRIVATE_REPO: ${{ secrets.DECKHOUSE_PRIVATE_REPO }}
    CVE_SCRIPT_PROJECT_ID: ${{ inputs.project_id }}
    CVE_SCRIPT_PATH: "cve_scan.sh"
    CVE_SCRIPT_REF: "main"
  run: |
    echo "Downloading CVE scan script from ${DECKHOUSE_PRIVATE_REPO}..."
    mkdir -p ${{ env.WORKDIR }}/scripts
    encoded_path=$(echo "${CVE_SCRIPT_PATH}" | sed 's/\//%2F/g' | sed 's/\./%2E/g')
    script_url="https://${DECKHOUSE_PRIVATE_REPO}/api/v4/projects/${CVE_SCRIPT_PROJECT_ID}/repository/files/${encoded_path}?ref=${CVE_SCRIPT_REF}"
    
    echo "Downloading from: ${script_url}"
    curl -L --fail-with-body \
         "${script_url}" | jq -r '.content' \
         | base64 -d > "${{ env.WORKDIR }}/scripts/cve_scan.sh"
    chmod +x "${{ env.WORKDIR }}/scripts/cve_scan.sh"
    
    echo "CVE scan script downloaded successfully"

- name: Run Deckhouse images CVE tests on ${{env.TAG}}
  env:
    TAG: ${{env.TAG}}
    CASE: "deckhouse"
    DD_URL: ${{secrets.DEFECTDOJO_HOST}}
    DD_TOKEN: ${{secrets.DEFECTDOJO_API_TOKEN}}
    DEFAULT_BRANCH: ${{github.default_branch}}
    COMMIT_TAG: ${{github.ref_name}}
    COMMIT_SHA: ${{github.sha}}
    EVENT_NAME: ${{github.event_name}}
    TAG_TYPE: "release"
    SCAN_SEVERAL_LATEST_RELEASES: "false"
    MODULE_NAME: "Deckhouse"
    DECKHOUSE_PRIVATE_REPO: ${{secrets.DECKHOUSE_PRIVATE_REPO}}
    DEV_REGISTRY: ${{ secrets.DECKHOUSE_DEV_REGISTRY_HOST }}
    DEV_REGISTRY_USER: ${{ secrets.DECKHOUSE_DEV_REGISTRY_USER }}
    DEV_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_DEV_REGISTRY_PASSWORD }}
    PROD_REGISTRY: ${{ secrets.DECKHOUSE_REGISTRY_READ_HOST }}
    PROD_REGISTRY_USER: ${{ secrets.DECKHOUSE_REGISTRY_READ_USER }}
    PROD_REGISTRY_PASSWORD: ${{ secrets.DECKHOUSE_REGISTRY_READ_PASSWORD }}
    TRIVY_BIN_VERSION: "v0.63.0"
    TRIVY_PROJECT_ID: "2181"
    TRIVY_DB_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-db:2
    TRIVY_JAVA_DB_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-java-db:1
    TRIVY_POLICY_URL: ${{secrets.DECKHOUSE_DEV_REGISTRY_HOST}}/sys/deckhouse-oss/security/trivy-bdu:1
    SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
  run: |
    echo "‚öìÔ∏è üèé Running Deckhouse images CVE tests on ${TAG}..."
    ${{ env.WORKDIR }}/scripts/cve_scan.sh
# </template: cve_scan_deckhouse_images>
{!{- end -}!}

{!{ define "cve_tests_upload_reports_artifacts" }!}
# <template: cve_tests_upload_reports_artifacts>
- name: Archive report artifacts
  if: success()
  run: |
    tar -zcvf ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz ${{ env.WORKDIR }}/deckhouse
- name: Create fail artifact
  if: failure()
  run: |
    echo "Trivy tests for ${TAG} have failed." > "${{ env.WORKDIR }}/artifacts/${TAG}_test-failed.txt"
    tar -zcvf ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz ${{ env.WORKDIR }}/deckhouse
- name: Upload report artifacts
  if: success()
  uses: {!{ index (ds "actions") "actions/upload-artifact" }!}
  with:
    name: cve-reports
    path: |
      ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz
- name: Upload fail artifact
  if: failure()
  uses: {!{ index (ds "actions") "actions/upload-artifact" }!}
  with:
    name: cve-reports
    path: |
      ${{ env.WORKDIR }}/artifacts/${{ env.TAG }}_test-failed.txt
      ${{ env.WORKDIR }}/artifacts/trivy_json_reports.tar.gz
- name: Remove workdir
  run: |
    rm -r ${{ env.WORKDIR }}
# </template: cve_tests_upload_reports_artifacts>
{!{- end -}!}
