---
image: dev-prebuild
fromImage: common-base
git:
- add: /
  to: /deckhouse
  stageDependencies:
    setup:
    - '**/*'
  includePaths:
  - candi
  - modules
  - global-hooks
  - shell_lib.sh
  - shell_lib
  - deckhouse-controller/entrypoint.sh
  - deckhouse-controller/crds/*.yaml
  - jq_lib
  - helm_lib
  - python_lib
  excludePaths:
  {{- include "exclude_modules_dir_from_images" .  | nindent 2}}
  {{ .Files.Get (printf "tools/build_includes/modules-excluded-%s.yaml" .Env) | nindent 2}}
- url: {{ .SOURCE_REPO }}/flant/shell-operator
  tag: v1.4.10
  add: /frameworks/shell
  to: /deckhouse/shell-operator/frameworks/shell
  {{ .Files.Get (printf "tools/build_includes/modules-with-exclude-%s.yaml" .Env) }}
  {{ .Files.Get (printf "tools/build_includes/candi-%s.yaml" .Env) }}
import:
- artifact: deckhouse-controller
  add: /out/deckhouse-controller
  to: /usr/bin/deckhouse-controller
  after: setup
- artifact: jq
  add: /usr/bin/jq
  to: /usr/bin/jq
  after: setup
- artifact: version-map-artifact
  add: /version_map_{{ $.Env }}.yml
  to: /deckhouse/candi/version_map.yml
  after: setup
mount:
- fromPath: ~/go-pkg-cache
  to: /go/pkg
ansible:
  setup:
  {{- range $key := list "default" "managed" "minimal" }}
- name: "Add bundle {{ $key }}"
  copy:
    content: |
    {{- range $_, $edition := $.Editions }}
    {{- $.Files.Get (printf "%s/values-%s.yaml" $edition.modulesDir $key ) | nindent 8 }}
    {{- if eq $.Env $edition.name }}
    {{- break -}}
    {{- end }}
    {{- end }}
    dest: /deckhouse/modules/values-{{ $key }}.yaml
  {{- end }}

- name: "Add version info"
  copy:
    content: |
      {{- env "CI_COMMIT_TAG" | default "dev" | nindent 8 }}
    dest: /deckhouse/version

- name: "Add edition info"
  copy:
    content: |
      {{- .Env | default "unknown" | nindent 8 }}
    dest: /deckhouse/edition

- name: "Override deckhouse entrypoint to use tini as supervisor"
  shell: |
    echo -e "#!/bin/bash\nexec tini -- /deckhouse/deckhouse-controller/entrypoint.sh" > /deckhouse/deckhouse
    chmod +x /deckhouse/deckhouse

- name: "Create symlink to grant entrypoint.sh write permission"
  shell: |
    ln -fs /tmp/values.yaml /deckhouse/modules/values.yaml

- name: "Create deckhouse group"
  group:
    name: deckhouse
    gid: 64535

- name: "Create deckhouse user"
  user:
    name: deckhouse
    password: "!"
    uid: 64535
    group: deckhouse
    comment: deckhouse
    home: /
    shell: /sbin/nologin

- name: "Run deckhouse from dedicated user"
  file:
    path: /deckhouse/
    state: directory
    recurse: yes
    owner: 64535
    group: 64535

- name: "Create symlink to vim-console"
  shell: |
    ln -fs /usr/bin/vim-console /usr/bin/vim
    ln -fs /usr/bin/vim-console /usr/bin/vi

docker:
  ENV:
    MODULES_DIR: /deckhouse/modules
    GLOBAL_HOOKS_DIR: /deckhouse/global-hooks
    PYTHONPATH: /deckhouse/python_lib
    LC_ALL: C
---
image: dev
fromImage: dev-prebuild
import:
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/modules/images_digests.json
  after: setup
- image: images-digests
  add: /images_digests.json
  to: /deckhouse/modules/040-node-manager/images_digests.json
  after: setup
---
